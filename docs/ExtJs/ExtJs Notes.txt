        // Datos en el Store this.store.getAt(index)
        // var data = grid.getSelectionModel().selected.items[0].data;


/**
 *      this.activeRecord  es la copia de mi registro, 
 *      this.getForm().getValues()  Obtiene una copia de los campos presentes en la forma, para actualizarlos en el registro se deben recorrer uno a uno, es una coleccion estandar
 *      this.getForm().setValues()  permite mostrar valores sobre los campos presentes,  si el campo no existe, no hace nada 
 *   
 *      La actualizacion de campos debe hacerse sobre el activeRecord y con setValues, 
 *      de esta forma no hay necesidad de incluir campos ocultos, al momento de guardar la forma 
 *      se traeran los campos visibles  (  getValues  ) y se actualizan uno a uno, sobre activeRecord  
 *      se guarda siempre el activeRecord 
 * 
 *      La actualizacion BackEnd se puede hacer con  submit ( action.submit )
 *      o trabajando directamente con el modelo mediante  updateRecord 
 */



Scroll Html 
-----------------------------------
http://www.sencha.com/forum/showthread.php?56199-Scrollbar-to-the-ExtJS-panel

var myExtJSPanel_1 = new Ext.Panel({
    title:'Title of the panel',
    id:'myExtJSPanel_2',
    width:400,
    height:400,
    listeners: {
        render: function(c){
            CSBfleXcroll.defer(1, window, [c.body.dom]);
        }
    },
    renderTo:'myExtJSPanel_1',
    html:'...'  
});

-----------------------------------



http://dev.sencha.com/deploy/ext-4.0.0/examples/grid/array-grid.html
-----------------------------------------------------------------------

Guarda el estado ( reload  )  
tiene iconos en cada linea, dependientes de algun valor 
Formate los valores 
usa el hoover al pasar sobre cada linea 


http://dev.sencha.com/deploy/ext-4.0.0/examples/grid/paging.html
-----------------------------------------------------------------------

Maneja botones en la barra inferior, 
Maneja linea de descripcion adicional   
Maneja links en los campos 

        bbar: Ext.create('Ext.PagingToolbar', {
            store: store,
            displayInfo: true,
            displayMsg: 'Displaying topics {0} - {1} of {2}',
            emptyMsg: "No topics to display",
            items:[
                '-', {
                text: 'Show Preview',
                pressed: pluginExpanded,
                enableToggle: true,
                toggleHandler: function(btn, pressed) {
                    var preview = Ext.getCmp('gv').getPlugin('preview');
                    preview.toggleExpanded(pressed);
                }
            }]
        }),
  

http://dev.sencha.com/deploy/ext-4.0.0/examples/grid/groupgrid.html
-----------------------------------------------------------------------

Manejo de grupos segun (un solo campo)  *** 

    var Restaurants = Ext.create('Ext.data.Store', {
        model: 'Restaurant',
        sorters: ['cuisine','name'],
        groupField: 'cuisine',
        ... 

    var groupingFeature = Ext.create('Ext.grid.feature.Grouping',{
        groupHeaderTpl: 'Cuisine: {name} ({rows.length} Item{[values.rows.length > 1 ? "s" : ""]})'
    });


    var grid = Ext.create('Ext.grid.Panel', {
        ... 
        features: [groupingFeature],
        columns: [{
            ...
        }],
        fbar  : ['->', {
            text:'Clear Grouping',
            iconCls: 'icon-clear-group',
            handler : function(){
                groupingFeature.disable();
            }
        }]
    });


http://dev.sencha.com/deploy/ext-4.0.0/examples/grid/grid-plugins.html
-----------------------------------------------------------------------

Linea adicional
------------------


		columns: [.. ], 
        plugins: [{
            ptype: 'rowexpander',
            rowBodyTpl : [
                '<p><b>Company:</b> {company}</p><br>',
                '<p><b>Summary:</b> {desc}</p>'
            ]

Check Bo xpara el manejo de acciones         
----------------
        
	var sm = Ext.create('Ext.selection.CheckboxModel', {
        listeners: {
            selectionchange: function(sm, selections) {
                grid4.down('#removeButton').setDisabled(selections.length == 0);
            }
        }
    });


Varios toolbars docked
---------------------------------

    var grid2 = Ext.create('Ext.grid.Panel', {
        selModel: sm,
		... 

        // inline buttons
        dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                pack: 'center'
            },
            items: [{
                minWidth: 80,
                text: 'Save'
            },{
                minWidth: 80,
                text: 'Cancel'
            }]
        }, {
            xtype: 'toolbar',
            items: [{
                text:'Add Something',
                tooltip:'Add a new row',
                iconCls:'add'
            }, '-', {
                text:'Options',
                tooltip:'Set options',
                iconCls:'option'
            },'-',{
                itemId: 'removeButton',
                text:'Remove Something',
                tooltip:'Remove the selected item',
                iconCls:'remove',
                disabled: true
            }]
        }],        


http://dev.sencha.com/deploy/ext-4.0.0/examples/grid-filtering/grid-filter-local.html
-----------------------------------------------------------------------

** Agrega botones en el botton
** Reconfigura las columnas  

   var grid = Ext.create('Ext.grid.Panel', {
        border: false,
        store: store,
        columns: createHeaders(4),    // ***********
        loadMask: true,
        features: [filters],
        bbar: Ext.create('Ext.toolbar.Paging', {
            store: store
        })
    });

    // add some buttons to bottom toolbar just for demonstration purposes
    grid.child('[dock=bottom]').add([
        '->',
        {
            text: 'Encode: ' + (encode ? 'On' : 'Off'),
            tooltip: 'Toggle Filter encoding on/off',
            enableToggle: true,
            handler: function (button, state) {
                var encode = (grid.filters.encode !== true);
                var text = 'Encode: ' + (encode ? 'On' : 'Off'); 
                grid.filters.encode = encode;
                grid.filters.reload();
                button.setText(text);
            } 
        },{
            text: 'Add Columns',									// ***********************
            handler: function () {
                if (grid.headerCt.items.length < 6) {
                    grid.headerCt.add(createHeaders(6, 4));
                    grid.view.refresh();
                    this.disable();
                }
            }
        }    
    ]);

    // use a factory method to reduce code while demonstrating
    // that the GridFilter plugin may be configured with or without
    // the filter types (the filters may be specified on the column model
    var createHeaders = function (finish, start) {

        var columns = [{
            dataIndex: 'id',
			...
            }
        }];

        return columns;
    };



http://dev.sencha.com/deploy/ext-4.0.0/examples/grid/binding.html
-----------------------------------------------------------------------

Bindigs, Templates 

    // define a template to use for the detail view
    var bookTplMarkup = [
        'Title: <a href="{DetailPageURL}" target="_blank">{Title}</a><br/>',
        'Author: {Author}<br/>',
        'Manufacturer: {Manufacturer}<br/>',
        'Product Group: {ProductGroup}<br/>'
    ];
    var bookTpl = Ext.create('Ext.Template', bookTplMarkup);

... Panel
        items: [
            grid, 
        {
            id: 'detailPanel',
            region: 'center',
            bodyPadding: 7,
            bodyStyle: "background: #ffffff;",
            html: 'Please select a book to see additional details.'
        }]


    // update panel body on selection change
    grid.getSelectionModel().on('selectionchange', function(sm, selectedRecord) {
        if (selectedRecord.length) {
            var detailPanel = Ext.getCmp('detailPanel');
            bookTpl.overwrite(detailPanel.body, selectedRecord[0].data);
        }
    });






================================================================


fbar : Object/Object[]
Convenience config used for adding items to the bottom of the panel. Short for Footer Bar.

fbar: [
  { type: 'button', text: 'Button 1' }
]
is equivalent to

dockedItems: [{
    xtype: 'toolbar',
    dock: 'bottom',
    ui: 'footer',
    defaults: {minWidth: minButtonWidth},
    items: [
        { xtype: 'component', flex: 1 },
        { xtype: 'button', text: 'Button 1' }
    ]
}]

-----------------------

bbar: [
  { xtype: 'button', text: 'Button 1' }
]

is equivalent to

dockedItems: [{
    xtype: 'toolbar',
    dock: 'bottom',
    items: [
        { xtype: 'button', text: 'Button 1' }
    ]
}]