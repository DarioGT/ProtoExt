


CREATE TABLE [dbo].[SystemUserExtensionBase](
	[SystemUserId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_SystemUserExtensionBase] PRIMARY KEY CLUSTERED 
(
	[SystemUserId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_GetPrimaryKeyAttributes]    Script Date: 04/11/2008 06:35:16 ******/




create procedure [dbo].[p_GetPrimaryKeyAttributes](@keyid uniqueidentifier) as  
set nocount on  

select a.*,
	'character-count' = case 
		when cast(at.Description as nvarchar) in ('nvarchar', 'nchar') then cast(a.Length / 2 as nvarchar) 
		when cast(at.Description as nvarchar) in ('varchar', 'char') then cast(a.Length as nvarchar) 
		else '' 
		end,
    'type' = at.Description,
    'isquoted' = at.Quoted
from KeyAttributes k join AttributeView a on (k.AttributeId = a.AttributeId)
                     join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)
where k.KeyId = @keyid  
order by ColumnNumber

/****** Object:  Table [dbo].[EntityIds]    Script Date: 04/11/2008 06:41:25 ******/




CREATE TABLE [dbo].[EntityIds](
	[EntityId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [XPKEntityIds] PRIMARY KEY CLUSTERED 
(
	[EntityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  StoredProcedure [dbo].[p_DetectArbitraryLoop]    Script Date: 04/11/2008 06:35:04 ******/




create procedure [dbo].[p_DetectArbitraryLoop](@parentid uniqueidentifier, @childid uniqueidentifier, @basetablename nvarchar(64), @pkattributename nvarchar(50), @fkattributename nvarchar(50)) as

set nocount on

declare @sql varchar(8000)

set @sql = 
'set nocount on' + char(10) +
char(10) +
'declare @currentparentid uniqueidentifier' + char(10) +
char(10) + 
'declare @visited table (' + char(10) +
'    visited uniqueidentifier primary key' + char(10) +
')' + char(10) +
char(10) +
-- make sure that the @ParentId is a valid id.
'if not exists (select ' + @pkattributename + ' from ' + @basetablename + ' where ' + @pkattributename + ' = ''' + cast(@parentid as nvarchar(40)) + ''') ' + char(10) + 
'begin ' + char(10) + 
'   select ErrorCode = 4 ' + char(10) + 
'   return ' + char(10) + 
'end ' + char(10) + 
char(10) + 
-- make sure that the @ChildId is a valid id.
'if not exists (select ' + @pkattributename + ' from ' + @basetablename + ' where ' + @pkattributename + ' = ''' + cast(@childid as nvarchar(40)) + ''') ' + char(10) + 
'begin ' + char(10) + 
'   select ErrorCode = 3 ' + char(10) + 
'   return ' + char(10) + 
'end ' + char(10) +
char(10) +
'select @currentparentid = ''' + cast(@parentid as nvarchar(40)) + '''' + char(10) + 
'while (1 = 1) ' + char(10) + 
'begin ' + char(10) + 
'   if @currentparentid = ''' + cast(@childid as nvarchar(40)) + '''' + char(10) + 
'   begin ' + char(10) + 
       -- while chasing the parent of the parent (of the parent...) you bumped into the child.  this would create a loop
'      select ErrorCode = 2 ' + char(10) + 
'      break ' + char(10) + 
'   end ' + char(10) + 
char(10) +
'   select @currentparentid = ' + @fkattributename + ' from ' + @basetablename + ' where ' + @pkattributename + ' = @currentparentid ' + char(10) + 
char(10) +
'   if @currentparentid is null ' + char(10) + 
'   begin ' + char(10) + 
       -- This implies that there is a dead end to the parent->grand parent-> chain and hence no fear of looping.
'      select ErrorCode = 0 ' + char(10) + 
'      break ' + char(10) + 
'   end ' + char(10) + 
'   else ' + char(10) + 
'      begin ' + char(10) + 
'         if exists (select * from @visited where @currentparentid = visited) ' + char(10) + 
'         begin ' + char(10) + 
             -- This should never happen.  if it does, that means some one has been mucking with the DB from the backend.
'            select ErrorCode = 1 ' + char(10) + 
'            break ' + char(10) + 
'         end ' + char(10) + 
'         else ' + char(10) + 
'         begin ' + char(10) + 
'            insert into @visited (visited) values (@currentparentid) ' + char(10) + 
'            continue ' + char(10) + 
'         end ' + char(10) + 
'      end ' + char(10) + 
'   break ' + char(10) + 
'end'

exec (@sql)

/****** Object:  Table [dbo].[PluginTypeBaseIds]    Script Date: 04/11/2008 06:47:12 ******/




CREATE TABLE [dbo].[PluginTypeBaseIds](
	[PluginTypeId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_PluginTypeBaseIds] PRIMARY KEY CLUSTERED 
(
	[PluginTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[Notification]    Script Date: 04/11/2008 06:45:15 ******/




CREATE TABLE [dbo].[Notification](
	[NotificationNumber] [int] IDENTITY(1,1) NOT NULL,
	[EventData] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[EventId] [int] NOT NULL,
	[NotificationId] [uniqueidentifier] NOT NULL,
	[CreatedOnString] [nvarchar](40) NOT NULL,
	[OrganizationId] [uniqueidentifier] NULL,
 CONSTRAINT [ndx_PrimaryKey_Notification] PRIMARY KEY NONCLUSTERED 
(
	[NotificationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SdkMessageResponseBaseIds]    Script Date: 04/11/2008 06:52:01 ******/




CREATE TABLE [dbo].[SdkMessageResponseBaseIds](
	[SdkMessageResponseId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_SdkMessageResponseBaseIds] PRIMARY KEY CLUSTERED 
(
	[SdkMessageResponseId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ReportLinkBase]    Script Date: 04/11/2008 06:49:23 ******/




CREATE TABLE [dbo].[ReportLinkBase](
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ReportLinkId] [uniqueidentifier] NOT NULL,
	[LinkTypeCode] [int] NOT NULL CONSTRAINT [DF_ReportLinkBase_LinkTypeCode]  DEFAULT ((3)),
	[LinkedReportName] [nvarchar](255) NOT NULL,
	[ImportSequenceNumber] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[ReportId] [uniqueidentifier] NOT NULL,
	[LinkedReportId] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_ReportLink] PRIMARY KEY CLUSTERED 
(
	[ReportLinkId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_GetAllChildBusinessIds]    Script Date: 04/11/2008 06:35:09 ******/




/*
	This proc is to be used to get all child business ids for the given BusinessId.
*/
CREATE procedure [dbo].[p_GetAllChildBusinessIds](
 @BusinessId uniqueidentifier) 
as
begin
set nocount on

create table #ChildBizIds (BusinessUnitId uniqueidentifier, nLevel int)

Declare @nLevel int
select @nLevel = 1
insert into #ChildBizIds 
select BusinessUnitId, @nLevel from BusinessUnitBase where ParentBusinessUnitId = @BusinessId

while (@@ROWCOUNT > 0) 
begin
	select @nLevel = @nLevel + 1

	insert into #ChildBizIds (BusinessUnitId, nLevel)
	select biz.BusinessUnitId, @nLevel 
	from BusinessUnitBase biz
		join #ChildBizIds res on biz.ParentBusinessUnitId = res.BusinessUnitId
	where res.nLevel = @nLevel - 1
end

select distinct BusinessUnitId as 'businessunitid' from #ChildBizIds
end

/****** Object:  Table [dbo].[SdkMessageRequestBaseIds]    Script Date: 04/11/2008 06:51:45 ******/




CREATE TABLE [dbo].[SdkMessageRequestBaseIds](
	[SdkMessageRequestId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_SdkMessageRequestBaseIds] PRIMARY KEY CLUSTERED 
(
	[SdkMessageRequestId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[UnresolvedAddressBase]    Script Date: 04/11/2008 06:54:10 ******/




CREATE TABLE [dbo].[UnresolvedAddressBase](
	[UnresolvedAddressId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DeletionStateCode] [int] NULL,
	[FullName] [nvarchar](160) NULL,
	[Telephone] [nvarchar](50) NULL,
	[EMailAddress] [nvarchar](100) NULL,
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_UnresolvedAddress] PRIMARY KEY CLUSTERED 
(
	[UnresolvedAddressId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[AttributeIds]    Script Date: 04/11/2008 06:36:48 ******/




CREATE TABLE [dbo].[AttributeIds](
	[AttributeId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [XPKAttributeIds] PRIMARY KEY CLUSTERED 
(
	[AttributeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ResourceGroupExpansionBase]    Script Date: 04/11/2008 06:49:35 ******/




CREATE TABLE [dbo].[ResourceGroupExpansionBase](
	[ObjectId] [uniqueidentifier] NOT NULL,
	[ResourceGroupExpansionId] [uniqueidentifier] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ItemId] [uniqueidentifier] NOT NULL,
	[MethodCode] [int] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_ResourceGroupExpansion] PRIMARY KEY CLUSTERED 
(
	[ResourceGroupExpansionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[BuildVersion]    Script Date: 04/11/2008 06:36:57 ******/




CREATE TABLE [dbo].[BuildVersion](
	[BuildDate] [datetime] NOT NULL,
	[TimeStamp] [timestamp] NULL,
	[BuildNumber] [int] NULL,
	[BuildQFE] [int] NULL CONSTRAINT [Set_To_Zero100]  DEFAULT ((0)),
	[MajorVersion] [int] NULL,
	[MinorVersion] [int] NULL,
	[Revision] [int] NULL,
	[LastDatabaseQfe] [nvarchar](100) NULL,
	[MinSupportedClient] [nvarchar](20) NULL,
	[MaxSupportedClient] [nvarchar](20) NULL,
	[MinSupportedRouter] [nvarchar](20) NULL,
	[MaxSupportedRouter] [nvarchar](20) NULL,
 CONSTRAINT [PK_BuildVersion] PRIMARY KEY CLUSTERED 
(
	[BuildDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[AppointmentExtensionBase]    Script Date: 04/11/2008 06:36:35 ******/




CREATE TABLE [dbo].[AppointmentExtensionBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_AppointmentExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ServiceAppointmentExtensionBase]    Script Date: 04/11/2008 06:52:11 ******/




CREATE TABLE [dbo].[ServiceAppointmentExtensionBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ServiceAppointmentExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_KeyLeftAttributes]    Script Date: 04/11/2008 06:35:21 ******/




create procedure [dbo].[p_KeyLeftAttributes](@keyid uniqueidentifier) as
set nocount on

select a.*,
	'character-count' = case 
		when cast(at.Description as nvarchar) in ('nvarchar', 'nchar') then cast(a.Length / 2 as nvarchar) 
		when cast(at.Description as nvarchar) in ('varchar', 'char') then cast(a.Length as nvarchar) 
		else '' 
		end,
    'type' = at.Description,
    'isquoted' = at.Quoted
from KeyAttributes ka join AttributeView a on (ka.AttributeId = a.AttributeId)
                      join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)
where ka.KeyId = @keyid
order by ka.AttributeId

/****** Object:  Table [MetadataSchema].[AttributeTypes]    Script Date: 04/11/2008 06:56:22 ******/




CREATE TABLE [MetadataSchema].[AttributeTypes](
	[AttributeTypeId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Description] [nvarchar](255) NULL,
	[SQLServerType] [int] NULL,
	[Quoted] [bit] NOT NULL,
	[XmlType] [nvarchar](255) NULL,
 CONSTRAINT [XPKAttributeTypes] PRIMARY KEY CLUSTERED 
(
	[AttributeTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  StoredProcedure [dbo].[p_KeyRightAttributes]    Script Date: 04/11/2008 06:35:22 ******/




create procedure [dbo].[p_KeyRightAttributes](@keyid uniqueidentifier) as
set nocount on

select a.*,
	'character-count' = case 
		when cast(at.Description as nvarchar) in ('nvarchar', 'nchar') then cast(a.Length / 2 as nvarchar) 
		when cast(at.Description as nvarchar) in ('varchar', 'char') then cast(a.Length as nvarchar) 
		else '' 
		end,
    'type' = at.Description,
    'isquoted' = at.Quoted
from KeyAttributes ka join AttributeView a on (ka.ReferencedAttribute  = a.AttributeId)
                      join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)
where ka.KeyId = @keyid
order by ka.AttributeId

/****** Object:  Table [MetadataSchema].[Entity]    Script Date: 04/11/2008 06:56:41 ******/




CREATE TABLE [MetadataSchema].[Entity](
	[EntityId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Name] [nvarchar](64) NULL,
	[ObjectTypeCode] [int] NULL CONSTRAINT [Set_To_Zero7]  DEFAULT ((0)),
	[PhysicalName] [nvarchar](64) NULL,
	[LogicalName] [nvarchar](64) NULL,
	[CollectionName] [nvarchar](64) NULL,
	[BaseTableName] [nvarchar](64) NULL,
	[LogicalCollectionName] [nvarchar](64) NULL,
	[IsIntersect] [bit] NOT NULL,
	[IsSecurityIntersect] [bit] NOT NULL,
	[WorkflowEventMask] [int] NOT NULL,
	[IsLookupTable] [bit] NOT NULL,
	[EventMask] [int] NOT NULL,
	[IsLogicalEntity] [bit] NULL CONSTRAINT [Set_To_Zero8]  DEFAULT ((0)),
	[IsCustomizable] [bit] NULL CONSTRAINT [Set_To_Zero9]  DEFAULT ((0)),
	[IsCollaboration] [bit] NULL CONSTRAINT [Set_To_Zero10]  DEFAULT ((0)),
	[IsActivity] [bit] NULL CONSTRAINT [Set_To_Zero11]  DEFAULT ((0)),
	[AddressTableName] [nvarchar](64) NULL,
	[IsMappable] [bit] NULL CONSTRAINT [Set_To_Zero12]  DEFAULT ((0)),
	[OwnershipTypeMask] [int] NOT NULL CONSTRAINT [Set_To_Zero13]  DEFAULT ((0)),
	[IsAudited] [bit] NOT NULL CONSTRAINT [Set_To_Zero14]  DEFAULT ((0)),
	[UsesFullnameConventionRules] [bit] NOT NULL CONSTRAINT [Set_To_Zero15]  DEFAULT ((0)),
	[IsParented] [bit] NOT NULL CONSTRAINT [Set_To_Zero16]  DEFAULT ((0)),
	[EntityMask] [int] NULL CONSTRAINT [Set_To_Zero17]  DEFAULT ((0)),
	[IsReplicated] [bit] NOT NULL CONSTRAINT [Set_To_Zero_2B_Repl_0]  DEFAULT ((0)),
	[IsReplicationUserFiltered] [bit] NOT NULL CONSTRAINT [Set_To_Zero_2B_Repl_2]  DEFAULT ((0)),
	[IsChildEntity] [bit] NOT NULL CONSTRAINT [Set_To_Zero_ChildEntity]  DEFAULT ((0)),
	[IsCustomEntity] [bit] NOT NULL DEFAULT ((0)),
	[IsActivityParty] [bit] NOT NULL CONSTRAINT [Set_To_Zero_ActivityParty]  DEFAULT ((0)),
	[IsValidForAdvancedFind] [bit] NOT NULL CONSTRAINT [Set_To_Zero_Entity_IsValidForAdvancedFind]  DEFAULT ((0)),
	[ExtensionTableName] [nvarchar](64) NULL,
	[VersionNumber] [timestamp] NOT NULL,
	[ReportViewName] [nvarchar](64) NULL,
	[IsRequiredOffline] [bit] NOT NULL DEFAULT ((0)),
	[IsRenameable] [bit] NOT NULL DEFAULT ((0)),
	[DbCascadeMask] [int] NOT NULL DEFAULT ((-1)),
	[HasDeletionStateCode] [int] NOT NULL DEFAULT ((1)),
	[EntityClassName] [nvarchar](255) NOT NULL DEFAULT (''),
	[ServiceClassName] [nvarchar](255) NOT NULL DEFAULT (''),
	[EntityAssembly] [nvarchar](255) NOT NULL DEFAULT (''),
	[ServiceAssembly] [nvarchar](255) NOT NULL DEFAULT (''),
	[EntityRowId] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[CustomizationLevel] [tinyint] NOT NULL DEFAULT ((0)),
	[IsDuplicateCheckSupported] [bit] NOT NULL DEFAULT ((0)),
	[IsImportable] [bit] NOT NULL DEFAULT ((0)),
	[IsShareableAcrossOrgs] [bit] NOT NULL DEFAULT ((0)),
	[IsPublishable] [bit] NOT NULL DEFAULT ((0)),
	[OriginalLocalizedName] [nvarchar](100) NULL,
	[OriginalLocalizedCollectionName] [nvarchar](100) NULL,
	[CanTriggerWorkflow] [bit] NOT NULL DEFAULT ((0)),
	[WorkflowSupport] [int] NOT NULL DEFAULT ((0)),
	[CanBeChildInCustomRelationship] [bit] NOT NULL DEFAULT ((0)),
	[CanBeInCustomEntityAssociation] [bit] NOT NULL DEFAULT ((0)),
	[CanBeInCustomReflexiveRelationship] [bit] NOT NULL DEFAULT ((0)),
	[IsMailMergeEnabled] [bit] NOT NULL DEFAULT ((0)),
 CONSTRAINT [XPKEntity] PRIMARY KEY CLUSTERED 
(
	[EntityId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[SdkMessagePairBaseIds]    Script Date: 04/11/2008 06:51:18 ******/




CREATE TABLE [dbo].[SdkMessagePairBaseIds](
	[SdkMessagePairId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_SdkMessagePairBaseIds] PRIMARY KEY CLUSTERED 
(
	[SdkMessagePairId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  StoredProcedure [dbo].[p_GetSubjectHierarchy]    Script Date: 04/11/2008 06:35:17 ******/




/*
This proc is to be used to get all subject ids lie under given SubjectId.
*/
CREATE procedure [dbo].[p_GetSubjectHierarchy](
 @SubjectId uniqueidentifier) 
as
begin
set nocount on

create table #SubjectIds (SubjectId uniqueidentifier, nLevel int)
insert into #SubjectIds (SubjectId, nLevel) values (@SubjectId, 0)

declare @nLevel int
select @nLevel = 0

while (@@ROWCOUNT > 0) 
begin
	select @nLevel = @nLevel + 1

	insert into #SubjectIds (SubjectId, nLevel)
	select subject.SubjectId, @nLevel 
	from SubjectBase subject
		join #SubjectIds res on subject.ParentSubject = res.SubjectId
	where res.nLevel = @nLevel - 1
end

select distinct SubjectId as 'subjectid' from #SubjectIds
end

/****** Object:  Table [dbo].[FilterTemplate]    Script Date: 04/11/2008 06:41:44 ******/




CREATE TABLE [dbo].[FilterTemplate](
	[FetchXml] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[QueryType] [int] NOT NULL,
	[FilterTemplateId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_FilterTemplate_FilterTemplateId]  DEFAULT (newid()),
	[ReturnedTypeCode] [int] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_FilterTemplate] PRIMARY KEY CLUSTERED 
(
	[FilterTemplateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_GetTxnSessionToken]    Script Date: 04/11/2008 06:35:20 ******/




CREATE PROCEDURE [dbo].[p_GetTxnSessionToken] as
BEGIN
	SET NOCOUNT ON
	DECLARE @bind_token AS varchar(8000)
	EXECUTE sp_getbindtoken @bind_token OUTPUT
	SELECT @bind_token as token
END

/****** Object:  UserDefinedFunction [dbo].[fn_GetEntityActiveStateCode]    Script Date: 04/11/2008 06:57:28 ******/




-------------------------------------------------------------------
-- get the active statecode depending on the object type code
-------------------------------------------------------------------
create function [dbo].[fn_GetEntityActiveStateCode](@otc int)
returns int
as
begin
    if @otc in (
        4201, 4202, 4204, 4206, 
        4207, 4208, 4209, 4210,
        4211, 4212, 4214, 4401,
        4402, 4406, 1088, 1090, 
        1,   2,   3,   4,  112)
        return 0
    else if @otc = 1010
        return 2
    else if @otc = 1084
        return 1
    else if @otc >= 10000
        return 0
    return -1
end

/****** Object:  Table [dbo].[SdkMessageBaseIds]    Script Date: 04/11/2008 06:51:06 ******/




CREATE TABLE [dbo].[SdkMessageBaseIds](
	[SdkMessageId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_SdkMessageBaseIds] PRIMARY KEY CLUSTERED 
(
	[SdkMessageId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  StoredProcedure [dbo].[p_TopoSortEntityRelationshipAll]    Script Date: 04/11/2008 06:35:29 ******/




create  proc [dbo].[p_TopoSortEntityRelationshipAll]
(   
    @cascade_type nvarchar(40),
    @cascade_condition nvarchar(40)
)
as
begin
    set nocount on
    declare @cond nvarchar(255)
    set @cond = N' and '+ @cascade_type + N' ' + @cascade_condition    

    declare @sql nvarchar(4000)
    set @sql = 
    N'insert into #entitylayer(objecttypecode, layer)
    select distinct e.ObjectTypeCode, 0
    from EntityView e, RelationshipView r
    where e.EntityId = r.ReferencedEntityId'
    + @cond

    if(@cascade_type <> N'CascadeDelete') set @sql = @sql + N' and e.OwnershipTypeMask = 1'

    exec sp_executesql @sql
    
    set @sql = 
    N'insert into #entitylayer(objecttypecode, layer)
    select distinct re.ObjectTypeCode, 1
    from EntityView re, RelationshipView r
    where re.EntityId = r.ReferencingEntityId
    and re.ObjectTypeCode not in
    (
        select objecttypecode from #entitylayer
    )' + @cond
    if(@cascade_type <> N'CascadeDelete') set @sql = @sql + N' and re.OwnershipTypeMask = 1'
    exec sp_executesql @sql
     
    while (@@rowcount > 0)    
    begin
        set @sql =
        N'update l set l.layer = pl.layer + 1
        from #entitylayer l, #entitylayer pl, 
        EntityView e, EntityView re, RelationshipView r
        where e.EntityId = r.ReferencedEntityId
        and re.EntityId = r.ReferencingEntityId
        and l.objecttypecode = re.ObjectTypeCode
        and pl.objecttypecode = e.ObjectTypeCode
        and l.layer < pl.layer + 1    
        and pl.objecttypecode <> l.objecttypecode'
        + @cond
        if(@cascade_type <> N'CascadeDelete') set @sql = @sql + N' and re.OwnershipTypeMask = 1'
        exec sp_executesql @sql
    end
end

/****** Object:  Table [dbo].[ReportCategoryBase]    Script Date: 04/11/2008 06:49:16 ******/




CREATE TABLE [dbo].[ReportCategoryBase](
	[ModifiedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[ImportSequenceNumber] [int] NULL,
	[CategoryCode] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[ReportCategoryId] [uniqueidentifier] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[ReportId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_ReportCategory] PRIMARY KEY CLUSTERED 
(
	[ReportCategoryId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_SyncMetabaseIds]    Script Date: 04/11/2008 06:35:29 ******/




create procedure [dbo].[p_SyncMetabaseIds] as
set nocount on

--select * from IdMap where ServerId <> ClientId
--drop table #IdMap

-- Disable constraints for metadata tables only 
-- Assumption: all metadata tables are in MetadataSchema and have synonyms  
declare @sqlstr nvarchar(2048)
declare @tableName sysname
declare @constName sysname

declare fkCursor cursor FORWARD_ONLY READ_ONLY for
select object_name(parent_obj), name from sysobjects 
where id in (select constid from sysconstraints where id in 
                (select id from sysobjects where type = 'u' and 
                    name in (select name from sys.synonyms)
                )
            ) 
   and xtype = 'F'

open fkCursor
fetch next from fkCursor into @tableName, @constName
while (@@fetch_status = 0)
begin
	select @sqlstr = 'ALTER TABLE MetadataSchema.' + @tableName + ' NOCHECK CONSTRAINT ' + @constName
	exec sp_executesql @sqlstr
	--print @sqlstr

	fetch next from fkCursor into @tableName, @constName
end -- fkCursor

close fkCursor
--deallocate fkCursor


-- sync EntityId
update EntityIds set EntityId = #IdMap.ServerId from EntityIds join #IdMap on (EntityIds.EntityId = #IdMap.ClientId)
update Entity set EntityId = #IdMap.ServerId from Entity join #IdMap on (Entity.EntityId = #IdMap.ClientId)
update Attribute set EntityId = #IdMap.ServerId from Attribute join #IdMap on (Attribute.EntityId = #IdMap.ClientId)
update EntityIndex set EntityId = #IdMap.ServerId from EntityIndex join #IdMap on (EntityIndex.EntityId = #IdMap.ClientId)
update Relationship set ReferencedEntityId = #IdMap.ServerId from Relationship join #IdMap on (Relationship.ReferencedEntityId = #IdMap.ClientId)
update Relationship set ReferencingEntityId = #IdMap.ServerId from Relationship join #IdMap on (Relationship.ReferencingEntityId = #IdMap.ClientId)
update EntityRelationshipRole set EntityId = #IdMap.ServerId from EntityRelationshipRole join #IdMap on (EntityRelationshipRole.EntityId = #IdMap.ClientId)

-- Sync LocalizedLabel ObjectId - this can be attributeid or entityid
update LocalizedLabel set ObjectId = #IdMap.ServerId from LocalizedLabel join #IdMap on (LocalizedLabel.ObjectId = #IdMap.ClientId)

-- Sync AttributeId
update AttributeIds set AttributeId = #IdMap.ServerId from AttributeIds join #IdMap on (AttributeIds.AttributeId = #IdMap.ClientId)
update Attribute set AttributeId = #IdMap.ServerId from Attribute join #IdMap on (Attribute.AttributeId = #IdMap.ClientId)
update Attribute set AttributeOf = #IdMap.ServerId from Attribute join #IdMap on (Attribute.AttributeOf = #IdMap.ClientId)
update Attribute set AggregateOf = #IdMap.ServerId from Attribute join #IdMap on (Attribute.AggregateOf = #IdMap.ClientId)
update Attribute set YomiOf = #IdMap.ServerId from Attribute join #IdMap on (Attribute.YomiOf = #IdMap.ClientId)
update RelationshipExtraCondition set AttributeId = #IdMap.ServerId from RelationshipExtraCondition join #IdMap on (RelationshipExtraCondition.AttributeId = #IdMap.ClientId)
update IndexAttributes set AttributeId = #IdMap.ServerId from IndexAttributes join #IdMap on (IndexAttributes.AttributeId = #IdMap.ClientId)
update Relationship set ReferencedAttributeId = #IdMap.ServerId from Relationship join #IdMap on (Relationship.ReferencedAttributeId = #IdMap.ClientId)
update Relationship set ReferencingAttributeId = #IdMap.ServerId from Relationship join #IdMap on (Relationship.ReferencingAttributeId = #IdMap.ClientId)
update ViewAttribute set AttributeId = #IdMap.ServerId from ViewAttribute join #IdMap on (ViewAttribute.AttributeId = #IdMap.ClientId)
update ViewAttribute set RemoteAttributeId = #IdMap.ServerId from ViewAttribute join #IdMap on (ViewAttribute.RemoteAttributeId = #IdMap.ClientId)
update AttributePicklistValue set AttributeId = #IdMap.ServerId from AttributePicklistValue join #IdMap on (AttributePicklistValue.AttributeId = #IdMap.ClientId)
update AttributeLookupValue set AttributeId = #IdMap.ServerId from AttributeLookupValue join #IdMap on (AttributeLookupValue.AttributeId = #IdMap.ClientId)

-- Sync ViewAttributeId
update ViewAttribute set ViewAttributeId = #IdMap.ServerId from ViewAttribute join #IdMap on (ViewAttribute.ViewAttributeId = #IdMap.ClientId)

-- Sync RelationshipId
update RelationshipIds set RelationshipId = #IdMap.ServerId from RelationshipIds join #IdMap on (RelationshipIds.RelationshipId = #IdMap.ClientId)
update Relationship set RelationshipId = #IdMap.ServerId from Relationship join #IdMap on (Relationship.RelationshipId = #IdMap.ClientId)
update RelationshipExtraCondition set RelationshipId = #IdMap.ServerId from RelationshipExtraCondition join #IdMap on (RelationshipExtraCondition.RelationshipId = #IdMap.ClientId)
update ViewAttribute set RelationshipId = #IdMap.ServerId from ViewAttribute join #IdMap on (ViewAttribute.RelationshipId = #IdMap.ClientId)
update EntityRelationshipRelationships set RelationshipId = #IdMap.ServerId from EntityRelationshipRelationships join #IdMap on (EntityRelationshipRelationships.RelationshipId = #IdMap.ClientId)

-- Sync ConditionId
update RelationshipExtraCondition set ConditionId = #IdMap.ServerId from RelationshipExtraCondition join #IdMap on (RelationshipExtraCondition.ConditionId = #IdMap.ClientId)


-- enable constraints
open fkCursor
fetch next from fkCursor into @tableName, @constName
while (@@fetch_status = 0)
begin
	select @sqlstr = 'ALTER TABLE MetadataSchema.' + @tableName + ' CHECK CONSTRAINT ' + @constName
	exec sp_executesql @sqlstr
	--print @sqlstr
	
	fetch next from fkCursor into @tableName, @constName
end -- fkCursor

close fkCursor
deallocate fkCursor

/****** Object:  Table [dbo].[ReportCategoryExtensionBase]    Script Date: 04/11/2008 06:49:16 ******/




CREATE TABLE [dbo].[ReportCategoryExtensionBase](
	[ReportCategoryId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ReportCategoryExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ReportCategoryId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[RelationshipIds]    Script Date: 04/11/2008 06:48:54 ******/




CREATE TABLE [dbo].[RelationshipIds](
	[RelationshipId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [XPKRelationshipIds] PRIMARY KEY CLUSTERED 
(
	[RelationshipId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[SdkMessageProcessingStepBaseIds]    Script Date: 04/11/2008 06:51:29 ******/




CREATE TABLE [dbo].[SdkMessageProcessingStepBaseIds](
	[SdkMessageProcessingStepId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_SdkMessageProcessingStepBaseIds] PRIMARY KEY CLUSTERED 
(
	[SdkMessageProcessingStepId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  StoredProcedure [dbo].[p_PublishMetadataInTable]    Script Date: 04/11/2008 06:35:26 ******/




create procedure [dbo].[p_PublishMetadataInTable]
(
    @tableName nvarchar(255),
	@primaryIdColumnName nvarchar(255),
	@objectTypeCode int,
	@idsTableName nvarchar(255),
	@idsTableNamePrimaryIdColumnName nvarchar(255)
)
as
begin
	set nocount on
	declare @sqlstr nvarchar(2048)
	declare @otc nvarchar(16)
	select @otc = str(@objectTypeCode)

	-- Step one:  delete records from the table where InProduction is true and the CustomizationLevel is "override"
	-- where the record also exists in the temp metadata publish collect table
	select @sqlstr = 'delete from ' + @tableName + ' where InProduction = 1 and CustomizationLevel = 1 and ' + @primaryIdColumnName + ' in
		(select ObjectId from #MetadataPublishCollect where ObjectTypeCode = ' + @otc + ')'
	exec sp_executesql @sqlstr
	
	-- Step two:  delete records from the table that are overrides of custom rows that show the custom rows have been deleted
	select @sqlstr = 'delete from ' + @tableName + ' where ' + @primaryIdColumnName + ' in
		(select t.' + @primaryIdColumnName + ' from ' + @tableName + ' t join #MetadataPublishCollect mpc on t.' + @primaryIdColumnName + ' = mpc.ObjectId
		and mpc.ObjectTypeCode = ' + @otc + ' where t.CustomizationLevel = 2 and t.' + @primaryIdColumnName + ' not in
			(select ' + @primaryIdColumnName + ' from ' + @tableName + ' where CustomizationLevel = 0)
		)'
	exec sp_executesql @sqlstr

	-- Step three:  update the table setting InProduction = true for the appropriate ids
	select @sqlstr = 'update ' + @tableName + ' set InProduction = 1 where ' + @primaryIdColumnName + ' in
		(select ObjectId from #MetadataPublishCollect where ObjectTypeCode = ' + @otc + ')'
	exec sp_executesql @sqlstr

	-- Step four:  if there is an ids table for this metadata object type then delete the appropriate records from there
	if (@idsTableName is not null)
	begin
		select @sqlstr = 'delete from ' + @idsTableName + ' where ' + @idsTableNamePrimaryIdColumnName + ' not in
			(select ' + @primaryIdColumnName + ' from ' + @tableName + ')'
		exec sp_executesql @sqlstr
	end
end

/****** Object:  Table [dbo].[SdkMessageFilterBaseIds]    Script Date: 04/11/2008 06:51:12 ******/




CREATE TABLE [dbo].[SdkMessageFilterBaseIds](
	[SdkMessageFilterId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_SdkMessageFilterBaseIds] PRIMARY KEY CLUSTERED 
(
	[SdkMessageFilterId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  StoredProcedure [dbo].[p_GetDbSize]    Script Date: 04/11/2008 06:35:10 ******/




CREATE PROCEDURE [dbo].[p_GetDbSize] as
BEGIN

	set nocount on
	
	declare @pageCount bigint
	SELECT @pageCount = SUM(size) FROM sysfiles

	declare @pageSize int
	SELECT @pageSize = convert(varchar(11),low) FROM master.dbo.spt_values where type = N'E' and number = 1

	SELECT (@pageCount * @pageSize) / (1024 * 1024) AS DbSize
END

/****** Object:  StoredProcedure [dbo].[p_UpdateRolePrivilegeMaskInTempTable]    Script Date: 04/11/2008 06:35:30 ******/




--
-- this stored procedure updates the temporary #roleprivileges and sets the 
-- privilegedepthmask accordingly
--

create procedure [dbo].[p_UpdateRolePrivilegeMaskInTempTable] as
begin

create index TempPrivilegeDepthMask on #roleprivileges (privilegedepthmask) 

update #roleprivileges set privilegedepthmask = 0x00000080
	where privilegedepthmask = 0x00000008 

update #roleprivileges set privilegedepthmask = 0x00000040
	where privilegedepthmask = 0x00000004 

update #roleprivileges set privilegedepthmask = 0x00000020
	where privilegedepthmask = 0x00000002 

update #roleprivileges set privilegedepthmask = 0x00000010
	where privilegedepthmask = 0x00000001 

update #roleprivileges set privilegedepthmask = 0x00000000
	where privilegedepthmask not in (0x00000010, 0x00000020, 0x00000040, 0x00000080)


end

/****** Object:  Table [MetadataSchema].[LocalizedLabel]    Script Date: 04/11/2008 06:57:00 ******/




CREATE TABLE [MetadataSchema].[LocalizedLabel](
	[LocalizedLabelId] [uniqueidentifier] NOT NULL,
	[LocalizedLabelRowId] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[LanguageId] [int] NOT NULL,
	[ObjectId] [uniqueidentifier] NOT NULL,
	[ObjectColumnName] [sysname] NOT NULL,
	[Label] [nvarchar](max) NOT NULL,
	[VersionNumber] [timestamp] NOT NULL,
	[InProduction] [bit] NOT NULL DEFAULT ((1)),
	[CustomizationLevel] [tinyint] NOT NULL DEFAULT ((0)),
 CONSTRAINT [XPKLocalizedLabel] PRIMARY KEY CLUSTERED 
(
	[LocalizedLabelId] ASC,
	[InProduction] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[PluginAssemblyBaseIds]    Script Date: 04/11/2008 06:47:06 ******/




CREATE TABLE [dbo].[PluginAssemblyBaseIds](
	[PluginAssemblyId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_PluginAssemblyBaseIds] PRIMARY KEY CLUSTERED 
(
	[PluginAssemblyId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[FaxExtensionBase]    Script Date: 04/11/2008 06:41:42 ******/




CREATE TABLE [dbo].[FaxExtensionBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_FaxExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[PrincipalObjectAccess]    Script Date: 04/11/2008 06:47:23 ******/




CREATE TABLE [dbo].[PrincipalObjectAccess](
	[PrincipalId] [uniqueidentifier] NOT NULL,
	[ObjectId] [uniqueidentifier] NOT NULL,
	[ObjectTypeCode] [int] NOT NULL,
	[PrincipalTypeCode] [int] NULL,
	[AccessRightsMask] [int] NULL,
	[ChangedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[InheritedAccessRightsMask] [int] NOT NULL CONSTRAINT [DF_PrincipalObjectAccess_InheritedAccessRightsMask]  DEFAULT ((0)),
	[PrincipalObjectAccessId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_PrincipalObjectAccess_PrincipalObjectAccessId]  DEFAULT (newid()),
	[UTCConversionTimeZoneCode] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
 CONSTRAINT [ndx_PrimaryKey_PrincipalObjectAccess] PRIMARY KEY NONCLUSTERED 
(
	[PrincipalObjectAccessId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_PrincipalObjectAccess] UNIQUE NONCLUSTERED 
(
	[PrincipalId] ASC,
	[ObjectId] ASC,
	[ObjectTypeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[SdkMessageProcessingStepSecureConfigBaseIds]    Script Date: 04/11/2008 06:51:39 ******/




CREATE TABLE [dbo].[SdkMessageProcessingStepSecureConfigBaseIds](
	[SdkMessageProcessingStepSecureConfigId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_SdkMessageProcessingStepSecureConfigBaseIds] PRIMARY KEY CLUSTERED 
(
	[SdkMessageProcessingStepSecureConfigId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[CampaignExtensionBase]    Script Date: 04/11/2008 06:38:14 ******/




CREATE TABLE [dbo].[CampaignExtensionBase](
	[CampaignId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_CampaignExtensionBase] PRIMARY KEY CLUSTERED 
(
	[CampaignId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[PrivilegeBase]    Script Date: 04/11/2008 06:47:26 ******/




CREATE TABLE [dbo].[PrivilegeBase](
	[PrivilegeId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Name] [nvarchar](100) NULL,
	[CanBeLocal] [bit] NULL CONSTRAINT [Set_To_Zero133]  DEFAULT ((0)),
	[CanBeDeep] [bit] NULL CONSTRAINT [Set_To_Zero134]  DEFAULT ((0)),
	[VersionNumber] [timestamp] NULL,
	[CanBeGlobal] [bit] NULL CONSTRAINT [Set_To_Zero135]  DEFAULT ((0)),
	[CanBeBasic] [bit] NULL,
	[AccessRight] [int] NULL,
	[IsDisabledWhenIntegrated] [bit] NOT NULL CONSTRAINT [DF_PrivilegeBase_IsDisabledWhenIntegrated]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_Privilege] PRIMARY KEY CLUSTERED 
(
	[PrivilegeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Synonym [dbo].[LocalizedLabel]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[LocalizedLabel] FOR [MetadataSchema].[LocalizedLabel]

/****** Object:  Table [MetadataSchema].[OrganizationLanguagePack]    Script Date: 04/11/2008 06:57:02 ******/




CREATE TABLE [MetadataSchema].[OrganizationLanguagePack](
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[LanguageId] [int] NOT NULL,
	[IsEnabled] [bit] NOT NULL DEFAULT ((0)),
	[Version] [nvarchar](19) NOT NULL
) 

/****** Object:  Synonym [dbo].[OrganizationLanguagePack]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[OrganizationLanguagePack] FOR [MetadataSchema].[OrganizationLanguagePack]

/****** Object:  Table [MetadataSchema].[AttributePicklistValue]    Script Date: 04/11/2008 06:56:20 ******/




CREATE TABLE [MetadataSchema].[AttributePicklistValue](
	[AttributePicklistValueId] [uniqueidentifier] NOT NULL,
	[AttributePicklistValueRowId] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[AttributeId] [uniqueidentifier] NOT NULL,
	[InProduction] [bit] NOT NULL,
	[Value] [int] NOT NULL,
	[State_Status_Value] [int] NULL,
	[InvariantName] [nvarchar](50) NULL,
	[DisplayOrder] [int] NULL,
	[VersionNumber] [timestamp] NOT NULL,
	[CustomizationLevel] [tinyint] NOT NULL DEFAULT ((0)),
 CONSTRAINT [XPKAttributePicklistValue] PRIMARY KEY CLUSTERED 
(
	[AttributePicklistValueId] ASC,
	[InProduction] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[CampaignActivityExtensionBase]    Script Date: 04/11/2008 06:37:57 ******/




CREATE TABLE [dbo].[CampaignActivityExtensionBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_CampaignActivityExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Synonym [dbo].[AttributePicklistValue]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[AttributePicklistValue] FOR [MetadataSchema].[AttributePicklistValue]

/****** Object:  Table [MetadataSchema].[AttributeLookupValue]    Script Date: 04/11/2008 06:56:17 ******/




CREATE TABLE [MetadataSchema].[AttributeLookupValue](
	[AttributeLookupValueId] [uniqueidentifier] NOT NULL,
	[AttributeLookupValueRowId] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[AttributeId] [uniqueidentifier] NOT NULL,
	[InProduction] [bit] NOT NULL,
	[EntityId] [int] NOT NULL,
	[VersionNumber] [timestamp] NOT NULL,
	[CustomizationLevel] [tinyint] NOT NULL DEFAULT ((0)),
 CONSTRAINT [XPKAttributeLookupValue] PRIMARY KEY CLUSTERED 
(
	[AttributeLookupValueId] ASC,
	[InProduction] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Synonym [dbo].[AttributeLookupValue]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[AttributeLookupValue] FOR [MetadataSchema].[AttributeLookupValue]

/****** Object:  UserDefinedFunction [dbo].[fn_GetGuidsFromString]    Script Date: 04/11/2008 06:57:29 ******/
SET ANSI_NULLS OFF



create function [dbo].[fn_GetGuidsFromString]
(
    @idsString nvarchar(max) 
)
returns @tbl table
( 	
     id uniqueidentifier primary key clustered
) 
as
begin

	-- Expected list string for Guids fixed length 
	-- No separator for: speed of parsing and reduce of network data
	-- Example for Guids with value 1 and 3: 
	--    N'00000000-0000-0000-0000-00000000000100000000-0000-0000-0000-000000000003'
	declare @countGuids int
	declare @guidLength int
	declare @currentId int
	declare @currentGuid uniqueidentifier
	declare @ErrorMessage nvarchar(512)

	select @guidLength = 36	
	select @countGuids = len(@idsString) / @guidLength
	select @currentId = 0
			
	while (@currentId < @countGuids)
	begin
		select @currentGuid = cast(substring(@idsString, @currentId * @guidLength + 1, @guidLength) as uniqueidentifier ) 
		insert into @tbl Values(@currentGuid);
		select @currentId = @currentId +1
	end

return  
end

/****** Object:  Table [dbo].[PhoneCallExtensionBase]    Script Date: 04/11/2008 06:46:54 ******/




CREATE TABLE [dbo].[PhoneCallExtensionBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
	[New_Month] [int] NULL,
 CONSTRAINT [PK_PhoneCallExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[WFActionLog]    Script Date: 04/11/2008 06:55:15 ******/




CREATE TABLE [dbo].[WFActionLog](
	[ProcessInstanceId] [uniqueidentifier] NOT NULL,
	[WFActionLogId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Description] [nvarchar](max) NULL,
	[ActionId] [uniqueidentifier] NULL,
	[OccurenceOrder] [int] IDENTITY(1,1) NOT NULL,
	[ObjectType] [int] NULL,
	[ObjectId] [uniqueidentifier] NULL,
	[Status] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[Value] [nvarchar](max) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_WFActionLog] PRIMARY KEY CLUSTERED 
(
	[WFActionLogId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_WFActionLog] UNIQUE NONCLUSTERED 
(
	[ActionId] ASC,
	[ProcessInstanceId] ASC,
	[OccurenceOrder] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  StoredProcedure [dbo].[p_CascadeCollect]    Script Date: 04/11/2008 06:34:57 ******/
SET ANSI_NULLS OFF



create proc [dbo].[p_CascadeCollect]
(
    @operation_type nvarchar(40),
    @root_entity_otc int,
    @root_entity_oid uniqueidentifier,
    @isOffline int,
    @old_owner uniqueidentifier
)
as
begin
    set nocount on
    
    if(@operation_type = N'CascadeDelete')
    begin
        insert into #CascadeCollect select o, t, p
        from dbo.fn_CollectForCascadeDelete
        (@root_entity_oid
        ,@root_entity_otc
        ,@isOffline
        ) order by r
        update #CascadeCollect set processed = 2
        if(exists(select objecttype from #CascadeCollect where objectid = N'00000000-0000-0000-0000-000000000000')) 
            RAISERROR ('restrict link', 16, 1)
    end
    else if(@operation_type = N'CascadeAssign')
    begin
        insert into #CascadeCollect select distinct o, t, p
                 from dbo.fn_CollectForCascadeAssign
                 (@root_entity_oid
                 ,@root_entity_otc
                 ,@isOffline
                 ,@old_owner
                 )
        update #CascadeCollect set processed = 2
    end
    else if(@operation_type = N'CascadeReparent')
    begin
        insert into #CascadeCollect select distinct o, t, p
                 from dbo.fn_CollectForCascadeReparent
                 (@root_entity_oid
                 ,@root_entity_otc
                 ,@isOffline
                 ,@old_owner
                 )
        update #CascadeCollect set processed = 2
    end
    else if(@operation_type = N'CascadeShare')
    begin
        insert into #CascadeCollect select distinct o, t, p
                 from dbo.fn_CollectForCascadeShare
                 (@root_entity_oid
                 ,@root_entity_otc
                 ,@isOffline
                 ,@old_owner
                 )
        update #CascadeCollect set processed = 2
    end
    else if(@operation_type = N'CascadeUnShare')
    begin
        insert into #CascadeCollect select distinct o, t, p
                 from dbo.fn_CollectForCascadeUnShare
                 (@root_entity_oid
                 ,@root_entity_otc
                 ,@isOffline
                 ,@old_owner
                 )
        update #CascadeCollect set processed = 2
    end
    else
        RAISERROR ('invalid cascade operation', 16, 1)	
end

/****** Object:  StoredProcedure [dbo].[p_CascadeGrantRevokeAccessSyncTracking]    Script Date: 04/11/2008 06:34:58 ******/
SET ANSI_NULLS OFF



-- Update VersionNumber for all collected replicated entities 
CREATE PROC [dbo].[p_CascadeGrantRevokeAccessSyncTracking] AS
BEGIN
    SET NOCOUNT ON
        
    DECLARE	   @ObjectTypeCode INT
    
	DECLARE @BaseTableName sysname
	DECLARE @PrimaryKeyName sysname

	declare @sql nvarchar(2000)

	-- Query metadata for all OTC once	
	SELECT e.ObjectTypeCode, e.BaseTableName, a.PhysicalName 
	INTO #TempMetadata 
		FROM Entity e
			JOIN Attribute a ON (a.EntityId = e.EntityId)
		WHERE 
			e.IsReplicated = 1
			AND e.ObjectTypeCode in (SELECT distinct objecttype FROM #CascadeCollect)
			AND a.IsPKAttribute = 1
			
	DECLARE @CurVariable CURSOR
	DECLARE MyCursor CURSOR FORWARD_ONLY FOR 
			SELECT ObjectTypeCode, BaseTableName, PhysicalName FROM #TempMetadata
			
	SET @CurVariable = MyCursor

	OPEN @CurVariable
	FETCH NEXT FROM @CurVariable INTO @ObjectTypeCode, @BaseTableName, @PrimaryKeyName
	WHILE @@FETCH_STATUS = 0
	BEGIN

		-- For all entities with current OTC update PK to same value. 
		-- Update will change VersionNumber which is used for tracking. 
		-- NOTE: Can't parameterize update statement with dynamic table name
		set @sql = 'update ' + @BaseTableName + ' WITH (ROWLOCK) set ' + @PrimaryKeyName + '='  + @PrimaryKeyName 
				+ ' where '+ @PrimaryKeyName + ' in (select objectid from #CascadeCollect where objecttype = '+ cast(@ObjectTypeCode as nvarchar(20)) +')'

		exec sp_executesql @sql
			
    	FETCH NEXT FROM @CurVariable INTO @ObjectTypeCode, @BaseTableName, @PrimaryKeyName
	END

	CLOSE MyCursor
	DEALLOCATE MyCursor
  
  DROP TABLE #TempMetadata
END

/****** Object:  StoredProcedure [dbo].[p_RollupByAccount]    Script Date: 04/11/2008 06:35:28 ******/
SET ANSI_NULLS OFF



Create Proc [dbo].[p_RollupByAccount]
	@AccountId	uniqueidentifier,
	@Extended bit,
	@ActivityRollup bit

As
Begin
	Set NOCOUNT ON

	-- Create temporary table to store a list of id's
	-- Create Table #RollupIds (PartyId uniqueidentifier PRIMARY KEY)
	-- This table must be created outside the sproc

	insert into #RollupIds (RollupId) Values (@AccountId)

	declare @Level int
	set @Level = 1
	while (@@ROWCOUNT != 0 and @Level <= 5)
	BEGIN
		set @Level = @Level + 1
		insert into #RollupIds (RollupId) 
		(
			select distinct AccountId
			from AccountBase acc (NOLOCK)
			join #RollupIds ri on 
			(
				acc.ParentAccountId = ri.RollupId
			)
			where acc.AccountId not in 
			(	
				select RollupId from #RollupIds
			)
		)
	END

	insert into #RollupIds (RollupId) 
	(
		select distinct ContactId 
		from ContactBase (NOLOCK)
		where AccountId = @AccountId
	)

--	if (@ActivityRollup <> 0)
--	begin
--		insert into #RollupIds (RollupId) 
--		(
--			select distinct ContactId 
--			from ContactBase (NOLOCK)
--			join #RollupIds ri on
--			(
--				ParentContactId = ri.RollupId
--			)
--		)
--	end

	-- Extended rollup
	-- * ContactInvoices
	-- * ContactQuotes
	-- * ContactOrders
	-- * CustomerOpportunityRole

	if (@Extended <> 0)
	begin
		insert into #RollupIds(RollupId)
		(
			select distinct q.QuoteId 
			from QuoteBase as q (NOLOCK) 
			join ContactQuotes as cq (NOLOCK) on
			(
				q.QuoteId = cq.QuoteId
			)
			where 
				exists (
					select RollupId from #RollupIds where cq.ContactId = RollupId
				)
				and 
				not exists(
					select RollupId from #RollupIds where q.QuoteId = RollupId
				)
		)

		insert into #RollupIds(RollupId)
		(
			select distinct i.InvoiceId 
			from InvoiceBase as i (NOLOCK) 
			join ContactInvoices as ci (NOLOCK) on
			(
				i.InvoiceId = ci.InvoiceId
			)
			where 
				exists (
					select RollupId from #RollupIds where ci.ContactId = RollupId
				)
				and 
				not exists(
					select RollupId from #RollupIds where i.InvoiceId = RollupId
				)
		)
		
		insert into #RollupIds(RollupId)
		(
			select distinct s.SalesOrderId
			from SalesOrderBase as s (NOLOCK)
			join ContactOrders as co (NOLOCK) on
			(
				s.SalesOrderId = co.SalesOrderId
			)
			where
				exists (
					select RollupId from #RollupIds where co.ContactId = RollupId
				)
				and 
				not exists(
					select RollupId from #RollupIds where s.SalesOrderId = RollupId
				)
		)
		
		-- Opportunities from CustomerOpportunityRole 
		insert into #RollupIds(RollupId)
		(
			select distinct cor.OpportunityId
			from CustomerOpportunityRoleBase as cor (NOLOCK) 
			join #RollupIds ri on
			(
				cor.CustomerId = ri.RollupId
			)
			where
				not exists(
					select RollupId from #RollupIds where cor.OpportunityId = RollupId
				)
		)
	end -- @Extended

	-- Contracts
	if (@Extended <> 0)
	begin
		insert into #RollupIds(RollupId)
		(
			select distinct c.ContractId
			from ContractBase as c (NOLOCK) 
			join #RollupIds ri on
			(
				c.BillingContactId = ri.RollupId
			)
			where
				not exists(
					select RollupId from #RollupIds where c.ContractId = RollupId
				)
		)

		insert into #RollupIds(RollupId)
		(
			select distinct c.ContractId
			from ContractBase as c (NOLOCK) 
			where c.BillingAccountId = @AccountId and
				not exists(
					select RollupId from #RollupIds where c.ContractId = RollupId
				)
		)
	end
	insert into #RollupIds(RollupId)
	(
		select distinct c.ContractId
		from ContractBase as c (NOLOCK) 
		join #RollupIds ri on 
		(
			c.ContactId = ri.RollupId
		)
		where
			not exists(
				select RollupId from #RollupIds where c.ContractId = RollupId
			)
	)
	insert into #RollupIds(RollupId)
	(
		select distinct c.ContractId
		from ContractBase as c (NOLOCK) 
		where
			c.AccountId = @AccountId and
			not exists(
				select RollupId from #RollupIds where c.ContractId = RollupId
			)
	)

	insert into #RollupIds(RollupId)
	(
		select distinct i.IncidentId
		from IncidentBase as i (NOLOCK) 
		where i.AccountId = @AccountId and
			not exists(
				select RollupId from #RollupIds where i.IncidentId = RollupId
			)
	)

	insert into #RollupIds(RollupId)
	(
		select distinct i.IncidentId
		from IncidentBase as i (NOLOCK) 
		join #RollupIds ri on
		(
			i.ContactId = ri.RollupId
		)
		where
			not exists(
				select RollupId from #RollupIds where i.IncidentId = RollupId
			)
	)

	if (@ActivityRollup <> 0)
	begin
		insert into #RollupIds(RollupId)
		(
			select distinct o.OpportunityId
			from OpportunityBase as o (NOLOCK) 
			join #RollupIds ri on
			(
				o.ContactId = ri.RollupId 
			)
			where
			not exists(
					select RollupId from #RollupIds where o.OpportunityId = RollupId
				)
		)
	end

	insert into #RollupIds(RollupId)
	(
		select distinct o.OpportunityId
		from OpportunityBase as o (NOLOCK) 
		where o.AccountId = @AccountId and
		not exists(
				select RollupId from #RollupIds where o.OpportunityId = RollupId
			)
	)

	if (@Extended <> 0)
	begin
		-- Account/Contact from CustomerOpportunityRole 
		insert into #RollupIds(RollupId)
		(
			select distinct cor.CustomerId
			from CustomerOpportunityRoleBase as cor (NOLOCK) 
			join #RollupIds ri on
			(
				cor.OpportunityId = ri.RollupId
			)
			where
				not exists(
					select RollupId from #RollupIds where cor.CustomerId = RollupId
				)
		)
	end

	insert into #RollupIds(RollupId)
	(
		select distinct q.QuoteId
		from QuoteBase as q (NOLOCK) 
		where q.AccountId = @AccountId and
		not exists(
				select RollupId from #RollupIds where q.QuoteId = RollupId
			)
	)

	insert into #RollupIds(RollupId)
	(
		select distinct q.QuoteId
		from QuoteBase as q (NOLOCK) 
		join #RollupIds ri on
		(
			q.ContactId = ri.RollupId
		)
		where
		not exists(
				select RollupId from #RollupIds where q.QuoteId = RollupId
			)
	)

	insert into #RollupIds(RollupId)
	(
		select distinct so.SalesOrderId
		from SalesOrderBase as so (NOLOCK) 
		where
					so.AccountId = @AccountId and
		not exists(
				select RollupId from #RollupIds where so.SalesOrderId = RollupId
			)
	)

	insert into #RollupIds(RollupId)
	(
		select distinct so.SalesOrderId
		from SalesOrderBase as so (NOLOCK) 
		join #RollupIds ri on
		(
			so.ContactId = ri.RollupId
		)
		where
		not exists(
				select RollupId from #RollupIds where so.SalesOrderId = RollupId
			)
	)

	insert into #RollupIds(RollupId)
	(
		select distinct i.InvoiceId
		from InvoiceBase as i (NOLOCK) 
		join #RollupIds ri on
		(
			i.ContactId = ri.RollupId
		)
		where
		not exists(
				select RollupId from #RollupIds where i.InvoiceId = RollupId
			)
	)

	insert into #RollupIds(RollupId)
	(
		select distinct i.InvoiceId
		from InvoiceBase as i (NOLOCK) 


		where
			i.AccountId = @AccountId and
		not exists(
				select RollupId from #RollupIds where i.InvoiceId = RollupId
			)
	)

	insert into #RollupIds(RollupId)
	(
		select distinct account.OriginatingLeadId 
		from AccountBase as account (NOLOCK) 
		where 
			account.AccountId = @AccountId and
			account.OriginatingLeadId is not null
		and
			not exists(
					select RollupId from #RollupIds where account.OriginatingLeadId = RollupId
				)
			
	)
	insert into #RollupIds(RollupId)
	(
		select distinct contact.OriginatingLeadId
		from ContactBase as contact (NOLOCK) 
		join #RollupIds as ri on
		(
			contact.ContactId = ri.RollupId
		)
		where contact.OriginatingLeadId is not null
		and
			not exists(
					select RollupId from #RollupIds where contact.OriginatingLeadId = RollupId
				)
		
	)

	if (@ActivityRollup <> 0)
	begin
		insert into #RollupIds(RollupId)
		(
			select distinct opportunity.OriginatingLeadId
			from OpportunityBase as opportunity (NOLOCK) 
			join #RollupIds as ri on
			(
				opportunity.OpportunityId = ri.RollupId
			)
			where opportunity.OriginatingLeadId is not null
			and
				not exists(
						select RollupId from #RollupIds where opportunity.OriginatingLeadId = RollupId
				)
		)	

	 	insert into #RollupIds(RollupId)
		(
			select distinct activityparty.ActivityId
			from ActivityPartyBase as activityparty (NOLOCK) 
			join #RollupIds as ri on
			(
				activityparty.PartyId = ri.RollupId
			)
			where
				not exists(
						select RollupId from #RollupIds where activityparty.ActivityId = RollupId
					)
		
		)
	end	
End

/****** Object:  Table [MetadataSchema].[EntityRelationship]    Script Date: 04/11/2008 06:56:47 ******/




CREATE TABLE [MetadataSchema].[EntityRelationship](
	[EntityRelationshipId] [uniqueidentifier] NOT NULL,
	[SchemaName] [nvarchar](255) NULL,
	[EntityRelationshipType] [tinyint] NOT NULL DEFAULT ((0)),
	[IsCustomRelationship] [bit] NOT NULL DEFAULT ((0)),
	[EntityRelationshipRowId] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[VersionNumber] [timestamp] NOT NULL,
	[CustomizationLevel] [tinyint] NOT NULL DEFAULT ((0)),
 CONSTRAINT [XPKEntityRelationship] PRIMARY KEY CLUSTERED 
(
	[EntityRelationshipId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[CustomerAddressBase]    Script Date: 04/11/2008 06:40:24 ******/




CREATE TABLE [dbo].[CustomerAddressBase](
	[ParentId] [uniqueidentifier] NOT NULL,
	[CustomerAddressId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[AddressNumber] [int] NULL,
	[ObjectTypeCode] [int] NOT NULL,
	[AddressTypeCode] [int] NULL,
	[Name] [nvarchar](200) NULL,
	[PrimaryContactName] [nvarchar](150) NULL,
	[Line1] [nvarchar](50) NULL,
	[Line2] [nvarchar](50) NULL,
	[Line3] [nvarchar](50) NULL,
	[City] [nvarchar](50) NULL,
	[StateOrProvince] [nvarchar](50) NULL,
	[County] [nvarchar](50) NULL,
	[Country] [nvarchar](50) NULL,
	[PostOfficeBox] [nvarchar](20) NULL,
	[PostalCode] [nvarchar](20) NULL,
	[UTCOffset] [int] NULL,
	[FreightTermsCode] [int] NULL,
	[UPSZone] [nvarchar](4) NULL,
	[Latitude] [float] NULL,
	[Telephone1] [nvarchar](50) NULL,
	[Longitude] [float] NULL,
	[ShippingMethodCode] [int] NULL,
	[Telephone2] [nvarchar](50) NULL,
	[Telephone3] [nvarchar](50) NULL,
	[Fax] [nvarchar](50) NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [Set_To_Zero108]  DEFAULT ((0)),
	[TimeZoneRuleVersionNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_CustomerAddress] PRIMARY KEY CLUSTERED 
(
	[CustomerAddressId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_CustomerAddressBase] UNIQUE NONCLUSTERED 
(
	[ParentId] ASC,
	[AddressNumber] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  StoredProcedure [dbo].[p_RollupByContact]    Script Date: 04/11/2008 06:35:28 ******/
SET ANSI_NULLS OFF



Create Proc [dbo].[p_RollupByContact]
	@ContactId	uniqueidentifier,
	@Extended bit,
	@ActivityRollup bit
As
Begin
	Set NOCOUNT ON

	-- Create temporary table to store a list of id's
	-- Create Table #RollupIds (PartyId uniqueidentifier PRIMARY KEY)
	-- table must be created outside sproc

	insert into #RollupIds (RollupId) Values (@ContactId)
	
	insert into #RollupIds (RollupId) 
	(
		select distinct ContactId 
		from ContactBase (NOLOCK)
		where ParentContactId = @ContactId
	)

	-- Extended rollup
	-- * ContactInvoices
	-- * ContactQuotes
	-- * ContactOrders
	-- * CustomerOpportunityRole

	if (@Extended <> 0)
	begin
		insert into #RollupIds(RollupId)
		(
			select distinct q.QuoteId 
			from QuoteBase as q (NOLOCK)
			join ContactQuotes as cq (NOLOCK) on
			(
				q.QuoteId = cq.QuoteId
			)
			where 
				exists (
					select RollupId from #RollupIds where cq.ContactId = RollupId
				)
				and 
				not exists(
					select RollupId from #RollupIds where q.QuoteId = RollupId
				)
		)

		insert into #RollupIds(RollupId)
		(
			select distinct i.InvoiceId 
			from InvoiceBase as i (NOLOCK)
			join ContactInvoices as ci (NOLOCK) on
			(
				i.InvoiceId = ci.InvoiceId
			)
			where 
				exists (
					select RollupId from #RollupIds where ci.ContactId = RollupId
				)
				and 
				not exists(
					select RollupId from #RollupIds where i.InvoiceId = RollupId
				)
		)
		
		insert into #RollupIds(RollupId)
		(
			select distinct s.SalesOrderId
			from SalesOrderBase as s (NOLOCK) 
			join ContactOrders as co (NOLOCK) on
			(
				s.SalesOrderId = co.SalesOrderId
			)
			where
				exists (
					select RollupId from #RollupIds where co.ContactId = RollupId
				)
				and
				not exists(
					select RollupId from #RollupIds where s.SalesOrderId = RollupId
				)
		)
		
		-- Opportunities from CustomerOpportunityRole 
		insert into #RollupIds(RollupId)
		(
			select distinct cor.OpportunityId
			from CustomerOpportunityRoleBase as cor (NOLOCK)
			join #RollupIds ri on
			(
				cor.CustomerId = ri.RollupId
			)
			where
			not exists(
					select RollupId from #RollupIds where cor.OpportunityId = RollupId
				)
		)		
	end -- @Extended

	-- Contracts
	if (@Extended <> 0)
	begin
		insert into #RollupIds(RollupId)
		(
			select distinct c.ContractId
			from ContractBase as c (NOLOCK)
			join #RollupIds ri on 
			(
				c.BillingContactId = ri.RollupId
			)
			where
			not exists(
					select RollupId from #RollupIds where c.ContractId = RollupId
				)
		)
	end
	insert into #RollupIds(RollupId)
	(
		select distinct c.ContractId
		from ContractBase as c (NOLOCK)
		join #RollupIds ri on 
		(
			c.ContactId = ri.RollupId
		)
		where
		not exists(
				select RollupId from #RollupIds where c.ContractId = RollupId
			)
	)

	if (@ActivityRollup <> 0)
	begin
		insert into #RollupIds(RollupId)
		(
			select distinct i.IncidentId
			from IncidentBase as i (NOLOCK) 
			join #RollupIds ri on
			(
				i.ContactId = ri.RollupId
			)
			where
			not exists(
					select RollupId from #RollupIds where i.IncidentId = RollupId
				)
		)
	end

	insert into #RollupIds(RollupId)
	(
		select distinct o.OpportunityId
		from OpportunityBase as o (NOLOCK)
		join #RollupIds ri on
		(
			o.ContactId = ri.RollupId
		)
		where
		not exists(
				select RollupId from #RollupIds where o.OpportunityId = RollupId
			)
	)

	if (@Extended <> 0)
	begin
		-- Account/Contact from CustomerOpportunityRole 
		insert into #RollupIds(RollupId)
		(
			select distinct cor.CustomerId
			from CustomerOpportunityRoleBase as cor (NOLOCK)
			join #RollupIds ri on
			(
				cor.OpportunityId = ri.RollupId
			)
			where
			not exists(
					select RollupId from #RollupIds where cor.CustomerId = RollupId
				)
		)
	end

	insert into #RollupIds(RollupId)
	(
		select distinct q.QuoteId
		from QuoteBase as q (NOLOCK) 
		join #RollupIds ri on
		(
			q.ContactId = ri.RollupId
		)
		where
		not exists(
				select RollupId from #RollupIds where q.QuoteId = RollupId
			)
	)

	insert into #RollupIds(RollupId)
	(
		select distinct so.SalesOrderId
		from SalesOrderBase as so (NOLOCK) 
		join #RollupIds ri on
		(
			so.ContactId = ri.RollupId
		)
		where
		not exists(
				select RollupId from #RollupIds where so.SalesOrderId = RollupId
			)
	)

	insert into #RollupIds(RollupId)
	(
		select distinct i.InvoiceId
		from InvoiceBase as i (NOLOCK) 
		join #RollupIds ri on
		(
			i.ContactId = ri.RollupId
		)
		where
		not exists(
				select RollupId from #RollupIds where i.InvoiceId = RollupId
			)
	)

	insert into #RollupIds(RollupId)
	(
		select distinct contact.OriginatingLeadId
		from ContactBase as contact (NOLOCK) 
		join #RollupIds as ri on
		(
			contact.ContactId = ri.RollupId
		)
		where contact.OriginatingLeadId is not null
		and
		not exists(
				select RollupId from #RollupIds where contact.OriginatingLeadId = RollupId
			)
		
	)

	if (@ActivityRollup <> 0)
	begin
		insert into #RollupIds(RollupId)
		(
			select distinct opportunity.OriginatingLeadId
			from OpportunityBase as opportunity (NOLOCK) 
			join #RollupIds as ri on
			(
				opportunity.OpportunityId = ri.RollupId
			)
			where opportunity.OriginatingLeadId is not null
			and not exists(
				select RollupId from #RollupIds where RollupId = opportunity.OriginatingLeadId)
		)	

		insert into #RollupIds(RollupId)
		(
			select distinct activityparty.ActivityId
			from ActivityPartyBase as activityparty (NOLOCK) 
			join #RollupIds as ri on
			(
				activityparty.PartyId = ri.RollupId
			)
			where 
				not exists(
						select RollupId from #RollupIds where activityparty.ActivityId = RollupId
					)
		
		)
	end
End

/****** Object:  StoredProcedure [dbo].[p_RollupByOpportunity]    Script Date: 04/11/2008 06:35:29 ******/
SET ANSI_NULLS OFF



Create Proc [dbo].[p_RollupByOpportunity]
	@OpportunityId	uniqueidentifier,
	@Extended bit,
	@ActivityRollup bit
As
Begin
	Set NOCOUNT ON

	-- Create temporary table to store a list of id's
	-- Create Table #RollupIds (RollupId uniqueidentifier PRIMARY KEY)
	-- table must be created outside sproc

	Insert Into #RollupIds (RollupId) Values (@OpportunityId)

	Insert Into #RollupIds (RollupId)
	(Select lead.LeadId
	 From LeadBase as lead (NOLOCK), OpportunityBase as opportunity (NOLOCK)
	 where lead.LeadId = opportunity.OriginatingLeadId
	 and opportunity.OpportunityId = @OpportunityId
	 )

	-- Add Related Quotes of Opportunity
	Insert Into #RollupIds (RollupId)
	(
		Select distinct q.QuoteId
		From QuoteBase as q (NOLOCK)
		join #RollupIds ri on
		(
			q.OpportunityId = ri.RollupId
		)
		where
			not exists(
				select RollupId from #RollupIds where q.QuoteId = RollupId
			)
	)
	
	-- Add Related Orders of opportunity and above quotes
	Insert Into #RollupIds (RollupId)
	(
		Select distinct ord.SalesOrderId
		From SalesOrderBase as ord (NOLOCK)
		join #RollupIds ri on
		(
			ord.OpportunityId = ri.RollupId
		)
		where
			not exists(
				select RollupId from #RollupIds where ord.SalesOrderId = RollupId
			)
	 )
	
	Insert Into #RollupIds (RollupId)
	(
		Select distinct ord.SalesOrderId
		From SalesOrderBase as ord (NOLOCK)
		join #RollupIds ri on
		(
			ord.QuoteId = ri.RollupId
		)
		where
			not exists(
				select RollupId from #RollupIds where ord.SalesOrderId = RollupId
			)
	 )

	-- Add Related Invoices of opportunity and above Orders
	Insert Into #RollupIds (RollupId)
	(
		Select distinct inv.InvoiceId
		From InvoiceBase as inv (NOLOCK)
 		join #RollupIds ri on
		(
			inv.OpportunityId = ri.RollupId
		)
		where
			not exists(
				select RollupId from #RollupIds where inv.InvoiceId = RollupId
			)
	 )
	 
	Insert Into #RollupIds (RollupId)
	(
		Select distinct inv.InvoiceId
		From InvoiceBase as inv (NOLOCK)
 		join #RollupIds ri on
		(
			inv.SalesOrderId = ri.RollupId
		)
		where
			not exists(
				select RollupId from #RollupIds where inv.InvoiceId = RollupId
			)
	 )

	
	if (@ActivityRollup <> 0)
	begin
	 	insert into #RollupIds(RollupId)
		(
			select distinct activityparty.ActivityId
			from ActivityPartyBase as activityparty (NOLOCK) 
			join #RollupIds as ri on
			(
				activityparty.PartyId = ri.RollupId
			)
			where
				not exists(
						select RollupId from #RollupIds where activityparty.ActivityId = RollupId
					)
		
		)
	end

End

/****** Object:  Table [dbo].[WFProcess]    Script Date: 04/11/2008 06:55:20 ******/




CREATE TABLE [dbo].[WFProcess](
	[ProcessId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DeletionStateCode] [int] NULL,
	[EventTypeCode] [int] NOT NULL,
	[BusinessUnitId] [uniqueidentifier] NOT NULL,
	[UserContext] [uniqueidentifier] NULL,
	[Name] [nvarchar](200) NULL,
	[ProcessTypeCode] [int] NOT NULL,
	[ProcessTypeVersion] [int] NULL,
	[EntityType] [int] NOT NULL,
	[StateCode] [int] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ClonedProcessId] [uniqueidentifier] NULL,
	[Description] [nvarchar](max) NULL,
	[Priority] [int] NULL,
	[ProcessCode] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_WFProcess] PRIMARY KEY CLUSTERED 
(
	[ProcessId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[WFProcessInstance]    Script Date: 04/11/2008 06:55:26 ******/




CREATE TABLE [dbo].[WFProcessInstance](
	[ProcessInstanceId] [uniqueidentifier] NOT NULL,
	[StartedBy] [uniqueidentifier] NULL,
	[BusinessUnitId] [uniqueidentifier] NULL,
	[UserContext] [uniqueidentifier] NOT NULL,
	[ProcessId] [uniqueidentifier] NULL,
	[StateCode] [int] NULL,
	[ObjectType] [int] NULL,
	[ObjectId] [uniqueidentifier] NULL,
	[StartedOn] [datetime] NOT NULL,
	[LastActivityOn] [datetime] NULL,
	[OwningMachine] [nvarchar](100) NULL,
	[ParentId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NULL,
	[StepCounter] [int] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_WFProcessInstance] PRIMARY KEY CLUSTERED 
(
	[ProcessInstanceId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_DeleteCalendar]    Script Date: 04/11/2008 06:35:03 ******/
SET ANSI_NULLS OFF



CREATE PROC [dbo].[p_DeleteCalendar] AS
BEGIN
        SET NOCOUNT ON
        
	-- FLAG: WHETHER TO BREAK OUT OF THE LOOP
	DECLARE @DoBreak AS bit

	-- ROLLUP THE CALENDARS FROM OTHER ENTITIES ALREADY COLLECTED:
	-- EQUIPMENT
	INSERT INTO #CascadeCollect SELECT c.CalendarId, 4003, NULL, 2 
		 FROM CalendarBase c, EquipmentBase e, #CascadeCollect tmp
		 WHERE c.CalendarId = e.CalendarId AND tmp.objectid = e.EquipmentId
		 AND tmp.objecttype = 4000 AND e.DeletionStateCode IN (0)
		 AND c.DeletionStateCode IN (0) AND c.IsShared = 0 AND tmp.processed = 2

	-- SERVICE
	INSERT INTO #CascadeCollect SELECT c.CalendarId, 4003, NULL, 2
		 FROM CalendarBase c, ServiceBase s, #CascadeCollect tmp
		 WHERE c.CalendarId = s.CalendarId AND tmp.objectid = s.ServiceId
		 AND tmp.objecttype = 4001 AND s.DeletionStateCode IN (0)
		 AND c.DeletionStateCode IN (0) AND c.IsShared = 0 AND tmp.processed = 2

    -- EXCLUDE ALL THE CALENDARS THAT ARE SHARED BY MULTIPLE PARTIES AND ONE THE PARTIES
    -- IS NOT IN THE ENTITIES ALREADY COLLECTED 
       -- 1. update the existing referencing entities (such as equipment) to be deleted;
    -- 2. mark the calendar records in temp table that are referenced by eneities that are not being deleted;
    -- 3. delete the calendar records in temp table that are marked
    SELECT TOP 1 objectid FROM #CascadeCollect WHERE objecttype = 4003 AND processed = 2
    IF(@@ROWCOUNT > 0)
    BEGIN
            -- EQUIPMENT
             UPDATE EquipmentBase SET DeletionStateCode = 2 FROM EquipmentBase e, #CascadeCollect t 
                WHERE e.EquipmentId = t.objectid AND t.objecttype = 4000
             UPDATE #CascadeCollect SET processed = 256 FROM #CascadeCollect t, EquipmentBase e 
                WHERE t.objecttype = 4003 AND t.objectid = e.CalendarId AND e.DeletionStateCode IN (0) 
             -- SERVICE
             UPDATE ServiceBase SET DeletionStateCode = 2 FROM ServiceBase s, #CascadeCollect t 
                WHERE s.ServiceId = t.objectid AND t.objecttype = 4001
             UPDATE #CascadeCollect SET processed = 256 FROM #CascadeCollect t, ServiceBase s 
                WHERE t.objecttype = 4003 AND t.objectid = s.CalendarId AND s.DeletionStateCode IN (0)
             -- CALENDARRULE
             UPDATE CalendarRuleBase SET DeletionStateCode = 2 FROM CalendarRuleBase r, #CascadeCollect t 
                WHERE r.CalendarRuleId = t.objectid AND t.objecttype = 4004
             UPDATE #CascadeCollect SET processed = 256 FROM #CascadeCollect t, CalendarRuleBase r 
                WHERE t.objecttype = 4003 AND t.objectid = r.InnerCalendarId AND r.DeletionStateCode in (0)
             -- SYSTEMUSER
             UPDATE #CascadeCollect SET processed = 256 FROM #CascadeCollect t, SystemUserBase u 
                WHERE t.objecttype = 4003 AND t.objectid = u.CalendarId
             -- ORGANIZATION
             UPDATE #CascadeCollect SET processed = 256 FROM #CascadeCollect t, OrganizationBase o 
                WHERE t.objecttype = 4003 AND t.objectid = o.BusinessClosureCalendarId
             
             DELETE FROM #CascadeCollect WHERE processed = 256
    END

	-- MAIN LOOP FOR CALENDAR->CALENDARRULE->CALENDAR DELETION 
    DECLARE @first_layer AS BIT
    SET @first_layer = 1
	WHILE (1=1)
	BEGIN
        SET @DoBreak = 0
		-- DELETE ALL THE CALENDARS BY SETTING THE DELETION STATE CODE TO 2
		UPDATE CalendarBase SET DeletionStateCode = 2 FROM CalendarBase c, #CascadeCollect tmp 
			 WHERE c.CalendarId = tmp.objectid AND tmp.processed = 2 
			 AND tmp.objecttype = 4003 AND c.DeletionStateCode IN (0)

		-- IF THERE IS NONE OF THE CALENDARS COLLECTED, THEN WE ARE DONE
		IF(@@ROWCOUNT = 0 AND @first_layer <> 1) BREAK
				
		-- ROLLUP THE CALENDARRULES FROM CALENDARS
		INSERT INTO #CascadeCollect
			 SELECT cr.CalendarRuleId, 4004, NULL, 2 
			 FROM CalendarRuleBase cr, #CascadeCollect tmp 
			 WHERE cr.CalendarId = tmp.objectid AND tmp.objecttype = 4003
			 AND tmp.processed = 2 AND cr.DeletionStateCode IN (0)

		IF(@@ROWCOUNT = 0 AND @first_layer <> 1) SET @DoBreak = 1

		-- UPDATE THE TEMP TABLE TO SET THE PROCESSED FLAG OF CALENDARS TO BE DELETED
		UPDATE #CascadeCollect SET processed = 8 WHERE objecttype = 4003 AND processed = 2

		IF(@DoBreak = 1) BREAK

		-- DELETE ALL THE CALENDARRULES BY SETTING THE DELETION STATE CODE TO 2
		UPDATE CalendarRuleBase SET DeletionStateCode = 2 FROM 
			 CalendarRuleBase cr, #CascadeCollect tmp
			 WHERE cr.CalendarRuleId = tmp.objectid AND tmp.processed = 2 
			 AND tmp.objecttype = 4004 AND cr.DeletionStateCode IN (0)

		-- ROLLUP THE CALENDARS FROM CALENDARRULES
		INSERT INTO #CascadeCollect
			 SELECT c.CalendarId, 4003, NULL, 2 
			 FROM CalendarRuleBase cr, Calendar c, #CascadeCollect tmp 
			 WHERE cr.CalendarRuleId = tmp.objectid AND tmp.objecttype = 4004 AND tmp.processed = 2 
			 AND cr.InnerCalendarId = c.CalendarId AND c.DeletionStateCode IN (0)
			 AND c.IsShared = 0

		IF(@@ROWCOUNT = 0 AND @first_layer <> 1) SET @DoBreak = 1
			
		-- UPDATE THE TEMP TABLE TO SET THE PROCESSED FLAG OF CALENDARRULES TO BE DELETED
		UPDATE #CascadeCollect SET processed = 8 WHERE objecttype = 4004 AND processed = 2

		IF(@DoBreak = 1) BREAK
        SET @first_layer = 0
	END

	-- ROLLUP ALL THE NOTES FOR BOTH CALENDAR AND CALENDARRULE
	UPDATE AnnotationBase SET DeletionStateCode = 2 
		 FROM AnnotationBase n, #CascadeCollect tmp
		 WHERE n.ObjectId = tmp.objectid AND n.ObjectTypeCode = tmp.objecttype AND n.ObjectTypeCode = 4003
END

/****** Object:  Synonym [dbo].[EntityRelationship]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[EntityRelationship] FOR [MetadataSchema].[EntityRelationship]

/****** Object:  Table [dbo].[SiteBase]    Script Date: 04/11/2008 06:52:25 ******/




CREATE TABLE [dbo].[SiteBase](
	[VersionNumber] [timestamp] NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[EMailAddress] [nvarchar](100) NULL,
	[Name] [nvarchar](160) NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[SiteId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[TimeZoneCode] [int] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_Site] PRIMARY KEY CLUSTERED 
(
	[SiteId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[EntityRelationshipIds]    Script Date: 04/11/2008 06:41:30 ******/




CREATE TABLE [dbo].[EntityRelationshipIds](
	[EntityRelationshipId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [XPKEntityRelationshipIds] PRIMARY KEY CLUSTERED 
(
	[EntityRelationshipId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[OrganizationStatisticBase]    Script Date: 04/11/2008 06:46:35 ******/




CREATE TABLE [dbo].[OrganizationStatisticBase](
	[Hour] [int] NULL,
	[StatisticType] [int] NULL,
	[OrganizationStatisticId] [uniqueidentifier] NOT NULL,
	[ServerName] [nvarchar](256) NULL,
	[StatisticValue] [int] NULL,
 CONSTRAINT [PK_OrganizationStatisticBase] PRIMARY KEY CLUSTERED 
(
	[OrganizationStatisticId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[Subscription]    Script Date: 04/11/2008 06:52:40 ******/




CREATE TABLE [dbo].[Subscription](
	[SubscriptionId] [uniqueidentifier] NOT NULL,
	[SystemUserId] [uniqueidentifier] NOT NULL,
	[MachineName] [nvarchar](200) NULL,
	[LastSyncStartedOn] [datetime] NULL,
	[SyncEntryTableName] [nvarchar](128) NOT NULL,
	[SubscriptionType] [int] NULL,
	[CompletedSyncStartedOn] [datetime] NULL,
	[ReInitialize] [bit] NOT NULL CONSTRAINT [DF_Subscription_ReInitialize]  DEFAULT ((0)),
	[UTCConversionTimeZoneCode] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[CompletedSyncVersionNumber] [bigint] NULL,
 CONSTRAINT [cndx_PrimaryKey_Subscription] PRIMARY KEY CLUSTERED 
(
	[SubscriptionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [MetadataSchema].[StoredProcedureCatalog]    Script Date: 04/11/2008 06:57:14 ******/
SET ANSI_NULLS OFF



CREATE TABLE [MetadataSchema].[StoredProcedureCatalog](
	[StoredProcedureId] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[DatabaseName] [nvarchar](255) NOT NULL,
	[TargetMask] [int] NULL,
	[Description] [ntext] NULL,
 CONSTRAINT [XPKStoredProcedureCatalog] PRIMARY KEY CLUSTERED 
(
	[StoredProcedureId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
)  TEXTIMAGE_

/****** Object:  Table [dbo].[EquipmentExtensionBase]    Script Date: 04/11/2008 06:41:38 ******/




CREATE TABLE [dbo].[EquipmentExtensionBase](
	[EquipmentId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_EquipmentExtensionBase] PRIMARY KEY CLUSTERED 
(
	[EquipmentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[InterProcessLockBase]    Script Date: 04/11/2008 06:42:56 ******/




CREATE TABLE [dbo].[InterProcessLockBase](
	[InterProcessLockId] [uniqueidentifier] NOT NULL,
	[Token] [uniqueidentifier] NOT NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_InterProcessLock] PRIMARY KEY CLUSTERED 
(
	[InterProcessLockId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_UpdateSubscriptionsForHardDeletedEntitiesWithDsc]    Script Date: 04/11/2008 06:35:30 ******/
SET ANSI_NULLS OFF



--
-- This stored procedure will update all subscriptions for all users. 
-- Replicated entities which have DeletionStateCode attribute will be evalueted.
-- Instances of entities with DeletionStateCode=2 (harddelete) will be set for deletion (set SyncState=2) in subscription SyncEntry* table.
--  
create procedure [dbo].[p_UpdateSubscriptionsForHardDeletedEntitiesWithDsc] as
begin

set NOCOUNT ON

declare @RowCount int
-- Don't lock Subscription table by cursor, read once SyncEntry_Guid table names
create table #TempSyncEntries(
	SyncEntryTableName sysname not null,
	SubscriptionType int not null
	)
-- populate for all subscriptions
insert #TempSyncEntries
	select SyncEntryTableName, SubscriptionType from Subscription with (NOLOCK)
		where   ReInitialize = 0	 -- Reinitalized subscriptions will be fully evalueted
			and CompletedSyncVersionNumber is not null -- subscription is not empty
select @RowCount = @@rowcount
--print 'Found ' + cast(@RowCount as nvarchar(35)) + ' subcriptions to update' -- debug

if (@RowCount = 0)
begin
	-- No subscriptions was found: exit
	drop table #TempSyncEntries
--	print 'No subscription was found' -- debug
	return
end

-- Populate table for Entities with DeletionStateCode
create table #TempEntityWithDsc(
	BaseTableName  sysname not null, 
	ObjectTypeCode int not null,
	PrimaryKeyName sysname not null
)
insert #TempEntityWithDsc
	select e.Name, -- use view, activities have DSC in activityPointer
		e.ObjectTypeCode, a.PhysicalName from Entity e -- 54 entities
		join Attribute a on a.EntityId = e.EntityId
		where e.HasDeletionStateCode = 1
			and e.IsReplicated = 1  
			and e.IsLogicalEntity = 0
			-- use RowGuidAttribute instead of PKAttribute for ShareableAcrossOrgs entity
			and ( (e.IsShareableAcrossOrgs=0 and a.IsPKAttribute = 1) or
				  (e.IsShareableAcrossOrgs=1 and a.IsRowGuidAttribute = 1) 	
				)
		order by e.Name
--print ' Found ' + cast(@@rowcount as nvarchar(35)) + ' replicated entities with DeletionStateCode' -- debug

declare @SyncTableName sysname
declare @SubscriptionType int
declare @EntityTableName sysname
declare @ObjectTypeCode int
declare @ObjectTypeCodeString nvarchar(35)
declare @EntityPrimaryKeyName sysname
declare @sql nvarchar(2048)
declare @RowCountToBeDeleted int
-- Init @RowCountToBeDeleted 
select @RowCountToBeDeleted = 0
 
create table #TempEntityObjectIds(
	ObjectId uniqueidentifier NOT NULL,
	ObjectTypeCode int NOT NULL,
	PRIMARY KEY (ObjectTypeCode, ObjectId) 
)
create statistics stats_entityids on #TempEntityObjectIds(ObjectTypeCode, ObjectId)

-- Special logic is implemented for activities deletion by platform.
-- Activities have DeletionStateCode in ActivityPointerTable (ObjectTypeCode=4200).
-- Activity table row is physically deleted and ActivityPointerTable.DeletionStateCode set to 2.
-- Exception: CampaignActivity which has its physical DeletionStateCode.
create table #TempActivitiesObjectTypeCodes(
	ObjectTypeCode int NOT NULL,
	PRIMARY KEY (ObjectTypeCode) 
)
-- Populate ActivitiesObjectTypeCodes 
insert #TempActivitiesObjectTypeCodes 
	select e.ObjectTypeCode from Entity e
		join Attribute a on a.EntityId = e.EntityId
		where e.IsActivity=1
			and a.Name = 'deletionstatecode'
			and a.IsLogical = 1
		order by e.ObjectTypeCode

-- Cursor for Entities with DeletionStateCode
declare BaseTableCursor cursor FAST_FORWARD for 
	select BaseTableName, ObjectTypeCode, PrimaryKeyName  from #TempEntityWithDsc

open BaseTableCursor 
fetch BaseTableCursor into @EntityTableName, @ObjectTypeCode, @EntityPrimaryKeyName

-- Populate #TempEntityObjectIds from base tables with DeletionStateCode = 2.
-- In most cases should not be a lot deleted entities. 
while @@fetch_status = 0
begin
	select @ObjectTypeCodeString = cast(@ObjectTypeCode as nvarchar(35))
--	print 'Process ' + @EntityTableName + ' ObjectTypeCode=' + @ObjectTypeCodeString + ' @EntityPrimaryKeyName=' +@EntityPrimaryKeyName  -- debug
	select @sql = 'insert #TempEntityObjectIds select ' + @EntityPrimaryKeyName + ', ' + @ObjectTypeCodeString + 
					+ ' from ' +  @EntityTableName + ' with (NOLOCK) where DeletionStateCode = 2'
	exec sp_executesql @sql
	select @RowCountToBeDeleted = @@rowcount + @RowCountToBeDeleted 

	fetch BaseTableCursor into @EntityTableName, @ObjectTypeCode, @EntityPrimaryKeyName
end

close BaseTableCursor 
deallocate BaseTableCursor 

--print '		@RowCountToBeDeleted=' + cast(@RowCountToBeDeleted as nvarchar(35)) + ' for all entities with DeletionStateCode' -- debug

if (@RowCountToBeDeleted > 0)
begin
	-- Update all subscriptions once for all collected entities with DeletionStateCode=2
	declare SyncEntryTableCursor cursor FAST_FORWARD for 
		select SyncEntryTableName, SubscriptionType from #TempSyncEntries

	-- cursor on #TempSyncEntries for current entity
	open SyncEntryTableCursor
	fetch SyncEntryTableCursor into @SyncTableName, @SubscriptionType

	while @@fetch_status = 0
	begin
		-- Check SyncEntry* table exists (subscription can be deleted)
		select @sql = 'if (exists (select name from sys.objects where name = ''' + @SyncTableName +''' and type = ''U'') )' +
			'update syncentry with (ROWLOCK) set SyncState=2 from ' + @SyncTableName + 
			' syncentry where syncentry.ObjectId in (select ObjectId from #TempEntityObjectIds where ObjectTypeCode = syncentry.ObjectTypeCode)'
		exec sp_executesql @sql
		
		if (@SubscriptionType = 0 or @SubscriptionType = 1) -- ABP subscription doesnot have activites
		begin
			select @sql = 'if (exists (select name from sys.objects where name = ''' + @SyncTableName +''' and type = ''U'') )' +
				'update ' + @SyncTableName + 
				' with (ROWLOCK) set SyncState=2 where ObjectTypeCode in (select ObjectTypeCode from #TempActivitiesObjectTypeCodes) and ObjectId in (select ObjectId from #TempEntityObjectIds where ObjectTypeCode=4200)'
			exec sp_executesql @sql
		end

		fetch SyncEntryTableCursor into @SyncTableName, @SubscriptionType
	end

	close SyncEntryTableCursor
	deallocate SyncEntryTableCursor
end	-- @RowCountToBeDeleted > 0

-- Clean up
drop table #TempEntityObjectIds

drop table #TempEntityWithDsc
drop table #TempSyncEntries

end -- p_UpdateSubscriptionsForHardDeletedEntitiesWithDsc

/****** Object:  Table [dbo].[QuoteDetailExtensionBase]    Script Date: 04/11/2008 06:48:53 ******/




CREATE TABLE [dbo].[QuoteDetailExtensionBase](
	[QuoteDetailId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_QuoteDetailExtensionBase] PRIMARY KEY CLUSTERED 
(
	[QuoteDetailId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_UpdateSubscriptionsForHardDeletedEntitiesWithoutDsc]    Script Date: 04/11/2008 06:35:30 ******/
SET ANSI_NULLS OFF



--
-- This stored procedure will update offline subscriptions for all users (Outlook and ABP subscriptions don't have entities without DSC). 
-- Replicated entities without DeletionStateCode attribute will be evalueted.
-- Instances of entities which don't exist in db (were harddeleted) will be set for deletion (set SyncState=2) in subscription SyncEntry* table.
--  
create procedure [dbo].[p_UpdateSubscriptionsForHardDeletedEntitiesWithoutDsc] as
begin

set NOCOUNT ON
-- Don't lock Subscription table by cursor, read once SyncEntry_Guid table names
create table #TempSyncEntries(SyncEntryTableName sysname)
-- populate for all offline subscriptions
insert #TempSyncEntries
	select SyncEntryTableName from Subscription with (NOLOCK)
		where   SubscriptionType in (0,3)  -- 0 is Offline, 3 is DataMigrationWizard
			and ReInitialize = 0	 -- Reinitalized subscriptions will be fully evalueted
			and CompletedSyncVersionNumber is not null -- subscription is not empty

if (@@rowcount = 0)
begin
	-- No subscriptions was found: exit
	drop table #TempSyncEntries
--	print 'No subscription was found' -- debug
	return
end

-- Populate table for Entities without DeletionStateCode
create table #TempEntityWithoutDsc(
	BaseTableName  sysname, 
	ObjectTypeCode nvarchar(35),
	PrimaryKeyName sysname
)
insert #TempEntityWithoutDsc
	select e.BaseTableName, cast(e.ObjectTypeCode as nvarchar(35)), a.PhysicalName from Entity e -- 54 entities
		join Attribute a on a.EntityId = e.EntityId
		where e.HasDeletionStateCode = 0
			and e.IsReplicated = 1  
			and e.IsLogicalEntity = 0
			-- use RowGuidAttribute istead of PKAttribute for ShareableAcrossOrgs entity
			and ( (e.IsShareableAcrossOrgs=0 and a.IsPKAttribute = 1) or
				  (e.IsShareableAcrossOrgs=1 and a.IsRowGuidAttribute = 1) 	
				)
		order by e.Name
--print ' Found ' + cast(@@rowcount as nvarchar(35)) + ' replicated entities without DeletionStateCode' -- debug

declare @SyncTableName sysname
declare @EntityTableName sysname
declare @ObjectTypeCode nvarchar(35)
declare @EntityPrimaryKeyName sysname
declare @sql nvarchar(2048)
declare @RowCountExist int
declare @RowCount int

-- NOTE: adding PK and stats slow down population by ~10%
create table #TempEntityObjectIds(ObjectId uniqueidentifier)
create table #TempDeletedIds(ObjectId uniqueidentifier)

-- Cursor for Entities without DeletionStateCode
declare BaseTableCursor cursor FAST_FORWARD for 
	select BaseTableName, ObjectTypeCode, PrimaryKeyName  from #TempEntityWithoutDsc

open BaseTableCursor 
fetch BaseTableCursor into @EntityTableName, @ObjectTypeCode, @EntityPrimaryKeyName

while @@fetch_status = 0
begin
	-- populate #TempEntityObjectIds from base table
	truncate table #TempEntityObjectIds
--	print 'Process ' + @EntityTableName + ' ObjectTypeCode=' + @ObjectTypeCode + ' @EntityPrimaryKeyName=' +@EntityPrimaryKeyName  -- debug
	select @sql = 'insert #TempEntityObjectIds select ' + @EntityPrimaryKeyName 
					+ ' from ' +  @EntityTableName + ' with (NOLOCK)'
	exec sp_executesql @sql
	select @RowCountExist= @@rowcount
--		print '		@RowCountExist=' + cast(@RowCountExist as nvarchar(35)) + ' for ' + 	@EntityTableName -- debug

	-- It's possible all rows were deleted @RowCountExist==0
	declare SyncEntryTableCursor cursor FAST_FORWARD for 
		select SyncEntryTableName from #TempSyncEntries

	-- cursor on #TempSyncEntries for current entity without DSC
	open SyncEntryTableCursor
	fetch SyncEntryTableCursor into @SyncTableName

	while @@fetch_status = 0
	begin
		if (@RowCountExist > 0)
		begin		
			-- Check SyncEntry* table exists (subscription can be deleted)
			-- Except: find hard deleted entity Ids in SyncEntry table
			select @sql = 'if (exists (select name from sys.objects where name = ''' + @SyncTableName +''' and type = ''U'') )' +
				' insert #TempDeletedIds select ObjectId from ' + @SyncTableName +
				' with (NOLOCK) where ObjectTypeCode = ' + @ObjectTypeCode +
				' EXCEPT select ObjectId from #TempEntityObjectIds'

			exec sp_executesql @sql
			select @RowCount = @@rowcount

			if (@RowCount > 0)
			begin
--					print '			Found @RowCount=' + cast(@RowCount as nvarchar(35)) + ' hard deleted Ids for ' + @SyncTableName -- debug
				-- Check SyncEntry* table exists (subscription can be deleted)
				select @sql = 'if (exists (select name from sys.objects where name = ''' + @SyncTableName +''' and type = ''U'') )' +
					'update ' + @SyncTableName + ' with (ROWLOCK) set SyncState=2 where ObjectTypeCode = '
					+ @ObjectTypeCode + ' and ObjectId in (select ObjectId from #TempDeletedIds)'
				exec sp_executesql @sql
				-- make #TempDeletedIds empty for next usage
				truncate table #TempDeletedIds
			end
		end
		else -- @RowCountExist == 0, no instances of entity exist: set all synced instances for deletion.
		begin
			-- Update synctable for current entity ObjectTypeCode
			select @sql = 'if (exists (select name from sys.objects where name = ''' + @SyncTableName +''' and type = ''U'') )' +
				'update ' + @SyncTableName + ' with (ROWLOCK) set SyncState=2 where ObjectTypeCode = '
				+ @ObjectTypeCode
			exec sp_executesql @sql	
		end -- @RowCountExist > 0

		fetch SyncEntryTableCursor into @SyncTableName
	end

	close SyncEntryTableCursor
	deallocate SyncEntryTableCursor

	fetch BaseTableCursor into @EntityTableName, @ObjectTypeCode, @EntityPrimaryKeyName
end

close BaseTableCursor 
deallocate BaseTableCursor 

-- Clean up
drop table #TempDeletedIds
drop table #TempEntityObjectIds

drop table #TempEntityWithoutDsc
drop table #TempSyncEntries

end -- p_UpdateSubscriptionsForHardDeletedEntitiesWithoutDsc

/****** Object:  Table [dbo].[ReportVisibilityBase]    Script Date: 04/11/2008 06:49:26 ******/




CREATE TABLE [dbo].[ReportVisibilityBase](
	[ReportId] [uniqueidentifier] NOT NULL,
	[ReportVisibilityId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[ImportSequenceNumber] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[VisibilityCode] [int] NOT NULL CONSTRAINT [DF_ReportVisibilityBase_VisibilityCode]  DEFAULT ((1)),
	[ModifiedBy] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_ReportVisibility] PRIMARY KEY CLUSTERED 
(
	[ReportVisibilityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  UserDefinedFunction [dbo].[fn_RptBracket]    Script Date: 04/11/2008 06:57:31 ******/




CREATE  FUNCTION [dbo].[fn_RptBracket]
   (@MyDiff int, @NDays int )
RETURNS nvarchar(10)
AS
BEGIN
   if(@MyDiff >= 5*@NDays)
   begin
	RETURN ( Cast(5 * @NDays as nvarchar(5)) + N'+')
   end

   RETURN ( Cast(Floor(@MyDiff / @NDays) * @NDays as nvarchar(5)) + N' - ' + Cast(Floor(@MyDiff / @NDays + 1) * @NDays - 1 as nvarchar(5)))
END

/****** Object:  Table [dbo].[RoleTemplateBase]    Script Date: 04/11/2008 06:49:50 ******/




CREATE TABLE [dbo].[RoleTemplateBase](
	[RoleTemplateId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Upgrading] [bit] NOT NULL CONSTRAINT [DF_RoleTemplateBase_Upgrading]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_RoleTemplate] PRIMARY KEY CLUSTERED 
(
	[RoleTemplateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[CustomerAddressExtensionBase]    Script Date: 04/11/2008 06:40:25 ******/




CREATE TABLE [dbo].[CustomerAddressExtensionBase](
	[CustomerAddressId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_CustomerAddressExtensionBase] PRIMARY KEY CLUSTERED 
(
	[CustomerAddressId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  UserDefinedFunction [dbo].[fn_FirstDayOfMonth]    Script Date: 04/11/2008 06:57:27 ******/




----return first day of the month of the give day
create function [dbo].[fn_FirstDayOfMonth] ( 
  @Date         DATETIME,
  @Month	int
)
returns datetime
as
begin
  declare @Result datetime
  set @Result = dateadd( day, 1 - datepart( day, @Date ), @Date )
  if datepart( month, @Result ) <> datepart( month, @Date ) 
    set @Result = NULL
  set @Result = dateadd( mm, @Month - datepart(mm, @Result), @Result)
  return (convert(datetime, convert(nvarchar, @Result, 112)))
end

/****** Object:  Table [dbo].[TaskExtensionBase]    Script Date: 04/11/2008 06:53:18 ******/




CREATE TABLE [dbo].[TaskExtensionBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_TaskExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Synonym [dbo].[EntityRelationshipRelationships]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[EntityRelationshipRelationships] FOR [MetadataSchema].[EntityRelationshipRelationships]

/****** Object:  Table [dbo].[InvoiceExtensionBase]    Script Date: 04/11/2008 06:43:35 ******/




CREATE TABLE [dbo].[InvoiceExtensionBase](
	[InvoiceId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_InvoiceExtensionBase] PRIMARY KEY CLUSTERED 
(
	[InvoiceId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_SetDbCollation]    Script Date: 04/11/2008 06:35:29 ******/
SET ANSI_NULLS OFF



create procedure [dbo].[p_SetDbCollation](
	@dbName sysname,
	@target_collation sysname
) as
begin
set nocount on

Declare @sql nvarchar(512)
Declare @db_collation_name sysname
select @db_collation_name=collation_name from sys.databases where name = @dbName

if (@db_collation_name <> @target_collation)
Begin
    -- Drop constraints which depends on DB collation
    if exists(select * from sysobjects where xtype = 'C' and name = 'relationship_cascade_flag_values')
    begin
    -- constraints on allowed values of cascade link type
    ALTER TABLE MetadataSchema.Relationship
        DROP CONSTRAINT relationship_cascade_flag_values 
    end

    if exists(select * from sysobjects where xtype = 'C' and name = 'extra_condition_condition_op_values')
    begin
    ALTER TABLE MetadataSchema.RelationshipExtraCondition
          DROP CONSTRAINT extra_condition_condition_op_values 
    end

	Select @sql = N'ALTER DATABASE ' + @dbName + N' SET SINGLE_USER WITH ROLLBACK IMMEDIATE' 
	exec sp_executesql @sql

	Select @sql = N'ALTER DATABASE '+ @dbName + N' COLLATE '+ @target_collation
	exec sp_executesql @sql

    -- Restore constraints which depends on DB collation
    if not exists(select * from sysobjects where xtype = 'C' and name = 'relationship_cascade_flag_values')
    begin
    -- constraints on allowed values of cascade link type
    ALTER TABLE MetadataSchema.Relationship
        ADD CONSTRAINT relationship_cascade_flag_values CHECK 
        (
            ((CascadeDelete        IS NULL) OR (CascadeDelete        >=0 AND CascadeDelete        <4)) AND
            ((CascadeAssign        IS NULL) OR (CascadeAssign        >=0 AND CascadeAssign        <6)) AND
            ((CascadeShare         IS NULL) OR (CascadeShare         >=0 AND CascadeShare         <6)) AND
            ((CascadeUnShare       IS NULL) OR (CascadeUnShare       >=0 AND CascadeUnShare       <6)) AND
            ((CascadeMerge         IS NULL) OR (CascadeMerge         >=0 AND CascadeMerge         <4)) AND
            ((CascadeReparent      IS NULL) OR (CascadeReparent      >=0 AND CascadeReparent      <6))
        )
    end

    if not exists(select * from sysobjects where xtype = 'C' and name = 'extra_condition_condition_op_values')
    begin
    ALTER TABLE MetadataSchema.RelationshipExtraCondition
          ADD CONSTRAINT extra_condition_condition_op_values CHECK
          (ConditionOp >=0 AND ConditionOp <6)
    end

	Select @sql = N'ALTER DATABASE '+ @dbName + N' SET MULTI_USER' 
	exec sp_executesql @sql
End

end

/****** Object:  Table [dbo].[InternalAddressBase]    Script Date: 04/11/2008 06:42:55 ******/




CREATE TABLE [dbo].[InternalAddressBase](
	[ParentId] [uniqueidentifier] NOT NULL,
	[InternalAddressId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [Set_To_Zero113]  DEFAULT ((0)),
	[AddressNumber] [int] NULL,
	[ObjectTypeCode] [int] NOT NULL,
	[AddressTypeCode] [int] NULL,
	[Name] [nvarchar](200) NULL,
	[Line1] [nvarchar](50) NULL,
	[Line2] [nvarchar](50) NULL,
	[Line3] [nvarchar](50) NULL,
	[City] [nvarchar](50) NULL,
	[StateOrProvince] [nvarchar](50) NULL,
	[County] [nvarchar](50) NULL,
	[Country] [nvarchar](50) NULL,
	[PostOfficeBox] [nvarchar](20) NULL,
	[PostalCode] [nvarchar](20) NULL,
	[UTCOffset] [int] NULL,
	[UPSZone] [nvarchar](4) NULL,
	[Latitude] [float] NULL,
	[Telephone1] [nvarchar](50) NULL,
	[Longitude] [float] NULL,
	[ShippingMethodCode] [int] NULL,
	[Telephone2] [nvarchar](50) NULL,
	[Telephone3] [nvarchar](50) NULL,
	[VersionNumber] [timestamp] NULL,
	[Fax] [nvarchar](50) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_InternalAddress] PRIMARY KEY CLUSTERED 
(
	[InternalAddressId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_InternalAddressBase] UNIQUE NONCLUSTERED 
(
	[ParentId] ASC,
	[AddressNumber] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  StoredProcedure [dbo].[p_SetDbColumnCollation]    Script Date: 04/11/2008 06:35:29 ******/
SET ANSI_NULLS OFF



create procedure [dbo].[p_SetDbColumnCollation](
	@target_collation sysname
) as
begin
set nocount on

-- a table of 'constraint drop' commands
create table #keydrops 
(
	id int identity primary key,	-- orders the rows
	sql nvarchar(4000)				-- contains the command text
)
	
-- a table of 'constraint add' commands
-- (must be calculated before the constraints are dropped)
create table #keymakes
(
	id int identity primary key,	-- orders the rows
	sql nvarchar(4000),				-- contains the command text
	ord int							-- groups the commands 
)

-- a table of 'alter table alter column' commands
create table #tablechanges
(
	id int identity primary key,	-- orders the rows
	sql nvarchar(4000)				-- contains the command text
)

declare @sql nvarchar(4000)
declare @column nvarchar(131) -- 128+3
declare @i int

-- Step 1 generate drop and create index statements
declare @tablename sysname
declare @indexname sysname
declare @indid int
declare @is_unique_index nvarchar(16)
declare index_cursor cursor for 
select distinct sysobjects.name, sysobjects.uid, sysindexes.name, sysindexes.indid,
	case 
		when sysindexes.status & 2 = 2 then 'UNIQUE '
		else ''
	end
from sysindexes
	join sysindexkeys on (sysindexes.id = sysindexkeys.id
		 and sysindexes.indid = sysindexkeys.indid)
	join sysobjects	on (sysobjects.id = sysindexes.id)
	join syscolumns on (sysindexkeys.colid = syscolumns.colid and sysobjects.id = syscolumns.id)
	join systypes on (systypes.xtype = syscolumns.xtype and systypes.xtype = systypes.xusertype)
where
	sysobjects.xtype = 'U' 
	and INDEXPROPERTY(sysobjects.id, sysindexes.name, 'IsStatistics') = 0
	and sysindexes.name not in 
		(select name from sysobjects where xtype = 'PK' or xtype = 'F ' or xtype = 'UQ')
	and (systypes.name = 'nvarchar' or systypes.name = 'nchar') 
	and syscolumns.collation is not null
	and syscolumns.collation != @target_collation 

declare @tableschemaid int
declare @metadataSchemaId int
set @metadataSchemaId = CONVERT(int, OBJECTPROPERTYEX(OBJECT_ID(N'MetadataSchema.Attribute'),'SchemaId'))

open index_cursor
fetch next from index_cursor into @tablename, @tableschemaid, @indexname, @indid, @is_unique_index
while (@@fetch_status = 0)
begin
	if (@tableschemaid = @metadataSchemaId)
	begin
		set @tablename = N'MetadataSchema.' + @tablename
	end

	insert into #keydrops (sql) values('DROP INDEX ' + @tablename + '.' + @indexname)
	
	select @sql = N'CREATE ' + @is_unique_index + 'INDEX ' + @indexname + N' ON ' + @tablename + N'('

  	select @column = index_col(@tablename, @indid, 1)
	set @sql = @sql + @column

    select @i = 2
  	select @column = index_col(@tablename, @indid, @i)
    while (@column is not null)
    begin
		set @sql = @sql + ',' + @column
        select @i = @i + 1
    	select @column = index_col(@tablename, @indid, @i)
    end	   
	set @sql = @sql + N')'
	insert into #keymakes (sql, ord) values(@sql, 1)

    fetch next from index_cursor into @tablename, @tableschemaid, @indexname, @indid, @is_unique_index
end
close index_cursor
deallocate index_cursor

-- Step 2 generate pk drop and pk create statement
declare @pkname sysname
declare pk_cursor cursor for 
select distinct parent.name, sysobjects.name, sysindexes.indid
	from sysobjects 
	join sysobjects as parent on (parent.id = sysobjects.parent_obj)
	join sysindexes on (sysobjects.name = sysindexes.name)
	join sysindexkeys on (sysindexes.id = sysindexkeys.id
		 and sysindexes.indid = sysindexkeys.indid)
	join syscolumns on (sysindexkeys.colid = syscolumns.colid and parent.id = syscolumns.id)
	join systypes on (systypes.xtype = syscolumns.xtype and systypes.xtype = systypes.xusertype)
where 
	sysobjects.xtype = 'PK'
	and parent.xtype = 'U'	
	and (systypes.name = 'nvarchar' or systypes.name = 'nchar') 
	and syscolumns.collation is not null
	and syscolumns.collation != @target_collation 
open pk_cursor
fetch next from pk_cursor into @tablename, @pkname, @indid
while (@@fetch_status = 0)
begin
	insert into #keydrops (sql) values('ALTER TABLE ' + @tablename + ' DROP CONSTRAINT ' + @pkname)

	select @sql = N'ALTER TABLE ' + @tablename + N' ADD CONSTRAINT ' + @pkname + ' PRIMARY KEY('
  	select @column = index_col(@tablename, @indid, 1)
	set @sql = @sql + @column

    select @i = 2
  	select @column = index_col(@tablename, @indid, @i)
    while (@column is not null)
    begin
		set @sql = @sql + ',' + @column
        select @i = @i + 1
    	select @column = index_col(@tablename, @indid, @i)
    end	   
	set @sql = @sql + N')'
	insert into #keymakes (sql, ord) values(@sql, 2)

    fetch next from pk_cursor into @tablename, @pkname, @indid
end
close pk_cursor
deallocate pk_cursor

-- Step 3 generate UNIQUE CONSTRAINT drop and UNIQUE CONSTRAINT create statement
declare @ucname sysname
declare uc_cursor cursor for 
select distinct parent.name, sysobjects.name, sysindexes.indid
	from sysobjects 
	join sysobjects as parent on (parent.id = sysobjects.parent_obj)
	join sysindexes on (sysobjects.name = sysindexes.name)
	join sysindexkeys on (sysindexes.id = sysindexkeys.id
		 and sysindexes.indid = sysindexkeys.indid)
	join syscolumns on (sysindexkeys.colid = syscolumns.colid and parent.id = syscolumns.id)
	join systypes on (systypes.xtype = syscolumns.xtype and systypes.xtype = systypes.xusertype)
where 
	sysobjects.xtype = 'UQ'
	and (systypes.name = 'nvarchar' or systypes.name = 'nchar') 
	and syscolumns.collation is not null
	and syscolumns.collation != @target_collation 
open uc_cursor
fetch next from uc_cursor into @tablename, @ucname, @indid
while (@@fetch_status = 0)
begin
    insert into #keydrops (sql) values('ALTER TABLE ' + @tablename + ' DROP CONSTRAINT ' + @ucname)

    select @sql = N'ALTER TABLE ' + @tablename + ' ADD CONSTRAINT ' + @ucname + N' UNIQUE ('        

  	select @column = index_col(@tablename, @indid, 1)
	set @sql = @sql + @column

    select @i = 2
  	select @column = index_col(@tablename, @indid, @i)
    while (@column is not null)
    begin
		set @sql = @sql + ',' + @column
        select @i = @i + 1
    	select @column = index_col(@tablename, @indid, @i)
    end	   
	set @sql = @sql + N')'
	insert into #keymakes (sql, ord) values(@sql, 2)

    fetch next from uc_cursor into @tablename, @ucname, @indid
end
close uc_cursor
deallocate uc_cursor

-- Step 4: for every column in every table with a mismatched collation
-- issue an alter column command
insert into #tablechanges (sql)
	select 'ALTER TABLE ' +
		case
			when sysobjects.uid = @metadataSchemaId then 'MetadataSchema.' + sysobjects.name
			else sysobjects.name
		end
		+   ' ALTER COLUMN ' + syscolumns.name + 
		' ' + systypes.name + 
		case 
			when systypes.name = 'ntext' then ' COLLATE '
			else 
				case
					when systypes.name = 'nvarchar' and syscolumns.length = -1 then '(max) COLLATE '
					else '(' + cast(syscolumns.length/2 as nvarchar(50)) + ') COLLATE ' 
				end
		end
		 +  @target_collation +  	 
		case 
			when syscolumns.isnullable = 0 then ' NOT NULL'
			else ' NULL' 
		end	 
	from syscolumns 
		join sysobjects on (sysobjects.id = syscolumns.id)
		join systypes on (systypes.xtype = syscolumns.xtype and systypes.xtype = systypes.xusertype)
	where
		syscolumns.collation is not null
		and syscolumns.collation != @target_collation
		and sysobjects.type = 'U'
		and (systypes.name = 'nvarchar' or systypes.name = 'nchar' or systypes.name = 'ntext')
order by sysobjects.name, syscolumns.name

-- STEP 5: execute key drops
declare keydrops_cursor cursor for select sql from #keydrops order by id
open keydrops_cursor
fetch next from keydrops_cursor into @sql
while (@@fetch_status = 0)
begin
   print @sql
   exec (@sql)
   fetch next from keydrops_cursor into @sql
end
close keydrops_cursor
deallocate keydrops_cursor

-- STEP 6: execute table changes
declare tables_cursor cursor for select sql from #tablechanges order by id
open tables_cursor
fetch next from tables_cursor into @sql
while (@@fetch_status = 0)
begin
   print @sql
   exec (@sql)
   fetch next from tables_cursor into @sql
end
close tables_cursor
deallocate tables_cursor

-- STEP 7: execute key makes
declare keymakes_cursor cursor for select sql from #keymakes order by ord desc, id asc
open keymakes_cursor
fetch next from keymakes_cursor into @sql
while (@@fetch_status = 0)
begin
   print @sql
   exec (@sql)
   fetch next from keymakes_cursor into @sql
end
close keymakes_cursor
deallocate keymakes_cursor

drop table #keydrops
drop table #keymakes
drop table #tablechanges

end

/****** Object:  Table [dbo].[ContractExtensionBase]    Script Date: 04/11/2008 06:40:07 ******/




CREATE TABLE [dbo].[ContractExtensionBase](
	[ContractId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ContractExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ContractId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[EmailExtensionBase]    Script Date: 04/11/2008 06:41:23 ******/




CREATE TABLE [dbo].[EmailExtensionBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_EmailExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ClientUpdate]    Script Date: 04/11/2008 06:38:24 ******/




CREATE TABLE [dbo].[ClientUpdate](
	[ClientUpdateId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_ClientUpdate_ClientUpdateId]  DEFAULT (newid()),
	[Description] [nvarchar](512) NULL,
	[VersionNumber] [timestamp] NULL,
	[SqlScript] [nvarchar](max) NULL,
 CONSTRAINT [cndx_PrimaryKey_ClientUpdate] PRIMARY KEY CLUSTERED 
(
	[ClientUpdateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Synonym [dbo].[EntityRelationshipRole]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[EntityRelationshipRole] FOR [MetadataSchema].[EntityRelationshipRole]

/****** Object:  Table [dbo].[InvoiceDetailExtensionBase]    Script Date: 04/11/2008 06:43:34 ******/




CREATE TABLE [dbo].[InvoiceDetailExtensionBase](
	[InvoiceDetailId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_InvoiceDetailExtensionBase] PRIMARY KEY CLUSTERED 
(
	[InvoiceDetailId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[LetterExtensionBase]    Script Date: 04/11/2008 06:44:32 ******/




CREATE TABLE [dbo].[LetterExtensionBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_LetterExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[OpportunityProductExtensionBase]    Script Date: 04/11/2008 06:45:47 ******/




CREATE TABLE [dbo].[OpportunityProductExtensionBase](
	[OpportunityProductId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_OpportunityProductExtensionBase] PRIMARY KEY CLUSTERED 
(
	[OpportunityProductId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  UserDefinedFunction [dbo].[fn_AppendRoleBasedAccessCheck]    Script Date: 04/11/2008 06:57:18 ******/




create function [dbo].[fn_AppendRoleBasedAccessCheck](@ObjectTypeCode int, @EntityName nvarchar(300), @OwnershipTypeMask int) 
returns nvarchar(4000)
as
begin
		declare @result nvarchar(4000)
		declare @BusinessColumnName nvarchar(50)
		
		select @BusinessColumnName = case @OwnershipTypeMask when 1 then 'OwningBusinessUnit' else 'BusinessUnitId' end

		set @result = 'exists'
		set @result = @result + char(13) + char(10)
		set @result = @result + '('
		set @result = @result + char(13) + char(10)
 		set @result = @result + '	select '
 		set @result = @result + char(13) + char(10)
 		set @result = @result + '		1'
 		set @result = @result + char(13) + char(10)
		set @result = @result + '	where'
		set @result = @result + char(13) + char(10)
		set @result = @result + '	('
		set @result = @result + char(13) + char(10)
		set @result = @result + '		-- deep security'
		set @result = @result + char(13) + char(10)
		set @result = @result + '		((pdm.PrivilegeDepthMask & 0x44) != 0) and '
		set @result = @result + char(13) + char(10)
		set @result = @result + '		' + @EntityName + '.' + @BusinessColumnName + ' in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)'
		set @result = @result + char(13) + char(10)
		set @result = @result + '	) '
		set @result = @result + char(13) + char(10)
		set @result = @result + '	or'
		set @result = @result + char(13) + char(10)
		set @result = @result + '	('
		set @result = @result + char(13) + char(10)
		set @result = @result + '		-- global security'
		set @result = @result + char(13) + char(10)
		set @result = @result + '		((pdm.PrivilegeDepthMask & 0x88) != 0) and '
		set @result = @result + char(13) + char(10)
		set @result = @result + '		' + @EntityName + '.' + @BusinessColumnName + ' is not null '
		set @result = @result + char(13) + char(10)
		set @result = @result + '	) '
		set @result = @result + char(13) + char(10)
		set @result = @result + '	or'
		set @result = @result + char(13) + char(10)
		set @result = @result + '	('
		set @result = @result + char(13) + char(10)
		set @result = @result + '		-- local security'
		set @result = @result + char(13) + char(10)
		set @result = @result + '		((pdm.PrivilegeDepthMask & 0x22) != 0) and '
		set @result = @result + char(13) + char(10)
		set @result = @result + '		' + @EntityName + '.' + @BusinessColumnName + ' = u.BusinessUnitId'
		set @result = @result + char(13) + char(10)
		set @result = @result + '	)'
		set @result = @result + char(13) + char(10)
		set @result = @result + ')'
		set @result = @result + char(13) + char(10)
		
		return @result
end

/****** Object:  Table [dbo].[MatchCoded25d45cf60474c56b57c23b690f123cd]    Script Date: 04/11/2008 06:45:05 ******/




CREATE TABLE [dbo].[MatchCoded25d45cf60474c56b57c23b690f123cd](
	[ObjectId] [uniqueidentifier] NOT NULL,
	[MatchCode] [nvarchar](450) NULL,
	[ModifiedOn] [datetime] NULL
) 

/****** Object:  Table [dbo].[SalesOrderExtensionBase]    Script Date: 04/11/2008 06:50:50 ******/




CREATE TABLE [dbo].[SalesOrderExtensionBase](
	[SalesOrderId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_SalesOrderExtensionBase] PRIMARY KEY CLUSTERED 
(
	[SalesOrderId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  UserDefinedFunction [dbo].[fn_TranslateDateTime]    Script Date: 04/11/2008 06:57:31 ******/




create function [dbo].[fn_TranslateDateTime](@attrName nvarchar(300))
returns varchar(800)
as
begin
	declare @attrResult nvarchar(800)
	set @attrResult = 'dbo.fn_UTCToTzSpecificLocalTime(' + @attrName + ',' + CHAR(13) + CHAR(10) 
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneBias,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneDaylightBias,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneDaylightYear,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneDaylightMonth,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneDaylightDay,'+ CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneDaylightHour,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneDaylightMinute,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneDaylightSecond,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ '0,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneDaylightDayOfWeek,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneStandardBias,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneStandardYear,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneStandardMonth,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneStandardDay,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneStandardHour,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneStandardMinute,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneStandardSecond,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ '0,' + CHAR(13) + CHAR(10)
						+ CHAR(9)+ CHAR(9)+ CHAR(9)+ 'us.TimeZoneStandardDayOfWeek' + '), ' 
	return @attrResult
end

/****** Object:  Table [dbo].[MatchCodea6397b1bf7aa4da4a7e39d2cdda46373]    Script Date: 04/11/2008 06:45:03 ******/




CREATE TABLE [dbo].[MatchCodea6397b1bf7aa4da4a7e39d2cdda46373](
	[ObjectId] [uniqueidentifier] NOT NULL,
	[MatchCode] [nvarchar](450) NULL,
	[ModifiedOn] [datetime] NULL
) 

/****** Object:  Table [dbo].[MatchCodeb7377751db3742f6808776d781319baa]    Script Date: 04/11/2008 06:45:04 ******/




CREATE TABLE [dbo].[MatchCodeb7377751db3742f6808776d781319baa](
	[ObjectId] [uniqueidentifier] NOT NULL,
	[MatchCode] [nvarchar](450) NULL,
	[ModifiedOn] [datetime] NULL
) 

/****** Object:  Table [dbo].[IncidentExtensionBase]    Script Date: 04/11/2008 06:42:39 ******/




CREATE TABLE [dbo].[IncidentExtensionBase](
	[IncidentId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_IncidentExtensionBase] PRIMARY KEY CLUSTERED 
(
	[IncidentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SyncEntry_9047a6adc0c2dc11a0fc0003ffbb057d]    Script Date: 04/11/2008 06:52:51 ******/






CREATE TABLE [dbo].[SyncEntry_9047a6adc0c2dc11a0fc0003ffbb057d](
	[ObjectId] [uniqueidentifier] NOT NULL,
	[ObjectTypeCode] [int] NOT NULL,
	[SyncState] [int] NOT NULL,
	[VersionNumber] [binary](8) NOT NULL,
 CONSTRAINT [PK_SyncEntry_9047a6adc0c2dc11a0fc0003ffbb057d] PRIMARY KEY CLUSTERED 
(
	[ObjectId] ASC,
	[ObjectTypeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 



/****** Object:  UserDefinedFunction [dbo].[fn_GetNumberFormatString]    Script Date: 04/11/2008 06:57:30 ******/




create function [dbo].[fn_GetNumberFormatString](
	@Precision int,
	@NumberGroupFormat nvarchar(50),
	@NegativeFormatCode int,
	@IsCurrency bit,
	@CurrencySymbol nvarchar(10) = '',
	@CurrencyFormatCode int = 0
)
returns nvarchar(255)
as
begin
	declare @PositiveNumberFormat nvarchar(50)
	declare @NegativeNumberFormat nvarchar(50)
	declare @ZeroNumberFormat nvarchar(50)
	declare @PrecisionString nvarchar(6)

	declare @DecimalSymbol nvarchar(10)
	declare @NumberSeparator nvarchar(10)

	set @PrecisionString =
		case @Precision
			when 0 then N''
			when 1 then N'.0'
			when 2 then N'.00'
			when 3 then N'.000'
			when 4 then N'.0000'
			when 5 then N'.00000'
			else N''		-- default to zero precision
		end

	set @PositiveNumberFormat = 
		case @NumberGroupFormat
			when N'3,0' then N'##########,##0'  + @PrecisionString
			when N'3,2' then N'##,##,##,##,##,##0'  + @PrecisionString
			else N'###,###,###,##0' + @PrecisionString 
		end

	set @ZeroNumberFormat = N'0' + @PrecisionString

	if (@IsCurrency = 0)
		begin
			set @NegativeNumberFormat = 
				case @NegativeFormatCode
					when 0 then N'(' + @PositiveNumberFormat + N')'
					when 1 then N'-' + @PositiveNumberFormat
					when 2 then N'-' + char(160) + @PositiveNumberFormat
					when 3 then @PositiveNumberFormat + N'-'
					when 4 then @PositiveNumberFormat + char(160) + N'-'
					else N'(' + @PositiveNumberFormat + N')'
				end
		end
	else
		begin
			set @NegativeNumberFormat = 
				case @NegativeFormatCode
					when 0 then N'("' + @CurrencySymbol + N'"' + @PositiveNumberFormat + N')'
					when 1 then N'-"' + @CurrencySymbol + N'"' + @PositiveNumberFormat
					when 2 then N'"' + @CurrencySymbol + N'"-' + @PositiveNumberFormat
					when 3 then N'"' + @CurrencySymbol + N'"' + @PositiveNumberFormat + N'-'
					when 4 then N'(' + @PositiveNumberFormat + N'"' + @CurrencySymbol + N'")'
					when 5 then N'-' + @PositiveNumberFormat + N'"' + @CurrencySymbol + N'"'
					when 6 then @PositiveNumberFormat + N'-"' + @CurrencySymbol + N'"'
					when 7 then @PositiveNumberFormat + N'"' + @CurrencySymbol + N'"-'
					when 8 then N'-' + @PositiveNumberFormat + char(160) + N'"' + @CurrencySymbol + N'"'
					when 9 then N'-"' + @CurrencySymbol + N'"' + char(160) + @PositiveNumberFormat
					when 10 then @PositiveNumberFormat + char(160) + N'"' + @CurrencySymbol + N'"-'
					when 11 then N'"' + @CurrencySymbol + N'"' + char(160) + @PositiveNumberFormat + N'-'
					when 12 then N'"' + @CurrencySymbol + N'" -' + @PositiveNumberFormat
					when 13 then @PositiveNumberFormat + N'- "' + @CurrencySymbol + N'"'
					when 14 then N'("' + @CurrencySymbol + N'"' + char(160) + @PositiveNumberFormat + N')'
					when 15 then N'(' + @PositiveNumberFormat + char(160) + N'"' + @CurrencySymbol + N'")'
					else N'("' + @CurrencySymbol + N'"' + @PositiveNumberFormat + N')'
				end

			set @PositiveNumberFormat = 
				case @CurrencyFormatCode
					when 0 then N'"' + @CurrencySymbol + N'"' + @PositiveNumberFormat
					when 1 then @PositiveNumberFormat + N'"' + @CurrencySymbol + N'"'
					when 2 then N'"' + @CurrencySymbol + N'"' + char(160) + @PositiveNumberFormat
					when 3 then @PositiveNumberFormat + char(160) + N'"' + @CurrencySymbol + N'"'
					else N'"' + @CurrencySymbol + N'"' + @PositiveNumberFormat
				end

			set @ZeroNumberFormat = 
				case @CurrencyFormatCode
					when 0 then N'"' + @CurrencySymbol + N'"' + @ZeroNumberFormat
					when 1 then @ZeroNumberFormat + N'"' + @CurrencySymbol + N'"'
					when 2 then N'"' + @CurrencySymbol + N'"' + char(160) + @ZeroNumberFormat
					when 3 then @ZeroNumberFormat + char(160) + N'"' + @CurrencySymbol + N'"'
					else N'"' + @CurrencySymbol + N'"' + @ZeroNumberFormat
				end
		end

	return @PositiveNumberFormat + N';' + @NegativeNumberFormat + N';' + @ZeroNumberFormat
end

/****** Object:  UserDefinedFunction [dbo].[fn_TzSpecificLocalTimeToUTC]    Script Date: 04/11/2008 06:57:33 ******/




create function [dbo].[fn_TzSpecificLocalTimeToUTC](
	@LocalTime  datetime,
	@Bias int,
	@DaylightBias int,
	@DaylightYear int, 
	@DaylightMonth int,
	@DaylightDay int,
	@DaylightHour int,
	@DaylightMinute int,
	@DaylightSecond int,
	@DaylightMilliseconds int,
	@DaylightWeekday int,
	@StandardBias int,
	@StandardYear int, 
	@StandardMonth int,
	@StandardDay int,
	@StandardHour int,
	@StandardMinute int,
	@StandardSecond int,
	@StandardMilliseconds int,
	@StandardWeekday int )
returns datetime
as 
begin

    declare @TimeZoneBias int
    declare @NewTimeZoneBias int
    declare @LocalCustomBias int
    declare @StandardTime datetime
    declare @DaylightTime datetime
    declare @ComputedUniversalTime datetime
    declare @bDaylightTimeZone bit

--    //
--    // Get the new timezone bias
--    //

    set @NewTimeZoneBias = @Bias

--    //
--    // Now see if we have stored cutover times
--    //

    if ( @StandardMonth <> 0 and @DaylightMonth <>0 )
	begin

--        //
--        // We have timezone cutover information. Compute the
--        // cutover dates and compute what our current bias
--        // is
--        //

        set @StandardTime = dbo.fn_GetCutoverTime(	@LocalTime,
												@StandardYear, 
												@StandardMonth,
												@StandardDay,
												@StandardHour,
												@StandardMinute,
												@StandardSecond,
												@StandardMilliseconds,
												@StandardWeekday)

		if ( @StandardTime is NULL)
		begin
			return NULL --- raise error here
		end

        set @DaylightTime = dbo.fn_GetCutoverTime(	@LocalTime,
												@DaylightYear, 
												@DaylightMonth,
												@DaylightDay,
												@DaylightHour,
												@DaylightMinute,
												@DaylightSecond,
												@DaylightMilliseconds,
												@DaylightWeekday)

		if ( @DaylightTime is NULL)
		begin
			return NULL --- raise error here
		end


--        //
--        // If daylight < standard, then time >= daylight and
--        // less than standard is daylight
--        //

        if ( @DaylightTime < @StandardTime ) 
		begin

--            //
--            // If today is >= DaylightTime and < StandardTime, then
--            // We are in daylight savings time
--            //

            if ( ( @LocalTime >= @DaylightTime) and
                 ( @LocalTime <  @StandardTime) ) 
			begin
                set @bDaylightTimeZone = 1
            end
            else 
			begin
                set @bDaylightTimeZone = 0
            end
        end
        else 
		begin

--            //
--            // If today is >= StandardTime and < DaylightTime, then
--            // We are in standard time
--            //

            if ( (@LocalTime >= @StandardTime ) and
                 (@LocalTime <  @DaylightTime ) )
			begin
				set @bDaylightTimeZone = 0
			end
            else 
			begin
				set @bDaylightTimeZone = 1
            end
        end

--        //
--        // At this point, we know our current timezone and the
--        // local time of the next cutover.
--        //

		if ( @bDaylightTimeZone = 1)
		begin
	        set @LocalCustomBias = @DaylightBias
		end
		else
		begin
			set @LocalCustomBias = @StandardBias;
		end

        set @TimeZoneBias = @NewTimeZoneBias + @LocalCustomBias
    end
    else 
	begin
        set @TimeZoneBias = @NewTimeZoneBias
    end

    set @ComputedUniversalTime = DATEADD(mi, @TimeZoneBias, @LocalTime)

    return @ComputedUniversalTime
end

/****** Object:  Table [dbo].[SubscriptionStatistics_9047a6adc0c2dc11a0fc0003ffbb057d]    Script Date: 04/11/2008 06:52:44 ******/




CREATE TABLE [dbo].[SubscriptionStatistics_9047a6adc0c2dc11a0fc0003ffbb057d](
	[ObjectTypeCode] [int] NOT NULL,
	[FullSyncRequired] [bit] NOT NULL CONSTRAINT [DF_SubscriptionStatistics_FullSyncRequired_SubscriptionStatistics_9047a6adc0c2dc11a0fc0003ffbb057d]  DEFAULT ((1)),
 CONSTRAINT [PK_SubscriptionStatistics_ObjectTypeCode_SubscriptionStatistics_9047a6adc0c2dc11a0fc0003ffbb057d] PRIMARY KEY CLUSTERED 
(
	[ObjectTypeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[QuoteExtensionBase]    Script Date: 04/11/2008 06:48:54 ******/




CREATE TABLE [dbo].[QuoteExtensionBase](
	[QuoteId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_QuoteExtensionBase] PRIMARY KEY CLUSTERED 
(
	[QuoteId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[CampaignResponseExtensionBase]    Script Date: 04/11/2008 06:38:23 ******/




CREATE TABLE [dbo].[CampaignResponseExtensionBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_CampaignResponseExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  UserDefinedFunction [dbo].[fn_NTDayOfWeek]    Script Date: 04/11/2008 06:57:31 ******/




create function [dbo].[fn_NTDayOfWeek](@Date datetime)
returns int
as
begin
	return (DATEPART(dw, @Date) + @@DATEFIRST -1) % 7
	
end

/****** Object:  Table [dbo].[SyncEntry_70b6a5b9c0c2dc11a0fc0003ffbb057d]    Script Date: 04/11/2008 06:52:49 ******/






CREATE TABLE [dbo].[SyncEntry_70b6a5b9c0c2dc11a0fc0003ffbb057d](
	[ObjectId] [uniqueidentifier] NOT NULL,
	[ObjectTypeCode] [int] NOT NULL,
	[SyncState] [int] NOT NULL,
	[VersionNumber] [binary](8) NOT NULL,
 CONSTRAINT [PK_SyncEntry_70b6a5b9c0c2dc11a0fc0003ffbb057d] PRIMARY KEY CLUSTERED 
(
	[ObjectId] ASC,
	[ObjectTypeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 



/****** Object:  Table [dbo].[SalesOrderDetailExtensionBase]    Script Date: 04/11/2008 06:50:49 ******/




CREATE TABLE [dbo].[SalesOrderDetailExtensionBase](
	[SalesOrderDetailId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_SalesOrderDetailExtensionBase] PRIMARY KEY CLUSTERED 
(
	[SalesOrderDetailId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  UserDefinedFunction [dbo].[fn_UTCToTzSpecificLocalTime]    Script Date: 04/11/2008 06:57:34 ******/




create function [dbo].[fn_UTCToTzSpecificLocalTime](
	@UTCTime  datetime,
	@Bias int,
	@DaylightBias int,
	@DaylightYear int, 
	@DaylightMonth int,
	@DaylightDay int,
	@DaylightHour int,
	@DaylightMinute int,
	@DaylightSecond int,
	@DaylightMilliseconds int,
	@DaylightWeekday int,
	@StandardBias int,
	@StandardYear int, 
	@StandardMonth int,
	@StandardDay int,
	@StandardHour int,
	@StandardMinute int,
	@StandardSecond int,
	@StandardMilliseconds int,
	@StandardWeekday int )
returns datetime
as 
begin

    declare @TimeZoneBias int
    declare @NewTimeZoneBias int
    declare @LocalCustomBias int
    declare @StandardTime datetime
    declare @DaylightTime datetime
    declare @UtcStandardTime datetime
    declare @UtcDaylightTime datetime
    declare @ComputedLocalTime datetime
    declare @bDaylightTimeZone bit

--    //
--    // Get the timezone information into a useful format
--    //

--    //
--    // Get the new timezone bias
--    //

    set @NewTimeZoneBias = @Bias

--    //
--    // Now see if we have stored cutover times
--    //

	if ( @StandardMonth <> 0 and @DaylightMonth <> 0) 
	begin

--        //
--        // We have timezone cutover information. Compute the
--        // cutover dates and compute what our current bias
--        // is
--        //

        set @StandardTime = dbo.fn_GetCutoverTime(	@UTCTime,
						@StandardYear, 
						@StandardMonth,
						@StandardDay,
						@StandardHour,
						@StandardMinute,
						@StandardSecond,
						@StandardMilliseconds,
						@StandardWeekday)

		if ( @StandardTime is NULL)
		begin
			return NULL --- raise error here
		end

        set @DaylightTime = dbo.fn_GetCutoverTime(	@UTCTime,
						@DaylightYear, 
						@DaylightMonth,
						@DaylightDay,
						@DaylightHour,
						@DaylightMinute,
						@DaylightSecond,
						@DaylightMilliseconds,
						@DaylightWeekday)

		if ( @DaylightTime is NULL)
		begin
			return NULL --- raise error here
		end

--        //
--        // Convert standard time and daylight time to utc
--        //

        set @LocalCustomBias = @StandardBias
        set @TimeZoneBias = @NewTimeZoneBias + @LocalCustomBias
        set @UtcDaylightTime = DATEADD(mi, @TimeZoneBias, @DaylightTime)

        set @LocalCustomBias = @DaylightBias
        set @TimeZoneBias = @NewTimeZoneBias + @LocalCustomBias
        set @UtcStandardTime = DATEADD(mi, @TimeZoneBias, @StandardTime)

--        //
--        // If daylight < standard, then time >= daylight and
--        // less than standard is daylight
--        //

        if ( @UtcDaylightTime < @UtcStandardTime ) 
		begin

--            //
--            // If today is >= DaylightTime and < StandardTime, then
--            // We are in daylight savings time
--            //

            if ( (@UTCTime >= @UtcDaylightTime) and
                 (@UTCTime < @UtcStandardTime) ) 
			begin
                set @bDaylightTimeZone = 1
            end
			else
			begin
				set @bDaylightTimeZone = 0
			end
        end
        else 
		begin

--            //
--            // If today is >= StandardTime and < DaylightTime, then
--            // We are in standard time
--            //

            if ( (@UTCTime >= @UtcStandardTime ) and
                 (@UTCTime < @UtcDaylightTime) ) 
			begin

                set @bDaylightTimeZone = 0
			end
            else 
			begin
                set @bDaylightTimeZone = 1
            end
		 end

--        //
--        // At this point, we know our current timezone and the
--        // Universal time of the next cutover.
--        //

		if ( @bDaylightTimeZone = 1)
		begin
	        set @LocalCustomBias = @DaylightBias
		end
		else
		begin
	        set @LocalCustomBias = @StandardBias
		end

        set @TimeZoneBias = @NewTimeZoneBias + @LocalCustomBias

    end
    else 
	begin
        set @TimeZoneBias = @NewTimeZoneBias
    end

    set @ComputedLocalTime = DATEADD(mi, - @TimeZoneBias, @UTCTime)

	return @ComputedLocalTime
end

/****** Object:  Table [dbo].[SubscriptionStatistics_70b6a5b9c0c2dc11a0fc0003ffbb057d]    Script Date: 04/11/2008 06:52:43 ******/




CREATE TABLE [dbo].[SubscriptionStatistics_70b6a5b9c0c2dc11a0fc0003ffbb057d](
	[ObjectTypeCode] [int] NOT NULL,
	[FullSyncRequired] [bit] NOT NULL CONSTRAINT [DF_SubscriptionStatistics_FullSyncRequired_SubscriptionStatistics_70b6a5b9c0c2dc11a0fc0003ffbb057d]  DEFAULT ((1)),
 CONSTRAINT [PK_SubscriptionStatistics_ObjectTypeCode_SubscriptionStatistics_70b6a5b9c0c2dc11a0fc0003ffbb057d] PRIMARY KEY CLUSTERED 
(
	[ObjectTypeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ProductExtensionBase]    Script Date: 04/11/2008 06:47:44 ******/




CREATE TABLE [dbo].[ProductExtensionBase](
	[ProductId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ProductExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ProductId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ReportEntityBase]    Script Date: 04/11/2008 06:49:20 ******/




CREATE TABLE [dbo].[ReportEntityBase](
	[CreatedOn] [datetime] NULL,
	[IsFilterable] [bit] NOT NULL CONSTRAINT [DF_ReportEntityBase_IsFilterable]  DEFAULT ((0)),
	[ImportSequenceNumber] [int] NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ReportId] [uniqueidentifier] NOT NULL,
	[ReportEntityId] [uniqueidentifier] NOT NULL,
	[ObjectTypeCode] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_ReportEntity] PRIMARY KEY CLUSTERED 
(
	[ReportEntityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[OpportunityExtensionBase]    Script Date: 04/11/2008 06:45:36 ******/




CREATE TABLE [dbo].[OpportunityExtensionBase](
	[OpportunityId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_OpportunityExtensionBase] PRIMARY KEY CLUSTERED 
(
	[OpportunityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfHour]    Script Date: 04/11/2008 06:57:18 ******/




create function [dbo].[fn_BeginOfHour] ( 
  @DayUTC         datetime
)
returns datetime
as
begin
  declare @DayBeginUTC datetime
  set @DayBeginUTC = convert(datetime, convert(nvarchar, @DayUTC, 112))
  return dateadd(hh, datepart(hh, @DayUTC), @DayBeginUTC)
end

/****** Object:  Table [dbo].[CompetitorExtensionBase]    Script Date: 04/11/2008 06:38:47 ******/




CREATE TABLE [dbo].[CompetitorExtensionBase](
	[CompetitorId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_CompetitorExtensionBase] PRIMARY KEY CLUSTERED 
(
	[CompetitorId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_DropDefaultConstraint]    Script Date: 04/11/2008 06:35:06 ******/




create procedure [dbo].[p_DropDefaultConstraint](@table_name sysname, @column_name sysname) as
begin
set nocount on

declare @default_constraint_name sysname
select @default_constraint_name = null
select @default_constraint_name = child.name from sysobjects child 
	join sysobjects parent on (child.parent_obj = parent.id)
	join sysconstraints constr on (child.id = constr.constid and parent.id = constr.id)
	join syscolumns col on (col.colid = constr.colid and col.id = parent.id)
where child.xtype = 'D' 
	and col.name = @column_name
	and parent.name = @table_name

if (@default_constraint_name is not null)
begin
	declare @sql nvarchar(2000)
	select @sql = N'ALTER TABLE ' + @table_name + ' DROP CONSTRAINT ' + @default_constraint_name
	exec (@sql)
--	print @sql
end

end --p_DropDefaultConstraint

/****** Object:  Table [dbo].[ListExtensionBase]    Script Date: 04/11/2008 06:44:45 ******/




CREATE TABLE [dbo].[ListExtensionBase](
	[ListId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ListExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ListId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ContractDetailExtensionBase]    Script Date: 04/11/2008 06:40:07 ******/




CREATE TABLE [dbo].[ContractDetailExtensionBase](
	[ContractDetailId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ContractDetailExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ContractDetailId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[MailMergeTemplateExtensionBase]    Script Date: 04/11/2008 06:45:01 ******/




CREATE TABLE [dbo].[MailMergeTemplateExtensionBase](
	[MailMergeTemplateId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_MailMergeTemplateExtensionBase] PRIMARY KEY CLUSTERED 
(
	[MailMergeTemplateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[AccountExtensionBase]    Script Date: 04/11/2008 06:35:59 ******/




CREATE TABLE [dbo].[AccountExtensionBase](
	[AccountId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_AccountExtensionBase] PRIMARY KEY CLUSTERED 
(
	[AccountId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Synonym [dbo].[Attribute]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[Attribute] FOR [MetadataSchema].[Attribute]

/****** Object:  Synonym [dbo].[AttributeTypes]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[AttributeTypes] FOR [MetadataSchema].[AttributeTypes]

/****** Object:  Synonym [dbo].[Entity]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[Entity] FOR [MetadataSchema].[Entity]

/****** Object:  Table [dbo].[SalesLiteratureExtensionBase]    Script Date: 04/11/2008 06:50:01 ******/




CREATE TABLE [dbo].[SalesLiteratureExtensionBase](
	[SalesLiteratureId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_SalesLiteratureExtensionBase] PRIMARY KEY CLUSTERED 
(
	[SalesLiteratureId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Synonym [dbo].[EntityIndex]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[EntityIndex] FOR [MetadataSchema].[EntityIndex]

/****** Object:  Table [dbo].[TimeZoneDefinitionBase]    Script Date: 04/11/2008 06:53:41 ******/




CREATE TABLE [dbo].[TimeZoneDefinitionBase](
	[ModifiedOn] [datetime] NULL,
	[TimeZoneCode] [int] NOT NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[TimeZoneDefinitionId] [uniqueidentifier] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[Bias] [int] NULL,
	[DaylightName] [nvarchar](100) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[UserInterfaceName] [nvarchar](100) NOT NULL,
	[StandardName] [nvarchar](100) NOT NULL,
	[RetiredOrder] [int] NOT NULL CONSTRAINT [DF_TimeZoneDefinitionBase_RetiredOrder]  DEFAULT ((0)),
	[ModifiedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NULL,
 CONSTRAINT [cndx_primarykey_timezonedefinition] PRIMARY KEY CLUSTERED 
(
	[TimeZoneDefinitionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ImportJobBase]    Script Date: 04/11/2008 06:42:11 ******/




CREATE TABLE [dbo].[ImportJobBase](
	[CompletedOn] [datetime] NULL,
	[StartedOn] [datetime] NULL,
	[ImportJobId] [uniqueidentifier] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[Data] [nvarchar](max) NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[Name] [nvarchar](256) NULL,
 CONSTRAINT [cndx_PrimaryKey_ImportJob] PRIMARY KEY CLUSTERED 
(
	[ImportJobId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_UoMToBase]    Script Date: 04/11/2008 06:35:30 ******/




Create Proc [dbo].[p_UoMToBase] 
as
begin

  -- update related fields
  update #UoMBaseTemp
  set #UoMBaseTemp.BaseUoM = b.baseuom, #UoMBaseTemp.Quantity = b.quantity, 
	#UoMBaseTemp.IsScheduleBaseUoM = b.isschedulebaseuom,
	#UoMBaseTemp.BaseName = b.name
  from #UoMBaseTemp inner join FilteredUoM as b on (#UoMBaseTemp.UoMId= b.uomid)


  --- into the loop of finding the base unit
  declare @NotBase int
  select @NotBase = count(*)
  from #UoMBaseTemp as t
  where t.IsScheduleBaseUoM = 0

  while @NotBase <> 0
  begin
    update #UoMBaseTemp 
    set #UoMBaseTemp.BaseUoM = b.baseuom, #UoMBaseTemp.Quantity = #UoMBaseTemp.Quantity * b.quantity, 
	#UoMBaseTemp.IsScheduleBaseUoM = b.isschedulebaseuom,
	#UoMBaseTemp.BaseName = b.name
    from #UoMBaseTemp join FilteredUoM as b on (#UoMBaseTemp.BaseUoM = b.uomid)
    where #UoMBaseTemp.IsScheduleBaseUoM = 0

    select @NotBase = count(*)
    from #UoMBaseTemp as t
    where t.IsScheduleBaseUoM = 0
  end
end

/****** Object:  Synonym [dbo].[IndexAttributes]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[IndexAttributes] FOR [MetadataSchema].[IndexAttributes]

/****** Object:  Synonym [dbo].[Relationship]    Script Date: 04/11/2008 06:35:30 ******/
CREATE SYNONYM [dbo].[Relationship] FOR [MetadataSchema].[Relationship]

/****** Object:  Table [dbo].[LeadExtensionBase]    Script Date: 04/11/2008 06:44:27 ******/




CREATE TABLE [dbo].[LeadExtensionBase](
	[LeadId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_LeadExtensionBase] PRIMARY KEY CLUSTERED 
(
	[LeadId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_AccountOVRollup]    Script Date: 04/11/2008 06:34:55 ******/




Create Proc [dbo].[p_AccountOVRollup]
	@AccountId	uniqueidentifier,
	@subAccount bit,
	@acctDepth int,
	@subContact bit,
	@contactDepth int
as
begin

	Set NOCOUNT ON

	-- Create temporary table to store a list of id's
	-- Create Table #CustomerIds (CustomerId uniqueidentifier PRIMARY KEY)
	-- This table must be created outside the sproc
	
	-- rollup the sub-account and sub-contact with specific depth

	insert into #CustomerIds (CustomerId) Values (@AccountId)

	if (@subAccount <> 0)
	begin
          while (@acctDepth > 0)
	  begin
		insert into #CustomerIds (CustomerId) 
		(
			select a.AccountId 
			from AccountBase a (NOLOCK)
			join #CustomerIds ri on
			(
				a.ParentAccountId = ri.CustomerId
			)
			where
				not exists(
					select CustomerId from #CustomerIds where a.AccountId = CustomerId
				)
		)
		if ( @@rowcount = 0)
		begin	
			break
		end

		set @acctDepth = @acctDepth - 1
	  end
	end

	if (@subContact <> 0)
	begin
	  -- inserting contact ids
	  insert into #CustomerIds (CustomerId) 
	  (
		select c.ContactId 
		from ContactBase c (NOLOCK)
		join #CustomerIds ri on
		(
			c.AccountId = ri.CustomerId
		)
		where
			not exists (
				select CustomerId from #CustomerIds where c.ContactId = CustomerId
			)
	  )

	  if ( @@rowcount <> 0)
	  begin	

	    set @contactDepth = @contactDepth - 1
            while (@contactDepth > 0)
	    begin

		-- inserting contact ids
		insert into #CustomerIds (CustomerId) 
		(
			select c.ContactId 
			from ContactBase c (NOLOCK)
			join #CustomerIds ri on
			(
				c.ParentContactId = ri.CustomerId
			)
			where
				not exists (
					select CustomerId from #CustomerIds where c.ContactId = CustomerId
				)
		)	

		set @contactDepth = @contactDepth - 1
	    end


	  end

	end

end

/****** Object:  StoredProcedure [dbo].[p_AccountDistRollup]    Script Date: 04/11/2008 06:34:54 ******/




Create Proc [dbo].[p_AccountDistRollup]
	@subAccount bit, @acctDepth int, @subContact bit, @contactDepth int
as
begin

	set nocount on

	-- Create temporary table to store a list of id's
	-- Create table #CustomerIds (
	--	ParentId uniqueidentifier,
	--	ChildId uniqueidentifier
	--     	constraint [PK_CustomerIds] primary key clustered
	--	(	
	--		[ParentId],
	--		[ChildId]
	--	) 
	--)
	-- This table must be created outside the sproc

	-- rollup the sub-account and sub-contact with specific depth 

	if (@subAccount <> 0)
	begin
          while (@acctDepth > 0)
	  begin
	    insert into #CustomerIds (ParentId, ChildId) 
            (
		select ri.ParentId, a.AccountId 
		from AccountBase a (NOLOCK)
		join #CustomerIds ri on
		(
			a.ParentAccountId = ri.ChildId
		)
		where
		not exists(
			select ParentId, ChildId from #CustomerIds 
			where ri.ParentId = ParentId
			and a.AccountId = ChildId
			)
		)

		if ( @@rowcount = 0)
		begin	
			break
		end

		set @acctDepth = @acctDepth - 1

          end
	end

	if (@subContact <> 0)
	begin
	  -- inserting contact ids
	  insert into #CustomerIds (ParentId, ChildId) 
	  (
		select ri.ParentId, c.ContactId 
		from ContactBase c (NOLOCK)
		join #CustomerIds ri on
		(
			c.AccountId = ri.ChildId
		)
		where
			not exists (
				select ParentId, ChildId from #CustomerIds 
				where c.ContactId = ChildId
				and ri.ParentId = ParentId
			)
	  )

	  if ( @@rowcount <> 0)
   	  begin	
		set @contactDepth = @contactDepth - 1
		  while (@contactDepth > 0)
		  begin	
			  -- inserting contact ids
			  insert into #CustomerIds (ParentId, ChildId) 
			  (
				select ri.ParentId, c.ContactId 
				from ContactBase c (NOLOCK)
				join #CustomerIds ri on
				(
					c.ParentContactId = ri.ChildId
				)
				where
					not exists (
						select ParentId, ChildId from #CustomerIds 
						where c.ContactId = ChildId
						and ri.ParentId = ParentId
					)
			  )

		    if ( @@rowcount = 0)
		    begin	
			break
		    end
		
		    set @contactDepth = @contactDepth - 1
		  end
	  end

	end


end

/****** Object:  Synonym [dbo].[RelationshipExtraCondition]    Script Date: 04/11/2008 06:35:31 ******/
CREATE SYNONYM [dbo].[RelationshipExtraCondition] FOR [MetadataSchema].[RelationshipExtraCondition]

/****** Object:  StoredProcedure [dbo].[p_AccountSummaryRollup]    Script Date: 04/11/2008 06:34:55 ******/




CREATE   PROC [dbo].[p_AccountSummaryRollup](
	@accountId UNIQUEIDENTIFIER,
        @subAccount BIT,
	@acctDepth INT,
	@subContact BIT,
	@contactDepth INT,
	@displayEntities BIT,
	@startDate DATETIME,
	@endDate DATETIME,
	@displayNotes BIT
        ) AS
BEGIN
	SET NOCOUNT ON

Declare @rsize int
Declare @constr nvarchar(3)

-- size of regarding column in temp table #TempRollupIds created in .rdl file
SET @rsize = 300
SET @constr = ' > '

INSERT INTO #TempRollupIds(rollupid,type,regardingid,ownerid,owneridname,subject,regarding) 
(
  SELECT accountid,1,parentaccountid,ownerid,owneridname,[name],'' FROM FilteredAccount WHERE accountid = @accountId
)

IF( @subAccount <> 0 )
BEGIN
 WHILE (@acctDepth <> 0)
	BEGIN
		INSERT INTO #TempRollupIds(rollupid,type,regardingid,ownerid,owneridname,subject,regarding)
		(
			SELECT a.accountid,1,a.parentaccountid,a.ownerid,a.owneridname,a.[name],
			-- a.parentaccountidname is same as ri.subject as join is on the ids
			( CASE WHEN ri.regarding = '' THEN a.parentaccountidname ELSE RIGHT( ri.regarding + @constr + ri.subject , @rsize )  END )
			FROM FilteredAccount a (NOLOCK)
			join #TempRollupIds ri ON
			(
			a.parentaccountid = ri.rollupid
			)
			where
				not exists(
					select rollupid from #TempRollupIds where a.accountid = rollupid
				)
		)

		IF ( @@rowcount = 0 )
		BEGIN
			BREAK	
		END 
	
		SET @acctDepth = @acctDepth - 1
	END
End

IF( @subContact <> 0 )
BEGIN
	Declare @tempdepth int
	SET @tempdepth = @contactDepth
		
	INSERT INTO #TempRollupIds(rollupid,type,regardingid,source,ownerid,owneridname,createdon,subject,statuscodename,regarding)
	(
		SELECT c.contactid,2,c.accountid,1,c.ownerid,c.owneridname,c.createdon,c.fullname,c.statuscodename,
		-- c.accountidname is same as ri.subject as join is on the ids
		( CASE WHEN ri.regarding = '' THEN c.accountidname ELSE RIGHT( ri.regarding + @constr+ ri.subject , @rsize )  END )
		FROM FilteredContact c (NOLOCK)
		join #TempRollupIds ri ON
		(
			c.accountid = ri.rollupid
		)
		WHERE
			not exists(
				SELECT rollupid FROM #TempRollupIds WHERE c.contactid = rollupid
			)
	)

	IF ( @@rowcount = 0 )
	BEGIN
		SET @contactDepth = 0
	END 
	
	
  	SET @tempdepth = @contactDepth -1
	WHILE (@tempdepth > 0)
		BEGIN
			INSERT INTO #TempRollupIds(rollupid,type,regardingid,source,ownerid,owneridname,createdon,subject,statuscodename,regarding)
			(
				SELECT c.contactid,2,c.parentcontactid,2,c.ownerid,c.owneridname,c.createdon,c.fullname,c.statuscodename,
				RIGHT( ri.regarding + @constr+ ri.subject , @rsize )
				FROM FilteredContact c (NOLOCK)
				join #TempRollupIds ri ON
				(
					c.parentcontactid = ri.rollupid
				)
				WHERE
					not exists(
						SELECT rollupid FROM #TempRollupIds WHERE c.contactid = rollupid
					)
			)
	
			IF ( @@rowcount = 0 )
			BEGIN
				BREAK	
			END 
		
			SET @tempdepth = @tempdepth - 1
		END
End

-- Now the Account + (sub-accounts and sub-contacts are included in temp table)
-- Check if display entities option is selected
IF ( @displayEntities <> 0)
	BEGIN
		-- Start with opportunities for Accounts
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT opp.opportunityid,3,opp.accountid,1,opp.ownerid,opp.owneridname,opp.createdon,
				opp.[description],opp.[name],opp.statuscodename,
				-- opp.accountidname is same as ri.subject as join is on the ids
		  		( CASE WHEN ri.regarding = '' THEN opp.accountidname ELSE RIGHT( ri.regarding + @constr + ri.subject , @rsize )  END )
		  FROM FilteredOpportunity opp
		  join #TempRollupIds ri
		  ON opp.accountid = ri.rollupid
		  WHERE
		      not exists (
			SELECT rollupid FROM #TempRollupIds WHERE opp.opportunityid = rollupid 
			)
			and
			opp.createdonutc >= @startDate and opp.createdonutc <= @endDate
		)
		
		-- opportunities for Contacts
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT opp.opportunityid,3,opp.contactid,2,opp.ownerid,opp.owneridname,opp.createdon,
				opp.[description],opp.[name],opp.statuscodename,RIGHT( ri.regarding + @constr+ ri.subject , @rsize )
		  FROM FilteredOpportunity opp
		  join #TempRollupIds ri
		  ON opp.contactid = ri.rollupid
		  WHERE
		      not exists (
			SELECT rollupid FROM #TempRollupIds WHERE opp.opportunityid =rollupid 
			)
			and
			opp.createdonutc >= @startDate and opp.createdonutc <= @endDate
		)
		
		-- Quotes for Accounts
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT q.quoteid,1084,q.accountid,1,q.ownerid,q.owneridname,q.createdon,
				q.[description],q.[name],q.statecodename,
				-- q.accountidname is same as ri.subject as join is on the ids
				( CASE WHEN ri.regarding = '' THEN q.accountidname ELSE RIGHT( ri.regarding + @constr+ ri.subject , @rsize )  END )
		  FROM FilteredQuote q
		  join #TempRollupIds ri
		  ON q.accountid = ri.rollupid
		  WHERE
		       not exists (
			SELECT rollupid FROM #TempRollupIds WHERE q.quoteid =rollupid 
			)
			and
			q.createdonutc >= @startDate and q.createdonutc <= @endDate
		)
		
		-- Quotes for Contacts
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT q.quoteid,1084,q.contactid,2,q.ownerid,q.owneridname,q.createdon,
				q.[description],q.[name],q.statecodename,RIGHT( ri.regarding + @constr+ ri.subject , @rsize )
		  FROM FilteredQuote q
		  join #TempRollupIds ri
		  ON q.contactid = ri.rollupid
		  WHERE
		       not exists (
			SELECT rollupid FROM #TempRollupIds WHERE q.quoteid =rollupid 
			)
			and
			q.createdonutc >= @startDate and q.createdonutc <= @endDate
		)
		
		-- Order for account
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT o.salesorderid,1088,o.accountid,1,o.ownerid,o.owneridname,o.createdon,
				o.[description],o.[name],o.statuscodename,
				-- o.accountidname is same as ri.subject as join is on the ids
				( CASE WHEN ri.regarding = '' THEN o.accountidname ELSE RIGHT( ri.regarding + @constr+ ri.subject , @rsize )  END )
		  from FilteredSalesOrder o
		  join #TempRollupIds ri
		  on o.accountid = ri.rollupid
		  where
		       not exists (
			select rollupid from #TempRollupIds where o.salesorderid =rollupid 
			)
			and
			o.createdonutc >= @startDate and o.createdonutc <= @endDate
		)
		
		-- Order for contact
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT o.salesorderid,1088,o.contactid,2,o.ownerid,o.owneridname,o.createdon,
				o.[description],o.[name],o.statuscodename,RIGHT( ri.regarding + @constr + ri.subject , @rsize )
		  FROM FilteredSalesOrder o
		  join #TempRollupIds ri
		  ON o.contactid = ri.rollupid
		  WHERE
		       not exists (
			SELECT rollupid FROM #TempRollupIds WHERE o.salesorderid =rollupid 
			)
			and
			o.createdonutc >= @startDate and o.createdonutc <= @endDate
		)
		
		-- Invoice for account
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT inv.invoiceid,1090,inv.accountid,1,inv.ownerid,inv.owneridname,inv.createdon,
				inv.[description],inv.[name],inv.statuscodename,
				-- inv.accountidname is same as ri.subject as join is on the ids
				( CASE WHEN ri.regarding = '' THEN inv.accountidname ELSE RIGHT( ri.regarding + @constr+ ri.subject , @rsize )  END )
		  FROM FilteredInvoice inv
		  JOIN #TempRollupIds ri
		  ON inv.accountid = ri.rollupid
		  WHERE
		       NOT EXISTS (
			SELECT rollupid FROM #TempRollupIds WHERE inv.invoiceid =rollupid 
			)
			AND
			inv.createdonutc >= @startDate AND inv.createdonutc <= @endDate
		)
		
		-- Invoice for contact
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT inv.invoiceid,1090,inv.contactid,2,inv.ownerid,inv.owneridname,inv.createdon,
				inv.[description],inv.[name],inv.statuscodename,RIGHT( ri.regarding + @constr+ ri.subject , @rsize )
		  FROM FilteredInvoice inv
		  JOIN #TempRollupIds ri
		  ON inv.contactid = ri.rollupid
		  WHERE
		       NOT EXISTS (
			SELECT rollupid FROM #TempRollupIds WHERE inv.invoiceid =rollupid 
			)
			AND
			inv.createdonutc >= @startDate AND inv.createdonutc <= @endDate
		)
		
		-- Contract for accounts
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT con.contractid,1010,con.accountid,1,con.ownerid,con.owneridname,con.createdon,
				null,con.title,con.statecodename,
				-- con.accountidname is same as ri.subject as join is on the ids
				( CASE WHEN ri.regarding = '' THEN con.accountidname ELSE RIGHT( ri.regarding + @constr + ri.subject , @rsize )  END )
		  FROM FilteredContract con
		  JOIN #TempRollupIds ri
		  ON con.accountid = ri.rollupid
		  WHERE
		       NOT EXISTS (
			SELECT rollupid FROM #TempRollupIds WHERE con.contractid =rollupid 
			)
			and
			con.createdonutc >= @startDate and con.createdonutc <= @endDate
		)
		
		-- Contract for contacts
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT con.contractid,1010,con.contactid,2,con.ownerid,con.owneridname,con.createdon,
				null,con.title,con.statecodename,RIGHT( ri.regarding + @constr + ri.subject , @rsize )
		  FROM FilteredContract con
		  JOIN #TempRollupIds ri
		  ON con.contactid = ri.rollupid
		  WHERE
		       NOT EXISTS (
			SELECT rollupid FROM #TempRollupIds WHERE con.contractid =rollupid 
			)
			and
			con.createdonutc >= @startDate and con.createdonutc <= @endDate
		)
		
		-- Cases for account
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT cas.incidentid,112,cas.accountid,1,cas.ownerid,cas.owneridname,cas.createdon,
				cas.[description],cas.title,cas.statuscodename,
				-- cas.accountidname is same as ri.subject as join is on the ids
				( CASE WHEN ri.regarding = '' THEN cas.accountidname ELSE RIGHT( ri.regarding + @constr + ri.subject , @rsize )  END )
		  FROM FilteredIncident cas
		  JOIN #TempRollupIds ri
		  ON cas.accountid = ri.rollupid
		  WHERE
		       NOT EXISTS (
			SELECT rollupid FROM #TempRollupIds WHERE cas.incidentid =rollupid 
			)
			AND
			cas.createdonutc >= @startDate and cas.createdonutc <= @endDate 
		)
		
		-- Cases for contacts
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
				[description],subject,statuscodename,regarding)
		(
		  SELECT cas.incidentid,112,cas.contactid,2,cas.ownerid,cas.owneridname,cas.createdon,
				cas.[description],cas.title,cas.statuscodename,RIGHT( ri.regarding + @constr + ri.subject , @rsize )
		  FROM FilteredIncident cas
		  JOIN #TempRollupIds ri
		  ON cas.contactid = ri.rollupid
		  WHERE
		       NOT EXISTS (
			select rollupid from #TempRollupIds where cas.incidentid =rollupid 
			)
			AND
			cas.createdonutc >= @startDate and cas.createdonutc <= @endDate
		)
	END -- @displayEntities
	
-- Include all the activities associated with all the ids in temprollupids
INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
		[description],subject,statuscodename,regarding)
(
  SELECT ap.activityid,ap.activitytypecode,ap.regardingobjectid,ap.regardingobjecttypecode,
         ap.ownerid,ap.owneridname,ap.createdon,ap.[description],ap.subject,
	ap.statecodename as statuscodename, 
	-- ap.regardingobjectidname is same as ri.subject as join is on the ids
	( CASE WHEN ri.regarding = '' THEN ap.regardingobjectidname ELSE RIGHT( ri.regarding + @constr + ri.subject , @rsize )  END )
  FROM FilteredActivityPointer ap
  JOIN #TempRollupIds ri
  ON ap.regardingobjectid = ri.rollupid
  WHERE
	NOT EXISTS (
	SELECT rollupid FROM #TempRollupIds WHERE ap.activityid =rollupid 
	)
	AND
	(
	 ap.activitytypecode NOT IN (4206,4208,4209,4211) 
	)
	AND
	(
		( ap.scheduledendutc >= @startDate AND ap.scheduledendutc <= @endDate )
		OR 
		( ap.createdonutc >= @startDate AND ap.createdonutc <= @endDate)
	)
--	(IsNull(ap.scheduledendutc,ap.createdonutc) >= @startDate 
--         and IsNull(ap.scheduledendutc,ap.createdonutc)  <= @endDate)

)


-- If include notes option is selected
IF( @displayNotes <> 0)
	BEGIN
		INSERT INTO #TempRollupIds (rollupid,type,regardingid,source,ownerid,owneridname,createdon,
		[description],subject,regarding)
		(
		  SELECT fa.annotationid,5,fa.objectid,fa.objecttypecode,
		         fa.ownerid,fa.owneridname,fa.createdon,fa.notetext,fa.subject,
				( CASE WHEN ri.regarding = '' THEN ri.subject ELSE RIGHT( ri.regarding + @constr + ri.subject , @rsize )  END )
		  FROM FilteredAnnotation fa
		  JOIN #TempRollupIds ri
		  ON fa.objectid = ri.rollupid
		  WHERE
		       NOT EXISTS (
			SELECT rollupid FROM #TempRollupIds WHERE fa.annotationid =rollupid 
			)
			AND
			(
			fa.createdon >= @startDate AND fa.createdon <= @endDate
			)
		)
	
	END

	
END

/****** Object:  Synonym [dbo].[StoredProcedureCatalog]    Script Date: 04/11/2008 06:35:31 ******/
CREATE SYNONYM [dbo].[StoredProcedureCatalog] FOR [MetadataSchema].[StoredProcedureCatalog]

/****** Object:  Synonym [dbo].[ViewAttribute]    Script Date: 04/11/2008 06:35:31 ******/
CREATE SYNONYM [dbo].[ViewAttribute] FOR [MetadataSchema].[ViewAttribute]

/****** Object:  StoredProcedure [dbo].[p_NeglectedAccountRollup]    Script Date: 04/11/2008 06:35:24 ******/




Create Proc [dbo].[p_NeglectedAccountRollup]
	@subAccount bit, @acctDepth int, @subContact bit, @contactDepth int
As
Begin
	Set NOCOUNT ON

	-- Create temporary table to store a list of id's
	-- Create table #NARollupIds (
	--	ParentId uniqueidentifier,
	--	ChildId uniqueidentifier
	--     	constraint [PK_NARollupIds] primary key clustered
	--	(	
	--		[ParentId],
	--		[ChildId]
	--	) 
	--)
	-- This table must be created outside the sproc

	-- rollup the sub-account and sub-contact with specific depth 
	-- rollup related entities 

	if (@subAccount <> 0)
	begin
          while (@acctDepth > 0)
	  begin
	    insert into #NARollupIds (ParentId, ChildId) 
            (
		select ri.ParentId, a.AccountId 
		from AccountBase a (NOLOCK)
		join #NARollupIds ri on
		(
			a.ParentAccountId = ri.ChildId
		)
		where
		not exists(
			select ParentId, ChildId from #NARollupIds 
			where ri.ParentId = ParentId
			and a.AccountId = ChildId
			)
		)

		if ( @@rowcount = 0)
		begin	
			break
		end

		set @acctDepth = @acctDepth - 1

          end
	end

	if (@subContact <> 0)
	begin
	  -- inserting contact ids
	  insert into #NARollupIds (ParentId, ChildId) 
	  (
		select ri.ParentId, c.ContactId 
		from ContactBase c (NOLOCK)
		join #NARollupIds ri on
		(
			c.AccountId = ri.ChildId
		)
		where
			not exists (
				select ParentId, ChildId from #NARollupIds 
				where c.ContactId = ChildId
				and ri.ParentId = ParentId
			)
	  )

	  if ( @@rowcount <> 0)
   	  begin	
		set @contactDepth = @contactDepth - 1
		  while (@contactDepth > 0)
		  begin	
			  -- inserting contact ids
			  insert into #NARollupIds (ParentId, ChildId) 
			  (
				select ri.ParentId, c.ContactId 
				from ContactBase c (NOLOCK)
				join #NARollupIds ri on
				(
					c.ParentContactId = ri.ChildId
				)
				where
					not exists (
						select ParentId, ChildId from #NARollupIds 
						where c.ContactId = ChildId
						and ri.ParentId = ParentId
					)
			  )

		    if ( @@rowcount = 0)
		    begin	
			break
		    end
		
		    set @contactDepth = @contactDepth - 1
		  end
	  end

	end


	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, c.ContractId
		from ContractBase as c (NOLOCK) 
		join #NARollupIds ri on 
		(
			c.ContactId = ri.ChildId
		)
		where
			not exists(
				select ParentId, ChildId from #NARollupIds 
				where c.ContractId = ChildId
				and ri.ParentId = ParentId
			)
	)
	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, c.ContractId
		from ContractBase as c (NOLOCK) 
		join #NARollupIds ri on
		(
			c.AccountId = ri.ChildId
		)
		where
			not exists(
				select ParentId, ChildId from #NARollupIds 
				where c.ContractId = ChildId
				and ri.ParentId = ParentId
			)
	)

	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, i.IncidentId
		from IncidentBase as i (NOLOCK) 
		join #NARollupIds ri on
		(
			i.AccountId = ri.ChildId
		)
		where
			not exists(
				select ParentId, ChildId from #NARollupIds 
				where i.IncidentId = ChildId
				and ri.ParentId = ParentId
			)
	)

	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, i.IncidentId
		from IncidentBase as i (NOLOCK) 
		join #NARollupIds ri on
		(
			i.ContactId = ri.ChildId
		)
		where
			not exists(
				select ParentId, ChildId from #NARollupIds 
				where i.IncidentId = ChildId
				and ri.ParentId = ParentId
			)
	)

	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, o.OpportunityId
		from OpportunityBase as o (NOLOCK) 
		join #NARollupIds ri on
		(
			o.ContactId = ri.ChildId 
		)
		where
		not exists(
				select ParentId, ChildId from #NARollupIds 
				where o.OpportunityId = ChildId
				and ri.ParentId = ParentId
			)
	)


	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, o.OpportunityId
		from OpportunityBase as o (NOLOCK) 
		join #NARollupIds ri on
		(
			o.AccountId = ri.ChildId
		)
		where 
		not exists(
				select ParentId, ChildId from #NARollupIds 
				where o.OpportunityId = ChildId
				and ri.ParentId = ParentId
			)
	)

	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, q.QuoteId
		from QuoteBase as q (NOLOCK) 
		join #NARollupIds ri on
		(
			q.AccountId = ri.ChildId
		)
		where
		not exists(
				select ParentId, ChildId from #NARollupIds 
				where q.QuoteId = ChildId
				and ri.ParentId = ParentId
			)
	)

	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, q.QuoteId
		from QuoteBase as q (NOLOCK) 
		join #NARollupIds ri on
		(
			q.ContactId = ri.ChildId
		)
		where
		not exists(
				select ParentId, ChildId from #NARollupIds 
				where q.QuoteId = ChildId
				and ri.ParentId = ParentId
			)
	)

	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, so.SalesOrderId
		from SalesOrderBase as so (NOLOCK) 
		join #NARollupIds ri on
		(
			so.AccountId = ri.ChildId
		)
		where
		not exists(
				select ParentId, ChildId from #NARollupIds 
				where so.SalesOrderId = ChildId
				and ri.ParentId = ParentId
			)
	)

	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, so.SalesOrderId
		from SalesOrderBase as so (NOLOCK) 
		join #NARollupIds ri on
		(
			so.ContactId = ri.ChildId
		)
		where
		not exists(
				select ParentId, ChildId from #NARollupIds 
				where so.SalesOrderId = ChildId
				and ri.ParentId = ParentId
			)
	)

	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, i.InvoiceId
		from InvoiceBase as i (NOLOCK) 
		join #NARollupIds ri on
		(
			i.ContactId = ri.ChildId
		)
		where
		not exists(
				select ParentId, ChildId from #NARollupIds 
				where i.InvoiceId = ChildId
				and ri.ParentId = ParentId
			)
	)

	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, i.InvoiceId
		from InvoiceBase as i (NOLOCK) 
		join #NARollupIds ri on
		(
			i.AccountId = ri.ChildId
		)
		where
		not exists(
				select ParentId, ChildId from #NARollupIds 
				where i.InvoiceId = ChildId
				and ri.ParentId = ParentId
			)
	)

	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, account.OriginatingLeadId 
		from AccountBase as account (NOLOCK) 
		join #NARollupIds ri on
		(
			account.AccountId = ri.ChildId
		)
		where 
			account.OriginatingLeadId is not null
		and
			not exists(
					select ParentId, ChildId from #NARollupIds 
					where account.OriginatingLeadId = ChildId
					and ri.ParentId = ParentId
				)
			
	)
	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, contact.OriginatingLeadId
		from ContactBase as contact (NOLOCK) 
		join #NARollupIds as ri on
		(
			contact.ContactId = ri.ChildId
		)
		where contact.OriginatingLeadId is not null
		and
			not exists(
					select ParentId, ChildId from #NARollupIds 
					where contact.OriginatingLeadId = ChildId
					and ri.ParentId = ParentId				
				)
		
	)

	insert into #NARollupIds(ParentId, ChildId)
	(
		select ri.ParentId, opportunity.OriginatingLeadId
		from OpportunityBase as opportunity (NOLOCK) 
		join #NARollupIds as ri on
		(
			opportunity.OpportunityId = ri.ChildId
		)
		where opportunity.OriginatingLeadId is not null
		and
			not exists(
					select ParentId, ChildId from #NARollupIds 
					where opportunity.OriginatingLeadId = ChildId
					and ri.ParentId = ParentId
			)
	)	

End

/****** Object:  Table [dbo].[ContactExtensionBase]    Script Date: 04/11/2008 06:39:28 ******/




CREATE TABLE [dbo].[ContactExtensionBase](
	[ContactId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ContactExtensionBase] PRIMARY KEY CLUSTERED 
(
	[ContactId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  StoredProcedure [dbo].[p_GetForeignKeyAttributes]    Script Date: 04/11/2008 06:35:13 ******/




create procedure [dbo].[p_GetForeignKeyAttributes](@keyid uniqueidentifier, @tableid uniqueidentifier) as
set nocount on

select a.*,
	'character-count' = case 
		when cast(at.Description as nvarchar) in ('nvarchar', 'nchar') then cast(a.Length / 2 as nvarchar) 
		when cast(at.Description as nvarchar) in ('varchar', 'char') then cast(a.Length as nvarchar) 
		else '' 
		end,
	'type' = at.Description,
        'isquoted' = at.Quoted
from KeyAttributes k join AttributeView a on (k.ReferencedAttribute = a.AttributeId)
                     join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)
where k.KeyId = @keyid  
order by ColumnNumber

/****** Object:  Table [dbo].[AccountBase]    Script Date: 04/11/2008 06:35:56 ******/




CREATE TABLE [dbo].[AccountBase](
	[AccountId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[AccountCategoryCode] [int] NULL,
	[TerritoryId] [uniqueidentifier] NULL,
	[DefaultPriceLevelId] [uniqueidentifier] NULL,
	[CustomerSizeCode] [int] NULL,
	[PreferredContactMethodCode] [int] NULL,
	[CustomerTypeCode] [int] NULL,
	[AccountRatingCode] [int] NULL,
	[IndustryCode] [int] NULL,
	[TerritoryCode] [int] NULL,
	[AccountClassificationCode] [int] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[BusinessTypeCode] [int] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[OwningTeam] [uniqueidentifier] NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[OriginatingLeadId] [uniqueidentifier] NULL,
	[PaymentTermsCode] [int] NULL,
	[ShippingMethodCode] [int] NULL,
	[PrimaryContactId] [uniqueidentifier] NULL,
	[ParticipatesInWorkflow] [bit] NULL CONSTRAINT [Set_To_Zero93]  DEFAULT ((0)),
	[Name] [nvarchar](160) NULL,
	[AccountNumber] [nvarchar](20) NULL,
	[Revenue] [money] NULL,
	[NumberOfEmployees] [int] NULL,
	[Description] [nvarchar](max) NULL,
	[SIC] [nvarchar](20) NULL,
	[OwnershipCode] [int] NULL,
	[MarketCap] [money] NULL,
	[SharesOutstanding] [int] NULL,
	[TickerSymbol] [nvarchar](10) NULL,
	[StockExchange] [nvarchar](20) NULL,
	[WebSiteURL] [nvarchar](200) NULL,
	[FtpSiteURL] [nvarchar](200) NULL,
	[EMailAddress1] [nvarchar](100) NULL,
	[EMailAddress2] [nvarchar](100) NULL,
	[EMailAddress3] [nvarchar](100) NULL,
	[DoNotPhone] [bit] NULL CONSTRAINT [DF_AccountBase_DoNotPhone]  DEFAULT ((0)),
	[DoNotFax] [bit] NULL CONSTRAINT [DF_AccountBase_DoNotFax]  DEFAULT ((0)),
	[Telephone1] [nvarchar](50) NULL,
	[DoNotEMail] [bit] NULL CONSTRAINT [DF_AccountBase_DoNotEMail]  DEFAULT ((0)),
	[Telephone2] [nvarchar](50) NULL,
	[Fax] [nvarchar](50) NULL,
	[Telephone3] [nvarchar](50) NULL,
	[DoNotPostalMail] [bit] NULL CONSTRAINT [DF_AccountBase_DoNotPostalMail]  DEFAULT ((0)),
	[DoNotBulkEMail] [bit] NULL CONSTRAINT [DF_AccountBase_DoNotBulkEMail]  DEFAULT ((0)),
	[DoNotBulkPostalMail] [bit] NULL CONSTRAINT [DF_AccountBase_DoNotBulkPostalMail]  DEFAULT ((0)),
	[CreditLimit] [money] NULL,
	[CreditOnHold] [bit] NULL,
	[IsPrivate] [bit] NULL CONSTRAINT [Set_To_Zero94]  DEFAULT ((0)),
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[ParentAccountId] [uniqueidentifier] NULL,
	[Aging30] [money] NULL,
	[StateCode] [int] NOT NULL,
	[Aging60] [money] NULL,
	[StatusCode] [int] NULL,
	[Aging90] [money] NULL,
	[PreferredAppointmentDayCode] [int] NULL,
	[PreferredSystemUserId] [uniqueidentifier] NULL,
	[PreferredAppointmentTimeCode] [int] NULL,
	[Merged] [bit] NULL CONSTRAINT [DF_AccountBase_Merged]  DEFAULT ((0)),
	[DoNotSendMM] [bit] NULL CONSTRAINT [DF_AccountBase_DoNotSendMM]  DEFAULT ((0)),
	[MasterId] [uniqueidentifier] NULL,
	[LastUsedInCampaign] [datetime] NULL,
	[PreferredServiceId] [uniqueidentifier] NULL,
	[PreferredEquipmentId] [uniqueidentifier] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[CreditLimit_Base] [money] NULL,
	[Aging30_Base] [money] NULL,
	[Revenue_Base] [money] NULL,
	[Aging90_Base] [money] NULL,
	[MarketCap_Base] [money] NULL,
	[Aging60_Base] [money] NULL,
	[YomiName] [nvarchar](160) NULL,
 CONSTRAINT [cndx_PrimaryKey_Account] PRIMARY KEY CLUSTERED 
(
	[AccountId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[LeadBase]    Script Date: 04/11/2008 06:44:22 ******/




CREATE TABLE [dbo].[LeadBase](
	[LeadId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ContactId] [uniqueidentifier] NULL,
	[AccountId] [uniqueidentifier] NULL,
	[LeadSourceCode] [int] NULL,
	[LeadQualityCode] [int] NULL,
	[PriorityCode] [int] NULL,
	[IndustryCode] [int] NULL,
	[PreferredContactMethodCode] [int] NULL,
	[SalesStageCode] [int] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[OwningTeam] [uniqueidentifier] NULL,
	[Subject] [nvarchar](300) NULL,
	[ParticipatesInWorkflow] [bit] NULL CONSTRAINT [Set_To_Zero116]  DEFAULT ((0)),
	[Description] [nvarchar](max) NULL,
	[EstimatedValue] [float] NULL,
	[EstimatedCloseDate] [datetime] NULL,
	[CompanyName] [nvarchar](100) NULL,
	[FirstName] [nvarchar](50) NULL,
	[MiddleName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[Revenue] [money] NULL,
	[NumberOfEmployees] [int] NULL,
	[DoNotPhone] [bit] NULL CONSTRAINT [DF_LeadBase_DoNotPhone]  DEFAULT ((0)),
	[SIC] [nvarchar](20) NULL,
	[DoNotFax] [bit] NULL CONSTRAINT [DF_LeadBase_DoNotFax]  DEFAULT ((0)),
	[EMailAddress1] [nvarchar](100) NULL,
	[JobTitle] [nvarchar](100) NULL,
	[Salutation] [nvarchar](100) NULL,
	[DoNotEMail] [bit] NULL CONSTRAINT [DF_LeadBase_DoNotEMail]  DEFAULT ((0)),
	[EMailAddress2] [nvarchar](100) NULL,
	[DoNotPostalMail] [bit] NULL CONSTRAINT [DF_LeadBase_DoNotPostalMail]  DEFAULT ((0)),
	[EMailAddress3] [nvarchar](100) NULL,
	[FullName] [nvarchar](160) NULL,
	[YomiFirstName] [nvarchar](150) NULL,
	[WebSiteUrl] [nvarchar](200) NULL,
	[Telephone1] [nvarchar](50) NULL,
	[Telephone2] [nvarchar](50) NULL,
	[Telephone3] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[IsPrivate] [bit] NULL CONSTRAINT [Set_To_Zero117]  DEFAULT ((0)),
	[Fax] [nvarchar](50) NULL,
	[YomiMiddleName] [nvarchar](150) NULL,
	[YomiLastName] [nvarchar](150) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[YomiFullName] [nvarchar](450) NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[MobilePhone] [nvarchar](20) NULL,
	[StateCode] [int] NOT NULL,
	[Pager] [nvarchar](20) NULL,
	[StatusCode] [int] NULL,
	[VersionNumber] [timestamp] NULL,
	[MasterId] [uniqueidentifier] NULL,
	[CampaignId] [uniqueidentifier] NULL,
	[DoNotSendMM] [bit] NULL CONSTRAINT [DF_LeadBase_DoNotSendMM]  DEFAULT ((0)),
	[Merged] [bit] NULL CONSTRAINT [DF_LeadBase_Merged]  DEFAULT ((0)),
	[DoNotBulkEMail] [bit] NULL CONSTRAINT [DF_LeadBase_DoNotBulkEMail]  DEFAULT ((0)),
	[LastUsedInCampaign] [datetime] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[EstimatedAmount] [money] NULL,
	[EstimatedAmount_Base] [money] NULL,
	[Revenue_Base] [money] NULL,
	[YomiCompanyName] [nvarchar](100) NULL,
 CONSTRAINT [cndx_PrimaryKey_Lead] PRIMARY KEY CLUSTERED 
(
	[LeadId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SalesOrderBase]    Script Date: 04/11/2008 06:50:31 ******/




CREATE TABLE [dbo].[SalesOrderBase](
	[SalesOrderId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OwningTeam] [uniqueidentifier] NULL,
	[OpportunityId] [uniqueidentifier] NULL,
	[QuoteId] [uniqueidentifier] NULL,
	[PriorityCode] [int] NULL,
	[SubmitStatus] [int] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[SubmitDate] [datetime] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[SubmitStatusDescription] [nvarchar](max) NULL,
	[PriceLevelId] [uniqueidentifier] NULL,
	[LastBackofficeSubmit] [datetime] NULL,
	[AccountId] [uniqueidentifier] NULL,
	[ContactId] [uniqueidentifier] NULL,
	[OrderNumber] [nvarchar](100) NOT NULL,
	[Name] [nvarchar](300) NULL,
	[PricingErrorCode] [int] NULL,
	[Description] [nvarchar](max) NULL,
	[DiscountAmount] [money] NULL,
	[FreightAmount] [money] NULL,
	[TotalAmount] [money] NULL,
	[TotalLineItemAmount] [money] NULL,
	[TotalLineItemDiscountAmount] [money] NULL,
	[TotalAmountLessFreight] [money] NULL,
	[TotalDiscountAmount] [money] NULL,
	[RequestDeliveryBy] [datetime] NULL,
	[TotalTax] [money] NULL,
	[ShippingMethodCode] [int] NULL,
	[PaymentTermsCode] [int] NULL,
	[FreightTermsCode] [int] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[StateCode] [int] NOT NULL,
	[StatusCode] [int] NULL,
	[ShipTo_Name] [nvarchar](200) NULL,
	[VersionNumber] [timestamp] NULL,
	[ShipTo_Line1] [nvarchar](50) NULL,
	[ShipTo_Line2] [nvarchar](50) NULL,
	[ShipTo_Line3] [nvarchar](50) NULL,
	[ShipTo_City] [nvarchar](50) NULL,
	[ShipTo_StateOrProvince] [nvarchar](50) NULL,
	[ShipTo_Country] [nvarchar](50) NULL,
	[ShipTo_PostalCode] [nvarchar](20) NULL,
	[WillCall] [bit] NULL,
	[ShipTo_Telephone] [nvarchar](50) NULL,
	[BillTo_Name] [nvarchar](200) NULL,
	[ShipTo_FreightTermsCode] [int] NULL,
	[ShipTo_Fax] [nvarchar](50) NULL,
	[BillTo_Line1] [nvarchar](50) NULL,
	[BillTo_Line2] [nvarchar](50) NULL,
	[BillTo_Line3] [nvarchar](50) NULL,
	[BillTo_City] [nvarchar](50) NULL,
	[BillTo_StateOrProvince] [nvarchar](50) NULL,
	[BillTo_Country] [nvarchar](50) NULL,
	[BillTo_PostalCode] [nvarchar](20) NULL,
	[BillTo_Telephone] [nvarchar](50) NULL,
	[BillTo_Fax] [nvarchar](50) NULL,
	[DiscountPercentage] [decimal](23, 10) NULL,
	[BillTo_ContactName] [nvarchar](150) NULL,
	[CampaignId] [uniqueidentifier] NULL,
	[BillTo_AddressId] [uniqueidentifier] NULL,
	[ShipTo_AddressId] [uniqueidentifier] NULL,
	[IsPriceLocked] [bit] NULL,
	[DateFulfilled] [datetime] NULL,
	[ShipTo_ContactName] [nvarchar](150) NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TotalLineItemAmount_Base] [money] NULL,
	[TotalDiscountAmount_Base] [money] NULL,
	[TotalAmountLessFreight_Base] [money] NULL,
	[TotalAmount_Base] [money] NULL,
	[DiscountAmount_Base] [money] NULL,
	[FreightAmount_Base] [money] NULL,
	[TotalLineItemDiscountAmount_Base] [money] NULL,
	[TotalTax_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_SalesOrder] PRIMARY KEY CLUSTERED 
(
	[SalesOrderId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_SalesOrderBase] UNIQUE NONCLUSTERED 
(
	[OwningBusinessUnit] ASC,
	[OrderNumber] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[InvoiceBase]    Script Date: 04/11/2008 06:43:17 ******/




CREATE TABLE [dbo].[InvoiceBase](
	[InvoiceId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OwningTeam] [uniqueidentifier] NULL,
	[OpportunityId] [uniqueidentifier] NULL,
	[PriorityCode] [int] NULL,
	[SalesOrderId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[LastBackofficeSubmit] [datetime] NULL,
	[PriceLevelId] [uniqueidentifier] NULL,
	[AccountId] [uniqueidentifier] NULL,
	[ContactId] [uniqueidentifier] NULL,
	[InvoiceNumber] [nvarchar](100) NOT NULL,
	[Name] [nvarchar](300) NULL,
	[Description] [nvarchar](max) NULL,
	[DiscountAmount] [money] NULL,
	[FreightAmount] [money] NULL,
	[TotalAmount] [money] NULL,
	[TotalLineItemAmount] [money] NULL,
	[TotalLineItemDiscountAmount] [money] NULL,
	[TotalAmountLessFreight] [money] NULL,
	[TotalDiscountAmount] [money] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[TotalTax] [money] NULL,
	[ShippingMethodCode] [int] NULL,
	[PaymentTermsCode] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[StateCode] [int] NOT NULL,
	[StatusCode] [int] NULL,
	[ShipTo_Name] [nvarchar](200) NULL,
	[VersionNumber] [timestamp] NULL,
	[PricingErrorCode] [int] NULL,
	[ShipTo_Line1] [nvarchar](50) NULL,
	[ShipTo_Line2] [nvarchar](50) NULL,
	[ShipTo_Line3] [nvarchar](50) NULL,
	[ShipTo_City] [nvarchar](50) NULL,
	[ShipTo_StateOrProvince] [nvarchar](50) NULL,
	[ShipTo_Country] [nvarchar](50) NULL,
	[ShipTo_PostalCode] [nvarchar](20) NULL,
	[WillCall] [bit] NULL,
	[ShipTo_Telephone] [nvarchar](50) NULL,
	[BillTo_Name] [nvarchar](200) NULL,
	[ShipTo_FreightTermsCode] [int] NULL,
	[ShipTo_Fax] [nvarchar](50) NULL,
	[BillTo_Line1] [nvarchar](50) NULL,
	[BillTo_Line2] [nvarchar](50) NULL,
	[BillTo_Line3] [nvarchar](50) NULL,
	[BillTo_City] [nvarchar](50) NULL,
	[BillTo_StateOrProvince] [nvarchar](50) NULL,
	[BillTo_Country] [nvarchar](50) NULL,
	[BillTo_PostalCode] [nvarchar](20) NULL,
	[BillTo_Telephone] [nvarchar](50) NULL,
	[BillTo_Fax] [nvarchar](50) NULL,
	[DiscountPercentage] [decimal](23, 10) NULL,
	[IsPriceLocked] [bit] NULL,
	[DateDelivered] [datetime] NULL,
	[DueDate] [datetime] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[TotalLineItemAmount_Base] [money] NULL,
	[TotalLineItemDiscountAmount_Base] [money] NULL,
	[TotalTax_Base] [money] NULL,
	[TotalAmountLessFreight_Base] [money] NULL,
	[DiscountAmount_Base] [money] NULL,
	[TotalAmount_Base] [money] NULL,
	[FreightAmount_Base] [money] NULL,
	[TotalDiscountAmount_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_Invoice] PRIMARY KEY CLUSTERED 
(
	[InvoiceId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_InvoiceBase] UNIQUE NONCLUSTERED 
(
	[OwningBusinessUnit] ASC,
	[InvoiceNumber] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[IncidentBase]    Script Date: 04/11/2008 06:42:37 ******/




CREATE TABLE [dbo].[IncidentBase](
	[IncidentId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[ContractDetailId] [uniqueidentifier] NULL,
	[SubjectId] [uniqueidentifier] NULL,
	[ContractId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [Set_To_Zero112]  DEFAULT ((0)),
	[OwningTeam] [uniqueidentifier] NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[ActualServiceUnits] [int] NULL,
	[CaseOriginCode] [int] NULL,
	[BilledServiceUnits] [int] NULL,
	[CaseTypeCode] [int] NULL,
	[ProductSerialNumber] [nvarchar](100) NULL,
	[Title] [nvarchar](200) NULL,
	[ProductId] [uniqueidentifier] NULL,
	[ContractServiceLevelCode] [int] NULL,
	[AccountId] [uniqueidentifier] NULL,
	[Description] [nvarchar](max) NULL,
	[ContactId] [uniqueidentifier] NULL,
	[IsDecrementing] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[TicketNumber] [nvarchar](100) NULL,
	[PriorityCode] [int] NULL,
	[CustomerSatisfactionCode] [int] NULL,
	[IncidentStageCode] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[FollowupBy] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[StateCode] [int] NOT NULL,
	[SeverityCode] [int] NULL,
	[StatusCode] [int] NULL,
	[ResponsibleContactId] [uniqueidentifier] NULL,
	[KbArticleId] [uniqueidentifier] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_Incident] PRIMARY KEY CLUSTERED 
(
	[IncidentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_IncidentBase] UNIQUE NONCLUSTERED 
(
	[OwningBusinessUnit] ASC,
	[TicketNumber] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[QuoteBase]    Script Date: 04/11/2008 06:48:34 ******/




CREATE TABLE [dbo].[QuoteBase](
	[QuoteId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[OwningTeam] [uniqueidentifier] NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[PriceLevelId] [uniqueidentifier] NULL,
	[OpportunityId] [uniqueidentifier] NULL,
	[AccountId] [uniqueidentifier] NULL,
	[ContactId] [uniqueidentifier] NULL,
	[QuoteNumber] [nvarchar](100) NOT NULL,
	[RevisionNumber] [int] NOT NULL,
	[Name] [nvarchar](300) NULL,
	[PricingErrorCode] [int] NULL,
	[Description] [nvarchar](max) NULL,
	[DiscountAmount] [money] NULL,
	[FreightAmount] [money] NULL,
	[TotalAmount] [money] NULL,
	[TotalLineItemAmount] [money] NULL,
	[TotalLineItemDiscountAmount] [money] NULL,
	[TotalAmountLessFreight] [money] NULL,
	[EffectiveFrom] [datetime] NULL,
	[TotalTax] [money] NULL,
	[TotalDiscountAmount] [money] NULL,
	[EffectiveTo] [datetime] NULL,
	[ExpiresOn] [datetime] NULL,
	[ClosedOn] [datetime] NULL,
	[RequestDeliveryBy] [datetime] NULL,
	[ShippingMethodCode] [int] NULL,
	[PaymentTermsCode] [int] NULL,
	[FreightTermsCode] [int] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[StateCode] [int] NOT NULL,
	[StatusCode] [int] NULL,
	[ShipTo_Name] [nvarchar](200) NULL,
	[VersionNumber] [timestamp] NULL,
	[ShipTo_Line1] [nvarchar](50) NULL,
	[ShipTo_Line2] [nvarchar](50) NULL,
	[ShipTo_Line3] [nvarchar](50) NULL,
	[ShipTo_City] [nvarchar](50) NULL,
	[ShipTo_StateOrProvince] [nvarchar](50) NULL,
	[ShipTo_Country] [nvarchar](50) NULL,
	[ShipTo_PostalCode] [nvarchar](20) NULL,
	[WillCall] [bit] NULL,
	[ShipTo_Telephone] [nvarchar](50) NULL,
	[BillTo_Name] [nvarchar](200) NULL,
	[ShipTo_FreightTermsCode] [int] NULL,
	[ShipTo_Fax] [nvarchar](50) NULL,
	[BillTo_Line1] [nvarchar](50) NULL,
	[BillTo_Line2] [nvarchar](50) NULL,
	[BillTo_Line3] [nvarchar](50) NULL,
	[BillTo_City] [nvarchar](50) NULL,
	[BillTo_StateOrProvince] [nvarchar](50) NULL,
	[BillTo_Country] [nvarchar](50) NULL,
	[BillTo_PostalCode] [nvarchar](20) NULL,
	[BillTo_Telephone] [nvarchar](50) NULL,
	[BillTo_Fax] [nvarchar](50) NULL,
	[DiscountPercentage] [decimal](23, 10) NULL,
	[CampaignId] [uniqueidentifier] NULL,
	[ShipTo_AddressId] [uniqueidentifier] NULL,
	[ShipTo_ContactName] [nvarchar](150) NULL,
	[BillTo_AddressId] [uniqueidentifier] NULL,
	[BillTo_ContactName] [nvarchar](150) NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UniqueDscId] [uniqueidentifier] NULL,
	[ImportSequenceNumber] [int] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[TotalLineItemDiscountAmount_Base] [money] NULL,
	[TotalAmountLessFreight_Base] [money] NULL,
	[DiscountAmount_Base] [money] NULL,
	[FreightAmount_Base] [money] NULL,
	[TotalAmount_Base] [money] NULL,
	[TotalDiscountAmount_Base] [money] NULL,
	[TotalTax_Base] [money] NULL,
	[TotalLineItemAmount_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_Quote] PRIMARY KEY CLUSTERED 
(
	[QuoteId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ContractBase]    Script Date: 04/11/2008 06:39:51 ******/




CREATE TABLE [dbo].[ContractBase](
	[ContractId] [uniqueidentifier] NOT NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[ContractTemplateId] [uniqueidentifier] NOT NULL,
	[ContractServiceLevelCode] [int] NULL,
	[ServiceAddress] [uniqueidentifier] NULL,
	[BillToAddress] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [Set_To_Zero105]  DEFAULT ((0)),
	[OwningTeam] [uniqueidentifier] NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[ContactId] [uniqueidentifier] NULL,
	[AccountId] [uniqueidentifier] NULL,
	[BillingAccountId] [uniqueidentifier] NULL,
	[ContractNumber] [nvarchar](100) NULL,
	[BillingContactId] [uniqueidentifier] NULL,
	[ActiveOn] [datetime] NOT NULL,
	[ExpiresOn] [datetime] NOT NULL,
	[CancelOn] [datetime] NULL,
	[Title] [nvarchar](100) NULL,
	[ContractLanguage] [nvarchar](max) NULL,
	[BillingStartOn] [datetime] NULL,
	[EffectivityCalendar] [nvarchar](168) NULL,
	[BillingEndOn] [datetime] NULL,
	[BillingFrequencyCode] [int] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[AllotmentTypeCode] [int] NULL,
	[UseDiscountAsPercentage] [bit] NULL,
	[ModifiedOn] [datetime] NULL,
	[TotalPrice] [money] NULL,
	[VersionNumber] [timestamp] NULL,
	[TotalDiscount] [money] NULL,
	[StateCode] [int] NOT NULL,
	[NetPrice] [money] NULL,
	[StatusCode] [int] NULL,
	[OriginatingContract] [uniqueidentifier] NULL,
	[Duration] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[TotalDiscount_Base] [money] NULL,
	[NetPrice_Base] [money] NULL,
	[TotalPrice_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_Contract] PRIMARY KEY CLUSTERED 
(
	[ContractId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ContactBase]    Script Date: 04/11/2008 06:39:26 ******/




CREATE TABLE [dbo].[ContactBase](
	[ContactId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DefaultPriceLevelId] [uniqueidentifier] NULL,
	[CustomerSizeCode] [int] NULL,
	[CustomerTypeCode] [int] NULL,
	[PreferredContactMethodCode] [int] NULL,
	[LeadSourceCode] [int] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[OriginatingLeadId] [uniqueidentifier] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[PaymentTermsCode] [int] NULL,
	[ShippingMethodCode] [int] NULL,
	[OwningTeam] [uniqueidentifier] NULL,
	[AccountId] [uniqueidentifier] NULL,
	[ParticipatesInWorkflow] [bit] NULL CONSTRAINT [Set_To_Zero103]  DEFAULT ((0)),
	[IsBackofficeCustomer] [bit] NULL,
	[Salutation] [nvarchar](100) NULL,
	[JobTitle] [nvarchar](100) NULL,
	[FirstName] [nvarchar](50) NULL,
	[Department] [nvarchar](100) NULL,
	[NickName] [nvarchar](50) NULL,
	[MiddleName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[Suffix] [nvarchar](10) NULL,
	[YomiFirstName] [nvarchar](150) NULL,
	[FullName] [nvarchar](160) NULL,
	[YomiMiddleName] [nvarchar](150) NULL,
	[YomiLastName] [nvarchar](150) NULL,
	[Anniversary] [datetime] NULL,
	[BirthDate] [datetime] NULL,
	[GovernmentId] [nvarchar](50) NULL,
	[YomiFullName] [nvarchar](450) NULL,
	[Description] [nvarchar](max) NULL,
	[EmployeeId] [nvarchar](50) NULL,
	[GenderCode] [int] NULL,
	[AnnualIncome] [money] NULL,
	[HasChildrenCode] [int] NULL,
	[EducationCode] [int] NULL,
	[WebSiteUrl] [nvarchar](200) NULL,
	[FamilyStatusCode] [int] NULL,
	[FtpSiteUrl] [nvarchar](200) NULL,
	[EMailAddress1] [nvarchar](100) NULL,
	[SpousesName] [nvarchar](100) NULL,
	[AssistantName] [nvarchar](100) NULL,
	[EMailAddress2] [nvarchar](100) NULL,
	[AssistantPhone] [nvarchar](50) NULL,
	[EMailAddress3] [nvarchar](100) NULL,
	[DoNotPhone] [bit] NULL CONSTRAINT [DF_ContactBase_DoNotPhone]  DEFAULT ((0)),
	[ManagerName] [nvarchar](100) NULL,
	[ManagerPhone] [nvarchar](50) NULL,
	[DoNotFax] [bit] NULL CONSTRAINT [DF_ContactBase_DoNotFax]  DEFAULT ((0)),
	[DoNotEMail] [bit] NULL CONSTRAINT [DF_ContactBase_DoNotEMail]  DEFAULT ((0)),
	[DoNotPostalMail] [bit] NULL CONSTRAINT [DF_ContactBase_DoNotPostalMail]  DEFAULT ((0)),
	[DoNotBulkEMail] [bit] NULL CONSTRAINT [DF_ContactBase_DoNotBulkEMail]  DEFAULT ((0)),
	[DoNotBulkPostalMail] [bit] NULL CONSTRAINT [DF_ContactBase_DoNotBulkPostalMail]  DEFAULT ((0)),
	[AccountRoleCode] [int] NULL,
	[TerritoryCode] [int] NULL,
	[IsPrivate] [bit] NULL CONSTRAINT [Set_To_Zero104]  DEFAULT ((0)),
	[CreditLimit] [money] NULL,
	[CreatedOn] [datetime] NULL,
	[CreditOnHold] [bit] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[NumberOfChildren] [int] NULL,
	[ChildrensNames] [nvarchar](255) NULL,
	[VersionNumber] [timestamp] NULL,
	[MobilePhone] [nvarchar](50) NULL,
	[Pager] [nvarchar](50) NULL,
	[Telephone1] [nvarchar](50) NULL,
	[Telephone2] [nvarchar](50) NULL,
	[Telephone3] [nvarchar](50) NULL,
	[Fax] [nvarchar](50) NULL,
	[Aging30] [money] NULL,
	[StateCode] [int] NOT NULL,
	[Aging60] [money] NULL,
	[StatusCode] [int] NULL,
	[Aging90] [money] NULL,
	[ParentContactId] [uniqueidentifier] NULL,
	[PreferredSystemUserId] [uniqueidentifier] NULL,
	[PreferredServiceId] [uniqueidentifier] NULL,
	[MasterId] [uniqueidentifier] NULL,
	[PreferredAppointmentDayCode] [int] NULL,
	[PreferredAppointmentTimeCode] [int] NULL,
	[DoNotSendMM] [bit] NULL CONSTRAINT [DF_ContactBase_DoNotSendMM]  DEFAULT ((0)),
	[Merged] [bit] NULL CONSTRAINT [DF_ContactBase_Merged]  DEFAULT ((0)),
	[ExternalUserIdentifier] [nvarchar](50) NULL,
	[SubscriptionId] [uniqueidentifier] NULL,
	[PreferredEquipmentId] [uniqueidentifier] NULL,
	[LastUsedInCampaign] [datetime] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[ImportSequenceNumber] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[AnnualIncome_Base] [money] NULL,
	[CreditLimit_Base] [money] NULL,
	[Aging60_Base] [money] NULL,
	[Aging90_Base] [money] NULL,
	[Aging30_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_Contact] PRIMARY KEY CLUSTERED 
(
	[ContactId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[AnnotationBase]    Script Date: 04/11/2008 06:36:28 ******/




CREATE TABLE [dbo].[AnnotationBase](
	[AnnotationId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OwningTeam] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ObjectTypeCode] [int] NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[ObjectId] [uniqueidentifier] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[Subject] [nvarchar](500) NULL,
	[IsDocument] [bit] NOT NULL CONSTRAINT [Set_To_Zero98]  DEFAULT ((0)),
	[NoteText] [nvarchar](max) NULL,
	[MimeType] [nvarchar](256) NULL,
	[LangId] [nvarchar](2) NULL,
	[DocumentBody] [text] NULL,
	[CreatedOn] [datetime] NULL,
	[FileSize] [int] NULL,
	[FileName] [nvarchar](255) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[IsPrivate] [bit] NULL CONSTRAINT [Set_To_Zero99]  DEFAULT ((0)),
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[StepId] [nvarchar](32) NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [ndx_PrimaryKey_Annotation] PRIMARY KEY NONCLUSTERED 
(
	[AnnotationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
)  TEXTIMAGE_

/****** Object:  Table [dbo].[TemplateBase]    Script Date: 04/11/2008 06:53:32 ******/




CREATE TABLE [dbo].[TemplateBase](
	[TemplateId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Subject] [nvarchar](max) NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[IsPersonal] [bit] NULL CONSTRAINT [Set_To_Zero149]  DEFAULT ((0)),
	[DeletionStateCode] [int] NULL,
	[OwningTeam] [uniqueidentifier] NULL,
	[MimeType] [nvarchar](256) NULL,
	[TemplateTypeCode] [int] NOT NULL CONSTRAINT [DF_TemplateBase_TemplateTypeCode]  DEFAULT ((8)),
	[Body] [nvarchar](max) NULL,
	[Title] [nvarchar](200) NULL,
	[Description] [nvarchar](max) NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[PresentationXml] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[SubjectPresentationXml] [nvarchar](max) NULL,
	[GenerationTypeCode] [int] NULL CONSTRAINT [DF_TemplateBase_GenerationTypeCode]  DEFAULT ((0)),
	[LanguageCode] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_Template] PRIMARY KEY CLUSTERED 
(
	[TemplateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[TeamMembership]    Script Date: 04/11/2008 06:53:25 ******/




CREATE TABLE [dbo].[TeamMembership](
	[TeamId] [uniqueidentifier] NOT NULL,
	[SystemUserId] [uniqueidentifier] NOT NULL,
	[TeamMembershipId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_TeamMembership_TeamMembershipId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_TeamMembership] PRIMARY KEY CLUSTERED 
(
	[TeamMembershipId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_TeamMembership] UNIQUE NONCLUSTERED 
(
	[TeamId] ASC,
	[SystemUserId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[OpportunityBase]    Script Date: 04/11/2008 06:45:28 ******/




CREATE TABLE [dbo].[OpportunityBase](
	[OpportunityId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[PriceLevelId] [uniqueidentifier] NULL,
	[OpportunityRatingCode] [int] NULL,
	[PriorityCode] [int] NULL,
	[ContactId] [uniqueidentifier] NULL,
	[AccountId] [uniqueidentifier] NULL,
	[Name] [nvarchar](300) NULL,
	[StepId] [uniqueidentifier] NULL,
	[Description] [nvarchar](max) NULL,
	[EstimatedValue] [money] NULL,
	[StepName] [nvarchar](200) NULL,
	[SalesStageCode] [int] NULL,
	[ParticipatesInWorkflow] [bit] NULL CONSTRAINT [Set_To_Zero119]  DEFAULT ((0)),
	[PricingErrorCode] [int] NULL,
	[EstimatedCloseDate] [datetime] NULL,
	[CloseProbability] [int] NULL,
	[ActualValue] [money] NULL,
	[ActualCloseDate] [datetime] NULL,
	[OwningTeam] [uniqueidentifier] NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[OriginatingLeadId] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[IsPrivate] [bit] NULL CONSTRAINT [Set_To_Zero120]  DEFAULT ((0)),
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[StateCode] [int] NOT NULL,
	[StatusCode] [int] NULL,
	[IsRevenueSystemCalculated] [bit] NULL CONSTRAINT [Set_To_Zero121]  DEFAULT ((0)),
	[CampaignId] [uniqueidentifier] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[ImportSequenceNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ActualValue_Base] [money] NULL,
	[EstimatedValue_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_Opportunity] PRIMARY KEY CLUSTERED 
(
	[OpportunityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[OpportunityCompetitors]    Script Date: 04/11/2008 06:45:35 ******/




CREATE TABLE [dbo].[OpportunityCompetitors](
	[OpportunityId] [uniqueidentifier] NOT NULL,
	[CompetitorId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[OpportunityCompetitorId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_OpportunityCompetitors_OpportunityCompetitorId]  DEFAULT (newid()),
 CONSTRAINT [cndx_PrimaryKey_OpportunityCompetitors] PRIMARY KEY CLUSTERED 
(
	[OpportunityCompetitorId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_OpportunityCompetitors] UNIQUE NONCLUSTERED 
(
	[OpportunityId] ASC,
	[CompetitorId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[OpportunityProductBase]    Script Date: 04/11/2008 06:45:46 ******/




CREATE TABLE [dbo].[OpportunityProductBase](
	[ProductId] [uniqueidentifier] NOT NULL,
	[OpportunityProductId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PricingErrorCode] [int] NULL,
	[IsProductOverridden] [bit] NULL CONSTRAINT [Set_To_Zero122]  DEFAULT ((0)),
	[IsPriceOverridden] [bit] NULL,
	[PricePerUnit] [money] NULL,
	[OpportunityId] [uniqueidentifier] NOT NULL,
	[BaseAmount] [money] NULL,
	[ExtendedAmount] [money] NULL,
	[UoMId] [uniqueidentifier] NULL,
	[ManualDiscountAmount] [money] NULL,
	[Quantity] [decimal](23, 10) NULL CONSTRAINT [Set_To_Zero123]  DEFAULT ((0)),
	[CreatedOn] [datetime] NULL,
	[VolumeDiscountAmount] [money] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[Tax] [money] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ProductDescription] [nvarchar](500) NULL,
	[ModifiedOn] [datetime] NULL,
	[Description] [nvarchar](max) NULL,
	[VersionNumber] [timestamp] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[BaseAmount_Base] [money] NULL,
	[ManualDiscountAmount_Base] [money] NULL,
	[VolumeDiscountAmount_Base] [money] NULL,
	[PricePerUnit_Base] [money] NULL,
	[Tax_Base] [money] NULL,
	[ExtendedAmount_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_OpportunityProduct] PRIMARY KEY CLUSTERED 
(
	[OpportunityProductId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[CustomerOpportunityRoleBase]    Script Date: 04/11/2008 06:40:31 ******/




CREATE TABLE [dbo].[CustomerOpportunityRoleBase](
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[Description] [nvarchar](500) NULL,
	[ModifiedOn] [datetime] NULL,
	[CustomerId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[CustomerOpportunityRoleId] [uniqueidentifier] NOT NULL,
	[OpportunityRoleId] [uniqueidentifier] NULL,
	[OpportunityId] [uniqueidentifier] NOT NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[CustomerIdType] [int] NOT NULL,
	[UniqueDscId] [uniqueidentifier] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_CustomerOpportunityRoleBase_DeletionStateCode]  DEFAULT ((0)),
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_CustomerOpportunityRole] PRIMARY KEY CLUSTERED 
(
	[CustomerOpportunityRoleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ImportFileBase]    Script Date: 04/11/2008 06:42:08 ******/




CREATE TABLE [dbo].[ImportFileBase](
	[Name] [nvarchar](256) NULL,
	[IsFirstRowHeader] [bit] NOT NULL CONSTRAINT [DF_ImportFileBase_IsFirstRowHeader]  DEFAULT ((1)),
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[SuccessCount] [int] NULL CONSTRAINT [DF_ImportFileBase_SuccessCount]  DEFAULT ((0)),
	[StatusCode] [int] NULL CONSTRAINT [DF_ImportFileBase_StatusCode]  DEFAULT ((1)),
	[AdditionalHeaderRow] [nvarchar](max) NULL,
	[ProcessCode] [int] NOT NULL CONSTRAINT [DF_ImportFileBase_ProcessCode]  DEFAULT ((1)),
	[ParsedTableColumnsNumber] [int] NULL CONSTRAINT [DF_ImportFileBase_ParsedTableColumnsNumber]  DEFAULT ((0)),
	[Content] [nvarchar](max) NOT NULL,
	[RecordsOwnerId] [uniqueidentifier] NULL,
	[Source] [nvarchar](256) NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[SourceEntityName] [nvarchar](160) NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_ImportFileBase_StateCode]  DEFAULT ((0)),
	[ParsedTableColumnPrefix] [nvarchar](160) NULL,
	[ParsedTableName] [nvarchar](160) NULL,
	[ProgressCounter] [int] NULL CONSTRAINT [DF_ImportFileBase_ProgressCounter]  DEFAULT ((0)),
	[EnableDuplicateDetection] [bit] NULL CONSTRAINT [DF_ImportFileBase_EnableDuplicateDetection]  DEFAULT ((0)),
	[ImportId] [uniqueidentifier] NOT NULL,
	[FailureCount] [int] NULL CONSTRAINT [DF_ImportFileBase_FailureCount]  DEFAULT ((0)),
	[FieldDelimiterCode] [int] NOT NULL CONSTRAINT [DF_ImportFileBase_FieldDelimiterCode]  DEFAULT ((2)),
	[TargetEntityName] [nvarchar](160) NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[HeaderRow] [nvarchar](max) NULL,
	[CompletedOn] [datetime] NULL,
	[DataDelimiterCode] [int] NOT NULL CONSTRAINT [DF_ImportFileBase_DataDelimiterCode]  DEFAULT ((1)),
	[TotalCount] [int] NULL CONSTRAINT [DF_ImportFileBase_TotalCount]  DEFAULT ((0)),
	[ProcessingStatus] [int] NOT NULL CONSTRAINT [DF_ImportFileBase_ProcessingStatus]  DEFAULT ((1)),
	[ImportFileId] [uniqueidentifier] NOT NULL,
	[Size] [nvarchar](160) NULL,
	[CreatedOn] [datetime] NULL,
	[ImportMapId] [uniqueidentifier] NULL,
	[UseSystemMap] [bit] NOT NULL CONSTRAINT [DF_ImportFileBase_UseSystemMap]  DEFAULT ((0)),
	[ModifiedOn] [datetime] NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[OwningUser] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_ImportFile] PRIMARY KEY CLUSTERED 
(
	[ImportFileId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ImportDataBase]    Script Date: 04/11/2008 06:41:55 ******/




CREATE TABLE [dbo].[ImportDataBase](
	[CreatedOn] [datetime] NOT NULL,
	[LineNumber] [int] NULL,
	[RecordId] [uniqueidentifier] NULL,
	[Data] [nvarchar](max) NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[ImportFileId] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ImportDataId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_ImportDataBase_StateCode]  DEFAULT ((0)),
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[HasError] [bit] NULL CONSTRAINT [DF_ImportDataBase_HasError]  DEFAULT ((0)),
	[StatusCode] [int] NOT NULL CONSTRAINT [DF_ImportDataBase_StatusCode]  DEFAULT ((1)),
	[OwningUser] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_ImportData] PRIMARY KEY CLUSTERED 
(
	[ImportDataId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ImportLogBase]    Script Date: 04/11/2008 06:42:17 ******/




CREATE TABLE [dbo].[ImportLogBase](
	[ModifiedBy] [uniqueidentifier] NULL,
	[SequenceNumber] [int] NOT NULL,
	[LineNumber] [int] NULL,
	[AdditionalInfo] [nvarchar](max) NULL,
	[LogPhaseCode] [int] NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_ImportLogBase_StateCode]  DEFAULT ((0)),
	[ErrorNumber] [int] NULL,
	[StatusCode] [int] NOT NULL CONSTRAINT [DF_ImportLogBase_StatusCode]  DEFAULT ((1)),
	[CreatedOn] [datetime] NOT NULL,
	[ImportLogId] [uniqueidentifier] NOT NULL,
	[ErrorDescription] [nvarchar](512) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[HeaderColumn] [nvarchar](max) NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ColumnValue] [nvarchar](max) NULL,
	[ImportDataId] [uniqueidentifier] NULL,
	[ImportFileId] [uniqueidentifier] NULL,
	[OwningUser] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_ImportLog] PRIMARY KEY CLUSTERED 
(
	[ImportLogId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[BulkOperationLogBase]    Script Date: 04/11/2008 06:37:13 ******/




CREATE TABLE [dbo].[BulkOperationLogBase](
	[RegardingObjectId] [uniqueidentifier] NULL,
	[ErrorNumber] [int] NULL,
	[CreatedObjectId] [uniqueidentifier] NULL,
	[BulkOperationLogId] [uniqueidentifier] NOT NULL,
	[BulkOperationId] [uniqueidentifier] NOT NULL,
	[AdditionalInfo] [nvarchar](max) NULL,
	[RegardingObjectIdTypeCode] [int] NULL,
	[CreatedObjectIdTypeCode] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_BulkOperationLog] PRIMARY KEY CLUSTERED 
(
	[BulkOperationLogId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[CalendarRuleBase]    Script Date: 04/11/2008 06:37:51 ******/




CREATE TABLE [dbo].[CalendarRuleBase](
	[IsVaried] [bit] NULL,
	[Rank] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[Description] [nvarchar](max) NULL,
	[CalendarRuleId] [uniqueidentifier] NOT NULL,
	[Effort] [float] NULL,
	[EndTime] [datetime] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[TimeCode] [int] NULL,
	[StartTime] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[Offset] [int] NULL,
	[IsSimple] [bit] NULL,
	[Name] [nvarchar](160) NULL,
	[TimeZoneCode] [int] NULL,
	[IsSelected] [bit] NULL,
	[ExtentCode] [int] NULL,
	[EffectiveIntervalEnd] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[CalendarId] [uniqueidentifier] NOT NULL,
	[InnerCalendarId] [uniqueidentifier] NULL,
	[Pattern] [nvarchar](256) NULL,
	[GroupDesignator] [nvarchar](36) NULL,
	[IsModified] [bit] NULL,
	[SubCode] [int] NULL,
	[Duration] [int] NULL,
	[EffectiveIntervalStart] [datetime] NULL,
	[ServiceId] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_CalendarRule] PRIMARY KEY CLUSTERED 
(
	[CalendarRuleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ActivityPointerBase]    Script Date: 04/11/2008 06:36:19 ******/




CREATE TABLE [dbo].[ActivityPointerBase](
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[ActualEnd] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[ActivityId] [uniqueidentifier] NOT NULL,
	[IsBilled] [bit] NULL CONSTRAINT [DF_ActivityPointerBase_IsBilled]  DEFAULT ((0)),
	[CreatedBy] [uniqueidentifier] NULL,
	[Description] [nvarchar](max) NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_ActivityPointerBase_DeletionStateCode]  DEFAULT ((0)),
	[ModifiedOn] [datetime] NULL,
	[ServiceId] [uniqueidentifier] NULL,
	[ActivityTypeCode] [int] NOT NULL,
	[StateCode] [int] NOT NULL,
	[ScheduledEnd] [datetime] NULL,
	[ScheduledDurationMinutes] [int] NULL,
	[ActualDurationMinutes] [int] NULL,
	[StatusCode] [int] NULL,
	[ActualStart] [datetime] NULL,
	[CreatedOn] [datetime] NULL,
	[PriorityCode] [int] NULL CONSTRAINT [DF_ActivityPointerBase_PriorityCode]  DEFAULT ((1)),
	[RegardingObjectId] [uniqueidentifier] NULL,
	[Subject] [nvarchar](200) NULL,
	[IsWorkflowCreated] [bit] NULL CONSTRAINT [DF_ActivityPointerBase_IsWorkflowCreated]  DEFAULT ((0)),
	[ScheduledStart] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[RegardingObjectTypeCode] [int] NULL,
	[RegardingObjectIdDsc] [int] NULL,
	[RegardingObjectIdName] [nvarchar](400) NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[RegardingObjectIdYomiName] [nvarchar](400) NULL,
 CONSTRAINT [ndx_PrimaryKey_ActivityPointer] PRIMARY KEY NONCLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [MetadataSchema].[Attribute]    Script Date: 04/11/2008 06:56:13 ******/




CREATE TABLE [MetadataSchema].[Attribute](
	[AttributeId] [uniqueidentifier] NOT NULL,
	[AttributeTypeId] [uniqueidentifier] NULL,
	[Name] [nvarchar](50) NULL,
	[PhysicalName] [nvarchar](50) NULL,
	[Length] [int] NULL,
	[IsNullable] [bit] NULL,
	[XmlAbbreviation] [nvarchar](50) NULL,
	[EntityId] [uniqueidentifier] NOT NULL,
	[DefaultValue] [nvarchar](100) NULL,
	[ColumnNumber] [int] NULL,
	[ValidForUpdateAPI] [bit] NULL,
	[LogicalName] [nvarchar](50) NOT NULL,
	[ValidForReadAPI] [bit] NULL,
	[ValidForCreateAPI] [bit] NULL,
	[VisibleToPlatform] [bit] NULL CONSTRAINT [Set_To_One]  DEFAULT ((1)),
	[IsPKAttribute] [bit] NULL,
	[IsCustomField] [bit] NULL CONSTRAINT [DF_Attribute_IsCustomField]  DEFAULT ((0)),
	[IsLogical] [bit] NOT NULL CONSTRAINT [Set_To_Zero3]  DEFAULT ((0)),
	[DisplayMask] [int] NULL CONSTRAINT [Set_To_Zero4]  DEFAULT ((0)),
	[AttributeOf] [uniqueidentifier] NULL,
	[ReferencedEntityObjectTypeCode] [int] NOT NULL CONSTRAINT [Set_To_Zero5]  DEFAULT ((0)),
	[AggregateOf] [uniqueidentifier] NULL,
	[IsSortAttribute] [bit] NOT NULL CONSTRAINT [DF_Attribute_IsSortAttribute_0]  DEFAULT ((0)),
	[PrecisionValue] [tinyint] NULL,
	[PrecisionSource] [tinyint] NULL,
	[IsIdentity] [bit] NOT NULL CONSTRAINT [DF_Attribute_IsIdentity_0]  DEFAULT ((0)),
	[IsReplicated] [bit] NOT NULL CONSTRAINT [DF_Attribute_IsReplicated_1]  DEFAULT ((1)),
	[VersionNumber] [timestamp] NOT NULL,
	[YomiOf] [uniqueidentifier] NULL,
	[AttributeRowId] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[AppDefaultValue] [int] NULL,
	[AttributeLogicalTypeId] [nvarchar](50) NULL,
	[Locked] [bit] NOT NULL DEFAULT ((0)),
	[AttributeImeModeId] [nvarchar](50) NULL,
	[AttributeRequiredLevelId] [nvarchar](50) NULL,
	[MaxLength] [int] NULL,
	[MinValue] [float] NULL,
	[MaxValue] [float] NULL,
	[Accuracy] [int] NULL,
	[AccuracySource] [int] NULL,
	[LookupClass] [nvarchar](50) NULL,
	[LookupStyle] [nvarchar](50) NULL,
	[LookupBrowse] [bit] NULL,
	[ImeMode] [nvarchar](50) NULL,
	[InProduction] [bit] NOT NULL DEFAULT ((1)),
	[CustomizationLevel] [tinyint] NOT NULL DEFAULT ((0)),
	[HasMultipleLabels] [bit] NOT NULL DEFAULT ((0)),
	[IsRowGuidAttribute] [bit] NOT NULL DEFAULT ((0)),
	[IsBaseCurrency] [bit] NULL,
	[CalculationOf] [uniqueidentifier] NULL,
	[IsDeprecated] [bit] NULL,
 CONSTRAINT [XPKAttribute] PRIMARY KEY CLUSTERED 
(
	[AttributeId] ASC,
	[InProduction] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [MetadataSchema].[EntityRelationshipRole]    Script Date: 04/11/2008 06:56:55 ******/






CREATE TABLE [MetadataSchema].[EntityRelationshipRole](
	[EntityRelationshipRoleId] [uniqueidentifier] NOT NULL,
	[EntityRelationshipId] [uniqueidentifier] NOT NULL,
	[EntityId] [uniqueidentifier] NOT NULL,
	[RelationshipRoleType] [tinyint] NOT NULL,
	[NavPaneDisplayOption] [tinyint] NULL,
	[NavPaneArea] [tinyint] NULL,
	[NavPaneOrder] [int] NULL,
	[NavPaneIcon] [nvarchar](255) NULL,
	[NavPaneOffline] [bit] NULL,
	[NavPaneQueryApi] [varchar](100) NULL,
	[NavPaneViewId] [varchar](100) NULL,
	[NavPaneIsCustomizable] [bit] NULL,
	[EntityRelationshipRoleRowId] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[VersionNumber] [timestamp] NOT NULL,
	[CustomizationLevel] [tinyint] NOT NULL DEFAULT ((0)),
	[IntersectEntityAttributeId] [uniqueidentifier] NULL,
	[AssociationRoleOrdinal] [int] NULL,
 CONSTRAINT [XPKEntityRelationshipRole] PRIMARY KEY CLUSTERED 
(
	[EntityRelationshipRoleId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 



/****** Object:  Table [MetadataSchema].[Relationship]    Script Date: 04/11/2008 06:57:09 ******/
SET ANSI_NULLS OFF



CREATE TABLE [MetadataSchema].[Relationship](
	[RelationshipId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Name] [nvarchar](255) NULL,
	[ReferencingEntityId] [uniqueidentifier] NOT NULL,
	[ReferencingAttributeId] [uniqueidentifier] NOT NULL,
	[ReferencedEntityId] [uniqueidentifier] NOT NULL,
	[ReferencedAttributeId] [uniqueidentifier] NOT NULL,
	[RelationshipType] [int] NULL,
	[IsLogical] [bit] NOT NULL CONSTRAINT [Set_To_Zero_Relationship_IsLogical]  DEFAULT ((0)),
	[CascadeDelete] [tinyint] NOT NULL DEFAULT ((2)),
	[CascadeAssign] [tinyint] NULL DEFAULT ((0)),
	[CascadeShare] [tinyint] NULL DEFAULT ((0)),
	[CascadeUnShare] [tinyint] NULL DEFAULT ((0)),
	[CascadeMerge] [tinyint] NULL DEFAULT ((0)),
	[CascadeReparent] [tinyint] NULL DEFAULT ((0)),
	[CascadeLinkMask] [bigint] NULL DEFAULT ((0)),
	[IsCustomRelationship] [bit] NOT NULL CONSTRAINT [Set_To_Zero_Relationship_IsCustomRelationship]  DEFAULT ((0)),
	[IsValidForAdvancedFind] [bit] NOT NULL CONSTRAINT [Set_To_Zero_Relationship_IsValidForAdvancedFind]  DEFAULT ((0)),
	[VersionNumber] [timestamp] NOT NULL,
	[RelationshipRowId] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[CustomizationLevel] [tinyint] NOT NULL DEFAULT ((0)),
 CONSTRAINT [XPKRelationship] PRIMARY KEY CLUSTERED 
(
	[RelationshipId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [MetadataSchema].[EntityIndex]    Script Date: 04/11/2008 06:56:44 ******/
SET ANSI_NULLS OFF



CREATE TABLE [MetadataSchema].[EntityIndex](
	[IndexId] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](128) NOT NULL,
	[EntityId] [uniqueidentifier] NULL,
	[IsClustered] [bit] NULL,
	[IsUnique] [bit] NULL,
	[SqlFillFactor] [int] NULL DEFAULT ((80)),
	[RecreateIndex] [bit] NULL,
	[ModifiedOn] [datetime] NULL,
	[IndexType] [int] NULL,
	[IsPrimaryKey] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[IndexId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[WorkflowBase]    Script Date: 04/11/2008 06:55:41 ******/




CREATE TABLE [dbo].[WorkflowBase](
	[OnDemand] [bit] NULL,
	[Activities] [nvarchar](max) NULL,
	[PluginTypeId] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[Type] [int] NOT NULL,
	[WorkflowId] [uniqueidentifier] NOT NULL,
	[ActiveWorkflowId] [uniqueidentifier] NULL,
	[ParentWorkflowId] [uniqueidentifier] NULL,
	[UIData] [nvarchar](max) NULL,
	[PrimaryEntity] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[IsCrmUIWorkflow] [bit] NULL,
	[Subprocess] [bit] NULL,
	[Scope] [int] NOT NULL CONSTRAINT [DF_WorkflowBase_Scope]  DEFAULT ((4)),
	[StatusCode] [int] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[Rules] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[Name] [nvarchar](100) NOT NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[StateCode] [int] NOT NULL,
	[OwningUser] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_Workflow] PRIMARY KEY CLUSTERED 
(
	[WorkflowId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SdkMessageProcessingStepBase]    Script Date: 04/11/2008 06:51:26 ******/




CREATE TABLE [dbo].[SdkMessageProcessingStepBase](
	[CreatedOn] [datetime] NULL,
	[Configuration] [text] NULL,
	[SupportedDeployment] [int] NOT NULL CONSTRAINT [DF_SdkMessageProcessingStepBase_SupportedDeployment]  DEFAULT ((0)),
	[PluginTypeId] [uniqueidentifier] NOT NULL,
	[Rank] [int] NOT NULL,
	[SdkMessageId] [uniqueidentifier] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[SdkMessageProcessingStepId] [uniqueidentifier] NOT NULL,
	[Stage] [int] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[SdkMessageProcessingStepIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_SdkMessageProcessingStepBase_SdkMessageProcessingStepIdUnique]  DEFAULT (newid()),
	[FilteringAttributes] [nvarchar](256) NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SdkMessageProcessingStepBase_CustomizationLevel]  DEFAULT ((0)),
	[ModifiedBy] [uniqueidentifier] NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_SdkMessageProcessingStepBase_StateCode]  DEFAULT ((0)),
	[DeletionStateCode] [int] NOT NULL,
	[SdkMessageProcessingStepSecureConfigId] [uniqueidentifier] NULL,
	[Description] [nvarchar](256) NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[Mode] [int] NOT NULL,
	[SdkMessageFilterId] [uniqueidentifier] NULL,
	[StatusCode] [int] NULL CONSTRAINT [DF_SdkMessageProcessingStepBase_StatusCode]  DEFAULT ((1)),
	[ImpersonatingUserId] [uniqueidentifier] NULL,
	[InvocationSource] [int] NOT NULL CONSTRAINT [DF_SdkMessageProcessingStepBase_InvocationSource]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_SdkMessageProcessingStep] PRIMARY KEY CLUSTERED 
(
	[SdkMessageProcessingStepId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SdkMessageProcessingStepBase_SdkMessageProcessingStepIdUnique] UNIQUE NONCLUSTERED 
(
	[SdkMessageProcessingStepIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
)  TEXTIMAGE_

/****** Object:  Table [dbo].[ServiceBase]    Script Date: 04/11/2008 06:52:18 ******/




CREATE TABLE [dbo].[ServiceBase](
	[Name] [nvarchar](160) NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ServiceId] [uniqueidentifier] NOT NULL,
	[ResourceSpecId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[AnchorOffset] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[Duration] [int] NOT NULL,
	[IsSchedulable] [bit] NOT NULL CONSTRAINT [DF_ServiceBase_IsSchedulable]  DEFAULT ((1)),
	[StrategyId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[InitialStatusCode] [int] NOT NULL,
	[CalendarId] [uniqueidentifier] NULL,
	[ShowResources] [bit] NULL CONSTRAINT [DF_ServiceBase_ShowResources]  DEFAULT ((1)),
	[Granularity] [nvarchar](100) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[IsVisible] [bit] NULL CONSTRAINT [DF_ServiceBase_IsVisible]  DEFAULT ((1)),
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_Service] PRIMARY KEY CLUSTERED 
(
	[ServiceId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[PluginTypeBase]    Script Date: 04/11/2008 06:47:10 ******/




CREATE TABLE [dbo].[PluginTypeBase](
	[FriendlyName] [nvarchar](256) NOT NULL,
	[PluginTypeId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[TypeName] [nvarchar](256) NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[IsWorkflowActivity] [bit] NULL CONSTRAINT [DF_PluginTypeBase_IsWorkflowActivity]  DEFAULT ((0)),
	[PluginTypeIdUnique] [uniqueidentifier] NOT NULL CONSTRAINT [DF_PluginTypeBase_PluginTypeIdUnique]  DEFAULT (newid()),
	[PluginAssemblyId] [uniqueidentifier] NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_PluginTypeBase_CustomizationLevel]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_PluginType] PRIMARY KEY CLUSTERED 
(
	[PluginTypeId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[IncidentResolutionBase]    Script Date: 04/11/2008 06:42:41 ******/




CREATE TABLE [dbo].[IncidentResolutionBase](
	[Category] [nvarchar](250) NULL,
	[ActivityId] [uniqueidentifier] NOT NULL,
	[TimeSpent] [int] NULL CONSTRAINT [DF_IncidentResolutionBase_TimeSpent]  DEFAULT ((0)),
	[Subcategory] [nvarchar](250) NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_IncidentResolution] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[BulkOperationBase]    Script Date: 04/11/2008 06:37:10 ******/




CREATE TABLE [dbo].[BulkOperationBase](
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_BulkOperationBase_DeletionStateCode]  DEFAULT ((0)),
	[TargetedRecordTypeCode] [int] NULL,
	[CreatedRecordTypeCode] [int] NULL,
	[Parameters] [nvarchar](max) NULL,
	[ErrorNumber] [int] NULL,
	[BulkOperationNumber] [nvarchar](32) NULL,
	[OperationTypeCode] [int] NULL,
	[TargetMembersCount] [int] NULL CONSTRAINT [DF_BulkOperationBase_TargetMembersCount]  DEFAULT ((0)),
	[ActivityId] [uniqueidentifier] NOT NULL,
	[SuccessCount] [int] NULL CONSTRAINT [DF_BulkOperationBase_SuccessCount]  DEFAULT ((0)),
	[FailureCount] [int] NULL CONSTRAINT [DF_BulkOperationBase_FailureCount]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_BulkOperation] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[QuoteCloseBase]    Script Date: 04/11/2008 06:48:37 ******/




CREATE TABLE [dbo].[QuoteCloseBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
	[Revision] [int] NULL,
	[Subcategory] [nvarchar](250) NULL,
	[QuoteNumber] [nvarchar](100) NULL,
	[Category] [nvarchar](250) NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_QuoteClose] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[OpportunityCloseBase]    Script Date: 04/11/2008 06:45:32 ******/




CREATE TABLE [dbo].[OpportunityCloseBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
	[ActualRevenue] [money] NULL,
	[CompetitorId] [uniqueidentifier] NULL,
	[Category] [nvarchar](250) NULL,
	[Subcategory] [nvarchar](250) NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[ImportSequenceNumber] [int] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ActualRevenue_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_OpportunityClose] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ActivityMimeAttachment]    Script Date: 04/11/2008 06:36:05 ******/




CREATE TABLE [dbo].[ActivityMimeAttachment](
	[AttachmentNumber] [int] NOT NULL CONSTRAINT [DF_ActivityMimeAttachment_AttachmentNumber]  DEFAULT ((0)),
	[ActivityMimeAttachmentId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ActivityId] [uniqueidentifier] NOT NULL,
	[Body] [text] NULL,
	[Subject] [nvarchar](2000) NULL,
	[FileSize] [int] NULL,
	[MimeType] [nvarchar](256) NULL,
	[FileName] [nvarchar](255) NULL,
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_ActivityMimeAttachment] PRIMARY KEY CLUSTERED 
(
	[ActivityMimeAttachmentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
)  TEXTIMAGE_

/****** Object:  Table [dbo].[ActivityPartyBase]    Script Date: 04/11/2008 06:36:09 ******/




CREATE TABLE [dbo].[ActivityPartyBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
	[ActivityPartyId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PartyId] [uniqueidentifier] NULL,
	[PartyObjectTypeCode] [int] NOT NULL,
	[ParticipationTypeMask] [int] NOT NULL,
	[AddressUsed] [nvarchar](200) NULL,
	[PartyIdName] [nvarchar](400) NULL,
	[PartyIdDsc] [int] NULL,
	[Effort] [float] NULL,
	[ExchangeEntryId] [nvarchar](512) NULL,
	[ResourceSpecId] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[DoNotPhone] [bit] NULL,
 CONSTRAINT [cndx_PrimaryKey_ActivityParty] PRIMARY KEY CLUSTERED 
(
	[ActivityPartyId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[AppointmentBase]    Script Date: 04/11/2008 06:36:34 ******/




CREATE TABLE [dbo].[AppointmentBase](
	[IsAllDayEvent] [bit] NULL CONSTRAINT [DF_AppointmentBase_IsAllDayEvent]  DEFAULT ((0)),
	[Category] [nvarchar](250) NULL,
	[GlobalObjectId] [nvarchar](300) NULL,
	[OutlookOwnerApptId] [int] NULL,
	[Location] [nvarchar](200) NULL,
	[SubscriptionId] [uniqueidentifier] NULL,
	[ActivityId] [uniqueidentifier] NOT NULL,
	[Subcategory] [nvarchar](250) NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_Appointment] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ServiceAppointmentBase]    Script Date: 04/11/2008 06:52:10 ******/




CREATE TABLE [dbo].[ServiceAppointmentBase](
	[Category] [nvarchar](250) NULL,
	[SubscriptionId] [uniqueidentifier] NULL,
	[Location] [nvarchar](500) NULL,
	[Subcategory] [nvarchar](250) NULL,
	[ActivityId] [uniqueidentifier] NOT NULL,
	[IsAllDayEvent] [bit] NULL CONSTRAINT [DF_ServiceAppointmentBase_IsAllDayEvent]  DEFAULT ((0)),
	[SiteId] [uniqueidentifier] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_ServiceAppointment] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[CampaignActivityBase]    Script Date: 04/11/2008 06:37:56 ******/




CREATE TABLE [dbo].[CampaignActivityBase](
	[IgnoreInactiveListMembers] [bit] NULL CONSTRAINT [DF_CampaignActivityBase_IgnoreInactiveListMembers]  DEFAULT ((1)),
	[ActualCost] [money] NULL CONSTRAINT [DF_CampaignActivityBase_ActualCost]  DEFAULT ((0)),
	[ChannelTypeCode] [int] NULL,
	[BudgetedCost] [money] NULL CONSTRAINT [DF_CampaignActivityBase_BudgetedCost]  DEFAULT ((0)),
	[TypeCode] [int] NULL,
	[ActivityId] [uniqueidentifier] NOT NULL,
	[ExcludeIfContactedInXDays] [int] NULL CONSTRAINT [DF_CampaignActivityBase_ExcludeIfContactedInXDays]  DEFAULT ((0)),
	[Category] [nvarchar](250) NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_CampaignActivityBase_DeletionStateCode]  DEFAULT ((0)),
	[DoNotSendOnOptOut] [bit] NULL CONSTRAINT [DF_CampaignActivityBase_DoNotSendOnOptOut]  DEFAULT ((1)),
	[Subcategory] [nvarchar](250) NULL,
	[ImportSequenceNumber] [int] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[BudgetedCost_Base] [money] NULL,
	[ActualCost_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_CampaignActivity] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[FaxBase]    Script Date: 04/11/2008 06:41:42 ******/




CREATE TABLE [dbo].[FaxBase](
	[CoverPageName] [nvarchar](100) NULL,
	[BillingCode] [nvarchar](50) NULL,
	[NumberOfPages] [int] NULL,
	[FaxNumber] [nvarchar](200) NULL,
	[Category] [nvarchar](250) NULL,
	[Tsid] [nvarchar](20) NULL,
	[DirectionCode] [bit] NULL,
	[ActivityId] [uniqueidentifier] NOT NULL,
	[Subcategory] [nvarchar](250) NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[SubscriptionId] [uniqueidentifier] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_Fax] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[EmailHashBase]    Script Date: 04/11/2008 06:41:25 ******/




CREATE TABLE [dbo].[EmailHashBase](
	[HashType] [int] NOT NULL,
	[Hash] [int] NOT NULL,
	[EmailHashId] [uniqueidentifier] NOT NULL,
	[ActivityId] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_EmailHash] PRIMARY KEY CLUSTERED 
(
	[EmailHashId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[OrderCloseBase]    Script Date: 04/11/2008 06:45:49 ******/




CREATE TABLE [dbo].[OrderCloseBase](
	[OrderNumber] [nvarchar](100) NULL,
	[Subcategory] [nvarchar](250) NULL,
	[Revision] [int] NULL,
	[ActivityId] [uniqueidentifier] NOT NULL,
	[Category] [nvarchar](250) NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_OrderClose] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[EmailBase]    Script Date: 04/11/2008 06:41:22 ******/




CREATE TABLE [dbo].[EmailBase](
	[SubmittedBy] [nvarchar](250) NULL,
	[ActivityId] [uniqueidentifier] NOT NULL,
	[MimeType] [nvarchar](256) NULL,
	[ReadReceiptRequested] [bit] NULL CONSTRAINT [DF_EmailBase_ReadReceiptRequested]  DEFAULT ((0)),
	[Subcategory] [nvarchar](250) NULL,
	[DirectionCode] [bit] NULL,
	[TrackingToken] [nvarchar](50) NULL,
	[Category] [nvarchar](250) NULL,
	[Sender] [nvarchar](250) NULL,
	[ToRecipients] [nvarchar](500) NULL,
	[DeliveryReceiptRequested] [bit] NULL CONSTRAINT [DF_EmailBase_DeliveryReceiptRequested]  DEFAULT ((0)),
	[MessageId] [nvarchar](200) NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
	[DeliveryAttempts] [int] NULL,
	[MessageIdDupCheck] [uniqueidentifier] NOT NULL CONSTRAINT [DF_EmailBase_MessageIdDupCheck]  DEFAULT (newid()),
	[Compressed] [bit] NOT NULL CONSTRAINT [DF_EmailBase_Compressed]  DEFAULT ((0)),
	[Notifications] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_Email] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[LetterBase]    Script Date: 04/11/2008 06:44:31 ******/




CREATE TABLE [dbo].[LetterBase](
	[DirectionCode] [bit] NULL,
	[Address] [nvarchar](200) NULL,
	[Subcategory] [nvarchar](250) NULL,
	[ActivityId] [uniqueidentifier] NOT NULL,
	[Category] [nvarchar](250) NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[SubscriptionId] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_Letter] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[CampaignResponseBase]    Script Date: 04/11/2008 06:38:22 ******/




CREATE TABLE [dbo].[CampaignResponseBase](
	[LastName] [nvarchar](50) NULL,
	[PromotionCodeName] [nvarchar](250) NULL,
	[Fax] [nvarchar](50) NULL,
	[Category] [nvarchar](250) NULL,
	[Telephone] [nvarchar](50) NULL,
	[ResponseCode] [int] NULL,
	[Subcategory] [nvarchar](250) NULL,
	[CompanyName] [nvarchar](100) NULL,
	[ChannelTypeCode] [int] NULL,
	[FirstName] [nvarchar](50) NULL,
	[ActivityId] [uniqueidentifier] NOT NULL,
	[EMailAddress] [nvarchar](100) NULL,
	[ReceivedOn] [datetime] NULL,
	[OriginatingActivityId] [uniqueidentifier] NULL,
	[OriginatingActivityIdTypeCode] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
	[YomiLastName] [nvarchar](150) NULL,
	[YomiFirstName] [nvarchar](150) NULL,
	[YomiCompanyName] [nvarchar](100) NULL,
 CONSTRAINT [cndx_PrimaryKey_CampaignResponse] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[PhoneCallBase]    Script Date: 04/11/2008 06:46:53 ******/




CREATE TABLE [dbo].[PhoneCallBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
	[PhoneNumber] [nvarchar](200) NULL,
	[DirectionCode] [bit] NULL,
	[Category] [nvarchar](250) NULL,
	[Subcategory] [nvarchar](250) NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[SubscriptionId] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_PhoneCall] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[TaskBase]    Script Date: 04/11/2008 06:53:17 ******/




CREATE TABLE [dbo].[TaskBase](
	[ActivityId] [uniqueidentifier] NOT NULL,
	[Category] [nvarchar](250) NULL,
	[Subcategory] [nvarchar](250) NULL,
	[PercentComplete] [int] NULL,
	[SubscriptionId] [uniqueidentifier] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_Task] PRIMARY KEY CLUSTERED 
(
	[ActivityId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[OrganizationBase]    Script Date: 04/11/2008 06:46:32 ******/




CREATE TABLE [dbo].[OrganizationBase](
	[OrganizationId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Name] [nvarchar](160) NOT NULL,
	[UserGroupId] [uniqueidentifier] NULL,
	[PrivilegeUserGroupId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[FiscalPeriodType] [int] NULL CONSTRAINT [Set_To_Zero124]  DEFAULT ((0)),
	[FiscalCalendarStart] [datetime] NULL,
	[DateFormatCode] [int] NOT NULL CONSTRAINT [Set_To_Zero125]  DEFAULT ((0)),
	[TimeFormatCode] [int] NOT NULL CONSTRAINT [Set_To_Zero126]  DEFAULT ((0)),
	[CurrencySymbol] [nvarchar](5) NULL CONSTRAINT [ORG_CURRENCY_SYMBOL2]  DEFAULT ('$'),
	[WeekStartDayCode] [int] NOT NULL CONSTRAINT [Set_To_Zero127]  DEFAULT ((0)),
	[DateSeparator] [nvarchar](5) NULL CONSTRAINT [ORG_DATE_SEPARATOR2]  DEFAULT ('/'),
	[FullNameConventionCode] [int] NOT NULL CONSTRAINT [Set_To_Zero128]  DEFAULT ((0)),
	[NegativeFormatCode] [int] NOT NULL CONSTRAINT [Set_To_Zero129]  DEFAULT ((0)),
	[NumberFormat] [nvarchar](2) NULL CONSTRAINT [ORG_NUMBER_FORMAT2]  DEFAULT ('us'),
	[IsDisabled] [bit] NULL CONSTRAINT [Set_To_Zero130]  DEFAULT ((0)),
	[DisabledReason] [nvarchar](500) NULL,
	[KbPrefix] [nvarchar](20) NULL CONSTRAINT [DF_OrganizationBase_KbPrefix]  DEFAULT ('KBA'),
	[CurrentKbNumber] [int] NULL CONSTRAINT [ORG_LOWER_BOUND_10007]  DEFAULT ((1000)),
	[CasePrefix] [nvarchar](20) NULL CONSTRAINT [DF_OrganizationBase_CasePrefix]  DEFAULT ('CAS'),
	[CurrentCaseNumber] [int] NULL CONSTRAINT [ORG_LOWER_BOUND_10008]  DEFAULT ((1000)),
	[ContractPrefix] [nvarchar](20) NULL CONSTRAINT [DF_OrganizationBase_ContractPrefix]  DEFAULT ('CNR'),
	[CurrentContractNumber] [int] NULL CONSTRAINT [ORG_LOWER_BOUND_10009]  DEFAULT ((1000)),
	[QuotePrefix] [nvarchar](20) NULL CONSTRAINT [DF_OrganizationBase_QuotePrefix]  DEFAULT ('QUO'),
	[CurrentQuoteNumber] [int] NULL CONSTRAINT [ORG_LOWER_BOUND_100010]  DEFAULT ((1000)),
	[OrderPrefix] [nvarchar](20) NULL CONSTRAINT [DF_OrganizationBase_OrderPrefix]  DEFAULT ('ORD'),
	[CurrentOrderNumber] [int] NULL CONSTRAINT [ORG_LOWER_BOUND_100011]  DEFAULT ((1000)),
	[InvoicePrefix] [nvarchar](20) NULL CONSTRAINT [DF_OrganizationBase_InvoicePrefix]  DEFAULT ('INV'),
	[CurrentInvoiceNumber] [int] NULL CONSTRAINT [ORG_LOWER_BOUND_100012]  DEFAULT ((1000)),
	[UniqueSpecifierLength] [int] NULL CONSTRAINT [Unique_Specifier_Length2]  DEFAULT ((6)),
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[FiscalYearFormat] [nvarchar](25) NULL,
	[FiscalPeriodFormat] [nvarchar](25) NULL,
	[FiscalYearPeriodConnect] [nvarchar](5) NULL,
	[LanguageCode] [int] NULL,
	[SortId] [int] NULL,
	[DateFormatString] [nvarchar](255) NULL,
	[TimeFormatString] [nvarchar](255) NULL,
	[PricingDecimalPrecision] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_PricingDecimalPrecision]  DEFAULT ((2)),
	[ShowWeekNumber] [bit] NULL CONSTRAINT [Set_To_Zero131]  DEFAULT ((0)),
	[NextTrackingNumber] [int] NULL,
	[TagMaxAggressiveCycles] [tinyint] NOT NULL CONSTRAINT [DF_OrganizationBase_TagMaxAggressiveCycles]  DEFAULT ((2)),
	[TokenKey] [nvarchar](90) NULL,
	[SystemUserId] [uniqueidentifier] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[GrantAccessToNetworkService] [bit] NULL CONSTRAINT [DF_OrganizationBase_GrantAccessToNetworkService]  DEFAULT ((0)),
	[AllowOutlookScheduledSyncs] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_AllowOutlookScheduledSyncs]  DEFAULT ((1)),
	[AllowMarketingEmailExecution] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_AllowMarketingEmailExecution]  DEFAULT ((1)),
	[SqlAccessGroupId] [uniqueidentifier] NULL,
	[CurrencyFormatCode] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_CurrencyFormatCode]  DEFAULT ((0)),
	[FiscalSettingsUpdated] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_FiscalSettingsUpdated]  DEFAULT ((0)),
	[ReportingGroupId] [uniqueidentifier] NULL,
	[TokenExpiry] [smallint] NULL,
	[ShareToPreviousOwnerOnAssign] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_ShareToPreviousOwnerOnAssign]  DEFAULT ((1)),
	[AcknowledgementTemplateId] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[IntegrationUserId] [uniqueidentifier] NULL,
	[TrackingTokenIdBase] [int] NULL,
	[BusinessClosureCalendarId] [uniqueidentifier] NULL,
	[AllowAutoUnsubscribeAcknowledgement] [bit] NULL CONSTRAINT [DF_OrganizationBase_AllowAutoUnsubscribeAcknowledgement]  DEFAULT ((0)),
	[AllowAutoUnsubscribe] [bit] NULL CONSTRAINT [DF_OrganizationBase_AllowAutoUnsubscribe]  DEFAULT ((0)),
	[RegistrationXml] [nvarchar](max) NULL,
	[Picture] [nvarchar](max) NULL,
	[VersionNumber] [timestamp] NULL,
	[TrackingPrefix] [nvarchar](256) NULL,
	[MinOutlookSyncInterval] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_MinOutlookSyncInterval]  DEFAULT ((900000)),
	[BulkOperationPrefix] [nvarchar](20) NOT NULL CONSTRAINT [DF_OrganizationBase_BulkOperationPrefix]  DEFAULT ('BO'),
	[AllowAutoResponseCreation] [bit] NULL CONSTRAINT [DF_OrganizationBase_AllowAutoResponseCreation]  DEFAULT ((1)),
	[MaximumTrackingNumber] [int] NULL,
	[CampaignPrefix] [nvarchar](20) NOT NULL CONSTRAINT [DF_OrganizationBase_CampaignPrefix]  DEFAULT ('CMP'),
	[SqlAccessGroupName] [nvarchar](256) NULL,
	[CurrentCampaignNumber] [int] NULL CONSTRAINT [DF_OrganizationBase_CurrentCampaignNumber]  DEFAULT ((1000)),
	[FiscalYearDisplayCode] [tinyint] NULL,
	[SiteMapXml] [nvarchar](max) NULL,
	[IsRegistered] [bit] NULL CONSTRAINT [DF_OrganizationBase_IsRegistered]  DEFAULT ((0)),
	[ReportingGroupName] [nvarchar](256) NULL,
	[CurrentBulkOperationNumber] [int] NULL CONSTRAINT [DF_OrganizationBase_CurrentBulkOperationNumber]  DEFAULT ((1000)),
	[SchemaNamePrefix] [nvarchar](8) NULL CONSTRAINT [DF_OrganizationBase_SchemaNamePrefix]  DEFAULT ('New'),
	[IgnoreInternalEmail] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_IgnoreInternalEmail]  DEFAULT ((0)),
	[TagPollingPeriod] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_TagPollingPeriod]  DEFAULT ((600000)),
	[TrackingTokenIdDigits] [tinyint] NULL,
	[NumberGroupFormat] [nvarchar](50) NULL,
	[LongDateFormatCode] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_LongDateFormatCode]  DEFAULT ((0)),
	[UTCConversionTimeZoneCode] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[CurrentImportSequenceNumber] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_CurrentImportSequenceNumber]  DEFAULT ((1)),
	[ParsedTablePrefix] [nvarchar](20) NOT NULL CONSTRAINT [DF_OrganizationBase_ParsedTablePrefix]  DEFAULT ('PIF'),
	[V3CalloutConfigHash] [nvarchar](256) NULL,
	[IsFiscalPeriodMonthBased] [bit] NULL CONSTRAINT [DF_OrganizationBase_IsFiscalPeriodMonthBased]  DEFAULT ((0)),
	[LocaleId] [int] NULL,
	[ParsedTableColumnPrefix] [nvarchar](20) NOT NULL CONSTRAINT [DF_OrganizationBase_ParsedTableColumnPrefix]  DEFAULT ('COL'),
	[SupportUserId] [uniqueidentifier] NULL,
	[AMDesignator] [nvarchar](25) NOT NULL CONSTRAINT [DF_OrganizationBase_AMDesignator]  DEFAULT ('AM'),
	[CurrencyDisplayOption] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_CurrencyDisplayOption]  DEFAULT ((0)),
	[MinAddressBookSyncInterval] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_MinAddressBookSyncInterval]  DEFAULT ((3600000)),
	[IsDuplicateDetectionEnabledForOnlineCreateUpdate] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_IsDuplicateDetectionEnabledForOnlineCreateUpdate]  DEFAULT ((1)),
	[FeatureSet] [nvarchar](max) NULL,
	[BlockedAttachments] [nvarchar](max) NULL,
	[IsDuplicateDetectionEnabledForOfflineSync] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_IsDuplicateDetectionEnabledForOfflineSync]  DEFAULT ((1)),
	[AllowOfflineScheduledSyncs] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_AllowOfflineScheduledSyncs]  DEFAULT ((1)),
	[AllowUnresolvedPartiesOnEmailSend] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_AllowUnresolvedPartiesOnEmailSend]  DEFAULT ((0)),
	[TimeSeparator] [nvarchar](5) NULL,
	[CurrentParsedTableNumber] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_CurrentParsedTableNumber]  DEFAULT ((1)),
	[MinOfflineSyncInterval] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_MinOfflineSyncInterval]  DEFAULT ((900000)),
	[AllowWebExcelExport] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_AllowWebExcelExport]  DEFAULT ((1)),
	[ReferenceSiteMapXml] [nvarchar](max) NULL,
	[IsDuplicateDetectionEnabledForImport] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_IsDuplicateDetectionEnabledForImport]  DEFAULT ((1)),
	[CalendarType] [int] NULL CONSTRAINT [DF_OrganizationBase_CalendarType]  DEFAULT ((2)),
	[SQMEnabled] [bit] NULL CONSTRAINT [DF_OrganizationBase_SQMEnabled]  DEFAULT ((0)),
	[NegativeCurrencyFormatCode] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_NegativeCurrencyFormatCode]  DEFAULT ((0)),
	[AllowAddressBookSyncs] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_AllowAddressBookSyncs]  DEFAULT ((1)),
	[ISVIntegrationCode] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_ISVIntegrationCode]  DEFAULT ((0)),
	[DecimalSymbol] [nvarchar](5) NOT NULL CONSTRAINT [DF_OrganizationBase_DecimalSymbol]  DEFAULT ('.'),
	[MaxUploadFileSize] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_MaxUploadFileSize]  DEFAULT ((5242880)),
	[IsAppMode] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_IsAppMode]  DEFAULT ((0)),
	[EnablePricingOnCreate] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_EnablePricingOnCreate]  DEFAULT ((1)),
	[IsSOPIntegrationEnabled] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_IsSOPIntegrationEnabled]  DEFAULT ((0)),
	[PMDesignator] [nvarchar](25) NOT NULL CONSTRAINT [DF_OrganizationBase_PMDesignator]  DEFAULT ('PM'),
	[CurrencyDecimalPrecision] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_CurrencyDecimalPrecision]  DEFAULT ((2)),
	[MaxAppointmentDurationDays] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_MaxAppointmentDurationDays]  DEFAULT ((10)),
	[EmailSendPollingPeriod] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_EmailSendPollingPeriod]  DEFAULT ((600000)),
	[RenderSecureIFrameForEmail] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_RenderSecureIFrameForEmail]  DEFAULT ((0)),
	[NumberSeparator] [nvarchar](5) NOT NULL CONSTRAINT [DF_OrganizationBase_NumberSeparator]  DEFAULT (','),
	[PrivReportingGroupId] [uniqueidentifier] NULL,
	[BaseCurrencyId] [uniqueidentifier] NULL,
	[MaxRecordsForExportToExcel] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_MaxRecordsForExportToExcel]  DEFAULT ((10000)),
	[PrivReportingGroupName] [nvarchar](256) NULL,
	[YearStartWeekCode] [int] NOT NULL CONSTRAINT [DF_OrganizationBase_YearStartWeekCode]  DEFAULT ((0)),
	[IsPresenceEnabled] [bit] NULL CONSTRAINT [DF_OrganizationBase_IsPresenceEnabled]  DEFAULT ((1)),
	[IsDuplicateDetectionEnabled] [bit] NOT NULL CONSTRAINT [DF_OrganizationBase_IsDuplicateDetectionEnabled]  DEFAULT ((1)),
 CONSTRAINT [cndx_PrimaryKey_Organization] PRIMARY KEY CLUSTERED 
(
	[OrganizationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[TerritoryBase]    Script Date: 04/11/2008 06:53:36 ******/




CREATE TABLE [dbo].[TerritoryBase](
	[TerritoryId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[ManagerId] [uniqueidentifier] NULL,
	[Name] [nvarchar](200) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[DeletionStateCode] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_Territory] PRIMARY KEY CLUSTERED 
(
	[TerritoryId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SdkMessageRequestBase]    Script Date: 04/11/2008 06:51:44 ******/




CREATE TABLE [dbo].[SdkMessageRequestBase](
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SdkMessageRequestBase_CustomizationLevel]  DEFAULT ((0)),
	[SdkMessagePairId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[SdkMessageRequestIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_SdkMessageRequestBase_SdkMessageRequestIdUnique]  DEFAULT (newid()),
	[Name] [nvarchar](256) NOT NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[SdkMessageRequestId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_SdkMessageRequest] PRIMARY KEY CLUSTERED 
(
	[SdkMessageRequestId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SdkMessageRequestBase_SdkMessageRequestIdUnique] UNIQUE NONCLUSTERED 
(
	[SdkMessageRequestIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[TeamBase]    Script Date: 04/11/2008 06:53:22 ******/




CREATE TABLE [dbo].[TeamBase](
	[TeamId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[BusinessUnitId] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[EMailAddress] [nvarchar](100) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_Team] PRIMARY KEY CLUSTERED 
(
	[TeamId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[BusinessTaskBase]    Script Date: 04/11/2008 06:37:19 ******/




CREATE TABLE [dbo].[BusinessTaskBase](
	[statuscode] [int] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[TaskOrder] [int] NULL,
	[ParentBusinessTaskId] [uniqueidentifier] NULL,
	[Name] [nvarchar](100) NULL,
	[statecode] [int] NOT NULL,
	[Privilege] [int] NULL,
	[IconUrl] [nvarchar](200) NULL,
	[HelpUrl] [nvarchar](200) NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[BusinessTaskId] [uniqueidentifier] NOT NULL,
	[LanguageCode] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ActionUrl] [nvarchar](400) NULL,
	[Description] [nvarchar](800) NULL,
 CONSTRAINT [cndx_PrimaryKey_BusinessTask] PRIMARY KEY CLUSTERED 
(
	[BusinessTaskId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[BusinessUnitBase]    Script Date: 04/11/2008 06:37:28 ******/




CREATE TABLE [dbo].[BusinessUnitBase](
	[BusinessUnitId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[UserGroupId] [uniqueidentifier] NULL,
	[Name] [nvarchar](160) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[DivisionName] [nvarchar](100) NULL,
	[FileAsName] [nvarchar](100) NULL,
	[TickerSymbol] [nvarchar](10) NULL,
	[StockExchange] [nvarchar](20) NULL,
	[UTCOffset] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[CreditLimit] [float] NULL,
	[CostCenter] [nvarchar](100) NULL,
	[WebSiteUrl] [nvarchar](200) NULL,
	[FtpSiteUrl] [nvarchar](200) NULL,
	[EMailAddress] [nvarchar](100) NULL,
	[InheritanceMask] [int] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[WorkflowSuspended] [bit] NULL,
	[ParentBusinessUnitId] [uniqueidentifier] NULL,
	[IsDisabled] [bit] NULL,
	[DisabledReason] [nvarchar](500) NULL,
	[VersionNumber] [timestamp] NULL,
	[Picture] [nvarchar](max) NULL,
	[CalendarId] [uniqueidentifier] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_BusinessUnit] PRIMARY KEY CLUSTERED 
(
	[BusinessUnitId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_BusinessUnitBase] UNIQUE NONCLUSTERED 
(
	[ParentBusinessUnitId] ASC,
	[Name] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ResourceGroupBase]    Script Date: 04/11/2008 06:49:33 ******/




CREATE TABLE [dbo].[ResourceGroupBase](
	[Name] [nvarchar](160) NULL,
	[ObjectTypeCode] [int] NOT NULL,
	[ResourceGroupId] [uniqueidentifier] NOT NULL,
	[GroupTypeCode] [int] NULL,
	[BusinessUnitId] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_ResourceGroupBase_DeletionStateCode]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_ResourceGroup] PRIMARY KEY CLUSTERED 
(
	[ResourceGroupId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[BusinessUnitNewsArticleBase]    Script Date: 04/11/2008 06:37:37 ******/




CREATE TABLE [dbo].[BusinessUnitNewsArticleBase](
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[BusinessUnitNewsArticleId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ActiveOn] [datetime] NULL,
	[ActiveUntil] [datetime] NULL,
	[NewsArticle] [nvarchar](max) NULL,
	[ArticleTypeCode] [int] NULL,
	[ShowOnHomepage] [bit] NULL CONSTRAINT [Set_To_Zero101]  DEFAULT ((0)),
	[ArticleTitle] [nvarchar](300) NULL,
	[ArticleUrl] [nvarchar](200) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_BusinessUnitNewsArticleBase_DeletionStateCode]  DEFAULT ((0)),
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_BusinessUnitNewsArticle] PRIMARY KEY CLUSTERED 
(
	[BusinessUnitNewsArticleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[UoMScheduleBase]    Script Date: 04/11/2008 06:54:19 ******/




CREATE TABLE [dbo].[UoMScheduleBase](
	[UoMScheduleId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [Set_To_Zero152]  DEFAULT ((0)),
	[Name] [nvarchar](200) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[ImportSequenceNumber] [int] NULL,
	[BaseUoMName] [nvarchar](100) NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_UoMSchedule] PRIMARY KEY CLUSTERED 
(
	[UoMScheduleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_UoMScheduleBase] UNIQUE NONCLUSTERED 
(
	[OrganizationId] ASC,
	[Name] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[philipri_customizationversionBase]    Script Date: 04/11/2008 06:46:49 ******/




CREATE TABLE [dbo].[philipri_customizationversionBase](
	[philipri_customizationversionId] [uniqueidentifier] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[statecode] [int] NOT NULL,
	[statuscode] [int] NULL,
	[DeletionStateCode] [int] NULL,
	[VersionNumber] [timestamp] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
 CONSTRAINT [PK_philipri_customizationversionBase] PRIMARY KEY CLUSTERED 
(
	[philipri_customizationversionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[SdkMessageRequestFieldBase]    Script Date: 04/11/2008 06:51:51 ******/




CREATE TABLE [dbo].[SdkMessageRequestFieldBase](
	[CreatedOn] [datetime] NULL,
	[SdkMessageRequestFieldIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_SdkMessageRequestFieldBase_SdkMessageRequestFieldIdUnique]  DEFAULT (newid()),
	[Optional] [bit] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[Position] [int] NOT NULL CONSTRAINT [DF_SdkMessageRequestFieldBase_Position]  DEFAULT ((0)),
	[ClrParser] [nvarchar](256) NULL,
	[PublicName] [nvarchar](256) NULL,
	[SdkMessageRequestId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[Parser] [nvarchar](256) NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SdkMessageRequestFieldBase_CustomizationLevel]  DEFAULT ((0)),
	[OrganizationId] [uniqueidentifier] NULL,
	[SdkMessageRequestFieldId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[Name] [nvarchar](256) NOT NULL,
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_SdkMessageRequestField] PRIMARY KEY CLUSTERED 
(
	[SdkMessageRequestFieldId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SdkMessageRequestFieldBase_SdkMessageRequestFieldIdUnique] UNIQUE NONCLUSTERED 
(
	[SdkMessageRequestFieldIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[CompetitorBase]    Script Date: 04/11/2008 06:38:46 ******/




CREATE TABLE [dbo].[CompetitorBase](
	[CompetitorId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Overview] [nvarchar](max) NULL,
	[ReferenceInfoUrl] [nvarchar](200) NULL,
	[ReportedRevenue] [money] NULL,
	[ReportingQuarter] [int] NULL,
	[ReportingYear] [int] NULL,
	[Strengths] [nvarchar](max) NULL,
	[Weaknesses] [nvarchar](max) NULL,
	[Opportunities] [nvarchar](max) NULL,
	[Threats] [nvarchar](max) NULL,
	[TickerSymbol] [nvarchar](10) NULL,
	[KeyProduct] [nvarchar](200) NULL,
	[StockExchange] [nvarchar](20) NULL,
	[WinPercentage] [float] NULL,
	[WebSiteUrl] [nvarchar](200) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[ImportSequenceNumber] [int] NULL,
	[ReportedRevenue_Base] [money] NULL,
	[YomiName] [nvarchar](100) NULL,
 CONSTRAINT [cndx_PrimaryKey_Competitor] PRIMARY KEY CLUSTERED 
(
	[CompetitorId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[RelationshipRoleBase]    Script Date: 04/11/2008 06:48:59 ******/




CREATE TABLE [dbo].[RelationshipRoleBase](
	[DeletionStateCode] [int] NOT NULL,
	[Description] [nvarchar](500) NULL,
	[Name] [nvarchar](100) NOT NULL,
	[StatusCode] [int] NULL,
	[RelationshipRoleId] [uniqueidentifier] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[StateCode] [int] NOT NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_RelationshipRole] PRIMARY KEY CLUSTERED 
(
	[RelationshipRoleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_RelationshipRoleBase] UNIQUE NONCLUSTERED 
(
	[OrganizationId] ASC,
	[Name] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ProductBase]    Script Date: 04/11/2008 06:47:42 ******/




CREATE TABLE [dbo].[ProductBase](
	[ProductId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DefaultUoMScheduleId] [uniqueidentifier] NULL,
	[SubjectId] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [Set_To_Zero136]  DEFAULT ((0)),
	[Name] [nvarchar](100) NULL,
	[DefaultUoMId] [uniqueidentifier] NULL,
	[PriceLevelId] [uniqueidentifier] NULL,
	[Description] [nvarchar](max) NULL,
	[ProductTypeCode] [int] NULL,
	[ProductUrl] [nvarchar](255) NULL,
	[Price] [money] NULL,
	[IsKit] [bit] NULL CONSTRAINT [Set_To_Zero137]  DEFAULT ((0)),
	[ProductNumber] [nvarchar](100) NOT NULL,
	[Size] [nvarchar](200) NULL,
	[CurrentCost] [money] NULL,
	[StockVolume] [decimal](23, 10) NULL,
	[StandardCost] [money] NULL,
	[StockWeight] [decimal](23, 10) NULL,
	[QuantityDecimal] [int] NULL,
	[QuantityOnHand] [decimal](23, 10) NULL,
	[IsStockItem] [bit] NULL,
	[SupplierName] [nvarchar](100) NULL,
	[VendorName] [nvarchar](100) NULL,
	[VendorPartNumber] [nvarchar](100) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[StateCode] [int] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[StatusCode] [int] NULL,
	[VersionNumber] [timestamp] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[CurrentCost_Base] [money] NULL,
	[Price_Base] [money] NULL,
	[StandardCost_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_Product] PRIMARY KEY CLUSTERED 
(
	[ProductId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_ProductBase] UNIQUE NONCLUSTERED 
(
	[OrganizationId] ASC,
	[ProductNumber] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ApplicationFileBase]    Script Date: 04/11/2008 06:36:31 ******/




CREATE TABLE [dbo].[ApplicationFileBase](
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[Body] [nvarchar](max) NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedOn] [datetime] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[FileId] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](256) NULL,
	[DeletionStateCode] [int] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_ApplicationFile] PRIMARY KEY CLUSTERED 
(
	[FileId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SdkMessageProcessingStepSecureConfigBase]    Script Date: 04/11/2008 06:51:38 ******/




CREATE TABLE [dbo].[SdkMessageProcessingStepSecureConfigBase](
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SdkMessageProcessingStepSecureConfigBase_CustomizationLevel]  DEFAULT ((0)),
	[CreatedOn] [datetime] NULL,
	[SecureConfig] [nvarchar](max) NULL,
	[SdkMessageProcessingStepSecureConfigId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[SdkMessageProcessingStepSecureConfigIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_SdkMessageProcessingStepSecureConfigBase_SdkMessageProcessingStepSecureConfigIdUnique]  DEFAULT (newid()),
	[ModifiedOn] [datetime] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_SdkMessageProcessingStepSecureConfig] PRIMARY KEY CLUSTERED 
(
	[SdkMessageProcessingStepSecureConfigId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SdkMessageProcessingStepSecureConfigBase_SdkMessageProcessingStepSecureConfigIdUnique] UNIQUE NONCLUSTERED 
(
	[SdkMessageProcessingStepSecureConfigIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ConstraintBasedGroupBase]    Script Date: 04/11/2008 06:38:56 ******/




CREATE TABLE [dbo].[ConstraintBasedGroupBase](
	[ModifiedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[GroupTypeCode] [int] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[Name] [nvarchar](160) NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ConstraintBasedGroupId] [uniqueidentifier] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Constraints] [nvarchar](max) NOT NULL,
	[BusinessUnitId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_ConstraintBasedGroup] PRIMARY KEY CLUSTERED 
(
	[ConstraintBasedGroupId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[OrganizationUIBase]    Script Date: 04/11/2008 06:46:40 ******/




CREATE TABLE [dbo].[OrganizationUIBase](
	[FormId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[FormXml] [nvarchar](max) NULL,
	[FieldXml] [nvarchar](max) NULL,
	[ObjectTypeCode] [int] NULL,
	[InProduction] [bit] NOT NULL CONSTRAINT [DF_OrganizationUIBase_InProduction]  DEFAULT ((0)),
	[PreviewXml] [nvarchar](max) NULL,
	[PreviewColumnsetXml] [nvarchar](max) NULL,
	[Version] [int] NULL,
	[OutlookShortcutIcon] [nvarchar](max) NULL,
	[VersionNumber] [timestamp] NULL,
	[GridIcon] [nvarchar](max) NULL,
	[FormIdUnique] [uniqueidentifier] NOT NULL CONSTRAINT [DF_OrganizationUIBase_FormIdUnique]  DEFAULT (newid()),
	[LargeEntityIcon] [nvarchar](max) NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_OrganizationUIBase_CustomizationLevel]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_OrganizationUI] PRIMARY KEY CLUSTERED 
(
	[FormId] ASC,
	[CustomizationLevel] ASC,
	[InProduction] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[PriceLevelBase]    Script Date: 04/11/2008 06:47:18 ******/




CREATE TABLE [dbo].[PriceLevelBase](
	[PriceLevelId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [Set_To_Zero132]  DEFAULT ((0)),
	[Name] [nvarchar](100) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[ShippingMethodCode] [int] NULL,
	[BeginDate] [datetime] NULL,
	[PaymentMethodCode] [int] NULL,
	[FreightTermsCode] [int] NULL,
	[EndDate] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[StateCode] [int] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[StatusCode] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_PriceLevel] PRIMARY KEY CLUSTERED 
(
	[PriceLevelId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SdkMessageResponseBase]    Script Date: 04/11/2008 06:52:00 ******/




CREATE TABLE [dbo].[SdkMessageResponseBase](
	[VersionNumber] [timestamp] NULL,
	[SdkMessageResponseIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_SdkMessageResponseBase_SdkMessageResponseIdUnique]  DEFAULT (newid()),
	[ModifiedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SdkMessageResponseBase_CustomizationLevel]  DEFAULT ((0)),
	[SdkMessageRequestId] [uniqueidentifier] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedOn] [datetime] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[SdkMessageResponseId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_SdkMessageResponse] PRIMARY KEY CLUSTERED 
(
	[SdkMessageResponseId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SdkMessageResponseBase_SdkMessageResponseIdUnique] UNIQUE NONCLUSTERED 
(
	[SdkMessageResponseIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[DocumentIndex]    Script Date: 04/11/2008 06:41:01 ******/




CREATE TABLE [dbo].[DocumentIndex](
	[DocumentIndexId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[SubjectId] [uniqueidentifier] NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[IsPublished] [bit] NULL,
	[DeletionStateCode] [int] NULL,
	[DocumentTypeCode] [int] NOT NULL,
	[DocumentId] [uniqueidentifier] NOT NULL,
	[Location] [nvarchar](500) NULL,
	[Title] [nvarchar](500) NULL,
	[Number] [nvarchar](100) NULL,
	[KeyWords] [nvarchar](max) NULL,
	[SearchText] [nvarchar](max) NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_DocumentIndex] PRIMARY KEY CLUSTERED 
(
	[DocumentIndexId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[DiscountTypeBase]    Script Date: 04/11/2008 06:40:50 ******/




CREATE TABLE [dbo].[DiscountTypeBase](
	[DiscountTypeId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [Set_To_Zero110]  DEFAULT ((0)),
	[Name] [nvarchar](100) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[IsAmountType] [bit] NULL CONSTRAINT [Set_To_Zero111]  DEFAULT ((0)),
	[StateCode] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[StatusCode] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_DiscountType] PRIMARY KEY CLUSTERED 
(
	[DiscountTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_DiscountTypeBase] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[EquipmentBase]    Script Date: 04/11/2008 06:41:36 ******/




CREATE TABLE [dbo].[EquipmentBase](
	[EquipmentId] [uniqueidentifier] NOT NULL,
	[SiteId] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[BusinessUnitId] [uniqueidentifier] NOT NULL,
	[Skills] [nvarchar](100) NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedOn] [datetime] NULL,
	[TimeZoneCode] [int] NOT NULL,
	[DisplayInServiceViews] [bit] NULL,
	[IsDisabled] [bit] NULL,
	[Name] [nvarchar](160) NOT NULL,
	[CalendarId] [uniqueidentifier] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[EMailAddress] [nvarchar](100) NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_Equipment] PRIMARY KEY CLUSTERED 
(
	[EquipmentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[RoleBase]    Script Date: 04/11/2008 06:49:45 ******/




CREATE TABLE [dbo].[RoleBase](
	[RoleId] [uniqueidentifier] NOT NULL,
	[RoleTemplateId] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [Set_To_Zero139]  DEFAULT ((0)),
	[Name] [nvarchar](100) NOT NULL,
	[BusinessUnitId] [uniqueidentifier] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ParentRoleId] [uniqueidentifier] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_Role] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ResourceBase]    Script Date: 04/11/2008 06:49:30 ******/




CREATE TABLE [dbo].[ResourceBase](
	[DisplayInServiceViews] [bit] NULL,
	[ObjectTypeCode] [int] NOT NULL,
	[BusinessUnitId] [uniqueidentifier] NOT NULL,
	[CalendarId] [uniqueidentifier] NULL,
	[IsDisabled] [bit] NULL,
	[ResourceId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[Name] [nvarchar](160) NULL,
	[SiteId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_ResourceBase_DeletionStateCode]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_Resource] PRIMARY KEY CLUSTERED 
(
	[ResourceId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[QueueItemBase]    Script Date: 04/11/2008 06:48:11 ******/




CREATE TABLE [dbo].[QueueItemBase](
	[QueueItemId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[QueueId] [uniqueidentifier] NULL,
	[ObjectId] [uniqueidentifier] NULL,
	[ObjectTypeCode] [int] NULL,
	[Title] [nvarchar](300) NULL,
	[EnteredOn] [datetime] NULL,
	[Priority] [int] NULL,
	[State] [int] NULL,
	[Status] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ToRecipients] [nvarchar](500) NULL,
	[Sender] [nvarchar](250) NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_QueueItemBase_DeletionStateCode]  DEFAULT ((0)),
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_QueueItem] PRIMARY KEY CLUSTERED 
(
	[QueueItemId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ContractTemplateBase]    Script Date: 04/11/2008 06:40:13 ******/




CREATE TABLE [dbo].[ContractTemplateBase](
	[ContractTemplateId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Abbreviation] [nvarchar](20) NOT NULL,
	[ContractServiceLevelCode] [int] NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [Set_To_Zero107]  DEFAULT ((0)),
	[BillingFrequencyCode] [int] NULL,
	[AllotmentTypeCode] [int] NULL,
	[UseDiscountAsPercentage] [bit] NULL,
	[EffectivityCalendar] [nvarchar](168) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_ContractTemplate] PRIMARY KEY CLUSTERED 
(
	[ContractTemplateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_ContractTemplateBase] UNIQUE NONCLUSTERED 
(
	[OrganizationId] ASC,
	[Abbreviation] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[WizardPageBase]    Script Date: 04/11/2008 06:55:34 ******/




CREATE TABLE [dbo].[WizardPageBase](
	[PageSequenceNumber] [int] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[PageUrl] [nvarchar](512) NOT NULL,
	[WebWizardId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [DF_WizardPageBase_DeletionStateCode]  DEFAULT ((0)),
	[WizardPageId] [uniqueidentifier] NOT NULL,
	[PageDataToPost] [nvarchar](1024) NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_WizardPage] PRIMARY KEY CLUSTERED 
(
	[WizardPageId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[QueueBase]    Script Date: 04/11/2008 06:48:05 ******/




CREATE TABLE [dbo].[QueueBase](
	[QueueId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[BusinessUnitId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[EMailAddress] [nvarchar](100) NULL,
	[PrimaryUserId] [uniqueidentifier] NOT NULL,
	[QueueTypeCode] [int] NULL,
	[Name] [nvarchar](200) NULL,
	[Description] [nvarchar](max) NULL,
	[QueueSemantics] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[IgnoreUnsolicitedEmail] [bit] NULL CONSTRAINT [DF_QueueBase_IgnoreUnsolicitedEmail]  DEFAULT ((0)),
	[IsFaxQueue] [bit] NULL CONSTRAINT [DF_QueueBase_IsFaxQueue]  DEFAULT ((0)),
	[EmailPassword] [nvarchar](200) NULL,
	[IncomingEmailDeliveryMethod] [int] NOT NULL CONSTRAINT [DF_QueueBase_IncomingEmailDeliveryMethod]  DEFAULT ((1)),
	[EmailUsername] [nvarchar](200) NULL,
	[OutgoingEmailDeliveryMethod] [int] NOT NULL CONSTRAINT [DF_QueueBase_OutgoingEmailDeliveryMethod]  DEFAULT ((1)),
	[AllowEmailCredentials] [bit] NOT NULL CONSTRAINT [DF_QueueBase_AllowEmailCredentials]  DEFAULT ((0)),
	[IncomingEmailFilteringMethod] [int] NOT NULL CONSTRAINT [DF_QueueBase_IncomingEmailFilteringMethod]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_Queue] PRIMARY KEY CLUSTERED 
(
	[QueueId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[AttributeMapBase]    Script Date: 04/11/2008 06:36:52 ******/




CREATE TABLE [dbo].[AttributeMapBase](
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[IsSystem] [bit] NOT NULL CONSTRAINT [DF_AttributeMapBase_IsSystem]  DEFAULT ((0)),
	[EntityMapId] [uniqueidentifier] NOT NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[TargetAttributeName] [nvarchar](50) NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[SourceAttributeName] [nvarchar](50) NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ParentAttributeMapId] [uniqueidentifier] NULL,
	[AttributeMapId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_AttributeMap] PRIMARY KEY CLUSTERED 
(
	[AttributeMapId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[WebWizardBase]    Script Date: 04/11/2008 06:55:11 ******/




CREATE TABLE [dbo].[WebWizardBase](
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[WebWizardId] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[WizardPageHeight] [int] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [DF_WebWizardBase_DeletionStateCode]  DEFAULT ((0)),
	[WizardPageWidth] [int] NULL,
	[StartPageSequenceNumber] [int] NULL,
	[AccessPrivileges] [nvarchar](1024) NULL,
	[TitleResourceString] [nvarchar](100) NOT NULL,
	[IsStaticPageSequence] [bit] NOT NULL,
 CONSTRAINT [cndx_primarykey_webwizard] PRIMARY KEY CLUSTERED 
(
	[WebWizardId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SdkMessageRequestInputBase]    Script Date: 04/11/2008 06:51:55 ******/




CREATE TABLE [dbo].[SdkMessageRequestInputBase](
	[Name] [nvarchar](256) NOT NULL,
	[CreatedOn] [datetime] NULL,
	[SdkMessageRequestInputIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_SdkMessageRequestInputBase_SdkMessageRequestInputIdUnique]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[SdkMessageRequestId] [uniqueidentifier] NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SdkMessageRequestInputBase_CustomizationLevel]  DEFAULT ((0)),
	[SdkMessageRequestInputId] [uniqueidentifier] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_SdkMessageRequestInput] PRIMARY KEY CLUSTERED 
(
	[SdkMessageRequestInputId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SdkMessageRequestInputBase_SdkMessageRequestInputIdUnique] UNIQUE NONCLUSTERED 
(
	[SdkMessageRequestInputIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[SubjectBase]    Script Date: 04/11/2008 06:52:36 ******/




CREATE TABLE [dbo].[SubjectBase](
	[SubjectId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Title] [nvarchar](500) NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NULL,
	[Description] [nvarchar](max) NULL,
	[ParentSubject] [uniqueidentifier] NULL,
	[FeatureMask] [int] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_Subject] PRIMARY KEY CLUSTERED 
(
	[SubjectId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[StringMap]    Script Date: 04/11/2008 06:52:31 ******/




CREATE TABLE [dbo].[StringMap](
	[ObjectTypeCode] [int] NOT NULL,
	[AttributeName] [nvarchar](100) NOT NULL,
	[AttributeValue] [int] NOT NULL,
	[LangId] [int] NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[Value] [nvarchar](255) NULL,
	[DisplayOrder] [int] NULL,
	[VersionNumber] [timestamp] NULL,
	[StringMapId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_StringMap_StringMapId]  DEFAULT (newid()),
 CONSTRAINT [cndx_PrimaryKey_StringMap] PRIMARY KEY CLUSTERED 
(
	[StringMapId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_StringMap] UNIQUE NONCLUSTERED 
(
	[ObjectTypeCode] ASC,
	[AttributeName] ASC,
	[AttributeValue] ASC,
	[LangId] ASC,
	[OrganizationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[PluginAssemblyBase]    Script Date: 04/11/2008 06:47:04 ******/




CREATE TABLE [dbo].[PluginAssemblyBase](
	[SourceHash] [nvarchar](256) NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_PluginAssemblyBase_CustomizationLevel]  DEFAULT ((0)),
	[Content] [text] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[Path] [nvarchar](256) NULL,
	[Name] [nvarchar](256) NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[Version] [nvarchar](32) NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[PluginAssemblyId] [uniqueidentifier] NOT NULL,
	[Culture] [nvarchar](32) NOT NULL,
	[SourceType] [int] NOT NULL,
	[PluginAssemblyIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_PluginAssemblyBase_PluginAssemblyIdUnique]  DEFAULT (newid()),
	[PublicKeyToken] [nvarchar](32) NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_pluginassembly] PRIMARY KEY CLUSTERED 
(
	[PluginAssemblyId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_PluginAssemblyBase_PluginAssemblyIdUnique] UNIQUE NONCLUSTERED 
(
	[PluginAssemblyIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
)  TEXTIMAGE_

/****** Object:  Table [dbo].[WizardAccessPrivilegeBase]    Script Date: 04/11/2008 06:55:30 ******/




CREATE TABLE [dbo].[WizardAccessPrivilegeBase](
	[ModifiedBy] [uniqueidentifier] NULL,
	[PrivilegeName] [nvarchar](100) NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[WebWizardId] [uniqueidentifier] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[EntityName] [nvarchar](100) NOT NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NULL,
	[WizardAccessPrivilegeId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_primarykey_wizardaccessarivilege] PRIMARY KEY CLUSTERED 
(
	[WizardAccessPrivilegeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[License]    Script Date: 04/11/2008 06:44:35 ******/




CREATE TABLE [dbo].[License](
	[LicenseId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[LicenseKey] [nvarchar](100) NOT NULL,
	[InstalledOn] [datetime] NOT NULL,
	[LicenseType] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_License] PRIMARY KEY CLUSTERED 
(
	[LicenseId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[StatusMap]    Script Date: 04/11/2008 06:52:28 ******/




CREATE TABLE [dbo].[StatusMap](
	[ObjectTypeCode] [int] NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[State] [int] NOT NULL,
	[Status] [int] NOT NULL,
	[IsDefault] [bit] NULL,
	[StatusMapId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_StatusMap_StatusMapId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_StatusMap] PRIMARY KEY CLUSTERED 
(
	[StatusMapId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_StatusMap] UNIQUE NONCLUSTERED 
(
	[OrganizationId] ASC,
	[ObjectTypeCode] ASC,
	[State] ASC,
	[Status] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[SalesLiteratureBase]    Script Date: 04/11/2008 06:50:00 ******/




CREATE TABLE [dbo].[SalesLiteratureBase](
	[SalesLiteratureId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NULL,
	[EmployeeContactId] [uniqueidentifier] NULL,
	[SubjectId] [uniqueidentifier] NULL,
	[Description] [nvarchar](max) NULL,
	[LiteratureTypeCode] [int] NULL,
	[Name] [nvarchar](100) NULL,
	[ExpirationDate] [datetime] NULL,
	[IsCustomerViewable] [bit] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[KeyWords] [nvarchar](max) NULL,
	[HasAttachments] [bit] NULL CONSTRAINT [Set_To_Zero145]  DEFAULT ((0)),
	[ModifiedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_SalesLiterature] PRIMARY KEY CLUSTERED 
(
	[SalesLiteratureId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SdkMessagePairBase]    Script Date: 04/11/2008 06:51:17 ******/




CREATE TABLE [dbo].[SdkMessagePairBase](
	[ModifiedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[SdkMessagePairId] [uniqueidentifier] NOT NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SdkMessagePairBase_CustomizationLevel]  DEFAULT ((0)),
	[CreatedOn] [datetime] NULL,
	[SdkMessagePairIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_SdkMessagePairBase_SdkMessagePairIdUnique]  DEFAULT (newid()),
	[Endpoint] [nvarchar](128) NOT NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[Namespace] [nvarchar](256) NOT NULL,
	[SdkMessageId] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_SdkMessagePair] PRIMARY KEY CLUSTERED 
(
	[SdkMessagePairId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SdkMessagePairBase_SdkMessagePairIdUnique] UNIQUE NONCLUSTERED 
(
	[SdkMessagePairIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[SdkMessageFilterBase]    Script Date: 04/11/2008 06:51:11 ******/




CREATE TABLE [dbo].[SdkMessageFilterBase](
	[CreatedBy] [uniqueidentifier] NULL,
	[SdkMessageFilterId] [uniqueidentifier] NOT NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[PrimaryObjectTypeCode] [int] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SdkMessageFilterBase_CustomizationLevel]  DEFAULT ((0)),
	[SecondaryObjectTypeCode] [int] NOT NULL,
	[SdkMessageFilterIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_SdkMessageFilterBase_SdkMessageFilterIdUnique]  DEFAULT (newid()),
	[ModifiedOn] [datetime] NULL,
	[IsCustomProcessingStepAllowed] [bit] NOT NULL CONSTRAINT [DF_SdkMessageFilterBase_IsCustomProcessingStepAllowed]  DEFAULT ((0)),
	[DeletionStateCode] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[Availability] [int] NOT NULL,
	[SdkMessageId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_SdkMessageFilter] PRIMARY KEY CLUSTERED 
(
	[SdkMessageFilterId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SdkMessageFilterBase_SdkMessageFilterIdUnique] UNIQUE NONCLUSTERED 
(
	[SdkMessageFilterIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[IntegrationStatusBase]    Script Date: 04/11/2008 06:42:45 ******/




CREATE TABLE [dbo].[IntegrationStatusBase](
	[IntegrationEntryId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[SystemName] [nvarchar](200) NULL,
	[ObjectId] [uniqueidentifier] NULL,
	[ObjectTypeCode] [int] NULL,
	[StateCode] [int] NULL,
	[StateDescription] [nvarchar](max) NULL,
	[StatusCode] [int] NULL,
	[StatusDescription] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_IntegrationStatus] PRIMARY KEY CLUSTERED 
(
	[IntegrationEntryId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[KbArticleBase]    Script Date: 04/11/2008 06:43:44 ******/




CREATE TABLE [dbo].[KbArticleBase](
	[KbArticleId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[KbArticleTemplateId] [uniqueidentifier] NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[SubjectId] [uniqueidentifier] NOT NULL,
	[ArticleXml] [nvarchar](max) NULL,
	[DeletionStateCode] [int] NULL,
	[Title] [nvarchar](500) NULL,
	[Number] [nvarchar](100) NULL,
	[Content] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Comments] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[StateCode] [int] NOT NULL,
	[StatusCode] [int] NULL,
	[VersionNumber] [timestamp] NULL,
	[KeyWords] [nvarchar](max) NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_KbArticle] PRIMARY KEY CLUSTERED 
(
	[KbArticleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_KbArticleBase] UNIQUE NONCLUSTERED 
(
	[OrganizationId] ASC,
	[Number] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[SavedQueryBase]    Script Date: 04/11/2008 06:50:59 ******/




CREATE TABLE [dbo].[SavedQueryBase](
	[SavedQueryId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[QueryType] [int] NOT NULL,
	[IsDefault] [bit] NOT NULL CONSTRAINT [Set_To_Zero147]  DEFAULT ((0)),
	[ReturnedTypeCode] [int] NOT NULL,
	[QueryAppUsage] [int] NULL,
	[IsUserDefined] [bit] NULL,
	[FetchXml] [nvarchar](max) NULL,
	[IsCustomizable] [bit] NOT NULL CONSTRAINT [Set_To_One2]  DEFAULT ((1)),
	[IsQuickFindQuery] [bit] NOT NULL CONSTRAINT [Set_To_Zero148]  DEFAULT ((0)),
	[ColumnSetXml] [nvarchar](max) NULL,
	[LayoutXml] [nvarchar](max) NULL,
	[QueryAPI] [nvarchar](100) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[LatestDescription] [nvarchar](max) NULL,
	[LatestFetchXml] [nvarchar](max) NULL,
	[LatestName] [nvarchar](100) NULL,
	[LatestLayoutXml] [nvarchar](max) NULL,
	[LatestColumnSetXml] [nvarchar](max) NULL,
	[IsPrivate] [bit] NOT NULL CONSTRAINT [DF_SavedQueryBase_IsPrivate]  DEFAULT ((0)),
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SavedQueryBase_CustomizationLevel]  DEFAULT ((0)),
	[SavedQueryIdUnique] [uniqueidentifier] NOT NULL CONSTRAINT [DF_SavedQueryBase_SavedQueryIdUnique]  DEFAULT (newid()),
	[InProduction] [bit] NOT NULL CONSTRAINT [DF_SavedQueryBase_InProduction]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_SavedQuery] PRIMARY KEY CLUSTERED 
(
	[SavedQueryId] ASC,
	[CustomizationLevel] ASC,
	[InProduction] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[KbArticleTemplateBase]    Script Date: 04/11/2008 06:43:53 ******/




CREATE TABLE [dbo].[KbArticleTemplateBase](
	[KbArticleTemplateId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[StructureXml] [nvarchar](max) NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NULL,
	[FormatXml] [nvarchar](max) NULL,
	[Title] [nvarchar](500) NULL,
	[VersionNumber] [timestamp] NULL,
	[Description] [nvarchar](max) NULL,
	[IsActive] [bit] NULL CONSTRAINT [Set_To_Zero115]  DEFAULT ((0)),
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[LanguageCode] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_KbArticleTemplate] PRIMARY KEY CLUSTERED 
(
	[KbArticleTemplateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SdkMessageBase]    Script Date: 04/11/2008 06:51:05 ******/




CREATE TABLE [dbo].[SdkMessageBase](
	[OrganizationId] [uniqueidentifier] NULL,
	[IsPrivate] [bit] NULL,
	[SdkMessageId] [uniqueidentifier] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CategoryName] [nvarchar](25) NOT NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SdkMessageBase_CustomizationLevel]  DEFAULT ((0)),
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[SdkMessageIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_SdkMessageBase_SdkMessageIdUnique]  DEFAULT (newid()),
	[Expand] [bit] NULL,
	[AutoTransact] [bit] NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedOn] [datetime] NULL,
	[Availability] [int] NOT NULL,
	[Name] [nvarchar](256) NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[Template] [bit] NULL,
 CONSTRAINT [cndx_PrimaryKey_SdkMessage] PRIMARY KEY CLUSTERED 
(
	[SdkMessageId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SdkMessageBase_SdkMessageIdUnique] UNIQUE NONCLUSTERED 
(
	[SdkMessageIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[CalendarBase]    Script Date: 04/11/2008 06:37:41 ******/




CREATE TABLE [dbo].[CalendarBase](
	[ModifiedBy] [uniqueidentifier] NULL,
	[CalendarId] [uniqueidentifier] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[Name] [nvarchar](160) NULL,
	[BusinessUnitId] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[PrimaryUserId] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[IsShared] [bit] NOT NULL CONSTRAINT [DF_CalendarBase_IsShared]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_Calendar] PRIMARY KEY CLUSTERED 
(
	[CalendarId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ResourceSpecBase]    Script Date: 04/11/2008 06:49:40 ******/




CREATE TABLE [dbo].[ResourceSpecBase](
	[EffortRequired] [float] NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ObjectTypeCode] [int] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[BusinessUnitId] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](160) NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[ObjectiveExpression] [nvarchar](max) NOT NULL,
	[SameSite] [bit] NULL,
	[Constraints] [nvarchar](max) NULL,
	[ResourceSpecId] [uniqueidentifier] NOT NULL,
	[GroupObjectId] [uniqueidentifier] NOT NULL,
	[RequiredCount] [int] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_ResourceSpec] PRIMARY KEY CLUSTERED 
(
	[ResourceSpecId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SdkMessageProcessingStepImageBase]    Script Date: 04/11/2008 06:51:34 ******/




CREATE TABLE [dbo].[SdkMessageProcessingStepImageBase](
	[ModifiedBy] [uniqueidentifier] NULL,
	[SdkMessageProcessingStepId] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[SdkMessageProcessingStepImageId] [uniqueidentifier] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[EntityAlias] [nvarchar](256) NOT NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SdkMessageProcessingStepImageBase_CustomizationLevel]  DEFAULT ((0)),
	[CreatedBy] [uniqueidentifier] NULL,
	[SdkMessageProcessingStepImageIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_SdkMessageProcessingStepImageBase_SdkMessageProcessingStepImageIdUnique]  DEFAULT (newid()),
	[ImageType] [int] NOT NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_SdkMessageProcessingStepImageBase_DeletionStateCode]  DEFAULT ((0)),
	[RelatedAttributeName] [nvarchar](256) NULL,
	[MessagePropertyName] [nvarchar](256) NOT NULL,
	[Attributes] [nvarchar](max) NULL,
 CONSTRAINT [cndx_PrimaryKey_SdkMessageProcessingStepImage] PRIMARY KEY CLUSTERED 
(
	[SdkMessageProcessingStepImageId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SdkMessageProcessingStepImageBase_SdkMessageProcessingStepImageIdUnique] UNIQUE NONCLUSTERED 
(
	[SdkMessageProcessingStepImageIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[TransactionCurrencyBase]    Script Date: 04/11/2008 06:53:59 ******/




CREATE TABLE [dbo].[TransactionCurrencyBase](
	[StatusCode] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[StateCode] [int] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[CreatedOn] [datetime] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NOT NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[DeletionStateCode] [int] NOT NULL,
	[CurrencySymbol] [nvarchar](5) NOT NULL,
	[UniqueDscId] [uniqueidentifier] NULL,
	[CurrencyName] [nvarchar](100) NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ISOCurrencyCode] [nvarchar](5) NOT NULL,
	[OrganizationId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_TransactionCurrency] PRIMARY KEY CLUSTERED 
(
	[TransactionCurrencyId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[IsvConfigBase]    Script Date: 04/11/2008 06:43:38 ******/




CREATE TABLE [dbo].[IsvConfigBase](
	[ConfigXML] [nvarchar](max) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedOn] [datetime] NULL,
	[IsvConfigId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_IsvConfigBase] PRIMARY KEY CLUSTERED 
(
	[IsvConfigId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[SystemUserBase]    Script Date: 04/11/2008 06:53:07 ******/




CREATE TABLE [dbo].[SystemUserBase](
	[SystemUserId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[TerritoryId] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[BusinessUnitId] [uniqueidentifier] NOT NULL,
	[ParentSystemUserId] [uniqueidentifier] NULL,
	[FirstName] [nvarchar](50) NULL,
	[Salutation] [nvarchar](20) NULL,
	[MiddleName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[PersonalEMailAddress] [nvarchar](100) NULL,
	[FullName] [nvarchar](160) NULL,
	[NickName] [nvarchar](50) NULL,
	[Title] [nvarchar](100) NULL,
	[InternalEMailAddress] [nvarchar](100) NULL,
	[JobTitle] [nvarchar](100) NULL,
	[MobileAlertEMail] [nvarchar](100) NULL,
	[PreferredEmailCode] [int] NULL,
	[HomePhone] [nvarchar](50) NULL,
	[MobilePhone] [nvarchar](50) NULL,
	[PreferredPhoneCode] [int] NULL,
	[PreferredAddressCode] [int] NULL,
	[PhotoUrl] [nvarchar](200) NULL,
	[DomainName] [nvarchar](255) NOT NULL,
	[PassportLo] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[PassportHi] [int] NULL,
	[DisabledReason] [nvarchar](500) NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[EmployeeId] [nvarchar](100) NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[IsDisabled] [bit] NULL,
	[GovernmentId] [nvarchar](100) NULL,
	[VersionNumber] [timestamp] NULL,
	[Skills] [nvarchar](100) NULL,
	[DisplayInServiceViews] [bit] NULL,
	[CalendarId] [uniqueidentifier] NULL,
	[ActiveDirectoryGuid] [uniqueidentifier] NULL,
	[SetupUser] [bit] NOT NULL CONSTRAINT [DF_SystemUserBase_SetupUser]  DEFAULT ((0)),
	[SiteId] [uniqueidentifier] NULL,
	[WindowsLiveID] [nvarchar](100) NULL,
	[IncomingEmailDeliveryMethod] [int] NOT NULL CONSTRAINT [DF_SystemUserBase_IncomingEmailDeliveryMethod]  DEFAULT ((1)),
	[OutgoingEmailDeliveryMethod] [int] NOT NULL CONSTRAINT [DF_SystemUserBase_OutgoingEmailDeliveryMethod]  DEFAULT ((1)),
	[ImportSequenceNumber] [int] NULL,
	[AccessMode] [int] NOT NULL CONSTRAINT [DF_SystemUserBase_AccessMode]  DEFAULT ((0)),
	[InviteStatusCode] [int] NULL CONSTRAINT [DF_SystemUserBase_InviteStatusCode]  DEFAULT ((0)),
	[IsActiveDirectoryUser] [bit] NOT NULL CONSTRAINT [DF_SystemUserBase_IsActiveDirectoryUser]  DEFAULT ((1)),
	[OverriddenCreatedOn] [datetime] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[YomiFullName] [nvarchar](160) NULL,
	[YomiLastName] [nvarchar](50) NULL,
	[YomiMiddleName] [nvarchar](50) NULL,
	[YomiFirstName] [nvarchar](50) NULL,
 CONSTRAINT [cndx_PrimaryKey_SystemUser] PRIMARY KEY CLUSTERED 
(
	[SystemUserId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SystemUserBaseActiveDirectoryGuid] UNIQUE NONCLUSTERED 
(
	[ActiveDirectoryGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[SdkMessageResponseFieldBase]    Script Date: 04/11/2008 06:52:07 ******/




CREATE TABLE [dbo].[SdkMessageResponseFieldBase](
	[PublicName] [nvarchar](256) NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[SdkMessageResponseFieldIdUnique] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_SdkMessageResponseFieldBase_SdkMessageResponseFieldIdUnique]  DEFAULT (newid()),
	[Value] [nvarchar](256) NOT NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[Formatter] [nvarchar](256) NULL,
	[ClrFormatter] [nvarchar](256) NULL,
	[CustomizationLevel] [tinyint] NOT NULL CONSTRAINT [DF_SdkMessageResponseFieldBase_CustomizationLevel]  DEFAULT ((0)),
	[Name] [nvarchar](256) NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[Position] [int] NOT NULL CONSTRAINT [DF_SdkMessageResponseFieldBase_Position]  DEFAULT ((0)),
	[DeletionStateCode] [int] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[SdkMessageResponseFieldId] [uniqueidentifier] NOT NULL,
	[SdkMessageResponseId] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_SdkMessageResponseField] PRIMARY KEY CLUSTERED 
(
	[SdkMessageResponseFieldId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SdkMessageResponseFieldBase_SdkMessageResponseFieldIdUnique] UNIQUE NONCLUSTERED 
(
	[SdkMessageResponseFieldIdUnique] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[EntityMapBase]    Script Date: 04/11/2008 06:41:29 ******/




CREATE TABLE [dbo].[EntityMapBase](
	[TargetEntityName] [nvarchar](50) NOT NULL,
	[EntityMapId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[SourceEntityName] [nvarchar](50) NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_EntityMap] PRIMARY KEY CLUSTERED 
(
	[EntityMapId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[DisplayStringBase]    Script Date: 04/11/2008 06:40:54 ******/




CREATE TABLE [dbo].[DisplayStringBase](
	[PublishedDisplayString] [nvarchar](500) NULL,
	[CustomDisplayString] [nvarchar](500) NULL,
	[DisplayStringKey] [nvarchar](200) NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CustomComment] [nvarchar](500) NULL,
	[FormatParameters] [int] NOT NULL CONSTRAINT [DF_DisplayStringBase_FormatParameters]  DEFAULT ((0)),
	[OrganizationId] [uniqueidentifier] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[LanguageCode] [int] NULL,
	[DisplayStringId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_DisplayString] PRIMARY KEY CLUSTERED 
(
	[DisplayStringId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [MetadataSchema].[ViewAttribute]    Script Date: 04/11/2008 06:57:16 ******/
SET ANSI_NULLS OFF



CREATE TABLE [MetadataSchema].[ViewAttribute](
	[ViewAttributeId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[AttributeId] [uniqueidentifier] NOT NULL,
	[RelationshipId] [uniqueidentifier] NOT NULL,
	[RemoteAttributeId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NOT NULL,
	[ViewAttributeRowId] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[CustomizationLevel] [tinyint] NOT NULL DEFAULT ((0)),
 CONSTRAINT [XPKViewAttribute] PRIMARY KEY CLUSTERED 
(
	[ViewAttributeId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [MetadataSchema].[RelationshipExtraCondition]    Script Date: 04/11/2008 06:57:12 ******/
SET ANSI_NULLS OFF



CREATE TABLE [MetadataSchema].[RelationshipExtraCondition](
	[ConditionId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[RelationshipId] [uniqueidentifier] NOT NULL,
	[AttributeId] [uniqueidentifier] NOT NULL,
	[ConditionOp] [tinyint] NOT NULL DEFAULT ((0)),
	[Value] [int] NOT NULL DEFAULT ((0)),
	[RelationshipExtraConditionRowId] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[CustomizationLevel] [tinyint] NOT NULL DEFAULT ((0)),
 CONSTRAINT [XPKRelationshipExtraCondition] PRIMARY KEY CLUSTERED 
(
	[ConditionId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [MetadataSchema].[IndexAttributes]    Script Date: 04/11/2008 06:56:57 ******/
SET ANSI_NULLS OFF



CREATE TABLE [MetadataSchema].[IndexAttributes](
	[IndexAttributeId] [uniqueidentifier] NOT NULL,
	[AttributeId] [uniqueidentifier] NULL,
	[IndexId] [uniqueidentifier] NULL,
	[IndexOrder] [int] NULL,
	[IsIncludeAttribute] [bit] NOT NULL DEFAULT ((0)),
PRIMARY KEY CLUSTERED 
(
	[IndexAttributeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ProductPriceLevelBase]    Script Date: 04/11/2008 06:47:52 ******/




CREATE TABLE [dbo].[ProductPriceLevelBase](
	[PriceLevelId] [uniqueidentifier] NOT NULL,
	[ProductPriceLevelId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[UoMId] [uniqueidentifier] NULL,
	[UoMScheduleId] [uniqueidentifier] NULL,
	[DiscountTypeId] [uniqueidentifier] NULL,
	[ProductId] [uniqueidentifier] NOT NULL,
	[Percentage] [decimal](23, 10) NULL,
	[Amount] [money] NULL,
	[CreatedOn] [datetime] NULL,
	[QuantitySellingCode] [int] NULL,
	[RoundingPolicyCode] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[PricingMethodCode] [int] NULL,
	[RoundingOptionCode] [int] NULL,
	[RoundingOptionAmount] [money] NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
	[Amount_Base] [money] NULL,
	[RoundingOptionAmount_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_ProductPriceLevel] PRIMARY KEY CLUSTERED 
(
	[ProductPriceLevelId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_ProductPriceLevelBase] UNIQUE NONCLUSTERED 
(
	[ProductId] ASC,
	[UoMId] ASC,
	[PriceLevelId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ContractDetailBase]    Script Date: 04/11/2008 06:40:05 ******/




CREATE TABLE [dbo].[ContractDetailBase](
	[ContractDetailId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[AccountId] [uniqueidentifier] NULL,
	[ServiceAddress] [uniqueidentifier] NULL,
	[UoMId] [uniqueidentifier] NULL,
	[ProductId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [Set_To_Zero106]  DEFAULT ((0)),
	[ProductSerialNumber] [nvarchar](100) NULL,
	[ContactId] [uniqueidentifier] NULL,
	[ContractId] [uniqueidentifier] NOT NULL,
	[LineItemOrder] [int] NULL,
	[ServiceContractUnitsCode] [int] NULL,
	[InitialQuantity] [int] NULL,
	[Title] [nvarchar](500) NULL,
	[EffectivityCalendar] [nvarchar](168) NULL,
	[ActiveOn] [datetime] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[ExpiresOn] [datetime] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[TotalAllotments] [int] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[Rate] [money] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[Price] [money] NOT NULL,
	[Discount] [money] NULL,
	[Net] [money] NULL,
	[StateCode] [int] NOT NULL,
	[AllotmentsRemaining] [int] NULL,
	[StatusCode] [int] NULL,
	[AllotmentsUsed] [int] NULL,
	[UoMScheduleId] [uniqueidentifier] NULL,
	[DiscountPercentage] [decimal](23, 10) NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[Discount_Base] [money] NULL,
	[Rate_Base] [money] NULL,
	[Price_Base] [money] NULL,
	[Net_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_ContractDetail] PRIMARY KEY CLUSTERED 
(
	[ContractDetailId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[QuoteDetailBase]    Script Date: 04/11/2008 06:48:52 ******/




CREATE TABLE [dbo].[QuoteDetailBase](
	[QuoteDetailId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[QuoteId] [uniqueidentifier] NOT NULL,
	[SalesRepId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[LineItemNumber] [int] NULL,
	[UoMId] [uniqueidentifier] NULL,
	[ProductId] [uniqueidentifier] NULL,
	[RequestDeliveryBy] [datetime] NULL,
	[Quantity] [decimal](23, 10) NULL,
	[PricingErrorCode] [int] NULL,
	[ManualDiscountAmount] [money] NULL,
	[ProductDescription] [nvarchar](500) NULL,
	[VolumeDiscountAmount] [money] NULL,
	[PricePerUnit] [money] NULL,
	[BaseAmount] [money] NULL,
	[ExtendedAmount] [money] NULL,
	[Description] [nvarchar](max) NULL,
	[ShipTo_Name] [nvarchar](200) NULL,
	[IsPriceOverridden] [bit] NULL,
	[Tax] [money] NULL,
	[ShipTo_Line1] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[ShipTo_Line2] [nvarchar](50) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ShipTo_Line3] [nvarchar](50) NULL,
	[ShipTo_City] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ShipTo_StateOrProvince] [nvarchar](50) NULL,
	[ShipTo_Country] [nvarchar](50) NULL,
	[ShipTo_PostalCode] [nvarchar](20) NULL,
	[WillCall] [bit] NULL,
	[IsProductOverridden] [bit] NULL CONSTRAINT [Set_To_Zero138]  DEFAULT ((0)),
	[ShipTo_Telephone] [nvarchar](50) NULL,
	[ShipTo_Fax] [nvarchar](50) NULL,
	[ShipTo_FreightTermsCode] [int] NULL,
	[ShipTo_AddressId] [uniqueidentifier] NULL,
	[ShipTo_ContactName] [nvarchar](150) NULL,
	[VersionNumber] [timestamp] NULL,
	[ImportSequenceNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[Tax_Base] [money] NULL,
	[ExtendedAmount_Base] [money] NULL,
	[PricePerUnit_Base] [money] NULL,
	[BaseAmount_Base] [money] NULL,
	[ManualDiscountAmount_Base] [money] NULL,
	[VolumeDiscountAmount_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_QuoteDetail] PRIMARY KEY CLUSTERED 
(
	[QuoteDetailId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SalesOrderDetailBase]    Script Date: 04/11/2008 06:50:48 ******/




CREATE TABLE [dbo].[SalesOrderDetailBase](
	[SalesOrderDetailId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[SalesOrderId] [uniqueidentifier] NOT NULL,
	[SalesRepId] [uniqueidentifier] NULL,
	[IsProductOverridden] [bit] NULL CONSTRAINT [Set_To_Zero146]  DEFAULT ((0)),
	[IsCopied] [bit] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[QuantityShipped] [decimal](23, 10) NULL,
	[LineItemNumber] [int] NULL,
	[QuantityBackordered] [decimal](23, 10) NULL,
	[UoMId] [uniqueidentifier] NULL,
	[QuantityCancelled] [decimal](23, 10) NULL,
	[ProductId] [uniqueidentifier] NULL,
	[RequestDeliveryBy] [datetime] NULL,
	[Quantity] [decimal](23, 10) NULL,
	[PricingErrorCode] [int] NULL,
	[ManualDiscountAmount] [money] NULL,
	[ProductDescription] [nvarchar](500) NULL,
	[VolumeDiscountAmount] [money] NULL,
	[PricePerUnit] [money] NULL,
	[BaseAmount] [money] NULL,
	[ExtendedAmount] [money] NULL,
	[Description] [nvarchar](max) NULL,
	[IsPriceOverridden] [bit] NULL,
	[ShipTo_Name] [nvarchar](200) NULL,
	[Tax] [money] NULL,
	[CreatedOn] [datetime] NULL,
	[ShipTo_Line1] [nvarchar](50) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ShipTo_Line2] [nvarchar](50) NULL,
	[ShipTo_Line3] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ShipTo_City] [nvarchar](50) NULL,
	[ShipTo_StateOrProvince] [nvarchar](50) NULL,
	[ShipTo_Country] [nvarchar](50) NULL,
	[ShipTo_PostalCode] [nvarchar](20) NULL,
	[WillCall] [bit] NULL,
	[ShipTo_Telephone] [nvarchar](50) NULL,
	[ShipTo_Fax] [nvarchar](50) NULL,
	[ShipTo_FreightTermsCode] [int] NULL,
	[ShipTo_ContactName] [nvarchar](150) NULL,
	[VersionNumber] [timestamp] NULL,
	[ShipTo_AddressId] [uniqueidentifier] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[BaseAmount_Base] [money] NULL,
	[PricePerUnit_Base] [money] NULL,
	[VolumeDiscountAmount_Base] [money] NULL,
	[ExtendedAmount_Base] [money] NULL,
	[Tax_Base] [money] NULL,
	[ManualDiscountAmount_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_SalesOrderDetail] PRIMARY KEY CLUSTERED 
(
	[SalesOrderDetailId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[InvoiceDetailBase]    Script Date: 04/11/2008 06:43:33 ******/




CREATE TABLE [dbo].[InvoiceDetailBase](
	[InvoiceDetailId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[SalesRepId] [uniqueidentifier] NULL,
	[IsProductOverridden] [bit] NULL CONSTRAINT [Set_To_Zero114]  DEFAULT ((0)),
	[LineItemNumber] [int] NULL,
	[IsCopied] [bit] NULL,
	[InvoiceId] [uniqueidentifier] NOT NULL,
	[QuantityBackordered] [decimal](23, 10) NULL,
	[UoMId] [uniqueidentifier] NULL,
	[ProductId] [uniqueidentifier] NULL,
	[ActualDeliveryOn] [datetime] NULL,
	[Quantity] [decimal](23, 10) NULL,
	[ManualDiscountAmount] [money] NULL,
	[ProductDescription] [nvarchar](500) NULL,
	[VolumeDiscountAmount] [money] NULL,
	[PricePerUnit] [money] NULL,
	[BaseAmount] [money] NULL,
	[QuantityCancelled] [decimal](23, 10) NULL,
	[ShippingTrackingNumber] [nvarchar](100) NULL,
	[ExtendedAmount] [money] NULL,
	[Description] [nvarchar](max) NULL,
	[IsPriceOverridden] [bit] NULL,
	[ShipTo_Name] [nvarchar](200) NULL,
	[PricingErrorCode] [int] NULL,
	[Tax] [money] NULL,
	[CreatedOn] [datetime] NULL,
	[ShipTo_Line1] [nvarchar](50) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ShipTo_Line2] [nvarchar](50) NULL,
	[ShipTo_Line3] [nvarchar](50) NULL,
	[ModifiedOn] [datetime] NULL,
	[ShipTo_City] [nvarchar](50) NULL,
	[ShipTo_StateOrProvince] [nvarchar](50) NULL,
	[ShipTo_Country] [nvarchar](50) NULL,
	[ShipTo_PostalCode] [nvarchar](20) NULL,
	[WillCall] [bit] NULL,
	[ShipTo_Telephone] [nvarchar](50) NULL,
	[ShipTo_Fax] [nvarchar](50) NULL,
	[ShipTo_FreightTermsCode] [int] NULL,
	[QuantityShipped] [decimal](23, 10) NULL,
	[VersionNumber] [timestamp] NOT NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[VolumeDiscountAmount_Base] [money] NULL,
	[BaseAmount_Base] [money] NULL,
	[PricePerUnit_Base] [money] NULL,
	[Tax_Base] [money] NULL,
	[ExtendedAmount_Base] [money] NULL,
	[ManualDiscountAmount_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_InvoiceDetail] PRIMARY KEY CLUSTERED 
(
	[InvoiceDetailId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ReportBase]    Script Date: 04/11/2008 06:49:12 ******/




CREATE TABLE [dbo].[ReportBase](
	[DefaultFilter] [nvarchar](max) NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[Name] [nvarchar](425) NOT NULL,
	[IsCustomReport] [bit] NOT NULL CONSTRAINT [DF_ReportBase_IsCustomReport]  DEFAULT ((0)),
	[ModifiedOn] [datetime] NULL,
	[SignatureMajorVersion] [int] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[BodyText] [nvarchar](max) NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[IsPersonal] [bit] NOT NULL CONSTRAINT [DF_ReportBase_IsPersonal]  DEFAULT ((1)),
	[CreatedOn] [datetime] NULL,
	[SignatureLcid] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[FileSize] [int] NULL,
	[CustomReportXml] [nvarchar](max) NULL,
	[Description] [nvarchar](256) NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ScheduleXml] [nvarchar](max) NULL,
	[SignatureDate] [datetime] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[FileName] [nvarchar](255) NULL,
	[ParentReportId] [uniqueidentifier] NULL,
	[BodyBinary] [text] NULL,
	[QueryInfo] [nvarchar](max) NULL,
	[LanguageCode] [int] NULL,
	[SignatureId] [uniqueidentifier] NULL,
	[BodyUrl] [nvarchar](200) NULL,
	[MimeType] [nvarchar](256) NULL,
	[SignatureMinorVersion] [int] NULL,
	[ReportId] [uniqueidentifier] NOT NULL,
	[IsScheduledReport] [bit] NOT NULL CONSTRAINT [DF_ReportBase_IsScheduledReport]  DEFAULT ((0)),
	[VersionNumber] [timestamp] NULL,
	[ReportTypeCode] [int] NULL,
	[OwningUser] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_Report] PRIMARY KEY CLUSTERED 
(
	[ReportId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
)  TEXTIMAGE_

/****** Object:  Table [dbo].[UserSettingsBase]    Script Date: 04/11/2008 06:55:05 ******/




CREATE TABLE [dbo].[UserSettingsBase](
	[SystemUserId] [uniqueidentifier] NOT NULL,
	[BusinessUnitId] [uniqueidentifier] NOT NULL,
	[HomepageArea] [nvarchar](200) NULL,
	[PagingLimit] [int] NULL,
	[HomepageSubarea] [nvarchar](200) NULL,
	[DefaultCalendarView] [int] NULL,
	[WorkdayStartTime] [nvarchar](5) NULL,
	[WorkdayStopTime] [nvarchar](5) NULL,
	[IgnoreUnsolicitedEmail] [bit] NOT NULL CONSTRAINT [DF_UserSettingsBase_IgnoreUnsolicitedEmail]  DEFAULT ((1)),
	[TimeZoneBias] [int] NOT NULL CONSTRAINT [Set_To_Zero167]  DEFAULT ((0)),
	[TimeZoneStandardBias] [int] NOT NULL CONSTRAINT [Set_To_Zero168]  DEFAULT ((0)),
	[TimeZoneDaylightBias] [int] NOT NULL CONSTRAINT [Set_To_Zero169]  DEFAULT ((0)),
	[TimeZoneCode] [smallint] NOT NULL CONSTRAINT [Set_To_Zero170]  DEFAULT ((0)),
	[TimeZoneStandardYear] [smallint] NOT NULL CONSTRAINT [Set_To_Zero171]  DEFAULT ((0)),
	[TimeZoneStandardMonth] [smallint] NOT NULL CONSTRAINT [Set_To_Zero172]  DEFAULT ((0)),
	[TimeZoneStandardDay] [smallint] NOT NULL CONSTRAINT [Set_To_Zero173]  DEFAULT ((0)),
	[TimeZoneStandardDayOfWeek] [smallint] NOT NULL CONSTRAINT [Set_To_Zero174]  DEFAULT ((0)),
	[TimeZoneStandardHour] [smallint] NOT NULL CONSTRAINT [Set_To_Zero175]  DEFAULT ((0)),
	[TimeZoneStandardMinute] [smallint] NOT NULL CONSTRAINT [Set_To_Zero176]  DEFAULT ((0)),
	[TimeZoneStandardSecond] [smallint] NOT NULL CONSTRAINT [Set_To_Zero177]  DEFAULT ((0)),
	[TimeZoneDaylightYear] [smallint] NOT NULL CONSTRAINT [Set_To_Zero178]  DEFAULT ((0)),
	[TimeZoneDaylightMonth] [smallint] NOT NULL CONSTRAINT [Set_To_Zero179]  DEFAULT ((0)),
	[TimeZoneDaylightDay] [smallint] NOT NULL CONSTRAINT [Set_To_Zero180]  DEFAULT ((0)),
	[TimeZoneDaylightDayOfWeek] [smallint] NOT NULL CONSTRAINT [Set_To_Zero181]  DEFAULT ((0)),
	[TimeZoneDaylightHour] [smallint] NOT NULL CONSTRAINT [Set_To_Zero182]  DEFAULT ((0)),
	[TimeZoneDaylightMinute] [smallint] NOT NULL CONSTRAINT [Set_To_Zero183]  DEFAULT ((0)),
	[TimeZoneDaylightSecond] [smallint] NOT NULL CONSTRAINT [Set_To_Zero184]  DEFAULT ((0)),
	[ModifiedBy] [uniqueidentifier] NULL,
	[AdvancedFindStartupMode] [smallint] NOT NULL CONSTRAINT [DF_UserSettingsBase_AdvancedFindStartupMode]  DEFAULT ((1)),
	[CreatedOn] [datetime] NULL,
	[TrackingTokenId] [int] NULL,
	[NextTrackingNumber] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[UserProfile] [nvarchar](1024) NULL,
	[NumberSeparator] [nvarchar](5) NOT NULL CONSTRAINT [DF_UserSettingsBase_NumberSeparator]  DEFAULT (','),
	[OutlookSyncInterval] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_OutlookSyncInterval]  DEFAULT ((900000)),
	[UseCrmFormForTask] [bit] NOT NULL CONSTRAINT [DF_UserSettingsBase_UseCrmFormForTask]  DEFAULT ((0)),
	[PricingDecimalPrecision] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_PricingDecimalPrecision]  DEFAULT ((2)),
	[SyncContactCompany] [bit] NOT NULL CONSTRAINT [DF_UserSettingsBase_SyncContactCompany]  DEFAULT ((1)),
	[DateSeparator] [nvarchar](5) NOT NULL CONSTRAINT [DF_UserSettingsBase_DateSeparator]  DEFAULT ('/'),
	[LongDateFormatCode] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_LongDateFormatCode]  DEFAULT ((0)),
	[AllowEmailCredentials] [bit] NOT NULL CONSTRAINT [DF_UserSettingsBase_AllowEmailCredentials]  DEFAULT ((0)),
	[FullNameConventionCode] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_FullNameConventionCode]  DEFAULT ((0)),
	[TimeSeparator] [nvarchar](5) NULL,
	[TimeFormatCode] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_TimeFormatCode]  DEFAULT ((0)),
	[NegativeFormatCode] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_NegativeFormatCode]  DEFAULT ((0)),
	[OfflineSyncInterval] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_OfflineSyncInterval]  DEFAULT ((900000)),
	[CalendarType] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_CalendarType]  DEFAULT ((2)),
	[CurrencySymbol] [nvarchar](5) NOT NULL CONSTRAINT [DF_UserSettingsBase_CurrencySymbol]  DEFAULT ('$'),
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[UILanguageId] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_UILanguageId]  DEFAULT ((0)),
	[UseCrmFormForContact] [bit] NOT NULL CONSTRAINT [DF_UserSettingsBase_UseCrmFormForContact]  DEFAULT ((0)),
	[CurrencyFormatCode] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_CurrencyFormatCode]  DEFAULT ((0)),
	[AddressBookSyncInterval] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_AddressBookSyncInterval]  DEFAULT ((86400000)),
	[DecimalSymbol] [nvarchar](5) NOT NULL CONSTRAINT [DF_UserSettingsBase_DecimalSymbol]  DEFAULT ('.'),
	[UseCrmFormForEmail] [bit] NOT NULL CONSTRAINT [DF_UserSettingsBase_UseCrmFormForEmail]  DEFAULT ((0)),
	[ShowWeekNumber] [bit] NOT NULL CONSTRAINT [DF_UserSettingsBase_ShowWeekNumber]  DEFAULT ((0)),
	[NegativeCurrencyFormatCode] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_NegativeCurrencyFormatCode]  DEFAULT ((0)),
	[TimeFormatString] [nvarchar](255) NULL,
	[EmailUsername] [nvarchar](200) NULL,
	[DateFormatString] [nvarchar](255) NULL,
	[ReportScriptErrors] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_ReportScriptErrors]  DEFAULT ((1)),
	[UseImageStrips] [bit] NOT NULL CONSTRAINT [DF_UserSettingsBase_UseImageStrips]  DEFAULT ((1)),
	[EmailPassword] [nvarchar](200) NULL,
	[DateFormatCode] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_DateFormatCode]  DEFAULT ((0)),
	[UseCrmFormForAppointment] [bit] NOT NULL CONSTRAINT [DF_UserSettingsBase_UseCrmFormForAppointment]  DEFAULT ((0)),
	[IsDuplicateDetectionEnabledWhenGoingOnline] [bit] NOT NULL CONSTRAINT [DF_UserSettingsBase_IsDuplicateDetectionEnabledWhenGoingOnline]  DEFAULT ((0)),
	[LocaleId] [int] NULL,
	[IncomingEmailFilteringMethod] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_IncomingEmailFilteringMethod]  DEFAULT ((2)),
	[CurrencyDecimalPrecision] [int] NOT NULL CONSTRAINT [DF_UserSettingsBase_CurrencyDecimalPrecision]  DEFAULT ((2)),
	[AMDesignator] [nvarchar](25) NOT NULL CONSTRAINT [DF_UserSettingsBase_AMDesignator]  DEFAULT ('AM'),
	[NumberGroupFormat] [nvarchar](25) NULL,
	[HelpLanguageId] [int] NULL,
	[PMDesignator] [nvarchar](25) NOT NULL CONSTRAINT [DF_UserSettingsBase_PMDesignator]  DEFAULT ('PM'),
 CONSTRAINT [cndx_PrimaryKey_UserSettings] PRIMARY KEY CLUSTERED 
(
	[SystemUserId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_UserSettingsBase_TrackingTokenId] UNIQUE NONCLUSTERED 
(
	[TrackingTokenId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[CampaignBase]    Script Date: 04/11/2008 06:38:12 ******/




CREATE TABLE [dbo].[CampaignBase](
	[TypeCode] [int] NULL,
	[ProposedEnd] [datetime] NULL,
	[BudgetedCost] [money] NULL CONSTRAINT [DF_CampaignBase_BudgetedCost]  DEFAULT ((0)),
	[CreatedOn] [datetime] NULL,
	[PromotionCodeName] [nvarchar](128) NULL,
	[ModifiedOn] [datetime] NULL,
	[PriceListId] [uniqueidentifier] NULL,
	[StatusCode] [int] NOT NULL CONSTRAINT [DF_CampaignBase_StatusCode]  DEFAULT ((0)),
	[CreatedBy] [uniqueidentifier] NULL,
	[IsTemplate] [bit] NULL CONSTRAINT [DF_CampaignBase_IsTemplate]  DEFAULT ((0)),
	[CampaignId] [uniqueidentifier] NOT NULL,
	[ActualStart] [datetime] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[TotalActualCost] [money] NULL CONSTRAINT [DF_CampaignBase_TotalActualCost]  DEFAULT ((0)),
	[Message] [nvarchar](256) NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ExpectedRevenue] [money] NULL CONSTRAINT [DF_CampaignBase_ExpectedRevenue]  DEFAULT ((0)),
	[VersionNumber] [timestamp] NULL,
	[CodeName] [nvarchar](32) NULL,
	[ProposedStart] [datetime] NULL,
	[Objective] [nvarchar](max) NULL,
	[ActualEnd] [datetime] NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_CampaignBase_StateCode]  DEFAULT ((0)),
	[DeletionStateCode] [int] NOT NULL,
	[OtherCost] [money] NULL CONSTRAINT [DF_CampaignBase_OtherCost]  DEFAULT ((0)),
	[Description] [nvarchar](max) NULL,
	[TotalCampaignActivityActualCost] [money] NULL CONSTRAINT [DF_CampaignBase_TotalCampaignActivityActualCost]  DEFAULT ((0)),
	[ExpectedResponse] [int] NULL,
	[Name] [nvarchar](128) NOT NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[TotalCampaignActivityActualCost_Base] [money] NULL,
	[BudgetedCost_Base] [money] NULL,
	[ExpectedRevenue_Base] [money] NULL,
	[OtherCost_Base] [money] NULL,
	[TotalActualCost_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_Campaign] PRIMARY KEY CLUSTERED 
(
	[CampaignId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[UserQueryBase]    Script Date: 04/11/2008 06:54:38 ******/




CREATE TABLE [dbo].[UserQueryBase](
	[QueryType] [int] NOT NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NOT NULL,
	[StatusCode] [int] NULL,
	[VersionNumber] [timestamp] NULL,
	[FetchXml] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[ColumnSetXml] [nvarchar](max) NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_UserQueryBase_StateCode]  DEFAULT ((0)),
	[UserQueryId] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[CreatedBy] [uniqueidentifier] NOT NULL,
	[ReturnedTypeCode] [int] NOT NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[LayoutXml] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_UserQueryBase_DeletionStateCode]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_UserQuery] PRIMARY KEY CLUSTERED 
(
	[UserQueryId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ImportBase]    Script Date: 04/11/2008 06:41:50 ******/




CREATE TABLE [dbo].[ImportBase](
	[SendNotification] [bit] NOT NULL CONSTRAINT [DF_ImportBase_SendNotification]  DEFAULT ((0)),
	[IsImport] [bit] NOT NULL CONSTRAINT [DF_ImportBase_IsImport]  DEFAULT ((0)),
	[ModeCode] [int] NOT NULL CONSTRAINT [DF_ImportBase_ModeCode]  DEFAULT ((0)),
	[StateCode] [int] NOT NULL CONSTRAINT [DF_ImportBase_StateCode]  DEFAULT ((0)),
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[ImportId] [uniqueidentifier] NOT NULL,
	[EMailAddress] [nvarchar](100) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[Name] [nvarchar](256) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[Sequence] [int] NOT NULL CONSTRAINT [DF_ImportBase_Sequence]  DEFAULT ((0)),
	[DeletionStateCode] [int] NOT NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[StatusCode] [int] NOT NULL CONSTRAINT [DF_ImportBase_StatusCode]  DEFAULT ((1)),
	[OwningUser] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_Import] PRIMARY KEY CLUSTERED 
(
	[ImportId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[BusinessUnitMap]    Script Date: 04/11/2008 06:37:31 ******/




CREATE TABLE [dbo].[BusinessUnitMap](
	[BusinessUnitMapId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_BusinessUnitMap_BusinessUnitMapId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
	[SubBusinessId] [uniqueidentifier] NOT NULL,
	[BusinessId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [ndx_PrimaryKey_BusinessUnitMap] PRIMARY KEY NONCLUSTERED 
(
	[BusinessUnitMapId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ImportMapBase]    Script Date: 04/11/2008 06:42:24 ******/




CREATE TABLE [dbo].[ImportMapBase](
	[StatusCode] [int] NOT NULL CONSTRAINT [DF_ImportMapBase_StatusCode]  DEFAULT ((1)),
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[TargetEntity] [int] NULL,
	[ImportMapType] [int] NULL CONSTRAINT [DF_ImportMapBase_ImportMapType]  DEFAULT ((1)),
	[DeletionStateCode] [int] NOT NULL,
	[TargetUserIdentifierForSourceCRMUserLink] [nvarchar](160) NULL,
	[IsWizardCreated] [bit] NULL CONSTRAINT [DF_ImportMapBase_IsWizardCreated]  DEFAULT ((0)),
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ImportMapId] [uniqueidentifier] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Name] [nvarchar](320) NULL,
	[SourceUserIdentifierForSourceDataSourceUserLink] [nvarchar](160) NULL,
	[SourceUserIdentifierForSourceCRMUserLink] [nvarchar](160) NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_ImportMapBase_StateCode]  DEFAULT ((0)),
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[Source] [nvarchar](160) NULL,
	[IsValidForImport] [bit] NULL CONSTRAINT [DF_ImportMapBase_IsValidForImport]  DEFAULT ((0)),
	[OwningUser] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_ImportMap] PRIMARY KEY CLUSTERED 
(
	[ImportMapId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ListBase]    Script Date: 04/11/2008 06:44:44 ******/




CREATE TABLE [dbo].[ListBase](
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[MemberCount] [int] NULL CONSTRAINT [DF_ListBase_MemberCount]  DEFAULT ((0)),
	[ListName] [nvarchar](128) NOT NULL,
	[LastUsedOn] [datetime] NULL,
	[ListId] [uniqueidentifier] NOT NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_ListBase_StateCode]  DEFAULT ((0)),
	[StatusCode] [int] NULL CONSTRAINT [DF_ListBase_StatusCode]  DEFAULT ((0)),
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_ListBase_DeletionStateCode]  DEFAULT ((0)),
	[DoNotSendOnOptOut] [bit] NULL CONSTRAINT [DF_ListBase_DoNotSendOnOptOut]  DEFAULT ((1)),
	[Description] [nvarchar](max) NULL,
	[Purpose] [nvarchar](512) NULL,
	[Cost] [money] NULL,
	[IgnoreInactiveListMembers] [bit] NULL CONSTRAINT [DF_ListBase_IgnoreInactiveListMembers]  DEFAULT ((1)),
	[MemberType] [int] NULL,
	[Source] [nvarchar](128) NULL,
	[CreatedFromCode] [int] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[LockStatus] [bit] NULL CONSTRAINT [DF_ListBase_LockStatus]  DEFAULT ((0)),
	[CreatedBy] [uniqueidentifier] NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[ImportSequenceNumber] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[Cost_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_List] PRIMARY KEY CLUSTERED 
(
	[ListId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[AsyncOperationBase]    Script Date: 04/11/2008 06:36:47 ******/




CREATE TABLE [dbo].[AsyncOperationBase](
	[MessageName] [nvarchar](160) NULL,
	[Depth] [int] NOT NULL,
	[PrimaryEntityType] [int] NULL,
	[Data] [nvarchar](max) NULL,
	[RegardingObjectId] [uniqueidentifier] NULL,
	[WorkflowStageName] [nvarchar](256) NULL,
	[OperationType] [int] NULL,
	[DependencyToken] [nvarchar](256) NULL,
	[RecurrencePattern] [nvarchar](256) NULL,
	[DeletionStateCode] [int] NOT NULL CONSTRAINT [DF_AsyncOperationBase_DeletionStateCode]  DEFAULT ((0)),
	[Name] [nvarchar](256) NULL,
	[PostponeUntil] [datetime] NULL,
	[WorkflowState] [text] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[IsWaitingForEvent] [bit] NULL,
	[CreatedBy] [uniqueidentifier] NOT NULL,
	[ErrorCode] [int] NULL,
	[ModifiedBy] [uniqueidentifier] NOT NULL,
	[CorrelationId] [uniqueidentifier] NOT NULL,
	[RecurrenceStartTime] [datetime] NULL,
	[StatusCode] [int] NULL,
	[AsyncOperationId] [uniqueidentifier] NOT NULL,
	[Sequence] [bigint] IDENTITY(1,1) NOT NULL,
	[RequestId] [uniqueidentifier] NULL,
	[WorkflowIsBlocked] [bit] NULL,
	[ModifiedOn] [datetime] NULL,
	[Message] [nvarchar](max) NULL,
	[StartedOn] [datetime] NULL,
	[HostId] [nvarchar](256) NULL,
	[StateCode] [int] NOT NULL,
	[WorkflowActivationId] [uniqueidentifier] NULL,
	[CompletedOn] [datetime] NULL,
	[CorrelationUpdatedTime] [datetime] NOT NULL CONSTRAINT [DF_AsyncOperationBase_CorrelationUpdatedTime]  DEFAULT (getutcdate()),
	[UTCConversionTimeZoneCode] [int] NULL,
	[RetryCount] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[RegardingObjectIdDsc] [int] NULL,
	[RegardingObjectIdName] [nvarchar](256) NULL,
	[RegardingObjectTypeCode] [int] NULL,
	[RegardingObjectIdYomiName] [nvarchar](160) NULL,
 CONSTRAINT [cndx_PrimaryKey_AsyncOperation] PRIMARY KEY CLUSTERED 
(
	[AsyncOperationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
)  TEXTIMAGE_

/****** Object:  Table [dbo].[New_entity1Base]    Script Date: 04/11/2008 06:45:10 ******/




CREATE TABLE [dbo].[New_entity1Base](
	[New_entity1Id] [uniqueidentifier] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[statecode] [int] NOT NULL,
	[statuscode] [int] NULL,
	[DeletionStateCode] [int] NULL,
	[VersionNumber] [timestamp] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
 CONSTRAINT [PK_New_entity1Base] PRIMARY KEY CLUSTERED 
(
	[New_entity1Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[MailMergeTemplateBase]    Script Date: 04/11/2008 06:45:01 ******/




CREATE TABLE [dbo].[MailMergeTemplateBase](
	[ModifiedBy] [uniqueidentifier] NULL,
	[Body] [nvarchar](max) NULL,
	[TemplateTypeCode] [int] NOT NULL CONSTRAINT [DF_MailMergeTemplateBase_TemplateTypeCode]  DEFAULT ((1)),
	[CreatedBy] [uniqueidentifier] NULL,
	[Description] [nvarchar](256) NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[FileSize] [int] NULL,
	[ParameterXml] [nvarchar](max) NULL,
	[DeletionStateCode] [int] NOT NULL,
	[MailMergeType] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[DefaultFilter] [nvarchar](max) NULL,
	[MimeType] [nvarchar](256) NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[StateCode] [int] NOT NULL,
	[FileName] [nvarchar](255) NULL,
	[LanguageCode] [int] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[DocumentFormat] [int] NULL,
	[VersionNumber] [timestamp] NULL,
	[Name] [nvarchar](425) NOT NULL,
	[MailMergeTemplateId] [uniqueidentifier] NOT NULL,
	[IsPersonal] [bit] NOT NULL CONSTRAINT [DF_MailMergeTemplateBase_IsPersonal]  DEFAULT ((1)),
	[StatusCode] [int] NULL,
	[OwningUser] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_MailMergeTemplate] PRIMARY KEY CLUSTERED 
(
	[MailMergeTemplateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[DuplicateRuleBase]    Script Date: 04/11/2008 06:41:12 ******/




CREATE TABLE [dbo].[DuplicateRuleBase](
	[Description] [nvarchar](max) NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[IsCaseSensitive] [bit] NULL CONSTRAINT [DF_DuplicateRuleBase_IsCaseSensitive]  DEFAULT ((0)),
	[StateCode] [int] NOT NULL CONSTRAINT [DF_DuplicateRuleBase_StateCode]  DEFAULT ((0)),
	[StatusCode] [int] NOT NULL CONSTRAINT [DF_DuplicateRuleBase_StatusCode]  DEFAULT ((0)),
	[Name] [nvarchar](160) NOT NULL,
	[MatchingEntityMatchCodeTable] [nvarchar](50) NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[BaseEntityTypeCode] [int] NOT NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[DuplicateRuleId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[MatchingEntityTypeCode] [int] NOT NULL,
	[BaseEntityMatchCodeTable] [nvarchar](50) NULL,
	[BaseEntityName] [nvarchar](160) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[MatchingEntityName] [nvarchar](160) NULL,
	[CreatedOn] [datetime] NULL,
	[OwningUser] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_DuplicateRule] PRIMARY KEY CLUSTERED 
(
	[DuplicateRuleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[CustomerRelationshipBase]    Script Date: 04/11/2008 06:40:38 ******/




CREATE TABLE [dbo].[CustomerRelationshipBase](
	[VersionNumber] [timestamp] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[CustomerRoleId] [uniqueidentifier] NULL,
	[CustomerRelationshipId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[PartnerId] [uniqueidentifier] NOT NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[ConverseRelationshipId] [uniqueidentifier] NULL,
	[PartnerRoleId] [uniqueidentifier] NULL,
	[CustomerRoleDescription] [nvarchar](max) NULL,
	[CustomerId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[PartnerRoleDescription] [nvarchar](max) NULL,
	[OwningUser] [uniqueidentifier] NULL,
	[PartnerIdType] [int] NOT NULL,
	[CustomerIdType] [int] NOT NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
	[UniqueDscId] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_CustomerRelationship] PRIMARY KEY CLUSTERED 
(
	[CustomerRelationshipId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ColumnMappingBase]    Script Date: 04/11/2008 06:38:29 ******/




CREATE TABLE [dbo].[ColumnMappingBase](
	[ColumnMappingId] [uniqueidentifier] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[TargetEntityName] [nvarchar](160) NULL,
	[StatusCode] [int] NOT NULL CONSTRAINT [DF_ColumnMappingBase_StatusCode]  DEFAULT ((0)),
	[ProcessCode] [int] NOT NULL CONSTRAINT [DF_ColumnMappingBase_ProcessCode]  DEFAULT ((1)),
	[ModifiedOn] [datetime] NOT NULL,
	[TargetAttributeName] [nvarchar](160) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ImportMapId] [uniqueidentifier] NULL,
	[SourceAttributeName] [nvarchar](160) NULL,
	[SourceEntityName] [nvarchar](160) NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_ColumnMappingBase_StateCode]  DEFAULT ((0)),
 CONSTRAINT [cndx_PrimaryKey_ColumnMapping] PRIMARY KEY CLUSTERED 
(
	[ColumnMappingId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[TransformationMappingBase]    Script Date: 04/11/2008 06:54:04 ******/




CREATE TABLE [dbo].[TransformationMappingBase](
	[ImportMapId] [uniqueidentifier] NULL,
	[TransformationTypeName] [nvarchar](256) NULL,
	[ProcessCode] [int] NOT NULL CONSTRAINT [DF_TransformationMappingBase_ProcessCode]  DEFAULT ((1)),
	[SourceEntityName] [nvarchar](160) NULL,
	[StatusCode] [int] NOT NULL CONSTRAINT [DF_TransformationMappingBase_StatusCode]  DEFAULT ((0)),
	[ModifiedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[TransformationMappingId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_TransformationMappingBase_StateCode]  DEFAULT ((0)),
	[TargetEntityName] [nvarchar](160) NULL,
 CONSTRAINT [cndx_PrimaryKey_TransformationMapping] PRIMARY KEY CLUSTERED 
(
	[TransformationMappingId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[OwnerMappingBase]    Script Date: 04/11/2008 06:46:45 ******/




CREATE TABLE [dbo].[OwnerMappingBase](
	[CreatedOn] [datetime] NOT NULL,
	[TargetUserValueForSourceCRMUserLink] [nvarchar](160) NULL,
	[StatusCode] [int] NOT NULL CONSTRAINT [DF_OwnerMappingBase_StatusCode]  DEFAULT ((0)),
	[ImportMapId] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[OwnerMappingId] [uniqueidentifier] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ProcessCode] [int] NOT NULL CONSTRAINT [DF_OwnerMappingBase_ProcessCode]  DEFAULT ((1)),
	[SourceSystemUserName] [nvarchar](160) NULL,
	[TargetSystemUserId] [uniqueidentifier] NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_OwnerMappingBase_StateCode]  DEFAULT ((0)),
	[SourceUserValueForSourceCRMUserLink] [nvarchar](160) NULL,
	[TargetSystemUserDomainName] [nvarchar](260) NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_OwnerMapping] PRIMARY KEY CLUSTERED 
(
	[OwnerMappingId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[philipri_customizationversionExtensionBase]    Script Date: 04/11/2008 06:46:51 ******/




CREATE TABLE [dbo].[philipri_customizationversionExtensionBase](
	[philipri_customizationversionId] [uniqueidentifier] NOT NULL,
	[philipri_name] [nvarchar](100) NULL,
 CONSTRAINT [PK_philipri_customizationversionExtensionBase] PRIMARY KEY CLUSTERED 
(
	[philipri_customizationversionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[UoMBase]    Script Date: 04/11/2008 06:54:15 ******/




CREATE TABLE [dbo].[UoMBase](
	[UoMId] [uniqueidentifier] NOT NULL,
	[BaseUoM] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [Set_To_Zero150]  DEFAULT ((0)),
	[Name] [nvarchar](100) NOT NULL,
	[UoMScheduleId] [uniqueidentifier] NOT NULL,
	[Quantity] [decimal](23, 10) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsScheduleBaseUoM] [bit] NULL CONSTRAINT [Set_To_Zero151]  DEFAULT ((0)),
	[VersionNumber] [timestamp] NULL,
	[ImportSequenceNumber] [int] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_UoM] PRIMARY KEY CLUSTERED 
(
	[UoMId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_UoMBase] UNIQUE NONCLUSTERED 
(
	[UoMScheduleId] ASC,
	[Name] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[WorkflowDependencyBase]    Script Date: 04/11/2008 06:55:49 ******/




CREATE TABLE [dbo].[WorkflowDependencyBase](
	[ParameterName] [nvarchar](256) NULL,
	[RelatedEntityName] [nvarchar](50) NULL,
	[RelatedAttributeName] [nvarchar](256) NULL,
	[DeletionStateCode] [int] NOT NULL,
	[WorkflowId] [uniqueidentifier] NOT NULL,
	[SdkMessageId] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[Type] [int] NOT NULL,
	[EntityAttributes] [nvarchar](max) NULL,
	[CustomEntityName] [nvarchar](50) NULL,
	[DependentEntityName] [nvarchar](50) NULL,
	[DependentAttributeName] [nvarchar](100) NULL,
	[WorkflowDependencyId] [uniqueidentifier] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ParameterType] [nvarchar](256) NULL,
 CONSTRAINT [cndx_PrimaryKey_WorkflowDependency] PRIMARY KEY CLUSTERED 
(
	[WorkflowDependencyId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[LeadCompetitors]    Script Date: 04/11/2008 06:44:26 ******/




CREATE TABLE [dbo].[LeadCompetitors](
	[LeadId] [uniqueidentifier] NOT NULL,
	[CompetitorId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[LeadCompetitorId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_LeadCompetitors_LeadCompetitorId]  DEFAULT (newid()),
 CONSTRAINT [cndx_PrimaryKey_LeadCompetitors] PRIMARY KEY CLUSTERED 
(
	[LeadCompetitorId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_LeadCompetitors] UNIQUE NONCLUSTERED 
(
	[LeadId] ASC,
	[CompetitorId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[CompetitorProduct]    Script Date: 04/11/2008 06:38:49 ******/




CREATE TABLE [dbo].[CompetitorProduct](
	[CompetitorId] [uniqueidentifier] NOT NULL,
	[ProductId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[CompetitorProductId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_CompetitorProduct_CompetitorProductId]  DEFAULT (newid()),
 CONSTRAINT [cndx_PrimaryKey_CompetitorProduct] PRIMARY KEY CLUSTERED 
(
	[CompetitorProductId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_CompetitorProduct] UNIQUE NONCLUSTERED 
(
	[CompetitorId] ASC,
	[ProductId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[CompetitorSalesLiterature]    Script Date: 04/11/2008 06:38:51 ******/




CREATE TABLE [dbo].[CompetitorSalesLiterature](
	[CompetitorId] [uniqueidentifier] NOT NULL,
	[SalesLiteratureId] [uniqueidentifier] NOT NULL,
	[CompetitorSalesLiteratureId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_CompetitorSalesLiterature_CompetitorSalesLiteratureId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_CompetitorSalesLiterature] PRIMARY KEY CLUSTERED 
(
	[CompetitorSalesLiteratureId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_CompetitorSalesLiterature] UNIQUE NONCLUSTERED 
(
	[CompetitorId] ASC,
	[SalesLiteratureId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[CompetitorAddressBase]    Script Date: 04/11/2008 06:38:37 ******/




CREATE TABLE [dbo].[CompetitorAddressBase](
	[ParentId] [uniqueidentifier] NOT NULL,
	[CompetitorAddressId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[AddressNumber] [int] NULL,
	[AddressTypeCode] [int] NULL,
	[Name] [nvarchar](200) NULL,
	[Line1] [nvarchar](50) NULL,
	[Line2] [nvarchar](50) NULL,
	[Line3] [nvarchar](50) NULL,
	[City] [nvarchar](50) NULL,
	[StateOrProvince] [nvarchar](50) NULL,
	[County] [nvarchar](50) NULL,
	[Country] [nvarchar](50) NULL,
	[PostOfficeBox] [nvarchar](20) NULL,
	[PostalCode] [nvarchar](20) NULL,
	[UTCOffset] [int] NULL,
	[UPSZone] [nvarchar](4) NULL,
	[Latitude] [float] NULL,
	[Telephone1] [nvarchar](50) NULL,
	[Longitude] [float] NULL,
	[ShippingMethodCode] [int] NULL,
	[Telephone2] [nvarchar](50) NULL,
	[Telephone3] [nvarchar](50) NULL,
	[Fax] [nvarchar](50) NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_CompetitorAddress] PRIMARY KEY CLUSTERED 
(
	[CompetitorAddressId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_CompetitorAddressBase] UNIQUE NONCLUSTERED 
(
	[ParentId] ASC,
	[AddressNumber] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[RelationshipRoleMapBase]    Script Date: 04/11/2008 06:49:02 ******/




CREATE TABLE [dbo].[RelationshipRoleMapBase](
	[ModifiedOn] [datetime] NULL,
	[CreatedOn] [datetime] NULL,
	[RelationshipRoleMapId] [uniqueidentifier] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[AssociateObjectTypeCode] [int] NOT NULL,
	[RelationshipRoleId] [uniqueidentifier] NOT NULL,
	[PrimaryObjectTypeCode] [int] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_RelationshipRoleMap] PRIMARY KEY CLUSTERED 
(
	[RelationshipRoleMapId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_RelationshipRoleMapBase] UNIQUE NONCLUSTERED 
(
	[RelationshipRoleId] ASC,
	[PrimaryObjectTypeCode] ASC,
	[AssociateObjectTypeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [MetadataSchema].[EntityRelationshipRelationships]    Script Date: 04/11/2008 06:56:49 ******/




CREATE TABLE [MetadataSchema].[EntityRelationshipRelationships](
	[EntityRelationshipRelationshipsId] [uniqueidentifier] NOT NULL,
	[EntityRelationshipId] [uniqueidentifier] NOT NULL,
	[RelationshipId] [uniqueidentifier] NOT NULL,
	[EntityRelationshipRelationshipsRowId] [uniqueidentifier] NOT NULL DEFAULT (newid()),
	[VersionNumber] [timestamp] NOT NULL,
	[CustomizationLevel] [tinyint] NOT NULL DEFAULT ((0)),
 CONSTRAINT [XPKEntityRelationshipRelationships] PRIMARY KEY CLUSTERED 
(
	[EntityRelationshipRelationshipsId] ASC,
	[CustomizationLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[CampaignItemBase]    Script Date: 04/11/2008 06:38:16 ******/




CREATE TABLE [dbo].[CampaignItemBase](
	[EntityType] [int] NOT NULL,
	[EntityId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[CampaignItemId] [uniqueidentifier] NOT NULL,
	[CampaignId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_CampaignItem] PRIMARY KEY CLUSTERED 
(
	[CampaignItemId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_CampaignItemBase] UNIQUE NONCLUSTERED 
(
	[CampaignId] ASC,
	[EntityId] ASC,
	[EntityType] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ContactOrders]    Script Date: 04/11/2008 06:39:35 ******/




CREATE TABLE [dbo].[ContactOrders](
	[SalesOrderId] [uniqueidentifier] NOT NULL,
	[ContactId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[ContactOrderId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_ContactOrders_ContactOrderId]  DEFAULT (newid()),
 CONSTRAINT [cndx_PrimaryKey_ContactOrders] PRIMARY KEY CLUSTERED 
(
	[ContactOrderId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_ContactOrders] UNIQUE NONCLUSTERED 
(
	[ContactId] ASC,
	[SalesOrderId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ContactInvoices]    Script Date: 04/11/2008 06:39:30 ******/




CREATE TABLE [dbo].[ContactInvoices](
	[ContactId] [uniqueidentifier] NOT NULL,
	[InvoiceId] [uniqueidentifier] NOT NULL,
	[ContactInvoiceId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_ContactInvoices_ContactInvoiceId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_ContactInvoices] PRIMARY KEY CLUSTERED 
(
	[ContactInvoiceId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_ContactInvoices] UNIQUE NONCLUSTERED 
(
	[ContactId] ASC,
	[InvoiceId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ContactLeads]    Script Date: 04/11/2008 06:39:32 ******/




CREATE TABLE [dbo].[ContactLeads](
	[ContactId] [uniqueidentifier] NOT NULL,
	[LeadId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[ContactLeadId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_ContactLeads_ContactLeadId]  DEFAULT (newid()),
 CONSTRAINT [cndx_PrimaryKey_ContactLeads] PRIMARY KEY CLUSTERED 
(
	[ContactLeadId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_ContactLeads] UNIQUE NONCLUSTERED 
(
	[ContactId] ASC,
	[LeadId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ContactQuotes]    Script Date: 04/11/2008 06:39:37 ******/




CREATE TABLE [dbo].[ContactQuotes](
	[ContactId] [uniqueidentifier] NOT NULL,
	[QuoteId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[ContactQuoteId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_ContactQuotes_ContactQuoteId]  DEFAULT (newid()),
 CONSTRAINT [cndx_PrimaryKey_ContactQuotes] PRIMARY KEY CLUSTERED 
(
	[ContactQuoteId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_ContactQuotes] UNIQUE NONCLUSTERED 
(
	[ContactId] ASC,
	[QuoteId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ServiceContractContacts]    Script Date: 04/11/2008 06:52:21 ******/




CREATE TABLE [dbo].[ServiceContractContacts](
	[ContractId] [uniqueidentifier] NOT NULL,
	[ContactId] [uniqueidentifier] NOT NULL,
	[ServiceLevel] [int] NULL,
	[VersionNumber] [timestamp] NULL,
	[ServiceContractContactId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_ServiceContractContacts_ServiceContractContactId]  DEFAULT (newid()),
 CONSTRAINT [cndx_PrimaryKey_ServiceContractContacts] PRIMARY KEY CLUSTERED 
(
	[ServiceContractContactId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_ServiceContractContacts] UNIQUE NONCLUSTERED 
(
	[ContractId] ASC,
	[ContactId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[CampaignActivityItemBase]    Script Date: 04/11/2008 06:37:59 ******/




CREATE TABLE [dbo].[CampaignActivityItemBase](
	[ItemId] [uniqueidentifier] NOT NULL,
	[ItemObjectTypeCode] [int] NOT NULL,
	[CampaignActivityItemId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[CampaignActivityId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_CampaignActivityItem] PRIMARY KEY CLUSTERED 
(
	[CampaignActivityItemId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[RolePrivileges]    Script Date: 04/11/2008 06:49:48 ******/




CREATE TABLE [dbo].[RolePrivileges](
	[PrivilegeId] [uniqueidentifier] NOT NULL,
	[RoleId] [uniqueidentifier] NOT NULL,
	[PrivilegeDepthMask] [int] NOT NULL CONSTRAINT [Set_To_Zero140]  DEFAULT ((0)),
	[RolePrivilegeId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_RolePrivileges_RolePrivilegeId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_RolePrivileges] PRIMARY KEY CLUSTERED 
(
	[RolePrivilegeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_RolePrivileges] UNIQUE NONCLUSTERED 
(
	[PrivilegeId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[RoleTemplatePrivileges]    Script Date: 04/11/2008 06:49:53 ******/




CREATE TABLE [dbo].[RoleTemplatePrivileges](
	[RoleTemplateId] [uniqueidentifier] NOT NULL,
	[PrivilegeId] [uniqueidentifier] NOT NULL,
	[IsBasic] [bit] NOT NULL CONSTRAINT [Set_To_Zero141]  DEFAULT ((0)),
	[IsLocal] [bit] NOT NULL CONSTRAINT [Set_To_Zero142]  DEFAULT ((0)),
	[IsDeep] [bit] NOT NULL CONSTRAINT [Set_To_Zero143]  DEFAULT ((0)),
	[IsGlobal] [bit] NOT NULL CONSTRAINT [Set_To_Zero144]  DEFAULT ((0)),
	[Upgrading] [bit] NOT NULL CONSTRAINT [DF_RoleTemplatePrivileges_Upgrading]  DEFAULT ((1)),
	[RoleTemplatePrivilegeId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_RoleTemplatePrivileges_RoleTemplatePrivilegeId]  DEFAULT (newid()),
 CONSTRAINT [cndx_PrimaryKey_RoleTemplatePrivileges] PRIMARY KEY CLUSTERED 
(
	[RoleTemplatePrivilegeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_RoleTemplatePrivileges] UNIQUE NONCLUSTERED 
(
	[RoleTemplateId] ASC,
	[PrivilegeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[PrivilegeObjectTypeCodes]    Script Date: 04/11/2008 06:47:27 ******/




CREATE TABLE [dbo].[PrivilegeObjectTypeCodes](
	[VersionNumber] [timestamp] NULL,
	[ObjectTypeCode] [int] NOT NULL,
	[PrivilegeId] [uniqueidentifier] NOT NULL,
	[PrivilegeObjectTypeCodeId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_PrivilegeObjectTypeCodes_PrivilegeObjectTypeCodeId]  DEFAULT (newid()),
 CONSTRAINT [cndx_PrimaryKey_PrivilegeObjectTypeCodes] PRIMARY KEY CLUSTERED 
(
	[PrivilegeObjectTypeCodeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[LeadProduct]    Script Date: 04/11/2008 06:44:29 ******/




CREATE TABLE [dbo].[LeadProduct](
	[ProductId] [uniqueidentifier] NOT NULL,
	[LeadId] [uniqueidentifier] NOT NULL,
	[LeadProductId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_LeadProduct_LeadProductId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_LeadProduct] PRIMARY KEY CLUSTERED 
(
	[LeadProductId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_LeadProduct] UNIQUE NONCLUSTERED 
(
	[LeadId] ASC,
	[ProductId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ProductSalesLiterature]    Script Date: 04/11/2008 06:47:54 ******/




CREATE TABLE [dbo].[ProductSalesLiterature](
	[ProductId] [uniqueidentifier] NOT NULL,
	[SalesLiteratureId] [uniqueidentifier] NOT NULL,
	[ProductSalesLiteratureId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_ProductSalesLiterature_ProductSalesLiteratureId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_ProductSalesLiterature] PRIMARY KEY CLUSTERED 
(
	[ProductSalesLiteratureId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_ProductSalesLiterature] UNIQUE NONCLUSTERED 
(
	[ProductId] ASC,
	[SalesLiteratureId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ProductSubstitute]    Script Date: 04/11/2008 06:47:57 ******/




CREATE TABLE [dbo].[ProductSubstitute](
	[ProductId] [uniqueidentifier] NOT NULL,
	[SubstitutedProductId] [uniqueidentifier] NOT NULL,
	[ProductSubstituteId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_ProductSubstitute_ProductSubstituteId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_ProductSubstitute] PRIMARY KEY CLUSTERED 
(
	[ProductSubstituteId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_ProductSubstitute] UNIQUE NONCLUSTERED 
(
	[ProductId] ASC,
	[SubstitutedProductId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[ProductAssociation]    Script Date: 04/11/2008 06:47:30 ******/




CREATE TABLE [dbo].[ProductAssociation](
	[AssociatedProduct] [uniqueidentifier] NOT NULL,
	[ProductId] [uniqueidentifier] NOT NULL,
	[ProductAssociationId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_ProductAssociation_ProductAssociationId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_ProductAssociation] PRIMARY KEY CLUSTERED 
(
	[ProductAssociationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_ProductAssociation] UNIQUE NONCLUSTERED 
(
	[ProductId] ASC,
	[AssociatedProduct] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[DuplicateRuleConditionBase]    Script Date: 04/11/2008 06:41:16 ******/




CREATE TABLE [dbo].[DuplicateRuleConditionBase](
	[DeletionStateCode] [int] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[OperatorParam] [int] NULL,
	[OperatorCode] [int] NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[BaseAttributeName] [nvarchar](50) NOT NULL,
	[RegardingObjectId] [uniqueidentifier] NULL,
	[DuplicateRuleConditionId] [uniqueidentifier] NOT NULL,
	[MatchingAttributeName] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_DuplicateRuleCondition] PRIMARY KEY CLUSTERED 
(
	[DuplicateRuleConditionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[BulkDeleteFailureBase]    Script Date: 04/11/2008 06:37:01 ******/




CREATE TABLE [dbo].[BulkDeleteFailureBase](
	[ErrorDescription] [nvarchar](512) NULL,
	[AsyncOperationId] [uniqueidentifier] NULL,
	[BulkDeleteFailureId] [uniqueidentifier] NOT NULL,
	[RegardingObjectId] [uniqueidentifier] NULL,
	[ErrorNumber] [int] NULL,
	[OrderedQueryIndex] [int] NULL CONSTRAINT [DF_BulkDeleteFailureBase_OrderedQueryIndex]  DEFAULT ((0)),
	[BulkDeleteOperationId] [uniqueidentifier] NULL,
	[RegardingObjectIdYomiName] [nvarchar](160) NULL,
	[RegardingObjectTypeCode] [int] NULL,
	[RegardingObjectIdDsc] [int] NULL,
	[RegardingObjectIdName] [nvarchar](256) NULL,
 CONSTRAINT [cndx_PrimaryKey_BulkDeleteFailure] PRIMARY KEY CLUSTERED 
(
	[BulkDeleteFailureId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SystemUserRoles]    Script Date: 04/11/2008 06:53:15 ******/




CREATE TABLE [dbo].[SystemUserRoles](
	[SystemUserId] [uniqueidentifier] NOT NULL,
	[RoleId] [uniqueidentifier] NOT NULL,
	[SystemUserRoleId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_SystemUserRoles_SystemUserRoleId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_SystemUserRoles] PRIMARY KEY CLUSTERED 
(
	[SystemUserRoleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SystemUserRoles] UNIQUE NONCLUSTERED 
(
	[SystemUserId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[DiscountBase]    Script Date: 04/11/2008 06:40:44 ******/




CREATE TABLE [dbo].[DiscountBase](
	[DiscountId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DiscountTypeId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NULL CONSTRAINT [Set_To_Zero109]  DEFAULT ((0)),
	[LowQuantity] [decimal](23, 10) NULL,
	[HighQuantity] [decimal](23, 10) NULL,
	[Percentage] [decimal](23, 10) NULL,
	[Amount] [money] NULL,
	[StatusCode] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[ImportSequenceNumber] [int] NULL,
	[Amount_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_Discount] PRIMARY KEY CLUSTERED 
(
	[DiscountId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SubscriptionClients]    Script Date: 04/11/2008 06:52:42 ******/




CREATE TABLE [dbo].[SubscriptionClients](
	[ClientId] [uniqueidentifier] NOT NULL,
	[MachineName] [nvarchar](200) NULL,
	[SubscriptionId] [uniqueidentifier] NOT NULL,
	[IsPrimaryClient] [bit] NULL,
	[SubscriptionClientId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_SubscriptionClients] PRIMARY KEY CLUSTERED 
(
	[SubscriptionClientId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SubscriptionClients] UNIQUE NONCLUSTERED 
(
	[SubscriptionId] ASC,
	[MachineName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[SubscriptionSyncInfo]    Script Date: 04/11/2008 06:52:47 ******/




CREATE TABLE [dbo].[SubscriptionSyncInfo](
	[EndTime] [datetime] NULL,
	[SubscriptionSyncInfoId] [int] IDENTITY(1,1) NOT NULL,
	[DeleteObjectCount] [int] NULL,
	[SubscriptionId] [uniqueidentifier] NULL,
	[SyncResult] [bit] NULL,
	[StartTime] [datetime] NULL,
	[DataSize] [int] NULL,
	[InsertObjectCount] [int] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_SubscriptionSyncInfo] PRIMARY KEY CLUSTERED 
(
	[SubscriptionSyncInfoId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[TransformationParameterMappingBase]    Script Date: 04/11/2008 06:54:08 ******/




CREATE TABLE [dbo].[TransformationParameterMappingBase](
	[ParameterArrayIndex] [int] NULL,
	[ParameterTypeCode] [int] NULL,
	[TransformationParameterMappingId] [uniqueidentifier] NOT NULL,
	[TransformationMappingId] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[DataTypeCode] [int] NULL CONSTRAINT [DF_TransformationParameterMappingBase_DataTypeCode]  DEFAULT ((0)),
	[Data] [nvarchar](160) NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ParameterSequence] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_TransformationParameterMapping] PRIMARY KEY CLUSTERED 
(
	[TransformationParameterMappingId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SalesLiteratureItemBase]    Script Date: 04/11/2008 06:50:07 ******/




CREATE TABLE [dbo].[SalesLiteratureItemBase](
	[SalesLiteratureItemId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[SalesLiteratureId] [uniqueidentifier] NOT NULL,
	[DeletionStateCode] [int] NULL,
	[IsCustomerViewable] [bit] NULL,
	[AttachedDocumentUrl] [nvarchar](500) NULL,
	[Title] [nvarchar](200) NULL,
	[MimeType] [nvarchar](256) NULL,
	[AuthorName] [nvarchar](500) NULL,
	[Abstract] [nvarchar](max) NULL,
	[DocumentBody] [text] NULL,
	[CreatedOn] [datetime] NULL,
	[KeyWords] [nvarchar](max) NULL,
	[FileName] [nvarchar](255) NULL,
	[FileTypeCode] [int] NULL,
	[FileSize] [int] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[VersionNumber] [timestamp] NULL,
	[OverriddenCreatedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_SalesLiteratureItem] PRIMARY KEY CLUSTERED 
(
	[SalesLiteratureItemId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
)  TEXTIMAGE_

/****** Object:  Table [dbo].[LookUpMappingBase]    Script Date: 04/11/2008 06:44:53 ******/




CREATE TABLE [dbo].[LookUpMappingBase](
	[LookUpEntityName] [nvarchar](160) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[LookUpSourceCode] [int] NULL,
	[ColumnMappingId] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[LookUpMappingId] [uniqueidentifier] NOT NULL,
	[TransformationParameterMappingId] [uniqueidentifier] NULL,
	[ProcessCode] [int] NOT NULL CONSTRAINT [DF_LookUpMappingBase_ProcessCode]  DEFAULT ((1)),
	[StatusCode] [int] NOT NULL CONSTRAINT [DF_LookUpMappingBase_StatusCode]  DEFAULT ((0)),
	[StateCode] [int] NOT NULL CONSTRAINT [DF_LookUpMappingBase_StateCode]  DEFAULT ((0)),
	[CreatedOn] [datetime] NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[LookUpAttributeName] [nvarchar](160) NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_lookupmapping] PRIMARY KEY CLUSTERED 
(
	[LookUpMappingId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[PickListMappingBase]    Script Date: 04/11/2008 06:46:58 ******/




CREATE TABLE [dbo].[PickListMappingBase](
	[StatusCode] [int] NOT NULL CONSTRAINT [DF_PickListMappingBase_StatusCode]  DEFAULT ((0)),
	[PickListMappingId] [uniqueidentifier] NOT NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[TargetValue] [int] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[ProcessCode] [int] NOT NULL CONSTRAINT [DF_PickListMappingBase_ProcessCode]  DEFAULT ((1)),
	[ColumnMappingId] [uniqueidentifier] NULL,
	[SourceValue] [nvarchar](160) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[StateCode] [int] NOT NULL CONSTRAINT [DF_PickListMappingBase_StateCode]  DEFAULT ((0)),
	[CreatedBy] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_PrimaryKey_PickListMapping] PRIMARY KEY CLUSTERED 
(
	[PickListMappingId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[KbArticleCommentBase]    Script Date: 04/11/2008 06:43:48 ******/




CREATE TABLE [dbo].[KbArticleCommentBase](
	[KbArticleCommentId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[KbArticleId] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](200) NULL,
	[CommentText] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_KbArticleComment] PRIMARY KEY CLUSTERED 
(
	[KbArticleCommentId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[LeadAddressBase]    Script Date: 04/11/2008 06:44:01 ******/




CREATE TABLE [dbo].[LeadAddressBase](
	[ParentId] [uniqueidentifier] NOT NULL,
	[LeadAddressId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[AddressNumber] [int] NULL,
	[AddressTypeCode] [int] NULL,
	[Name] [nvarchar](200) NULL,
	[Line1] [nvarchar](50) NULL,
	[Line2] [nvarchar](50) NULL,
	[Line3] [nvarchar](50) NULL,
	[City] [nvarchar](50) NULL,
	[StateOrProvince] [nvarchar](50) NULL,
	[County] [nvarchar](50) NULL,
	[Country] [nvarchar](50) NULL,
	[PostOfficeBox] [nvarchar](20) NULL,
	[PostalCode] [nvarchar](20) NULL,
	[UTCOffset] [int] NULL,
	[UPSZone] [nvarchar](4) NULL,
	[Latitude] [float] NULL,
	[Telephone1] [nvarchar](50) NULL,
	[Longitude] [float] NULL,
	[ShippingMethodCode] [int] NULL,
	[Telephone2] [nvarchar](50) NULL,
	[Telephone3] [nvarchar](50) NULL,
	[Fax] [nvarchar](50) NULL,
	[VersionNumber] [timestamp] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_LeadAddress] PRIMARY KEY CLUSTERED 
(
	[LeadAddressId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [AK1_LeadAddressBase] UNIQUE NONCLUSTERED 
(
	[ParentId] ASC,
	[AddressNumber] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[AccountLeads]    Script Date: 04/11/2008 06:36:01 ******/




CREATE TABLE [dbo].[AccountLeads](
	[AccountId] [uniqueidentifier] NOT NULL,
	[LeadId] [uniqueidentifier] NOT NULL,
	[AccountLeadId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_AccountLeads_AccountLeadId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_PrimaryKey_AccountLeads] PRIMARY KEY CLUSTERED 
(
	[AccountLeadId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_AccountLeads] UNIQUE NONCLUSTERED 
(
	[AccountId] ASC,
	[LeadId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[DuplicateRecordBase]    Script Date: 04/11/2008 06:41:06 ******/




CREATE TABLE [dbo].[DuplicateRecordBase](
	[DuplicateRuleId] [uniqueidentifier] NULL,
	[BaseRecordId] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[DeletionStateCode] [int] NOT NULL,
	[DuplicateId] [uniqueidentifier] NOT NULL,
	[AsyncOperationId] [uniqueidentifier] NULL,
	[DuplicateRecordId] [uniqueidentifier] NULL,
	[BaseRecordIdDsc] [int] NULL,
	[BaseRecordIdTypeCode] [int] NULL,
	[BaseRecordIdName] [nvarchar](400) NULL,
	[DuplicateRecordIdName] [nvarchar](400) NULL,
	[DuplicateRecordIdYomiName] [nvarchar](400) NULL,
	[BaseRecordIdYomiName] [nvarchar](400) NULL,
	[DuplicateRecordIdDsc] [int] NULL,
	[DuplicateRecordIdTypeCode] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_DuplicateRecord] PRIMARY KEY CLUSTERED 
(
	[DuplicateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[WorkflowWaitSubscriptionBase]    Script Date: 04/11/2008 06:55:57 ******/




CREATE TABLE [dbo].[WorkflowWaitSubscriptionBase](
	[EntityId] [uniqueidentifier] NOT NULL,
	[WorkflowWaitSubscriptionId] [uniqueidentifier] NOT NULL,
	[AsyncOperationId] [uniqueidentifier] NOT NULL,
	[Data] [nvarchar](max) NULL,
	[ModifiedOn] [datetime] NULL,
	[EntityName] [nvarchar](64) NOT NULL,
	[IsModified] [bit] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_WorkflowWaitSubscription] PRIMARY KEY CLUSTERED 
(
	[WorkflowWaitSubscriptionId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[WorkflowLogBase]    Script Date: 04/11/2008 06:55:54 ******/




CREATE TABLE [dbo].[WorkflowLogBase](
	[AsyncOperationId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NOT NULL,
	[CompletedOn] [datetime] NULL,
	[WorkflowLogId] [uniqueidentifier] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Message] [nvarchar](max) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[StageName] [nvarchar](256) NULL,
	[CreatedOn] [datetime] NULL,
	[StepName] [nvarchar](160) NULL,
	[ModifiedOn] [datetime] NULL,
	[RegardingObjectId] [uniqueidentifier] NULL,
	[Status] [int] NOT NULL,
	[ErrorCode] [int] NULL,
	[ActivityName] [nvarchar](160) NULL,
	[RegardingObjectIdName] [nvarchar](256) NULL,
	[RegardingObjectTypeCode] [int] NULL,
	[RegardingObjectIdYomiName] [nvarchar](160) NULL,
	[RegardingObjectIdDsc] [int] NULL,
 CONSTRAINT [cndx_PrimaryKey_WorkflowLog] PRIMARY KEY CLUSTERED 
(
	[WorkflowLogId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[WorkflowCompletedScopeBase]    Script Date: 04/11/2008 06:55:44 ******/




CREATE TABLE [dbo].[WorkflowCompletedScopeBase](
	[WorkflowCompletedScopeId] [uniqueidentifier] NOT NULL,
	[AsyncOperationId] [uniqueidentifier] NOT NULL,
	[ScopeState] [text] NOT NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [cndx_PrimaryKey_WorkflowCompletedScope] PRIMARY KEY CLUSTERED 
(
	[WorkflowCompletedScopeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
)  TEXTIMAGE_

/****** Object:  Table [dbo].[BulkDeleteOperationBase]    Script Date: 04/11/2008 06:37:06 ******/




CREATE TABLE [dbo].[BulkDeleteOperationBase](
	[OwningUser] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[BulkDeleteOperationId] [uniqueidentifier] NOT NULL,
	[IsRecurring] [bit] NOT NULL CONSTRAINT [DF_BulkDeleteOperationBase_IsRecurring]  DEFAULT ((0)),
	[ProcessingQEIndex] [int] NULL CONSTRAINT [DF_BulkDeleteOperationBase_ProcessingQEIndex]  DEFAULT ((0)),
	[AsyncOperationId] [uniqueidentifier] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[OrderedQuerySetXml] [nvarchar](max) NULL,
	[FailureCount] [int] NULL CONSTRAINT [DF_BulkDeleteOperationBase_FailureCount]  DEFAULT ((0)),
	[ModifiedBy] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[OwningBusinessUnit] [uniqueidentifier] NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[SuccessCount] [int] NULL CONSTRAINT [DF_BulkDeleteOperationBase_SuccessCount]  DEFAULT ((0)),
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_BulkDeleteOperation] PRIMARY KEY CLUSTERED 
(
	[BulkDeleteOperationId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[ListMemberBase]    Script Date: 04/11/2008 06:44:48 ******/




CREATE TABLE [dbo].[ListMemberBase](
	[EntityType] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[VersionNumber] [timestamp] NULL,
	[EntityId] [uniqueidentifier] NOT NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ListId] [uniqueidentifier] NOT NULL,
	[ListMemberId] [uniqueidentifier] NOT NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [ndx_PrimaryKey_ListMember] PRIMARY KEY NONCLUSTERED 
(
	[ListMemberId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SystemUserLicenses]    Script Date: 04/11/2008 06:53:11 ******/




CREATE TABLE [dbo].[SystemUserLicenses](
	[SystemUserId] [uniqueidentifier] NOT NULL,
	[LicenseId] [uniqueidentifier] NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[SystemUserLicenseId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_SystemUserLicenses_SystemUserLicenseId]  DEFAULT (newid()),
 CONSTRAINT [cndx_PrimaryKey_SystemUserLicenses] PRIMARY KEY CLUSTERED 
(
	[SystemUserLicenseId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ,
 CONSTRAINT [UQ_SystemUserLicenses] UNIQUE NONCLUSTERED 
(
	[SystemUserId] ASC,
	[LicenseId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 

/****** Object:  Table [dbo].[New_entity1ExtensionBase]    Script Date: 04/11/2008 06:45:13 ******/






CREATE TABLE [dbo].[New_entity1ExtensionBase](
	[New_entity1Id] [uniqueidentifier] NOT NULL,
	[New_name] [nvarchar](100) NULL,
	[New_Atributo1] [nvarchar](100) NULL,
	[New_Atribute2] [nvarchar](100) NULL,
	[New_ETexto] [nvarchar](100) NULL,
	[New_EDAte] [datetime] NULL,
	[New_ENumero] [decimal](23, 10) NULL,
	[New_PruebaSQL] [varchar](50) NULL,
 CONSTRAINT [PK_New_entity1ExtensionBase] PRIMARY KEY CLUSTERED 
(
	[New_entity1Id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 



/****** Object:  Table [dbo].[UserFiscalCalendarBase]    Script Date: 04/11/2008 06:54:32 ******/




CREATE TABLE [dbo].[UserFiscalCalendarBase](
	[UserFiscalCalendarId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[SalesPersonId] [uniqueidentifier] NULL,
	[FiscalPeriodType] [int] NULL,
	[EffectiveOn] [datetime] NULL,
	[Period1] [money] NULL CONSTRAINT [Set_To_Zero153]  DEFAULT ((0)),
	[Period2] [money] NULL CONSTRAINT [Set_To_Zero154]  DEFAULT ((0)),
	[Period3] [money] NULL CONSTRAINT [Set_To_Zero155]  DEFAULT ((0)),
	[Period4] [money] NULL CONSTRAINT [Set_To_Zero156]  DEFAULT ((0)),
	[Period5] [money] NULL CONSTRAINT [Set_To_Zero157]  DEFAULT ((0)),
	[Period6] [money] NULL CONSTRAINT [Set_To_Zero158]  DEFAULT ((0)),
	[Period7] [money] NULL CONSTRAINT [Set_To_Zero159]  DEFAULT ((0)),
	[Period8] [money] NULL CONSTRAINT [Set_To_Zero160]  DEFAULT ((0)),
	[Period9] [money] NULL CONSTRAINT [Set_To_Zero161]  DEFAULT ((0)),
	[Period10] [money] NULL CONSTRAINT [Set_To_Zero162]  DEFAULT ((0)),
	[Period11] [money] NULL CONSTRAINT [Set_To_Zero163]  DEFAULT ((0)),
	[Period12] [money] NULL CONSTRAINT [Set_To_Zero164]  DEFAULT ((0)),
	[Period13] [money] NULL CONSTRAINT [Set_To_Zero165]  DEFAULT ((0)),
	[CreatedBy] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[ModifiedOn] [datetime] NULL,
	[ImportSequenceNumber] [int] NULL,
	[TransactionCurrencyId] [uniqueidentifier] NULL,
	[UTCConversionTimeZoneCode] [int] NULL,
	[ExchangeRate] [decimal](23, 10) NULL,
	[TimeZoneRuleVersionNumber] [int] NULL,
	[Period4_Base] [money] NULL,
	[Period11_Base] [money] NULL,
	[Period3_Base] [money] NULL,
	[Period1_Base] [money] NULL,
	[Period6_Base] [money] NULL,
	[Period8_Base] [money] NULL,
	[Period9_Base] [money] NULL,
	[Period7_Base] [money] NULL,
	[Period5_Base] [money] NULL,
	[Period13_Base] [money] NULL,
	[Period10_Base] [money] NULL,
	[Period12_Base] [money] NULL,
	[Period2_Base] [money] NULL,
 CONSTRAINT [cndx_PrimaryKey_UserFiscalCalendar] PRIMARY KEY CLUSTERED 
(
	[UserFiscalCalendarId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[SystemUserPrincipals]    Script Date: 04/11/2008 06:53:13 ******/




CREATE TABLE [dbo].[SystemUserPrincipals](
	[SystemUserPrincipalId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_SystemUserPrincipals_SystemUserPrincipalId]  DEFAULT (newid()),
	[VersionNumber] [timestamp] NULL,
	[PrincipalId] [uniqueidentifier] NOT NULL,
	[SystemUserId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [ndx_PrimaryKey_SystemUserPrincipals] PRIMARY KEY NONCLUSTERED 
(
	[SystemUserPrincipalId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[DisplayStringMapBase]    Script Date: 04/11/2008 06:40:55 ******/




CREATE TABLE [dbo].[DisplayStringMapBase](
	[ObjectTypeCode] [int] NOT NULL,
	[DisplayStringMapId] [uniqueidentifier] NOT NULL,
	[DisplayStringId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [cndx_PrimaryKey_DisplayStringMap] PRIMARY KEY CLUSTERED 
(
	[DisplayStringMapId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[TimeZoneRuleBase]    Script Date: 04/11/2008 06:53:54 ******/




CREATE TABLE [dbo].[TimeZoneRuleBase](
	[ModifiedBy] [uniqueidentifier] NULL,
	[StandardDay] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[StandardMinute] [int] NOT NULL,
	[StandardBias] [int] NOT NULL,
	[StandardYear] [int] NOT NULL,
	[DaylightMonth] [int] NOT NULL,
	[StandardDayOfWeek] [int] NOT NULL,
	[DaylightSecond] [int] NOT NULL,
	[Bias] [int] NOT NULL,
	[TimeZoneRuleVersionNumber] [int] NOT NULL,
	[DaylightBias] [int] NOT NULL,
	[StandardMonth] [int] NOT NULL,
	[EffectiveDateTime] [datetime] NOT NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[DaylightHour] [int] NOT NULL,
	[StandardHour] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[DaylightYear] [int] NOT NULL,
	[StandardSecond] [int] NOT NULL,
	[DaylightMinute] [int] NOT NULL,
	[TimeZoneDefinitionId] [uniqueidentifier] NOT NULL,
	[DaylightDayOfWeek] [int] NOT NULL,
	[TimeZoneRuleId] [uniqueidentifier] NOT NULL,
	[DaylightDay] [int] NOT NULL,
	[OrganizationId] [uniqueidentifier] NULL,
	[DeletionStateCode] [int] NULL,
	[VersionNumber] [timestamp] NULL,
 CONSTRAINT [cndx_primarykey_timezonerule] PRIMARY KEY CLUSTERED 
(
	[TimeZoneRuleId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  Table [dbo].[TimeZoneLocalizedNameBase]    Script Date: 04/11/2008 06:53:45 ******/




CREATE TABLE [dbo].[TimeZoneLocalizedNameBase](
	[CultureId] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[DeletionStateCode] [int] NULL,
	[CreatedOn] [datetime] NULL,
	[TimeZoneDefinitionId] [uniqueidentifier] NOT NULL,
	[StandardName] [nvarchar](100) NOT NULL,
	[VersionNumber] [timestamp] NULL,
	[ModifiedBy] [uniqueidentifier] NULL,
	[TimeZoneLocalizedNameId] [uniqueidentifier] NOT NULL,
	[UserInterfaceName] [nvarchar](100) NOT NULL,
	[DaylightName] [nvarchar](100) NULL,
	[CreatedBy] [uniqueidentifier] NULL,
	[OrganizationId] [uniqueidentifier] NULL,
 CONSTRAINT [cndx_primarykey_timezonelocalizedname] PRIMARY KEY CLUSTERED 
(
	[TimeZoneLocalizedNameId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) 
) 

/****** Object:  View [dbo].[OpportunityClose]    Script Date: 04/11/2008 06:58:21 ******/




--
-- base view for OpportunityClose
--
create view [dbo].[OpportunityClose] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CompetitorIdDsc, 
    CompetitorIdName, 
    CompetitorIdYomiName, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OpportunityId, 
    OpportunityIdDsc, 
    OpportunityIdName, 
    OpportunityIdType, 
    OwningBusinessUnit, 
    OwningUser, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    ActivityId,
    ActualRevenue,
    CompetitorId,
    Category,
    Subcategory,
    TransactionCurrencyId,
    ImportSequenceNumber,
    ExchangeRate,
    OverriddenCreatedOn,
    ActualRevenue_Base
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_opportunity_close.ActualDurationMinutes, 
    activity_pointer_opportunity_close.ActualEnd, 
    activity_pointer_opportunity_close.ActualStart, 
    competitor_opportunity_activities.DeletionStateCode, 
    competitor_opportunity_activities.Name, 
    competitor_opportunity_activities.YomiName, 
    activity_pointer_opportunity_close.CreatedBy, 
    lk_opportunityclose_createdby.DeletionStateCode, 
    lk_opportunityclose_createdby.FullName, 
    lk_opportunityclose_createdby.YomiFullName, 
    activity_pointer_opportunity_close.CreatedOn, 
    activity_pointer_opportunity_close.DeletionStateCode, 
    activity_pointer_opportunity_close.Description, 
    activity_pointer_opportunity_close.IsBilled, 
    activity_pointer_opportunity_close.IsWorkflowCreated, 
    activity_pointer_opportunity_close.ModifiedBy, 
    lk_opportunityclose_modifiedby.DeletionStateCode, 
    lk_opportunityclose_modifiedby.FullName, 
    lk_opportunityclose_modifiedby.YomiFullName, 
    activity_pointer_opportunity_close.ModifiedOn, 
    activity_pointer_opportunity_close.RegardingObjectId, 
    activity_pointer_opportunity_close.RegardingObjectIdDsc, 
    activity_pointer_opportunity_close.RegardingObjectIdName, 
    activity_pointer_opportunity_close.RegardingObjectTypeCode, 
    activity_pointer_opportunity_close.OwningBusinessUnit, 
    activity_pointer_opportunity_close.OwningUser, 
    activity_pointer_opportunity_close.ScheduledDurationMinutes, 
    activity_pointer_opportunity_close.ScheduledEnd, 
    activity_pointer_opportunity_close.ScheduledStart, 
    activity_pointer_opportunity_close.ServiceId, 
    activity_pointer_opportunity_close.StateCode, 
    activity_pointer_opportunity_close.StatusCode, 
    activity_pointer_opportunity_close.Subject, 
    activity_pointer_opportunity_close.TimeZoneRuleVersionNumber, 
    transactioncurrency_opportunityclose.DeletionStateCode, 
    transactioncurrency_opportunityclose.CurrencyName, 
    activity_pointer_opportunity_close.UTCConversionTimeZoneCode, 
    activity_pointer_opportunity_close.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_opportunity_close.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_opportunity_close.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    OpportunityCloseBase.ActivityId,
    OpportunityCloseBase.ActualRevenue,
    OpportunityCloseBase.CompetitorId,
    OpportunityCloseBase.Category,
    OpportunityCloseBase.Subcategory,
    OpportunityCloseBase.TransactionCurrencyId,
    OpportunityCloseBase.ImportSequenceNumber,
    OpportunityCloseBase.ExchangeRate,
    OpportunityCloseBase.OverriddenCreatedOn,
    OpportunityCloseBase.ActualRevenue_Base
from OpportunityCloseBase
    left join ActivityPointerBase activity_pointer_opportunity_close on (OpportunityCloseBase.ActivityId = activity_pointer_opportunity_close.ActivityId and activity_pointer_opportunity_close.ActivityTypeCode = 4208)
    left join CompetitorBase competitor_opportunity_activities on (OpportunityCloseBase.CompetitorId = competitor_opportunity_activities.CompetitorId)
    left join TransactionCurrencyBase transactioncurrency_opportunityclose on (OpportunityCloseBase.TransactionCurrencyId = transactioncurrency_opportunityclose.TransactionCurrencyId)
    left join SystemUserBase lk_opportunityclose_createdby with(nolock) on (activity_pointer_opportunity_close.CreatedBy = lk_opportunityclose_createdby.SystemUserId)
    left join SystemUserBase lk_opportunityclose_modifiedby with(nolock) on (activity_pointer_opportunity_close.ModifiedBy = lk_opportunityclose_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_opportunity_close.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Team]    Script Date: 04/11/2008 06:58:33 ******/




--
-- base view for Team
--
create view [dbo].[Team] (
    -- logical attributes
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    TeamId,
    DeletionStateCode,
    OrganizationId,
    BusinessUnitId,
    Name,
    Description,
    EMailAddress,
    CreatedOn,
    ModifiedOn,
    CreatedBy,
    ModifiedBy,
    VersionNumber,
    ImportSequenceNumber,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    business_unit_teams.DeletionStateCode, 
    business_unit_teams.Name, 
    lk_teambase_createdby.DeletionStateCode, 
    lk_teambase_createdby.FullName, 
    lk_teambase_createdby.YomiFullName, 
    lk_teambase_modifiedby.DeletionStateCode, 
    lk_teambase_modifiedby.FullName, 
    lk_teambase_modifiedby.YomiFullName, 
    organization_teams.DeletionStateCode, 
    organization_teams.Name, 

    -- physical attributes
    TeamBase.TeamId,
    TeamBase.DeletionStateCode,
    TeamBase.OrganizationId,
    TeamBase.BusinessUnitId,
    TeamBase.Name,
    TeamBase.Description,
    TeamBase.EMailAddress,
    TeamBase.CreatedOn,
    TeamBase.ModifiedOn,
    TeamBase.CreatedBy,
    TeamBase.ModifiedBy,
    TeamBase.VersionNumber,
    TeamBase.ImportSequenceNumber,
    TeamBase.OverriddenCreatedOn
from TeamBase
    left join BusinessUnitBase business_unit_teams on (TeamBase.BusinessUnitId = business_unit_teams.BusinessUnitId)
    left join SystemUserBase lk_teambase_createdby with(nolock) on (TeamBase.CreatedBy = lk_teambase_createdby.SystemUserId)
    left join SystemUserBase lk_teambase_modifiedby with(nolock) on (TeamBase.ModifiedBy = lk_teambase_modifiedby.SystemUserId)
    left join OrganizationBase organization_teams on (TeamBase.OrganizationId = organization_teams.OrganizationId)

/****** Object:  View [dbo].[SalesOrder]    Script Date: 04/11/2008 06:58:29 ******/




--
-- base view for SalesOrder
--
create view [dbo].[SalesOrder] (
    -- logical attributes
    AccountIdDsc, 
    AccountIdName, 
    AccountIdYomiName, 
    CampaignIdDsc, 
    CampaignIdName, 
    ContactIdDsc, 
    ContactIdName, 
    ContactIdYomiName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OpportunityIdDsc, 
    OpportunityIdName, 
    PriceLevelIdDsc, 
    PriceLevelIdName, 
    QuoteIdDsc, 
    QuoteIdName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,


    CustomerId,
    CustomerIdName,
    CustomerIdYomiName,
    CustomerIdDsc,
    CustomerIdType,

    -- physical attributes
    SalesOrderId,
    OwningTeam,
    OpportunityId,
    QuoteId,
    PriorityCode,
    SubmitStatus,
    DeletionStateCode,
    OwningUser,
    SubmitDate,
    OwningBusinessUnit,
    SubmitStatusDescription,
    PriceLevelId,
    LastBackofficeSubmit,
    AccountId,
    ContactId,
    OrderNumber,
    Name,
    PricingErrorCode,
    Description,
    DiscountAmount,
    FreightAmount,
    TotalAmount,
    TotalLineItemAmount,
    TotalLineItemDiscountAmount,
    TotalAmountLessFreight,
    TotalDiscountAmount,
    RequestDeliveryBy,
    TotalTax,
    ShippingMethodCode,
    PaymentTermsCode,
    FreightTermsCode,
    CreatedBy,
    CreatedOn,
    ModifiedBy,
    ModifiedOn,
    StateCode,
    StatusCode,
    ShipTo_Name,
    VersionNumber,
    ShipTo_Line1,
    ShipTo_Line2,
    ShipTo_Line3,
    ShipTo_City,
    ShipTo_StateOrProvince,
    ShipTo_Country,
    ShipTo_PostalCode,
    WillCall,
    ShipTo_Telephone,
    BillTo_Name,
    ShipTo_FreightTermsCode,
    ShipTo_Fax,
    BillTo_Line1,
    BillTo_Line2,
    BillTo_Line3,
    BillTo_City,
    BillTo_StateOrProvince,
    BillTo_Country,
    BillTo_PostalCode,
    BillTo_Telephone,
    BillTo_Fax,
    DiscountPercentage,
    BillTo_ContactName,
    CampaignId,
    BillTo_AddressId,
    ShipTo_AddressId,
    IsPriceLocked,
    DateFulfilled,
    ShipTo_ContactName,
    UTCConversionTimeZoneCode,
    TransactionCurrencyId,
    TimeZoneRuleVersionNumber,
    ImportSequenceNumber,
    ExchangeRate,
    OverriddenCreatedOn,
    TotalLineItemAmount_Base,
    TotalDiscountAmount_Base,
    TotalAmountLessFreight_Base,
    TotalAmount_Base,
    DiscountAmount_Base,
    FreightAmount_Base,
    TotalLineItemDiscountAmount_Base,
    TotalTax_Base
) with view_metadata as 
select 
    -- logical attributes
    account_orders.DeletionStateCode, 
    account_orders.Name, 
    account_orders.YomiName, 
    campaign_orders.DeletionStateCode, 
    campaign_orders.Name, 
    order_primary_contact.DeletionStateCode, 
    order_primary_contact.FullName, 
    order_primary_contact.YomiFullName, 
    lk_salesorderbase_createdby.DeletionStateCode, 
    lk_salesorderbase_createdby.FullName, 
    lk_salesorderbase_createdby.YomiFullName, 
    lk_salesorderbase_modifiedby.DeletionStateCode, 
    lk_salesorderbase_modifiedby.FullName, 
    lk_salesorderbase_modifiedby.YomiFullName, 
    opportunity_sales_orders.DeletionStateCode, 
    opportunity_sales_orders.Name, 
    price_level_orders.DeletionStateCode, 
    price_level_orders.Name, 
    quote_orders.DeletionStateCode, 
    quote_orders.Name, 
    transactioncurrency_salesorder.DeletionStateCode, 
    transactioncurrency_salesorder.CurrencyName, 

    -- ownership entries
    OwnerId   = SalesOrderBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when SalesOrderBase.OwningUser IS NOT NULL then 8
              else NULL
              end,


    CustomerId   = coalesce(SalesOrderBase.AccountId, SalesOrderBase.ContactId), 
    CustomerIdName = coalesce(XXparentaccount.Name, XXparentcontact.FullName), 
    CustomerIdYomiName = coalesce(XXparentaccount.YomiName, XXparentcontact.YomiFullName), 
    CustomerIdDsc  = coalesce(XXparentaccount.DeletionStateCode, XXparentcontact.DeletionStateCode), 
    CustomerIdType = case 
              when SalesOrderBase.AccountId IS NOT NULL then 1
              when SalesOrderBase.ContactId IS NOT NULL then 2
              else NULL
              end,

    -- physical attributes
    SalesOrderBase.SalesOrderId,
    SalesOrderBase.OwningTeam,
    SalesOrderBase.OpportunityId,
    SalesOrderBase.QuoteId,
    SalesOrderBase.PriorityCode,
    SalesOrderBase.SubmitStatus,
    SalesOrderBase.DeletionStateCode,
    SalesOrderBase.OwningUser,
    SalesOrderBase.SubmitDate,
    SalesOrderBase.OwningBusinessUnit,
    SalesOrderBase.SubmitStatusDescription,
    SalesOrderBase.PriceLevelId,
    SalesOrderBase.LastBackofficeSubmit,
    SalesOrderBase.AccountId,
    SalesOrderBase.ContactId,
    SalesOrderBase.OrderNumber,
    SalesOrderBase.Name,
    SalesOrderBase.PricingErrorCode,
    SalesOrderBase.Description,
    SalesOrderBase.DiscountAmount,
    SalesOrderBase.FreightAmount,
    SalesOrderBase.TotalAmount,
    SalesOrderBase.TotalLineItemAmount,
    SalesOrderBase.TotalLineItemDiscountAmount,
    SalesOrderBase.TotalAmountLessFreight,
    SalesOrderBase.TotalDiscountAmount,
    SalesOrderBase.RequestDeliveryBy,
    SalesOrderBase.TotalTax,
    SalesOrderBase.ShippingMethodCode,
    SalesOrderBase.PaymentTermsCode,
    SalesOrderBase.FreightTermsCode,
    SalesOrderBase.CreatedBy,
    SalesOrderBase.CreatedOn,
    SalesOrderBase.ModifiedBy,
    SalesOrderBase.ModifiedOn,
    SalesOrderBase.StateCode,
    SalesOrderBase.StatusCode,
    SalesOrderBase.ShipTo_Name,
    SalesOrderBase.VersionNumber,
    SalesOrderBase.ShipTo_Line1,
    SalesOrderBase.ShipTo_Line2,
    SalesOrderBase.ShipTo_Line3,
    SalesOrderBase.ShipTo_City,
    SalesOrderBase.ShipTo_StateOrProvince,
    SalesOrderBase.ShipTo_Country,
    SalesOrderBase.ShipTo_PostalCode,
    SalesOrderBase.WillCall,
    SalesOrderBase.ShipTo_Telephone,
    SalesOrderBase.BillTo_Name,
    SalesOrderBase.ShipTo_FreightTermsCode,
    SalesOrderBase.ShipTo_Fax,
    SalesOrderBase.BillTo_Line1,
    SalesOrderBase.BillTo_Line2,
    SalesOrderBase.BillTo_Line3,
    SalesOrderBase.BillTo_City,
    SalesOrderBase.BillTo_StateOrProvince,
    SalesOrderBase.BillTo_Country,
    SalesOrderBase.BillTo_PostalCode,
    SalesOrderBase.BillTo_Telephone,
    SalesOrderBase.BillTo_Fax,
    SalesOrderBase.DiscountPercentage,
    SalesOrderBase.BillTo_ContactName,
    SalesOrderBase.CampaignId,
    SalesOrderBase.BillTo_AddressId,
    SalesOrderBase.ShipTo_AddressId,
    SalesOrderBase.IsPriceLocked,
    SalesOrderBase.DateFulfilled,
    SalesOrderBase.ShipTo_ContactName,
    SalesOrderBase.UTCConversionTimeZoneCode,
    SalesOrderBase.TransactionCurrencyId,
    SalesOrderBase.TimeZoneRuleVersionNumber,
    SalesOrderBase.ImportSequenceNumber,
    SalesOrderBase.ExchangeRate,
    SalesOrderBase.OverriddenCreatedOn,
    SalesOrderBase.TotalLineItemAmount_Base,
    SalesOrderBase.TotalDiscountAmount_Base,
    SalesOrderBase.TotalAmountLessFreight_Base,
    SalesOrderBase.TotalAmount_Base,
    SalesOrderBase.DiscountAmount_Base,
    SalesOrderBase.FreightAmount_Base,
    SalesOrderBase.TotalLineItemDiscountAmount_Base,
    SalesOrderBase.TotalTax_Base
from SalesOrderBase
    left join AccountBase XXparentaccount on (SalesOrderBase.AccountId = XXparentaccount.AccountId)
    left join ContactBase XXparentcontact on (SalesOrderBase.ContactId = XXparentcontact.ContactId)

    left join AccountBase account_orders on (SalesOrderBase.AccountId = account_orders.AccountId)
    left join CampaignBase campaign_orders on (SalesOrderBase.CampaignId = campaign_orders.CampaignId)
    left join SystemUserBase lk_salesorderbase_createdby with(nolock) on (SalesOrderBase.CreatedBy = lk_salesorderbase_createdby.SystemUserId)
    left join SystemUserBase lk_salesorderbase_modifiedby with(nolock) on (SalesOrderBase.ModifiedBy = lk_salesorderbase_modifiedby.SystemUserId)
    left join OpportunityBase opportunity_sales_orders on (SalesOrderBase.OpportunityId = opportunity_sales_orders.OpportunityId)
    left join ContactBase order_primary_contact on (SalesOrderBase.ContactId = order_primary_contact.ContactId)
    left join PriceLevelBase price_level_orders on (SalesOrderBase.PriceLevelId = price_level_orders.PriceLevelId)
    left join QuoteBase quote_orders on (SalesOrderBase.QuoteId = quote_orders.QuoteId)
    left join TransactionCurrencyBase transactioncurrency_salesorder on (SalesOrderBase.TransactionCurrencyId = transactioncurrency_salesorder.TransactionCurrencyId)
    left join SystemUserBase XXowninguser with(nolock) on (SalesOrderBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[OpportunityProduct]    Script Date: 04/11/2008 06:58:21 ******/




--
-- base view for OpportunityProduct
--
create view [dbo].[OpportunityProduct] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OpportunityIdDsc, 
    OpportunityIdName, 
    OpportunityStateCode, 
    OwningBusinessUnit, 
    OwningUser, 
    ProductIdDsc, 
    ProductIdName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 
    UoMIdDsc, 
    UoMIdName, 

    -- physical attributes
    ProductId,
    OpportunityProductId,
    PricingErrorCode,
    IsProductOverridden,
    IsPriceOverridden,
    PricePerUnit,
    OpportunityId,
    BaseAmount,
    ExtendedAmount,
    UoMId,
    ManualDiscountAmount,
    Quantity,
    CreatedOn,
    VolumeDiscountAmount,
    CreatedBy,
    Tax,
    ModifiedBy,
    ProductDescription,
    ModifiedOn,
    Description,
    VersionNumber,
    OverriddenCreatedOn,
    UTCConversionTimeZoneCode,
    TimeZoneRuleVersionNumber,
    ImportSequenceNumber,
    ExchangeRate,
    TransactionCurrencyId,
    BaseAmount_Base,
    ManualDiscountAmount_Base,
    VolumeDiscountAmount_Base,
    PricePerUnit_Base,
    Tax_Base,
    ExtendedAmount_Base
) with view_metadata as 
select 
    -- logical attributes
    lk_opportunityproductbase_createdby.DeletionStateCode, 
    lk_opportunityproductbase_createdby.FullName, 
    lk_opportunityproductbase_createdby.YomiFullName, 
    lk_opportunityproductbase_modifiedby.DeletionStateCode, 
    lk_opportunityproductbase_modifiedby.FullName, 
    lk_opportunityproductbase_modifiedby.YomiFullName, 
    product_opportunities.DeletionStateCode, 
    product_opportunities.Name, 
    product_opportunities.StateCode, 
    product_opportunities.OwningBusinessUnit, 
    product_opportunities.OwningUser, 
    opportunity_products.DeletionStateCode, 
    opportunity_products.Name, 
    transactioncurrency_opportunityproduct.DeletionStateCode, 
    transactioncurrency_opportunityproduct.CurrencyName, 
    unit_of_measurement_opportunity_products.DeletionStateCode, 
    unit_of_measurement_opportunity_products.Name, 

    -- physical attributes
    OpportunityProductBase.ProductId,
    OpportunityProductBase.OpportunityProductId,
    OpportunityProductBase.PricingErrorCode,
    OpportunityProductBase.IsProductOverridden,
    OpportunityProductBase.IsPriceOverridden,
    OpportunityProductBase.PricePerUnit,
    OpportunityProductBase.OpportunityId,
    OpportunityProductBase.BaseAmount,
    OpportunityProductBase.ExtendedAmount,
    OpportunityProductBase.UoMId,
    OpportunityProductBase.ManualDiscountAmount,
    OpportunityProductBase.Quantity,
    OpportunityProductBase.CreatedOn,
    OpportunityProductBase.VolumeDiscountAmount,
    OpportunityProductBase.CreatedBy,
    OpportunityProductBase.Tax,
    OpportunityProductBase.ModifiedBy,
    OpportunityProductBase.ProductDescription,
    OpportunityProductBase.ModifiedOn,
    OpportunityProductBase.Description,
    OpportunityProductBase.VersionNumber,
    OpportunityProductBase.OverriddenCreatedOn,
    OpportunityProductBase.UTCConversionTimeZoneCode,
    OpportunityProductBase.TimeZoneRuleVersionNumber,
    OpportunityProductBase.ImportSequenceNumber,
    OpportunityProductBase.ExchangeRate,
    OpportunityProductBase.TransactionCurrencyId,
    OpportunityProductBase.BaseAmount_Base,
    OpportunityProductBase.ManualDiscountAmount_Base,
    OpportunityProductBase.VolumeDiscountAmount_Base,
    OpportunityProductBase.PricePerUnit_Base,
    OpportunityProductBase.Tax_Base,
    OpportunityProductBase.ExtendedAmount_Base
from OpportunityProductBase
    left join SystemUserBase lk_opportunityproductbase_createdby with(nolock) on (OpportunityProductBase.CreatedBy = lk_opportunityproductbase_createdby.SystemUserId)
    left join SystemUserBase lk_opportunityproductbase_modifiedby with(nolock) on (OpportunityProductBase.ModifiedBy = lk_opportunityproductbase_modifiedby.SystemUserId)
    left join ProductBase opportunity_products on (OpportunityProductBase.ProductId = opportunity_products.ProductId)
    left join OpportunityBase product_opportunities on (OpportunityProductBase.OpportunityId = product_opportunities.OpportunityId)
    left join TransactionCurrencyBase transactioncurrency_opportunityproduct on (OpportunityProductBase.TransactionCurrencyId = transactioncurrency_opportunityproduct.TransactionCurrencyId)
    left join UoMBase unit_of_measurement_opportunity_products on (OpportunityProductBase.UoMId = unit_of_measurement_opportunity_products.UoMId)

/****** Object:  View [dbo].[Invoice]    Script Date: 04/11/2008 06:58:18 ******/




--
-- base view for Invoice
--
create view [dbo].[Invoice] (
    -- logical attributes
    AccountIdDsc, 
    AccountIdName, 
    AccountIdYomiName, 
    ContactIdDsc, 
    ContactIdName, 
    ContactIdYomiName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OpportunityIdDsc, 
    OpportunityIdName, 
    PriceLevelIdDsc, 
    PriceLevelIdName, 
    SalesOrderIdDsc, 
    SalesOrderIdName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,


    CustomerId,
    CustomerIdName,
    CustomerIdYomiName,
    CustomerIdDsc,
    CustomerIdType,

    -- physical attributes
    InvoiceId,
    OwningTeam,
    OpportunityId,
    PriorityCode,
    SalesOrderId,
    DeletionStateCode,
    OwningUser,
    OwningBusinessUnit,
    LastBackofficeSubmit,
    PriceLevelId,
    AccountId,
    ContactId,
    InvoiceNumber,
    Name,
    Description,
    DiscountAmount,
    FreightAmount,
    TotalAmount,
    TotalLineItemAmount,
    TotalLineItemDiscountAmount,
    TotalAmountLessFreight,
    TotalDiscountAmount,
    CreatedBy,
    TotalTax,
    ShippingMethodCode,
    PaymentTermsCode,
    CreatedOn,
    ModifiedBy,
    ModifiedOn,
    StateCode,
    StatusCode,
    ShipTo_Name,
    VersionNumber,
    PricingErrorCode,
    ShipTo_Line1,
    ShipTo_Line2,
    ShipTo_Line3,
    ShipTo_City,
    ShipTo_StateOrProvince,
    ShipTo_Country,
    ShipTo_PostalCode,
    WillCall,
    ShipTo_Telephone,
    BillTo_Name,
    ShipTo_FreightTermsCode,
    ShipTo_Fax,
    BillTo_Line1,
    BillTo_Line2,
    BillTo_Line3,
    BillTo_City,
    BillTo_StateOrProvince,
    BillTo_Country,
    BillTo_PostalCode,
    BillTo_Telephone,
    BillTo_Fax,
    DiscountPercentage,
    IsPriceLocked,
    DateDelivered,
    DueDate,
    TimeZoneRuleVersionNumber,
    ImportSequenceNumber,
    OverriddenCreatedOn,
    ExchangeRate,
    UTCConversionTimeZoneCode,
    TransactionCurrencyId,
    TotalLineItemAmount_Base,
    TotalLineItemDiscountAmount_Base,
    TotalTax_Base,
    TotalAmountLessFreight_Base,
    DiscountAmount_Base,
    TotalAmount_Base,
    FreightAmount_Base,
    TotalDiscountAmount_Base
) with view_metadata as 
select 
    -- logical attributes
    account_invoices.DeletionStateCode, 
    account_invoices.Name, 
    account_invoices.YomiName, 
    invoice_primary_contact.DeletionStateCode, 
    invoice_primary_contact.FullName, 
    invoice_primary_contact.YomiFullName, 
    lk_invoicebase_createdby.DeletionStateCode, 
    lk_invoicebase_createdby.FullName, 
    lk_invoicebase_createdby.YomiFullName, 
    lk_invoicebase_modifiedby.DeletionStateCode, 
    lk_invoicebase_modifiedby.FullName, 
    lk_invoicebase_modifiedby.YomiFullName, 
    opportunity_invoices.DeletionStateCode, 
    opportunity_invoices.Name, 
    price_level_invoices.DeletionStateCode, 
    price_level_invoices.Name, 
    order_invoices.DeletionStateCode, 
    order_invoices.Name, 
    transactioncurrency_invoice.DeletionStateCode, 
    transactioncurrency_invoice.CurrencyName, 

    -- ownership entries
    OwnerId   = InvoiceBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when InvoiceBase.OwningUser IS NOT NULL then 8
              else NULL
              end,


    CustomerId   = coalesce(InvoiceBase.AccountId, InvoiceBase.ContactId), 
    CustomerIdName = coalesce(XXparentaccount.Name, XXparentcontact.FullName), 
    CustomerIdYomiName = coalesce(XXparentaccount.YomiName, XXparentcontact.YomiFullName), 
    CustomerIdDsc  = coalesce(XXparentaccount.DeletionStateCode, XXparentcontact.DeletionStateCode), 
    CustomerIdType = case 
              when InvoiceBase.AccountId IS NOT NULL then 1
              when InvoiceBase.ContactId IS NOT NULL then 2
              else NULL
              end,

    -- physical attributes
    InvoiceBase.InvoiceId,
    InvoiceBase.OwningTeam,
    InvoiceBase.OpportunityId,
    InvoiceBase.PriorityCode,
    InvoiceBase.SalesOrderId,
    InvoiceBase.DeletionStateCode,
    InvoiceBase.OwningUser,
    InvoiceBase.OwningBusinessUnit,
    InvoiceBase.LastBackofficeSubmit,
    InvoiceBase.PriceLevelId,
    InvoiceBase.AccountId,
    InvoiceBase.ContactId,
    InvoiceBase.InvoiceNumber,
    InvoiceBase.Name,
    InvoiceBase.Description,
    InvoiceBase.DiscountAmount,
    InvoiceBase.FreightAmount,
    InvoiceBase.TotalAmount,
    InvoiceBase.TotalLineItemAmount,
    InvoiceBase.TotalLineItemDiscountAmount,
    InvoiceBase.TotalAmountLessFreight,
    InvoiceBase.TotalDiscountAmount,
    InvoiceBase.CreatedBy,
    InvoiceBase.TotalTax,
    InvoiceBase.ShippingMethodCode,
    InvoiceBase.PaymentTermsCode,
    InvoiceBase.CreatedOn,
    InvoiceBase.ModifiedBy,
    InvoiceBase.ModifiedOn,
    InvoiceBase.StateCode,
    InvoiceBase.StatusCode,
    InvoiceBase.ShipTo_Name,
    InvoiceBase.VersionNumber,
    InvoiceBase.PricingErrorCode,
    InvoiceBase.ShipTo_Line1,
    InvoiceBase.ShipTo_Line2,
    InvoiceBase.ShipTo_Line3,
    InvoiceBase.ShipTo_City,
    InvoiceBase.ShipTo_StateOrProvince,
    InvoiceBase.ShipTo_Country,
    InvoiceBase.ShipTo_PostalCode,
    InvoiceBase.WillCall,
    InvoiceBase.ShipTo_Telephone,
    InvoiceBase.BillTo_Name,
    InvoiceBase.ShipTo_FreightTermsCode,
    InvoiceBase.ShipTo_Fax,
    InvoiceBase.BillTo_Line1,
    InvoiceBase.BillTo_Line2,
    InvoiceBase.BillTo_Line3,
    InvoiceBase.BillTo_City,
    InvoiceBase.BillTo_StateOrProvince,
    InvoiceBase.BillTo_Country,
    InvoiceBase.BillTo_PostalCode,
    InvoiceBase.BillTo_Telephone,
    InvoiceBase.BillTo_Fax,
    InvoiceBase.DiscountPercentage,
    InvoiceBase.IsPriceLocked,
    InvoiceBase.DateDelivered,
    InvoiceBase.DueDate,
    InvoiceBase.TimeZoneRuleVersionNumber,
    InvoiceBase.ImportSequenceNumber,
    InvoiceBase.OverriddenCreatedOn,
    InvoiceBase.ExchangeRate,
    InvoiceBase.UTCConversionTimeZoneCode,
    InvoiceBase.TransactionCurrencyId,
    InvoiceBase.TotalLineItemAmount_Base,
    InvoiceBase.TotalLineItemDiscountAmount_Base,
    InvoiceBase.TotalTax_Base,
    InvoiceBase.TotalAmountLessFreight_Base,
    InvoiceBase.DiscountAmount_Base,
    InvoiceBase.TotalAmount_Base,
    InvoiceBase.FreightAmount_Base,
    InvoiceBase.TotalDiscountAmount_Base
from InvoiceBase
    left join AccountBase XXparentaccount on (InvoiceBase.AccountId = XXparentaccount.AccountId)
    left join ContactBase XXparentcontact on (InvoiceBase.ContactId = XXparentcontact.ContactId)

    left join AccountBase account_invoices on (InvoiceBase.AccountId = account_invoices.AccountId)
    left join ContactBase invoice_primary_contact on (InvoiceBase.ContactId = invoice_primary_contact.ContactId)
    left join SystemUserBase lk_invoicebase_createdby with(nolock) on (InvoiceBase.CreatedBy = lk_invoicebase_createdby.SystemUserId)
    left join SystemUserBase lk_invoicebase_modifiedby with(nolock) on (InvoiceBase.ModifiedBy = lk_invoicebase_modifiedby.SystemUserId)
    left join OpportunityBase opportunity_invoices on (InvoiceBase.OpportunityId = opportunity_invoices.OpportunityId)
    left join SalesOrderBase order_invoices on (InvoiceBase.SalesOrderId = order_invoices.SalesOrderId)
    left join PriceLevelBase price_level_invoices on (InvoiceBase.PriceLevelId = price_level_invoices.PriceLevelId)
    left join TransactionCurrencyBase transactioncurrency_invoice on (InvoiceBase.TransactionCurrencyId = transactioncurrency_invoice.TransactionCurrencyId)
    left join SystemUserBase XXowninguser with(nolock) on (InvoiceBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Opportunity]    Script Date: 04/11/2008 06:58:21 ******/




--
-- base view for Opportunity
--
create view [dbo].[Opportunity] (
    -- logical attributes
    AccountIdDsc, 
    AccountIdName, 
    AccountIdYomiName, 
    CampaignIdDsc, 
    CampaignIdName, 
    ContactIdDsc, 
    ContactIdName, 
    ContactIdYomiName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OriginatingLeadIdDsc, 
    OriginatingLeadIdName, 
    OriginatingLeadIdYomiName, 
    PriceLevelIdDsc, 
    PriceLevelIdName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,


    CustomerId,
    CustomerIdName,
    CustomerIdYomiName,
    CustomerIdDsc,
    CustomerIdType,

    -- physical attributes
    OpportunityId,
    DeletionStateCode,
    PriceLevelId,
    OpportunityRatingCode,
    PriorityCode,
    ContactId,
    AccountId,
    Name,
    StepId,
    Description,
    EstimatedValue,
    StepName,
    SalesStageCode,
    ParticipatesInWorkflow,
    PricingErrorCode,
    EstimatedCloseDate,
    CloseProbability,
    ActualValue,
    ActualCloseDate,
    OwningTeam,
    OwningUser,
    OwningBusinessUnit,
    OriginatingLeadId,
    CreatedOn,
    IsPrivate,
    CreatedBy,
    ModifiedOn,
    ModifiedBy,
    VersionNumber,
    StateCode,
    StatusCode,
    IsRevenueSystemCalculated,
    CampaignId,
    TransactionCurrencyId,
    ExchangeRate,
    ImportSequenceNumber,
    UTCConversionTimeZoneCode,
    TimeZoneRuleVersionNumber,
    OverriddenCreatedOn,
    ActualValue_Base,
    EstimatedValue_Base
) with view_metadata as 
select 
    -- logical attributes
    opportunity_primary_accounts.DeletionStateCode, 
    opportunity_primary_accounts.Name, 
    opportunity_primary_accounts.YomiName, 
    campaign_opportunities.DeletionStateCode, 
    campaign_opportunities.Name, 
    opportunity_primary_contacts.DeletionStateCode, 
    opportunity_primary_contacts.FullName, 
    opportunity_primary_contacts.YomiFullName, 
    lk_opportunitybase_createdby.DeletionStateCode, 
    lk_opportunitybase_createdby.FullName, 
    lk_opportunitybase_createdby.YomiFullName, 
    lk_opportunitybase_modifiedby.DeletionStateCode, 
    lk_opportunitybase_modifiedby.FullName, 
    lk_opportunitybase_modifiedby.YomiFullName, 
    opportunity_originating_lead.DeletionStateCode, 
    opportunity_originating_lead.FullName, 
    opportunity_originating_lead.YomiFullName, 
    price_level_opportunties.DeletionStateCode, 
    price_level_opportunties.Name, 
    transactioncurrency_opportunity.DeletionStateCode, 
    transactioncurrency_opportunity.CurrencyName, 

    -- ownership entries
    OwnerId   = OpportunityBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when OpportunityBase.OwningUser IS NOT NULL then 8
              else NULL
              end,


    CustomerId   = coalesce(OpportunityBase.AccountId, OpportunityBase.ContactId), 
    CustomerIdName = coalesce(XXparentaccount.Name, XXparentcontact.FullName), 
    CustomerIdYomiName = coalesce(XXparentaccount.YomiName, XXparentcontact.YomiFullName), 
    CustomerIdDsc  = coalesce(XXparentaccount.DeletionStateCode, XXparentcontact.DeletionStateCode), 
    CustomerIdType = case 
              when OpportunityBase.AccountId IS NOT NULL then 1
              when OpportunityBase.ContactId IS NOT NULL then 2
              else NULL
              end,

    -- physical attributes
    OpportunityBase.OpportunityId,
    OpportunityBase.DeletionStateCode,
    OpportunityBase.PriceLevelId,
    OpportunityBase.OpportunityRatingCode,
    OpportunityBase.PriorityCode,
    OpportunityBase.ContactId,
    OpportunityBase.AccountId,
    OpportunityBase.Name,
    OpportunityBase.StepId,
    OpportunityBase.Description,
    OpportunityBase.EstimatedValue,
    OpportunityBase.StepName,
    OpportunityBase.SalesStageCode,
    OpportunityBase.ParticipatesInWorkflow,
    OpportunityBase.PricingErrorCode,
    OpportunityBase.EstimatedCloseDate,
    OpportunityBase.CloseProbability,
    OpportunityBase.ActualValue,
    OpportunityBase.ActualCloseDate,
    OpportunityBase.OwningTeam,
    OpportunityBase.OwningUser,
    OpportunityBase.OwningBusinessUnit,
    OpportunityBase.OriginatingLeadId,
    OpportunityBase.CreatedOn,
    OpportunityBase.IsPrivate,
    OpportunityBase.CreatedBy,
    OpportunityBase.ModifiedOn,
    OpportunityBase.ModifiedBy,
    OpportunityBase.VersionNumber,
    OpportunityBase.StateCode,
    OpportunityBase.StatusCode,
    OpportunityBase.IsRevenueSystemCalculated,
    OpportunityBase.CampaignId,
    OpportunityBase.TransactionCurrencyId,
    OpportunityBase.ExchangeRate,
    OpportunityBase.ImportSequenceNumber,
    OpportunityBase.UTCConversionTimeZoneCode,
    OpportunityBase.TimeZoneRuleVersionNumber,
    OpportunityBase.OverriddenCreatedOn,
    OpportunityBase.ActualValue_Base,
    OpportunityBase.EstimatedValue_Base
from OpportunityBase
    left join AccountBase XXparentaccount on (OpportunityBase.AccountId = XXparentaccount.AccountId)
    left join ContactBase XXparentcontact on (OpportunityBase.ContactId = XXparentcontact.ContactId)

    left join CampaignBase campaign_opportunities on (OpportunityBase.CampaignId = campaign_opportunities.CampaignId)
    left join SystemUserBase lk_opportunitybase_createdby with(nolock) on (OpportunityBase.CreatedBy = lk_opportunitybase_createdby.SystemUserId)
    left join SystemUserBase lk_opportunitybase_modifiedby with(nolock) on (OpportunityBase.ModifiedBy = lk_opportunitybase_modifiedby.SystemUserId)
    left join LeadBase opportunity_originating_lead on (OpportunityBase.OriginatingLeadId = opportunity_originating_lead.LeadId)
    left join AccountBase opportunity_primary_accounts on (OpportunityBase.AccountId = opportunity_primary_accounts.AccountId)
    left join ContactBase opportunity_primary_contacts on (OpportunityBase.ContactId = opportunity_primary_contacts.ContactId)
    left join PriceLevelBase price_level_opportunties on (OpportunityBase.PriceLevelId = price_level_opportunties.PriceLevelId)
    left join TransactionCurrencyBase transactioncurrency_opportunity on (OpportunityBase.TransactionCurrencyId = transactioncurrency_opportunity.TransactionCurrencyId)
    left join SystemUserBase XXowninguser with(nolock) on (OpportunityBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[CustomerOpportunityRole]    Script Date: 04/11/2008 06:57:42 ******/




--
-- base view for CustomerOpportunityRole
--
create view [dbo].[CustomerOpportunityRole] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OpportunityIdDsc, 
    OpportunityIdName, 
    OpportunityRoleIdDsc, 
    OpportunityRoleIdName, 
    OpportunityStateCode, 
    OpportunityStatusCode, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,


    CustomerIdName,
    CustomerIdYomiName,
    CustomerIdDsc,

    -- physical attributes
    CreatedBy,
    ModifiedBy,
    OwningBusinessUnit,
    CreatedOn,
    Description,
    ModifiedOn,
    CustomerId,
    VersionNumber,
    CustomerOpportunityRoleId,
    OpportunityRoleId,
    OpportunityId,
    OwningUser,
    CustomerIdType,
    UniqueDscId,
    OverriddenCreatedOn,
    DeletionStateCode,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_customeropportunityrole_createdby.DeletionStateCode, 
    lk_customeropportunityrole_createdby.FullName, 
    lk_customeropportunityrole_createdby.YomiFullName, 
    lk_customeropportunityrole_modifiedby.DeletionStateCode, 
    lk_customeropportunityrole_modifiedby.FullName, 
    lk_customeropportunityrole_modifiedby.YomiFullName, 
    opportunity_customer_opportunity_roles.DeletionStateCode, 
    opportunity_customer_opportunity_roles.Name, 
    relationship_role_customer_opportunity_roles.DeletionStateCode, 
    relationship_role_customer_opportunity_roles.Name, 
    opportunity_customer_opportunity_roles.StateCode, 
    opportunity_customer_opportunity_roles.StatusCode, 

    -- ownership entries
    OwnerId   = CustomerOpportunityRoleBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when CustomerOpportunityRoleBase.OwningUser IS NOT NULL then 8
              else NULL
              end,


    CustomerIdName = coalesce(XXaccount.Name, XXcontact.FullName), 
    CustomerIdYomiName = coalesce(XXaccount.YomiName, XXcontact.YomiFullName), 
    CustomerIdDsc  = coalesce(XXaccount.DeletionStateCode, XXcontact.DeletionStateCode), 

    -- physical attributes
    CustomerOpportunityRoleBase.CreatedBy,
    CustomerOpportunityRoleBase.ModifiedBy,
    CustomerOpportunityRoleBase.OwningBusinessUnit,
    CustomerOpportunityRoleBase.CreatedOn,
    CustomerOpportunityRoleBase.Description,
    CustomerOpportunityRoleBase.ModifiedOn,
    CustomerOpportunityRoleBase.CustomerId,
    CustomerOpportunityRoleBase.VersionNumber,
    CustomerOpportunityRoleBase.CustomerOpportunityRoleId,
    CustomerOpportunityRoleBase.OpportunityRoleId,
    CustomerOpportunityRoleBase.OpportunityId,
    CustomerOpportunityRoleBase.OwningUser,
    CustomerOpportunityRoleBase.CustomerIdType,
    CustomerOpportunityRoleBase.UniqueDscId,
    CustomerOpportunityRoleBase.OverriddenCreatedOn,
    CustomerOpportunityRoleBase.DeletionStateCode,
    CustomerOpportunityRoleBase.ImportSequenceNumber
from CustomerOpportunityRoleBase
    left join AccountBase XXaccount on (CustomerOpportunityRoleBase.CustomerId = XXaccount.AccountId and CustomerOpportunityRoleBase.CustomerIdType = 1)
    left join ContactBase XXcontact on (CustomerOpportunityRoleBase.CustomerId = XXcontact.ContactId and CustomerOpportunityRoleBase.CustomerIdType = 2)

    left join SystemUserBase lk_customeropportunityrole_createdby with(nolock) on (CustomerOpportunityRoleBase.CreatedBy = lk_customeropportunityrole_createdby.SystemUserId)
    left join SystemUserBase lk_customeropportunityrole_modifiedby with(nolock) on (CustomerOpportunityRoleBase.ModifiedBy = lk_customeropportunityrole_modifiedby.SystemUserId)
    left join OpportunityBase opportunity_customer_opportunity_roles on (CustomerOpportunityRoleBase.OpportunityId = opportunity_customer_opportunity_roles.OpportunityId)
    left join RelationshipRoleBase relationship_role_customer_opportunity_roles on (CustomerOpportunityRoleBase.OpportunityRoleId = relationship_role_customer_opportunity_roles.RelationshipRoleId)
    left join SystemUserBase XXowninguser with(nolock) on (CustomerOpportunityRoleBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Quote]    Script Date: 04/11/2008 06:58:25 ******/




--
-- base view for Quote
--
create view [dbo].[Quote] (
    -- logical attributes
    AccountIdDsc, 
    AccountIdName, 
    AccountIdYomiName, 
    CampaignIdDsc, 
    CampaignIdName, 
    ContactIdDsc, 
    ContactIdName, 
    ContactIdYomiName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OpportunityIdDsc, 
    OpportunityIdName, 
    PriceLevelIdDsc, 
    PriceLevelIdName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,


    CustomerId,
    CustomerIdName,
    CustomerIdYomiName,
    CustomerIdDsc,
    CustomerIdType,

    -- physical attributes
    QuoteId,
    OwningBusinessUnit,
    DeletionStateCode,
    OwningTeam,
    OwningUser,
    PriceLevelId,
    OpportunityId,
    AccountId,
    ContactId,
    QuoteNumber,
    RevisionNumber,
    Name,
    PricingErrorCode,
    Description,
    DiscountAmount,
    FreightAmount,
    TotalAmount,
    TotalLineItemAmount,
    TotalLineItemDiscountAmount,
    TotalAmountLessFreight,
    EffectiveFrom,
    TotalTax,
    TotalDiscountAmount,
    EffectiveTo,
    ExpiresOn,
    ClosedOn,
    RequestDeliveryBy,
    ShippingMethodCode,
    PaymentTermsCode,
    FreightTermsCode,
    CreatedBy,
    CreatedOn,
    ModifiedBy,
    ModifiedOn,
    StateCode,
    StatusCode,
    ShipTo_Name,
    VersionNumber,
    ShipTo_Line1,
    ShipTo_Line2,
    ShipTo_Line3,
    ShipTo_City,
    ShipTo_StateOrProvince,
    ShipTo_Country,
    ShipTo_PostalCode,
    WillCall,
    ShipTo_Telephone,
    BillTo_Name,
    ShipTo_FreightTermsCode,
    ShipTo_Fax,
    BillTo_Line1,
    BillTo_Line2,
    BillTo_Line3,
    BillTo_City,
    BillTo_StateOrProvince,
    BillTo_Country,
    BillTo_PostalCode,
    BillTo_Telephone,
    BillTo_Fax,
    DiscountPercentage,
    CampaignId,
    ShipTo_AddressId,
    ShipTo_ContactName,
    BillTo_AddressId,
    BillTo_ContactName,
    TimeZoneRuleVersionNumber,
    UniqueDscId,
    ImportSequenceNumber,
    ExchangeRate,
    OverriddenCreatedOn,
    UTCConversionTimeZoneCode,
    TransactionCurrencyId,
    TotalLineItemDiscountAmount_Base,
    TotalAmountLessFreight_Base,
    DiscountAmount_Base,
    FreightAmount_Base,
    TotalAmount_Base,
    TotalDiscountAmount_Base,
    TotalTax_Base,
    TotalLineItemAmount_Base
) with view_metadata as 
select 
    -- logical attributes
    account_quotes.DeletionStateCode, 
    account_quotes.Name, 
    account_quotes.YomiName, 
    campaign_quotes.DeletionStateCode, 
    campaign_quotes.Name, 
    quote_primary_contact.DeletionStateCode, 
    quote_primary_contact.FullName, 
    quote_primary_contact.YomiFullName, 
    lk_quotebase_createdby.DeletionStateCode, 
    lk_quotebase_createdby.FullName, 
    lk_quotebase_createdby.YomiFullName, 
    lk_quotebase_modifiedby.DeletionStateCode, 
    lk_quotebase_modifiedby.FullName, 
    lk_quotebase_modifiedby.YomiFullName, 
    opportunity_quotes.DeletionStateCode, 
    opportunity_quotes.Name, 
    price_level_quotes.DeletionStateCode, 
    price_level_quotes.Name, 
    transactioncurrency_quote.DeletionStateCode, 
    transactioncurrency_quote.CurrencyName, 

    -- ownership entries
    OwnerId   = QuoteBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when QuoteBase.OwningUser IS NOT NULL then 8
              else NULL
              end,


    CustomerId   = coalesce(QuoteBase.AccountId, QuoteBase.ContactId), 
    CustomerIdName = coalesce(XXparentaccount.Name, XXparentcontact.FullName), 
    CustomerIdYomiName = coalesce(XXparentaccount.YomiName, XXparentcontact.YomiFullName), 
    CustomerIdDsc  = coalesce(XXparentaccount.DeletionStateCode, XXparentcontact.DeletionStateCode), 
    CustomerIdType = case 
              when QuoteBase.AccountId IS NOT NULL then 1
              when QuoteBase.ContactId IS NOT NULL then 2
              else NULL
              end,

    -- physical attributes
    QuoteBase.QuoteId,
    QuoteBase.OwningBusinessUnit,
    QuoteBase.DeletionStateCode,
    QuoteBase.OwningTeam,
    QuoteBase.OwningUser,
    QuoteBase.PriceLevelId,
    QuoteBase.OpportunityId,
    QuoteBase.AccountId,
    QuoteBase.ContactId,
    QuoteBase.QuoteNumber,
    QuoteBase.RevisionNumber,
    QuoteBase.Name,
    QuoteBase.PricingErrorCode,
    QuoteBase.Description,
    QuoteBase.DiscountAmount,
    QuoteBase.FreightAmount,
    QuoteBase.TotalAmount,
    QuoteBase.TotalLineItemAmount,
    QuoteBase.TotalLineItemDiscountAmount,
    QuoteBase.TotalAmountLessFreight,
    QuoteBase.EffectiveFrom,
    QuoteBase.TotalTax,
    QuoteBase.TotalDiscountAmount,
    QuoteBase.EffectiveTo,
    QuoteBase.ExpiresOn,
    QuoteBase.ClosedOn,
    QuoteBase.RequestDeliveryBy,
    QuoteBase.ShippingMethodCode,
    QuoteBase.PaymentTermsCode,
    QuoteBase.FreightTermsCode,
    QuoteBase.CreatedBy,
    QuoteBase.CreatedOn,
    QuoteBase.ModifiedBy,
    QuoteBase.ModifiedOn,
    QuoteBase.StateCode,
    QuoteBase.StatusCode,
    QuoteBase.ShipTo_Name,
    QuoteBase.VersionNumber,
    QuoteBase.ShipTo_Line1,
    QuoteBase.ShipTo_Line2,
    QuoteBase.ShipTo_Line3,
    QuoteBase.ShipTo_City,
    QuoteBase.ShipTo_StateOrProvince,
    QuoteBase.ShipTo_Country,
    QuoteBase.ShipTo_PostalCode,
    QuoteBase.WillCall,
    QuoteBase.ShipTo_Telephone,
    QuoteBase.BillTo_Name,
    QuoteBase.ShipTo_FreightTermsCode,
    QuoteBase.ShipTo_Fax,
    QuoteBase.BillTo_Line1,
    QuoteBase.BillTo_Line2,
    QuoteBase.BillTo_Line3,
    QuoteBase.BillTo_City,
    QuoteBase.BillTo_StateOrProvince,
    QuoteBase.BillTo_Country,
    QuoteBase.BillTo_PostalCode,
    QuoteBase.BillTo_Telephone,
    QuoteBase.BillTo_Fax,
    QuoteBase.DiscountPercentage,
    QuoteBase.CampaignId,
    QuoteBase.ShipTo_AddressId,
    QuoteBase.ShipTo_ContactName,
    QuoteBase.BillTo_AddressId,
    QuoteBase.BillTo_ContactName,
    QuoteBase.TimeZoneRuleVersionNumber,
    QuoteBase.UniqueDscId,
    QuoteBase.ImportSequenceNumber,
    QuoteBase.ExchangeRate,
    QuoteBase.OverriddenCreatedOn,
    QuoteBase.UTCConversionTimeZoneCode,
    QuoteBase.TransactionCurrencyId,
    QuoteBase.TotalLineItemDiscountAmount_Base,
    QuoteBase.TotalAmountLessFreight_Base,
    QuoteBase.DiscountAmount_Base,
    QuoteBase.FreightAmount_Base,
    QuoteBase.TotalAmount_Base,
    QuoteBase.TotalDiscountAmount_Base,
    QuoteBase.TotalTax_Base,
    QuoteBase.TotalLineItemAmount_Base
from QuoteBase
    left join AccountBase XXparentaccount on (QuoteBase.AccountId = XXparentaccount.AccountId)
    left join ContactBase XXparentcontact on (QuoteBase.ContactId = XXparentcontact.ContactId)

    left join AccountBase account_quotes on (QuoteBase.AccountId = account_quotes.AccountId)
    left join CampaignBase campaign_quotes on (QuoteBase.CampaignId = campaign_quotes.CampaignId)
    left join SystemUserBase lk_quotebase_createdby with(nolock) on (QuoteBase.CreatedBy = lk_quotebase_createdby.SystemUserId)
    left join SystemUserBase lk_quotebase_modifiedby with(nolock) on (QuoteBase.ModifiedBy = lk_quotebase_modifiedby.SystemUserId)
    left join OpportunityBase opportunity_quotes on (QuoteBase.OpportunityId = opportunity_quotes.OpportunityId)
    left join PriceLevelBase price_level_quotes on (QuoteBase.PriceLevelId = price_level_quotes.PriceLevelId)
    left join ContactBase quote_primary_contact on (QuoteBase.ContactId = quote_primary_contact.ContactId)
    left join TransactionCurrencyBase transactioncurrency_quote on (QuoteBase.TransactionCurrencyId = transactioncurrency_quote.TransactionCurrencyId)
    left join SystemUserBase XXowninguser with(nolock) on (QuoteBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[ImportFile]    Script Date: 04/11/2008 06:58:16 ******/




--
-- base view for ImportFile
--
create view [dbo].[ImportFile] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ImportIdDsc, 
    ImportIdName, 
    ImportMapIdDsc, 
    ImportMapIdName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    RecordsOwnerIdDsc, 
    RecordsOwnerIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    Name,
    IsFirstRowHeader,
    OwningBusinessUnit,
    ModifiedBy,
    SuccessCount,
    StatusCode,
    AdditionalHeaderRow,
    ProcessCode,
    ParsedTableColumnsNumber,
    Content,
    RecordsOwnerId,
    Source,
    TimeZoneRuleVersionNumber,
    SourceEntityName,
    StateCode,
    ParsedTableColumnPrefix,
    ParsedTableName,
    ProgressCounter,
    EnableDuplicateDetection,
    ImportId,
    FailureCount,
    FieldDelimiterCode,
    TargetEntityName,
    UTCConversionTimeZoneCode,
    HeaderRow,
    CompletedOn,
    DataDelimiterCode,
    TotalCount,
    ProcessingStatus,
    ImportFileId,
    Size,
    CreatedOn,
    ImportMapId,
    UseSystemMap,
    ModifiedOn,
    DeletionStateCode,
    CreatedBy,
    OwningUser
) with view_metadata as 
select 
    -- logical attributes
    lk_importfilebase_createdby.DeletionStateCode, 
    lk_importfilebase_createdby.FullName, 
    lk_importfilebase_createdby.YomiFullName, 
    Import_ImportFile.DeletionStateCode, 
    Import_ImportFile.Name, 
    ImportMap_ImportFile.DeletionStateCode, 
    ImportMap_ImportFile.Name, 
    lk_importfilebase_modifiedby.DeletionStateCode, 
    lk_importfilebase_modifiedby.FullName, 
    lk_importfilebase_modifiedby.YomiFullName, 
    ImportFile_SystemUser.DeletionStateCode, 
    ImportFile_SystemUser.FullName, 

    -- ownership entries
    OwnerId   = ImportFileBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when ImportFileBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    ImportFileBase.Name,
    ImportFileBase.IsFirstRowHeader,
    ImportFileBase.OwningBusinessUnit,
    ImportFileBase.ModifiedBy,
    ImportFileBase.SuccessCount,
    ImportFileBase.StatusCode,
    ImportFileBase.AdditionalHeaderRow,
    ImportFileBase.ProcessCode,
    ImportFileBase.ParsedTableColumnsNumber,
    ImportFileBase.Content,
    ImportFileBase.RecordsOwnerId,
    ImportFileBase.Source,
    ImportFileBase.TimeZoneRuleVersionNumber,
    ImportFileBase.SourceEntityName,
    ImportFileBase.StateCode,
    ImportFileBase.ParsedTableColumnPrefix,
    ImportFileBase.ParsedTableName,
    ImportFileBase.ProgressCounter,
    ImportFileBase.EnableDuplicateDetection,
    ImportFileBase.ImportId,
    ImportFileBase.FailureCount,
    ImportFileBase.FieldDelimiterCode,
    ImportFileBase.TargetEntityName,
    ImportFileBase.UTCConversionTimeZoneCode,
    ImportFileBase.HeaderRow,
    ImportFileBase.CompletedOn,
    ImportFileBase.DataDelimiterCode,
    ImportFileBase.TotalCount,
    ImportFileBase.ProcessingStatus,
    ImportFileBase.ImportFileId,
    ImportFileBase.Size,
    ImportFileBase.CreatedOn,
    ImportFileBase.ImportMapId,
    ImportFileBase.UseSystemMap,
    ImportFileBase.ModifiedOn,
    ImportFileBase.DeletionStateCode,
    ImportFileBase.CreatedBy,
    ImportFileBase.OwningUser
from ImportFileBase
    left join ImportBase Import_ImportFile on (ImportFileBase.ImportId = Import_ImportFile.ImportId)
    left join SystemUserBase ImportFile_SystemUser with(nolock) on (ImportFileBase.RecordsOwnerId = ImportFile_SystemUser.SystemUserId)
    left join ImportMapBase ImportMap_ImportFile on (ImportFileBase.ImportMapId = ImportMap_ImportFile.ImportMapId)
    left join SystemUserBase lk_importfilebase_createdby with(nolock) on (ImportFileBase.CreatedBy = lk_importfilebase_createdby.SystemUserId)
    left join SystemUserBase lk_importfilebase_modifiedby with(nolock) on (ImportFileBase.ModifiedBy = lk_importfilebase_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (ImportFileBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Import]    Script Date: 04/11/2008 06:58:15 ******/




--
-- base view for Import
--
create view [dbo].[Import] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    SendNotification,
    IsImport,
    ModeCode,
    StateCode,
    OwningBusinessUnit,
    ImportId,
    EMailAddress,
    CreatedBy,
    Name,
    CreatedOn,
    ModifiedBy,
    Sequence,
    DeletionStateCode,
    ModifiedOn,
    StatusCode,
    OwningUser
) with view_metadata as 
select 
    -- logical attributes
    lk_importbase_createdby.DeletionStateCode, 
    lk_importbase_createdby.FullName, 
    lk_importbase_createdby.YomiFullName, 
    lk_importbase_modifiedby.DeletionStateCode, 
    lk_importbase_modifiedby.FullName, 
    lk_importbase_modifiedby.YomiFullName, 

    -- ownership entries
    OwnerId   = ImportBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when ImportBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    ImportBase.SendNotification,
    ImportBase.IsImport,
    ImportBase.ModeCode,
    ImportBase.StateCode,
    ImportBase.OwningBusinessUnit,
    ImportBase.ImportId,
    ImportBase.EMailAddress,
    ImportBase.CreatedBy,
    ImportBase.Name,
    ImportBase.CreatedOn,
    ImportBase.ModifiedBy,
    ImportBase.Sequence,
    ImportBase.DeletionStateCode,
    ImportBase.ModifiedOn,
    ImportBase.StatusCode,
    ImportBase.OwningUser
from ImportBase
    left join SystemUserBase lk_importbase_createdby with(nolock) on (ImportBase.CreatedBy = lk_importbase_createdby.SystemUserId)
    left join SystemUserBase lk_importbase_modifiedby with(nolock) on (ImportBase.ModifiedBy = lk_importbase_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (ImportBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[QuoteClose]    Script Date: 04/11/2008 06:58:25 ******/




--
-- base view for QuoteClose
--
create view [dbo].[QuoteClose] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    QuoteId, 
    QuoteIdDsc, 
    QuoteIdName, 
    QuoteIdType, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    ActivityId,
    Revision,
    Subcategory,
    QuoteNumber,
    Category,
    ImportSequenceNumber,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_quote_close.ActualDurationMinutes, 
    activity_pointer_quote_close.ActualEnd, 
    activity_pointer_quote_close.ActualStart, 
    activity_pointer_quote_close.CreatedBy, 
    lk_quoteclose_createdby.DeletionStateCode, 
    lk_quoteclose_createdby.FullName, 
    lk_quoteclose_createdby.YomiFullName, 
    activity_pointer_quote_close.CreatedOn, 
    activity_pointer_quote_close.DeletionStateCode, 
    activity_pointer_quote_close.Description, 
    activity_pointer_quote_close.IsBilled, 
    activity_pointer_quote_close.IsWorkflowCreated, 
    activity_pointer_quote_close.ModifiedBy, 
    lk_quoteclose_modifiedby.DeletionStateCode, 
    lk_quoteclose_modifiedby.FullName, 
    lk_quoteclose_modifiedby.YomiFullName, 
    activity_pointer_quote_close.ModifiedOn, 
    activity_pointer_quote_close.OwningBusinessUnit, 
    activity_pointer_quote_close.OwningUser, 
    activity_pointer_quote_close.RegardingObjectId, 
    activity_pointer_quote_close.RegardingObjectIdDsc, 
    activity_pointer_quote_close.RegardingObjectIdName, 
    activity_pointer_quote_close.RegardingObjectTypeCode, 
    activity_pointer_quote_close.ScheduledDurationMinutes, 
    activity_pointer_quote_close.ScheduledEnd, 
    activity_pointer_quote_close.ScheduledStart, 
    activity_pointer_quote_close.ServiceId, 
    activity_pointer_quote_close.StateCode, 
    activity_pointer_quote_close.StatusCode, 
    activity_pointer_quote_close.Subject, 
    activity_pointer_quote_close.TimeZoneRuleVersionNumber, 
    activity_pointer_quote_close.UTCConversionTimeZoneCode, 
    activity_pointer_quote_close.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_quote_close.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_quote_close.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    QuoteCloseBase.ActivityId,
    QuoteCloseBase.Revision,
    QuoteCloseBase.Subcategory,
    QuoteCloseBase.QuoteNumber,
    QuoteCloseBase.Category,
    QuoteCloseBase.ImportSequenceNumber,
    QuoteCloseBase.OverriddenCreatedOn
from QuoteCloseBase
    left join ActivityPointerBase activity_pointer_quote_close on (QuoteCloseBase.ActivityId = activity_pointer_quote_close.ActivityId and activity_pointer_quote_close.ActivityTypeCode = 4211)
    left join SystemUserBase lk_quoteclose_createdby with(nolock) on (activity_pointer_quote_close.CreatedBy = lk_quoteclose_createdby.SystemUserId)
    left join SystemUserBase lk_quoteclose_modifiedby with(nolock) on (activity_pointer_quote_close.ModifiedBy = lk_quoteclose_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_quote_close.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[ImportData]    Script Date: 04/11/2008 06:58:16 ******/




--
-- base view for ImportData
--
create view [dbo].[ImportData] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ImportFileIdDsc, 
    ImportFileIdName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    CreatedOn,
    LineNumber,
    RecordId,
    Data,
    ModifiedOn,
    ImportFileId,
    ModifiedBy,
    ImportDataId,
    DeletionStateCode,
    CreatedBy,
    StateCode,
    OwningBusinessUnit,
    HasError,
    StatusCode,
    OwningUser
) with view_metadata as 
select 
    -- logical attributes
    lk_importdatabase_createdby.DeletionStateCode, 
    lk_importdatabase_createdby.FullName, 
    lk_importdatabase_createdby.YomiFullName, 
    ImportFile_ImportData.DeletionStateCode, 
    ImportFile_ImportData.Name, 
    lk_importdatabase_modifiedby.DeletionStateCode, 
    lk_importdatabase_modifiedby.FullName, 
    lk_importdatabase_modifiedby.YomiFullName, 

    -- ownership entries
    OwnerId   = ImportDataBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when ImportDataBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    ImportDataBase.CreatedOn,
    ImportDataBase.LineNumber,
    ImportDataBase.RecordId,
    ImportDataBase.Data,
    ImportDataBase.ModifiedOn,
    ImportDataBase.ImportFileId,
    ImportDataBase.ModifiedBy,
    ImportDataBase.ImportDataId,
    ImportDataBase.DeletionStateCode,
    ImportDataBase.CreatedBy,
    ImportDataBase.StateCode,
    ImportDataBase.OwningBusinessUnit,
    ImportDataBase.HasError,
    ImportDataBase.StatusCode,
    ImportDataBase.OwningUser
from ImportDataBase
    left join ImportFileBase ImportFile_ImportData on (ImportDataBase.ImportFileId = ImportFile_ImportData.ImportFileId)
    left join SystemUserBase lk_importdatabase_createdby with(nolock) on (ImportDataBase.CreatedBy = lk_importdatabase_createdby.SystemUserId)
    left join SystemUserBase lk_importdatabase_modifiedby with(nolock) on (ImportDataBase.ModifiedBy = lk_importdatabase_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (ImportDataBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[ImportLog]    Script Date: 04/11/2008 06:58:16 ******/




--
-- base view for ImportLog
--
create view [dbo].[ImportLog] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ImportDataIdDsc, 
    ImportDataIdName, 
    ImportFileIdDsc, 
    ImportFileIdName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    ModifiedBy,
    SequenceNumber,
    LineNumber,
    AdditionalInfo,
    LogPhaseCode,
    StateCode,
    ErrorNumber,
    StatusCode,
    CreatedOn,
    ImportLogId,
    ErrorDescription,
    CreatedBy,
    OwningBusinessUnit,
    ModifiedOn,
    HeaderColumn,
    DeletionStateCode,
    ColumnValue,
    ImportDataId,
    ImportFileId,
    OwningUser
) with view_metadata as 
select 
    -- logical attributes
    lk_importlogbase_createdby.DeletionStateCode, 
    lk_importlogbase_createdby.FullName, 
    lk_importlogbase_createdby.YomiFullName, 
    ImportLog_ImportData.DeletionStateCode, 
    ImportLog_ImportData.Data, 
    ImportLog_ImportFile.DeletionStateCode, 
    ImportLog_ImportFile.Name, 
    lk_importlogbase_modifiedby.DeletionStateCode, 
    lk_importlogbase_modifiedby.FullName, 
    lk_importlogbase_modifiedby.YomiFullName, 

    -- ownership entries
    OwnerId   = ImportLogBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when ImportLogBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    ImportLogBase.ModifiedBy,
    ImportLogBase.SequenceNumber,
    ImportLogBase.LineNumber,
    ImportLogBase.AdditionalInfo,
    ImportLogBase.LogPhaseCode,
    ImportLogBase.StateCode,
    ImportLogBase.ErrorNumber,
    ImportLogBase.StatusCode,
    ImportLogBase.CreatedOn,
    ImportLogBase.ImportLogId,
    ImportLogBase.ErrorDescription,
    ImportLogBase.CreatedBy,
    ImportLogBase.OwningBusinessUnit,
    ImportLogBase.ModifiedOn,
    ImportLogBase.HeaderColumn,
    ImportLogBase.DeletionStateCode,
    ImportLogBase.ColumnValue,
    ImportLogBase.ImportDataId,
    ImportLogBase.ImportFileId,
    ImportLogBase.OwningUser
from ImportLogBase
    left join ImportDataBase ImportLog_ImportData on (ImportLogBase.ImportDataId = ImportLog_ImportData.ImportDataId)
    left join ImportFileBase ImportLog_ImportFile on (ImportLogBase.ImportFileId = ImportLog_ImportFile.ImportFileId)
    left join SystemUserBase lk_importlogbase_createdby with(nolock) on (ImportLogBase.CreatedBy = lk_importlogbase_createdby.SystemUserId)
    left join SystemUserBase lk_importlogbase_modifiedby with(nolock) on (ImportLogBase.ModifiedBy = lk_importlogbase_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (ImportLogBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[BulkOperation]    Script Date: 04/11/2008 06:57:38 ******/




--
-- base view for BulkOperation
--
create view [dbo].[BulkOperation] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    RegardingObjectId, 
    RegardingObjectIdDsc, 
    RegardingObjectIdName, 
    RegardingObjectIdYomiName, 
    RegardingObjectTypeCode, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    DeletionStateCode,
    TargetedRecordTypeCode,
    CreatedRecordTypeCode,
    Parameters,
    ErrorNumber,
    BulkOperationNumber,
    OperationTypeCode,
    TargetMembersCount,
    ActivityId,
    SuccessCount,
    FailureCount
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_BulkOperation.ActualDurationMinutes, 
    activity_pointer_BulkOperation.ActualEnd, 
    activity_pointer_BulkOperation.ActualStart, 
    activity_pointer_BulkOperation.CreatedBy, 
    lk_BulkOperation_createdby.DeletionStateCode, 
    lk_BulkOperation_createdby.FullName, 
    lk_BulkOperation_createdby.YomiFullName, 
    activity_pointer_BulkOperation.CreatedOn, 
    activity_pointer_BulkOperation.Description, 
    activity_pointer_BulkOperation.IsBilled, 
    activity_pointer_BulkOperation.IsWorkflowCreated, 
    activity_pointer_BulkOperation.ModifiedBy, 
    lk_BulkOperation_modifiedby.DeletionStateCode, 
    lk_BulkOperation_modifiedby.FullName, 
    lk_BulkOperation_modifiedby.YomiFullName, 
    activity_pointer_BulkOperation.ModifiedOn, 
    activity_pointer_BulkOperation.OwningBusinessUnit, 
    activity_pointer_BulkOperation.OwningUser, 
    activity_pointer_BulkOperation.RegardingObjectId, 
    activity_pointer_BulkOperation.RegardingObjectIdDsc, 
    activity_pointer_BulkOperation.RegardingObjectIdName, 
    activity_pointer_BulkOperation.RegardingObjectIdYomiName, 
    activity_pointer_BulkOperation.RegardingObjectTypeCode, 
    activity_pointer_BulkOperation.ScheduledDurationMinutes, 
    activity_pointer_BulkOperation.ScheduledEnd, 
    activity_pointer_BulkOperation.ScheduledStart, 
    activity_pointer_BulkOperation.ServiceId, 
    activity_pointer_BulkOperation.StateCode, 
    activity_pointer_BulkOperation.StatusCode, 
    activity_pointer_BulkOperation.Subject, 
    activity_pointer_BulkOperation.TimeZoneRuleVersionNumber, 
    activity_pointer_BulkOperation.UTCConversionTimeZoneCode, 
    activity_pointer_BulkOperation.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_BulkOperation.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_BulkOperation.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    BulkOperationBase.DeletionStateCode,
    BulkOperationBase.TargetedRecordTypeCode,
    BulkOperationBase.CreatedRecordTypeCode,
    BulkOperationBase.Parameters,
    BulkOperationBase.ErrorNumber,
    BulkOperationBase.BulkOperationNumber,
    BulkOperationBase.OperationTypeCode,
    BulkOperationBase.TargetMembersCount,
    BulkOperationBase.ActivityId,
    BulkOperationBase.SuccessCount,
    BulkOperationBase.FailureCount
from BulkOperationBase
    left join ActivityPointerBase activity_pointer_BulkOperation on (BulkOperationBase.ActivityId = activity_pointer_BulkOperation.ActivityId and activity_pointer_BulkOperation.ActivityTypeCode = 4406)
    left join SystemUserBase lk_BulkOperation_createdby with(nolock) on (activity_pointer_BulkOperation.CreatedBy = lk_BulkOperation_createdby.SystemUserId)
    left join SystemUserBase lk_BulkOperation_modifiedby with(nolock) on (activity_pointer_BulkOperation.ModifiedBy = lk_BulkOperation_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_BulkOperation.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[BulkOperationLog]    Script Date: 04/11/2008 06:57:38 ******/




--
-- base view for BulkOperationLog
--
create view [dbo].[BulkOperationLog] (
    -- logical attributes
    BulkOperationIdDsc, 
    BulkOperationIdName, 
    CreatedObjectIdDsc, 
    CreatedObjectIdName, 
    OwningBusinessUnit, 
    OwningUser, 


    RegardingObjectIdName,
    RegardingObjectIdYomiName,
    RegardingObjectIdDsc,

    -- physical attributes
    RegardingObjectId,
    ErrorNumber,
    CreatedObjectId,
    BulkOperationLogId,
    BulkOperationId,
    AdditionalInfo,
    RegardingObjectIdTypeCode,
    CreatedObjectIdTypeCode
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_BulkOperation_logs.DeletionStateCode, 
    BulkOperation_logs.BulkOperationNumber, 
    CreatedActivity_BulkOperationLogs.DeletionStateCode, 
    CreatedActivity_BulkOperationLogs.Subject, 
    activity_pointer_BulkOperation_logs.OwningBusinessUnit, 
    activity_pointer_BulkOperation_logs.OwningUser, 


    RegardingObjectIdName = coalesce(XXaccount.Name, XXcontact.FullName, XXlead.FullName), 
    RegardingObjectIdYomiName = coalesce(XXaccount.YomiName, XXcontact.YomiFullName, XXlead.YomiFullName), 
    RegardingObjectIdDsc  = coalesce(XXaccount.DeletionStateCode, XXcontact.DeletionStateCode, XXlead.DeletionStateCode), 

    -- physical attributes
    BulkOperationLogBase.RegardingObjectId,
    BulkOperationLogBase.ErrorNumber,
    BulkOperationLogBase.CreatedObjectId,
    BulkOperationLogBase.BulkOperationLogId,
    BulkOperationLogBase.BulkOperationId,
    BulkOperationLogBase.AdditionalInfo,
    BulkOperationLogBase.RegardingObjectIdTypeCode,
    BulkOperationLogBase.CreatedObjectIdTypeCode
from BulkOperationLogBase
    left join AccountBase XXaccount on (BulkOperationLogBase.RegardingObjectId = XXaccount.AccountId and BulkOperationLogBase.RegardingObjectIdTypeCode = 1)
    left join ContactBase XXcontact on (BulkOperationLogBase.RegardingObjectId = XXcontact.ContactId and BulkOperationLogBase.RegardingObjectIdTypeCode = 2)
    left join LeadBase XXlead on (BulkOperationLogBase.RegardingObjectId = XXlead.LeadId and BulkOperationLogBase.RegardingObjectIdTypeCode = 4)

    left join ActivityPointerBase activity_pointer_BulkOperation_logs on (BulkOperationLogBase.BulkOperationId = activity_pointer_BulkOperation_logs.ActivityId)
    left join BulkOperationBase BulkOperation_logs on (BulkOperationLogBase.BulkOperationId = BulkOperation_logs.ActivityId)
    left join ActivityPointerBase CreatedActivity_BulkOperationLogs on (BulkOperationLogBase.CreatedObjectId = CreatedActivity_BulkOperationLogs.ActivityId)

/****** Object:  View [dbo].[FilteredTeamMembership]    Script Date: 04/11/2008 06:58:13 ******/




--
-- report view for teammembership
--
create view [dbo].[FilteredTeamMembership] (
    systemuserid,
    teamid,
    teammembershipid
) with view_metadata as 
select 
    TeamMembership.SystemUserId,
    TeamMembership.TeamId,
    TeamMembership.TeamMembershipId
from TeamMembership

/****** Object:  StoredProcedure [dbo].[p_PopulateSystemUserPrincipals]    Script Date: 04/11/2008 06:35:25 ******/




create procedure [dbo].[p_PopulateSystemUserPrincipals](@id uniqueidentifier) as
begin
	-- populate teams
	insert SystemUserPrincipals (SystemUserId, PrincipalId) select @id, TeamId from TeamMembership where SystemUserId = @id
		
	-- populate business unit membership	
	insert into SystemUserPrincipals (SystemUserId, PrincipalId) select @id, BusinessUnitId from SystemUserBase where SystemUserId = @id
		
	-- populate organization membership
	insert into SystemUserPrincipals (SystemUserId, PrincipalId) select @id, OrganizationId from BusinessUnitBase where BusinessUnitId = (select BusinessUnitId from SystemUserBase where SystemUserId = @id)
		
	-- insert self	
	insert into SystemUserPrincipals (SystemUserId, PrincipalId) values(@id, @id)
end

/****** Object:  View [dbo].[FilteredOpportunityCompetitors]    Script Date: 04/11/2008 06:58:01 ******/




--
-- report view for opportunitycompetitors
--
create view [dbo].[FilteredOpportunityCompetitors] (
    competitorid,
    opportunitycompetitorid,
    opportunityid
) with view_metadata as 
select 
    OpportunityCompetitors.CompetitorId,
    OpportunityCompetitors.OpportunityCompetitorId,
    OpportunityCompetitors.OpportunityId
from OpportunityCompetitors

/****** Object:  View [dbo].[Contact]    Script Date: 04/11/2008 06:57:41 ******/




--
-- base view for Contact
--
create view [dbo].[Contact] (
    -- logical attributes
    AccountIdDsc, 
    AccountIdName, 
    AccountIdYomiName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    DefaultPriceLevelIdDsc, 
    DefaultPriceLevelIdName, 
    MasterContactIdDsc, 
    MasterContactIdName, 
    MasterContactIdYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OriginatingLeadIdDsc, 
    OriginatingLeadIdName, 
    OriginatingLeadIdYomiName, 
    ParentContactIdDsc, 
    ParentContactIdName, 
    ParentContactIdYomiName, 
    PreferredEquipmentIdDsc, 
    PreferredEquipmentIdName, 
    PreferredServiceIdDsc, 
    PreferredServiceIdName, 
    PreferredSystemUserIdDsc, 
    PreferredSystemUserIdName, 
    PreferredSystemUserIdYomiName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- linked address entities
    Address1_AddressId,
    Address1_AddressTypeCode,
    Address1_Name,
    Address1_PrimaryContactName,
    Address1_Line1,
    Address1_Line2,
    Address1_Line3,
    Address1_City,
    Address1_StateOrProvince,
    Address1_County,
    Address1_Country,
    Address1_PostOfficeBox,
    Address1_PostalCode,
    Address1_UTCOffset,
    Address1_FreightTermsCode,
    Address1_UPSZone,
    Address1_Latitude,
    Address1_Telephone1,
    Address1_Longitude,
    Address1_ShippingMethodCode,
    Address1_Telephone2,
    Address1_Telephone3,
    Address1_Fax,
    Address1_TimeZoneRuleVersionNumber,
    Address1_OverriddenCreatedOn,
    Address1_UTCConversionTimeZoneCode,
    Address1_ImportSequenceNumber,

    Address2_AddressId,
    Address2_AddressTypeCode,
    Address2_Name,
    Address2_PrimaryContactName,
    Address2_Line1,
    Address2_Line2,
    Address2_Line3,
    Address2_City,
    Address2_StateOrProvince,
    Address2_County,
    Address2_Country,
    Address2_PostOfficeBox,
    Address2_PostalCode,
    Address2_UTCOffset,
    Address2_FreightTermsCode,
    Address2_UPSZone,
    Address2_Latitude,
    Address2_Telephone1,
    Address2_Longitude,
    Address2_ShippingMethodCode,
    Address2_Telephone2,
    Address2_Telephone3,
    Address2_Fax,
    Address2_TimeZoneRuleVersionNumber,
    Address2_OverriddenCreatedOn,
    Address2_UTCConversionTimeZoneCode,
    Address2_ImportSequenceNumber,

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,


    ParentCustomerId,
    ParentCustomerIdName,
    ParentCustomerIdYomiName,
    ParentCustomerIdDsc,
    ParentCustomerIdType,

    -- physical attributes
    ContactId,
    DefaultPriceLevelId,
    CustomerSizeCode,
    CustomerTypeCode,
    PreferredContactMethodCode,
    LeadSourceCode,
    DeletionStateCode,
    OriginatingLeadId,
    OwningBusinessUnit,
    OwningUser,
    PaymentTermsCode,
    ShippingMethodCode,
    OwningTeam,
    AccountId,
    ParticipatesInWorkflow,
    IsBackofficeCustomer,
    Salutation,
    JobTitle,
    FirstName,
    Department,
    NickName,
    MiddleName,
    LastName,
    Suffix,
    YomiFirstName,
    FullName,
    YomiMiddleName,
    YomiLastName,
    Anniversary,
    BirthDate,
    GovernmentId,
    YomiFullName,
    Description,
    EmployeeId,
    GenderCode,
    AnnualIncome,
    HasChildrenCode,
    EducationCode,
    WebSiteUrl,
    FamilyStatusCode,
    FtpSiteUrl,
    EMailAddress1,
    SpousesName,
    AssistantName,
    EMailAddress2,
    AssistantPhone,
    EMailAddress3,
    DoNotPhone,
    ManagerName,
    ManagerPhone,
    DoNotFax,
    DoNotEMail,
    DoNotPostalMail,
    DoNotBulkEMail,
    DoNotBulkPostalMail,
    AccountRoleCode,
    TerritoryCode,
    IsPrivate,
    CreditLimit,
    CreatedOn,
    CreditOnHold,
    CreatedBy,
    ModifiedOn,
    ModifiedBy,
    NumberOfChildren,
    ChildrensNames,
    VersionNumber,
    MobilePhone,
    Pager,
    Telephone1,
    Telephone2,
    Telephone3,
    Fax,
    Aging30,
    StateCode,
    Aging60,
    StatusCode,
    Aging90,
    ParentContactId,
    PreferredSystemUserId,
    PreferredServiceId,
    MasterId,
    PreferredAppointmentDayCode,
    PreferredAppointmentTimeCode,
    DoNotSendMM,
    Merged,
    ExternalUserIdentifier,
    SubscriptionId,
    PreferredEquipmentId,
    LastUsedInCampaign,
    TransactionCurrencyId,
    OverriddenCreatedOn,
    ExchangeRate,
    ImportSequenceNumber,
    TimeZoneRuleVersionNumber,
    UTCConversionTimeZoneCode,
    AnnualIncome_Base,
    CreditLimit_Base,
    Aging60_Base,
    Aging90_Base,
    Aging30_Base
) with view_metadata as 
select 
    -- logical attributes
    account_contacts.DeletionStateCode, 
    account_contacts.Name, 
    account_contacts.YomiName, 
    lk_contactbase_createdby.DeletionStateCode, 
    lk_contactbase_createdby.FullName, 
    lk_contactbase_createdby.YomiFullName, 
    price_level_contacts.DeletionStateCode, 
    price_level_contacts.Name, 
    contact_master_contact.DeletionStateCode, 
    contact_master_contact.FullName, 
    contact_master_contact.YomiFullName, 
    lk_contactbase_modifiedby.DeletionStateCode, 
    lk_contactbase_modifiedby.FullName, 
    lk_contactbase_modifiedby.YomiFullName, 
    contact_originating_lead.DeletionStateCode, 
    contact_originating_lead.FullName, 
    contact_originating_lead.YomiFullName, 
    contact_parent_contact.DeletionStateCode, 
    contact_parent_contact.FullName, 
    contact_parent_contact.YomiFullName, 
    equipment_contacts.DeletionStateCode, 
    equipment_contacts.Name, 
    service_contacts.DeletionStateCode, 
    service_contacts.Name, 
    system_user_contacts.DeletionStateCode, 
    system_user_contacts.FullName, 
    system_user_contacts.YomiFullName, 
    transactioncurrency_contact.DeletionStateCode, 
    transactioncurrency_contact.CurrencyName, 

    -- linked address entities
    XXaddress1.CustomerAddressId,
    XXaddress1.AddressTypeCode,
    XXaddress1.Name,
    XXaddress1.PrimaryContactName,
    XXaddress1.Line1,
    XXaddress1.Line2,
    XXaddress1.Line3,
    XXaddress1.City,
    XXaddress1.StateOrProvince,
    XXaddress1.County,
    XXaddress1.Country,
    XXaddress1.PostOfficeBox,
    XXaddress1.PostalCode,
    XXaddress1.UTCOffset,
    XXaddress1.FreightTermsCode,
    XXaddress1.UPSZone,
    XXaddress1.Latitude,
    XXaddress1.Telephone1,
    XXaddress1.Longitude,
    XXaddress1.ShippingMethodCode,
    XXaddress1.Telephone2,
    XXaddress1.Telephone3,
    XXaddress1.Fax,
    XXaddress1.TimeZoneRuleVersionNumber,
    XXaddress1.OverriddenCreatedOn,
    XXaddress1.UTCConversionTimeZoneCode,
    XXaddress1.ImportSequenceNumber,

    XXaddress2.CustomerAddressId,
    XXaddress2.AddressTypeCode,
    XXaddress2.Name,
    XXaddress2.PrimaryContactName,
    XXaddress2.Line1,
    XXaddress2.Line2,
    XXaddress2.Line3,
    XXaddress2.City,
    XXaddress2.StateOrProvince,
    XXaddress2.County,
    XXaddress2.Country,
    XXaddress2.PostOfficeBox,
    XXaddress2.PostalCode,
    XXaddress2.UTCOffset,
    XXaddress2.FreightTermsCode,
    XXaddress2.UPSZone,
    XXaddress2.Latitude,
    XXaddress2.Telephone1,
    XXaddress2.Longitude,
    XXaddress2.ShippingMethodCode,
    XXaddress2.Telephone2,
    XXaddress2.Telephone3,
    XXaddress2.Fax,
    XXaddress2.TimeZoneRuleVersionNumber,
    XXaddress2.OverriddenCreatedOn,
    XXaddress2.UTCConversionTimeZoneCode,
    XXaddress2.ImportSequenceNumber,

    -- ownership entries
    OwnerId   = ContactBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when ContactBase.OwningUser IS NOT NULL then 8
              else NULL
              end,


    ParentCustomerId   = coalesce(ContactBase.AccountId, ContactBase.ParentContactId), 
    ParentCustomerIdName = coalesce(XXparentaccount.Name, XXparentcontact.FullName), 
    ParentCustomerIdYomiName = coalesce(XXparentaccount.YomiName, XXparentcontact.YomiFullName), 
    ParentCustomerIdDsc  = coalesce(XXparentaccount.DeletionStateCode, XXparentcontact.DeletionStateCode), 
    ParentCustomerIdType = case 
              when ContactBase.AccountId IS NOT NULL then 1
              when ContactBase.ParentContactId IS NOT NULL then 2
              else NULL
              end,

    -- physical attributes
    ContactBase.ContactId,
    ContactBase.DefaultPriceLevelId,
    ContactBase.CustomerSizeCode,
    ContactBase.CustomerTypeCode,
    ContactBase.PreferredContactMethodCode,
    ContactBase.LeadSourceCode,
    ContactBase.DeletionStateCode,
    ContactBase.OriginatingLeadId,
    ContactBase.OwningBusinessUnit,
    ContactBase.OwningUser,
    ContactBase.PaymentTermsCode,
    ContactBase.ShippingMethodCode,
    ContactBase.OwningTeam,
    ContactBase.AccountId,
    ContactBase.ParticipatesInWorkflow,
    ContactBase.IsBackofficeCustomer,
    ContactBase.Salutation,
    ContactBase.JobTitle,
    ContactBase.FirstName,
    ContactBase.Department,
    ContactBase.NickName,
    ContactBase.MiddleName,
    ContactBase.LastName,
    ContactBase.Suffix,
    ContactBase.YomiFirstName,
    ContactBase.FullName,
    ContactBase.YomiMiddleName,
    ContactBase.YomiLastName,
    ContactBase.Anniversary,
    ContactBase.BirthDate,
    ContactBase.GovernmentId,
    ContactBase.YomiFullName,
    ContactBase.Description,
    ContactBase.EmployeeId,
    ContactBase.GenderCode,
    ContactBase.AnnualIncome,
    ContactBase.HasChildrenCode,
    ContactBase.EducationCode,
    ContactBase.WebSiteUrl,
    ContactBase.FamilyStatusCode,
    ContactBase.FtpSiteUrl,
    ContactBase.EMailAddress1,
    ContactBase.SpousesName,
    ContactBase.AssistantName,
    ContactBase.EMailAddress2,
    ContactBase.AssistantPhone,
    ContactBase.EMailAddress3,
    ContactBase.DoNotPhone,
    ContactBase.ManagerName,
    ContactBase.ManagerPhone,
    ContactBase.DoNotFax,
    ContactBase.DoNotEMail,
    ContactBase.DoNotPostalMail,
    ContactBase.DoNotBulkEMail,
    ContactBase.DoNotBulkPostalMail,
    ContactBase.AccountRoleCode,
    ContactBase.TerritoryCode,
    ContactBase.IsPrivate,
    ContactBase.CreditLimit,
    ContactBase.CreatedOn,
    ContactBase.CreditOnHold,
    ContactBase.CreatedBy,
    ContactBase.ModifiedOn,
    ContactBase.ModifiedBy,
    ContactBase.NumberOfChildren,
    ContactBase.ChildrensNames,
    ContactBase.VersionNumber,
    ContactBase.MobilePhone,
    ContactBase.Pager,
    ContactBase.Telephone1,
    ContactBase.Telephone2,
    ContactBase.Telephone3,
    ContactBase.Fax,
    ContactBase.Aging30,
    ContactBase.StateCode,
    ContactBase.Aging60,
    ContactBase.StatusCode,
    ContactBase.Aging90,
    ContactBase.ParentContactId,
    ContactBase.PreferredSystemUserId,
    ContactBase.PreferredServiceId,
    ContactBase.MasterId,
    ContactBase.PreferredAppointmentDayCode,
    ContactBase.PreferredAppointmentTimeCode,
    ContactBase.DoNotSendMM,
    ContactBase.Merged,
    ContactBase.ExternalUserIdentifier,
    ContactBase.SubscriptionId,
    ContactBase.PreferredEquipmentId,
    ContactBase.LastUsedInCampaign,
    ContactBase.TransactionCurrencyId,
    ContactBase.OverriddenCreatedOn,
    ContactBase.ExchangeRate,
    ContactBase.ImportSequenceNumber,
    ContactBase.TimeZoneRuleVersionNumber,
    ContactBase.UTCConversionTimeZoneCode,
    ContactBase.AnnualIncome_Base,
    ContactBase.CreditLimit_Base,
    ContactBase.Aging60_Base,
    ContactBase.Aging90_Base,
    ContactBase.Aging30_Base
from ContactBase
    left join AccountBase XXparentaccount on (ContactBase.AccountId = XXparentaccount.AccountId)
    left join ContactBase XXparentcontact on (ContactBase.ParentContactId = XXparentcontact.ContactId)


    left join CustomerAddressBase XXaddress1 on (ContactBase.ContactId = XXaddress1.ParentId and XXaddress1.AddressNumber = 1)
    left join CustomerAddressBase XXaddress2 on (ContactBase.ContactId = XXaddress2.ParentId and XXaddress2.AddressNumber = 2)
    left join AccountBase account_contacts on (ContactBase.AccountId = account_contacts.AccountId)
    left join ContactBase contact_master_contact on (ContactBase.MasterId = contact_master_contact.ContactId)
    left join LeadBase contact_originating_lead on (ContactBase.OriginatingLeadId = contact_originating_lead.LeadId)
    left join ContactBase contact_parent_contact on (ContactBase.ParentContactId = contact_parent_contact.ContactId)
    left join EquipmentBase equipment_contacts on (ContactBase.PreferredEquipmentId = equipment_contacts.EquipmentId)
    left join SystemUserBase lk_contactbase_createdby with(nolock) on (ContactBase.CreatedBy = lk_contactbase_createdby.SystemUserId)
    left join SystemUserBase lk_contactbase_modifiedby with(nolock) on (ContactBase.ModifiedBy = lk_contactbase_modifiedby.SystemUserId)
    left join PriceLevelBase price_level_contacts on (ContactBase.DefaultPriceLevelId = price_level_contacts.PriceLevelId)
    left join ServiceBase service_contacts on (ContactBase.PreferredServiceId = service_contacts.ServiceId)
    left join SystemUserBase system_user_contacts with(nolock) on (ContactBase.PreferredSystemUserId = system_user_contacts.SystemUserId)
    left join TransactionCurrencyBase transactioncurrency_contact on (ContactBase.TransactionCurrencyId = transactioncurrency_contact.TransactionCurrencyId)
    left join SystemUserBase XXowninguser with(nolock) on (ContactBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[ServiceAppointment]    Script Date: 04/11/2008 06:58:32 ******/




--
-- base view for ServiceAppointment
--
create view [dbo].[ServiceAppointment] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    PriorityCode, 
    RegardingObjectId, 
    RegardingObjectIdDsc, 
    RegardingObjectIdName, 
    RegardingObjectIdYomiName, 
    RegardingObjectTypeCode, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    ServiceIdDsc, 
    ServiceIdName, 
    SiteIdDsc, 
    SiteIdName, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    Category,
    SubscriptionId,
    Location,
    Subcategory,
    ActivityId,
    IsAllDayEvent,
    SiteId,
    OverriddenCreatedOn,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_service_appointment.ActualDurationMinutes, 
    activity_pointer_service_appointment.ActualEnd, 
    activity_pointer_service_appointment.ActualStart, 
    activity_pointer_service_appointment.CreatedBy, 
    lk_serviceappointment_createdby.DeletionStateCode, 
    lk_serviceappointment_createdby.FullName, 
    lk_serviceappointment_createdby.YomiFullName, 
    activity_pointer_service_appointment.CreatedOn, 
    activity_pointer_service_appointment.DeletionStateCode, 
    activity_pointer_service_appointment.Description, 
    activity_pointer_service_appointment.IsBilled, 
    activity_pointer_service_appointment.IsWorkflowCreated, 
    activity_pointer_service_appointment.ModifiedBy, 
    lk_serviceappointment_modifiedby.DeletionStateCode, 
    lk_serviceappointment_modifiedby.FullName, 
    lk_serviceappointment_modifiedby.YomiFullName, 
    activity_pointer_service_appointment.ModifiedOn, 
    activity_pointer_service_appointment.OwningBusinessUnit, 
    activity_pointer_service_appointment.OwningUser, 
    activity_pointer_service_appointment.PriorityCode, 
    activity_pointer_service_appointment.RegardingObjectId, 
    activity_pointer_service_appointment.RegardingObjectIdDsc, 
    activity_pointer_service_appointment.RegardingObjectIdName, 
    activity_pointer_service_appointment.RegardingObjectIdYomiName, 
    activity_pointer_service_appointment.RegardingObjectTypeCode, 
    activity_pointer_service_appointment.ScheduledDurationMinutes, 
    activity_pointer_service_appointment.ScheduledEnd, 
    activity_pointer_service_appointment.ScheduledStart, 
    activity_pointer_service_appointment.ServiceId, 
    service_service_appointments.DeletionStateCode, 
    service_service_appointments.Name, 
    site_service_appointments.DeletionStateCode, 
    site_service_appointments.Name, 
    activity_pointer_service_appointment.StateCode, 
    activity_pointer_service_appointment.StatusCode, 
    activity_pointer_service_appointment.Subject, 
    activity_pointer_service_appointment.TimeZoneRuleVersionNumber, 
    activity_pointer_service_appointment.UTCConversionTimeZoneCode, 
    activity_pointer_service_appointment.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_service_appointment.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_service_appointment.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    ServiceAppointmentBase.Category,
    ServiceAppointmentBase.SubscriptionId,
    ServiceAppointmentBase.Location,
    ServiceAppointmentBase.Subcategory,
    ServiceAppointmentBase.ActivityId,
    ServiceAppointmentBase.IsAllDayEvent,
    ServiceAppointmentBase.SiteId,
    ServiceAppointmentBase.OverriddenCreatedOn,
    ServiceAppointmentBase.ImportSequenceNumber
from ServiceAppointmentBase
    left join ActivityPointerBase activity_pointer_service_appointment on (ServiceAppointmentBase.ActivityId = activity_pointer_service_appointment.ActivityId and activity_pointer_service_appointment.ActivityTypeCode = 4214)
    left join SiteBase site_service_appointments on (ServiceAppointmentBase.SiteId = site_service_appointments.SiteId)
    left join SystemUserBase lk_serviceappointment_createdby with(nolock) on (activity_pointer_service_appointment.CreatedBy = lk_serviceappointment_createdby.SystemUserId)
    left join SystemUserBase lk_serviceappointment_modifiedby with(nolock) on (activity_pointer_service_appointment.ModifiedBy = lk_serviceappointment_modifiedby.SystemUserId)
    left join ServiceBase service_service_appointments on (activity_pointer_service_appointment.ServiceId = service_service_appointments.ServiceId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_service_appointment.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Account]    Script Date: 04/11/2008 06:57:34 ******/




--
-- base view for Account
--
create view [dbo].[Account] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    DefaultPriceLevelIdDsc, 
    DefaultPriceLevelIdName, 
    MasterAccountIdDsc, 
    MasterAccountIdName, 
    MasterAccountIdYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OriginatingLeadIdDsc, 
    OriginatingLeadIdName, 
    OriginatingLeadIdYomiName, 
    ParentAccountIdDsc, 
    ParentAccountIdName, 
    ParentAccountIdYomiName, 
    PreferredEquipmentIdDsc, 
    PreferredEquipmentIdName, 
    PreferredServiceIdDsc, 
    PreferredServiceIdName, 
    PreferredSystemUserIdDsc, 
    PreferredSystemUserIdName, 
    PreferredSystemUserIdYomiName, 
    PrimaryContactIdDsc, 
    PrimaryContactIdName, 
    PrimaryContactIdYomiName, 
    TerritoryIdDsc, 
    TerritoryIdName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- linked address entities
    Address1_AddressId,
    Address1_AddressTypeCode,
    Address1_Name,
    Address1_PrimaryContactName,
    Address1_Line1,
    Address1_Line2,
    Address1_Line3,
    Address1_City,
    Address1_StateOrProvince,
    Address1_County,
    Address1_Country,
    Address1_PostOfficeBox,
    Address1_PostalCode,
    Address1_UTCOffset,
    Address1_FreightTermsCode,
    Address1_UPSZone,
    Address1_Latitude,
    Address1_Telephone1,
    Address1_Longitude,
    Address1_ShippingMethodCode,
    Address1_Telephone2,
    Address1_Telephone3,
    Address1_Fax,
    Address1_TimeZoneRuleVersionNumber,
    Address1_OverriddenCreatedOn,
    Address1_UTCConversionTimeZoneCode,
    Address1_ImportSequenceNumber,

    Address2_AddressId,
    Address2_AddressTypeCode,
    Address2_Name,
    Address2_PrimaryContactName,
    Address2_Line1,
    Address2_Line2,
    Address2_Line3,
    Address2_City,
    Address2_StateOrProvince,
    Address2_County,
    Address2_Country,
    Address2_PostOfficeBox,
    Address2_PostalCode,
    Address2_UTCOffset,
    Address2_FreightTermsCode,
    Address2_UPSZone,
    Address2_Latitude,
    Address2_Telephone1,
    Address2_Longitude,
    Address2_ShippingMethodCode,
    Address2_Telephone2,
    Address2_Telephone3,
    Address2_Fax,
    Address2_TimeZoneRuleVersionNumber,
    Address2_OverriddenCreatedOn,
    Address2_UTCConversionTimeZoneCode,
    Address2_ImportSequenceNumber,

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    AccountId,
    AccountCategoryCode,
    TerritoryId,
    DefaultPriceLevelId,
    CustomerSizeCode,
    PreferredContactMethodCode,
    CustomerTypeCode,
    AccountRatingCode,
    IndustryCode,
    TerritoryCode,
    AccountClassificationCode,
    DeletionStateCode,
    BusinessTypeCode,
    OwningBusinessUnit,
    OwningTeam,
    OwningUser,
    OriginatingLeadId,
    PaymentTermsCode,
    ShippingMethodCode,
    PrimaryContactId,
    ParticipatesInWorkflow,
    Name,
    AccountNumber,
    Revenue,
    NumberOfEmployees,
    Description,
    SIC,
    OwnershipCode,
    MarketCap,
    SharesOutstanding,
    TickerSymbol,
    StockExchange,
    WebSiteURL,
    FtpSiteURL,
    EMailAddress1,
    EMailAddress2,
    EMailAddress3,
    DoNotPhone,
    DoNotFax,
    Telephone1,
    DoNotEMail,
    Telephone2,
    Fax,
    Telephone3,
    DoNotPostalMail,
    DoNotBulkEMail,
    DoNotBulkPostalMail,
    CreditLimit,
    CreditOnHold,
    IsPrivate,
    CreatedOn,
    CreatedBy,
    ModifiedOn,
    ModifiedBy,
    VersionNumber,
    ParentAccountId,
    Aging30,
    StateCode,
    Aging60,
    StatusCode,
    Aging90,
    PreferredAppointmentDayCode,
    PreferredSystemUserId,
    PreferredAppointmentTimeCode,
    Merged,
    DoNotSendMM,
    MasterId,
    LastUsedInCampaign,
    PreferredServiceId,
    PreferredEquipmentId,
    ExchangeRate,
    UTCConversionTimeZoneCode,
    OverriddenCreatedOn,
    TimeZoneRuleVersionNumber,
    ImportSequenceNumber,
    TransactionCurrencyId,
    CreditLimit_Base,
    Aging30_Base,
    Revenue_Base,
    Aging90_Base,
    MarketCap_Base,
    Aging60_Base,
    YomiName
) with view_metadata as 
select 
    -- logical attributes
    lk_accountbase_createdby.DeletionStateCode, 
    lk_accountbase_createdby.FullName, 
    lk_accountbase_createdby.YomiFullName, 
    price_level_accounts.DeletionStateCode, 
    price_level_accounts.Name, 
    account_master_account.DeletionStateCode, 
    account_master_account.Name, 
    account_master_account.YomiName, 
    lk_accountbase_modifiedby.DeletionStateCode, 
    lk_accountbase_modifiedby.FullName, 
    lk_accountbase_modifiedby.YomiFullName, 
    account_originating_lead.DeletionStateCode, 
    account_originating_lead.FullName, 
    account_originating_lead.YomiFullName, 
    account_parent_account.DeletionStateCode, 
    account_parent_account.Name, 
    account_parent_account.YomiName, 
    equipment_accounts.DeletionStateCode, 
    equipment_accounts.Name, 
    service_accounts.DeletionStateCode, 
    service_accounts.Name, 
    system_user_accounts.DeletionStateCode, 
    system_user_accounts.FullName, 
    system_user_accounts.YomiFullName, 
    account_primary_contact.DeletionStateCode, 
    account_primary_contact.FullName, 
    account_primary_contact.YomiFullName, 
    territory_accounts.DeletionStateCode, 
    territory_accounts.Name, 
    transactioncurrency_account.DeletionStateCode, 
    transactioncurrency_account.CurrencyName, 

    -- linked address entities
    XXaddress1.CustomerAddressId,
    XXaddress1.AddressTypeCode,
    XXaddress1.Name,
    XXaddress1.PrimaryContactName,
    XXaddress1.Line1,
    XXaddress1.Line2,
    XXaddress1.Line3,
    XXaddress1.City,
    XXaddress1.StateOrProvince,
    XXaddress1.County,
    XXaddress1.Country,
    XXaddress1.PostOfficeBox,
    XXaddress1.PostalCode,
    XXaddress1.UTCOffset,
    XXaddress1.FreightTermsCode,
    XXaddress1.UPSZone,
    XXaddress1.Latitude,
    XXaddress1.Telephone1,
    XXaddress1.Longitude,
    XXaddress1.ShippingMethodCode,
    XXaddress1.Telephone2,
    XXaddress1.Telephone3,
    XXaddress1.Fax,
    XXaddress1.TimeZoneRuleVersionNumber,
    XXaddress1.OverriddenCreatedOn,
    XXaddress1.UTCConversionTimeZoneCode,
    XXaddress1.ImportSequenceNumber,

    XXaddress2.CustomerAddressId,
    XXaddress2.AddressTypeCode,
    XXaddress2.Name,
    XXaddress2.PrimaryContactName,
    XXaddress2.Line1,
    XXaddress2.Line2,
    XXaddress2.Line3,
    XXaddress2.City,
    XXaddress2.StateOrProvince,
    XXaddress2.County,
    XXaddress2.Country,
    XXaddress2.PostOfficeBox,
    XXaddress2.PostalCode,
    XXaddress2.UTCOffset,
    XXaddress2.FreightTermsCode,
    XXaddress2.UPSZone,
    XXaddress2.Latitude,
    XXaddress2.Telephone1,
    XXaddress2.Longitude,
    XXaddress2.ShippingMethodCode,
    XXaddress2.Telephone2,
    XXaddress2.Telephone3,
    XXaddress2.Fax,
    XXaddress2.TimeZoneRuleVersionNumber,
    XXaddress2.OverriddenCreatedOn,
    XXaddress2.UTCConversionTimeZoneCode,
    XXaddress2.ImportSequenceNumber,

    -- ownership entries
    OwnerId   = AccountBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when AccountBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    AccountBase.AccountId,
    AccountBase.AccountCategoryCode,
    AccountBase.TerritoryId,
    AccountBase.DefaultPriceLevelId,
    AccountBase.CustomerSizeCode,
    AccountBase.PreferredContactMethodCode,
    AccountBase.CustomerTypeCode,
    AccountBase.AccountRatingCode,
    AccountBase.IndustryCode,
    AccountBase.TerritoryCode,
    AccountBase.AccountClassificationCode,
    AccountBase.DeletionStateCode,
    AccountBase.BusinessTypeCode,
    AccountBase.OwningBusinessUnit,
    AccountBase.OwningTeam,
    AccountBase.OwningUser,
    AccountBase.OriginatingLeadId,
    AccountBase.PaymentTermsCode,
    AccountBase.ShippingMethodCode,
    AccountBase.PrimaryContactId,
    AccountBase.ParticipatesInWorkflow,
    AccountBase.Name,
    AccountBase.AccountNumber,
    AccountBase.Revenue,
    AccountBase.NumberOfEmployees,
    AccountBase.Description,
    AccountBase.SIC,
    AccountBase.OwnershipCode,
    AccountBase.MarketCap,
    AccountBase.SharesOutstanding,
    AccountBase.TickerSymbol,
    AccountBase.StockExchange,
    AccountBase.WebSiteURL,
    AccountBase.FtpSiteURL,
    AccountBase.EMailAddress1,
    AccountBase.EMailAddress2,
    AccountBase.EMailAddress3,
    AccountBase.DoNotPhone,
    AccountBase.DoNotFax,
    AccountBase.Telephone1,
    AccountBase.DoNotEMail,
    AccountBase.Telephone2,
    AccountBase.Fax,
    AccountBase.Telephone3,
    AccountBase.DoNotPostalMail,
    AccountBase.DoNotBulkEMail,
    AccountBase.DoNotBulkPostalMail,
    AccountBase.CreditLimit,
    AccountBase.CreditOnHold,
    AccountBase.IsPrivate,
    AccountBase.CreatedOn,
    AccountBase.CreatedBy,
    AccountBase.ModifiedOn,
    AccountBase.ModifiedBy,
    AccountBase.VersionNumber,
    AccountBase.ParentAccountId,
    AccountBase.Aging30,
    AccountBase.StateCode,
    AccountBase.Aging60,
    AccountBase.StatusCode,
    AccountBase.Aging90,
    AccountBase.PreferredAppointmentDayCode,
    AccountBase.PreferredSystemUserId,
    AccountBase.PreferredAppointmentTimeCode,
    AccountBase.Merged,
    AccountBase.DoNotSendMM,
    AccountBase.MasterId,
    AccountBase.LastUsedInCampaign,
    AccountBase.PreferredServiceId,
    AccountBase.PreferredEquipmentId,
    AccountBase.ExchangeRate,
    AccountBase.UTCConversionTimeZoneCode,
    AccountBase.OverriddenCreatedOn,
    AccountBase.TimeZoneRuleVersionNumber,
    AccountBase.ImportSequenceNumber,
    AccountBase.TransactionCurrencyId,
    AccountBase.CreditLimit_Base,
    AccountBase.Aging30_Base,
    AccountBase.Revenue_Base,
    AccountBase.Aging90_Base,
    AccountBase.MarketCap_Base,
    AccountBase.Aging60_Base,
    AccountBase.YomiName
from AccountBase

    left join CustomerAddressBase XXaddress1 on (AccountBase.AccountId = XXaddress1.ParentId and XXaddress1.AddressNumber = 1)
    left join CustomerAddressBase XXaddress2 on (AccountBase.AccountId = XXaddress2.ParentId and XXaddress2.AddressNumber = 2)
    left join AccountBase account_master_account on (AccountBase.MasterId = account_master_account.AccountId)
    left join LeadBase account_originating_lead on (AccountBase.OriginatingLeadId = account_originating_lead.LeadId)
    left join AccountBase account_parent_account on (AccountBase.ParentAccountId = account_parent_account.AccountId)
    left join ContactBase account_primary_contact on (AccountBase.PrimaryContactId = account_primary_contact.ContactId)
    left join EquipmentBase equipment_accounts on (AccountBase.PreferredEquipmentId = equipment_accounts.EquipmentId)
    left join SystemUserBase lk_accountbase_createdby with(nolock) on (AccountBase.CreatedBy = lk_accountbase_createdby.SystemUserId)
    left join SystemUserBase lk_accountbase_modifiedby with(nolock) on (AccountBase.ModifiedBy = lk_accountbase_modifiedby.SystemUserId)
    left join PriceLevelBase price_level_accounts on (AccountBase.DefaultPriceLevelId = price_level_accounts.PriceLevelId)
    left join ServiceBase service_accounts on (AccountBase.PreferredServiceId = service_accounts.ServiceId)
    left join SystemUserBase system_user_accounts with(nolock) on (AccountBase.PreferredSystemUserId = system_user_accounts.SystemUserId)
    left join TerritoryBase territory_accounts on (AccountBase.TerritoryId = territory_accounts.TerritoryId)
    left join TransactionCurrencyBase transactioncurrency_account on (AccountBase.TransactionCurrencyId = transactioncurrency_account.TransactionCurrencyId)
    left join SystemUserBase XXowninguser with(nolock) on (AccountBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Service]    Script Date: 04/11/2008 06:58:32 ******/




--
-- base view for Service
--
create view [dbo].[Service] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    ResourceSpecIdDsc, 
    ResourceSpecIdName, 

    -- physical attributes
    Name,
    OrganizationId,
    DeletionStateCode,
    ServiceId,
    ResourceSpecId,
    ModifiedBy,
    AnchorOffset,
    ModifiedOn,
    Duration,
    IsSchedulable,
    StrategyId,
    VersionNumber,
    CreatedBy,
    InitialStatusCode,
    CalendarId,
    ShowResources,
    Granularity,
    Description,
    CreatedOn,
    IsVisible,
    ImportSequenceNumber,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_service_createdby.DeletionStateCode, 
    lk_service_createdby.FullName, 
    lk_service_createdby.YomiFullName, 
    lk_service_modifiedby.DeletionStateCode, 
    lk_service_modifiedby.FullName, 
    lk_service_modifiedby.YomiFullName, 
    organization_services.DeletionStateCode, 
    organization_services.Name, 
    resource_spec_services.DeletionStateCode, 
    resource_spec_services.Name, 

    -- physical attributes
    ServiceBase.Name,
    ServiceBase.OrganizationId,
    ServiceBase.DeletionStateCode,
    ServiceBase.ServiceId,
    ServiceBase.ResourceSpecId,
    ServiceBase.ModifiedBy,
    ServiceBase.AnchorOffset,
    ServiceBase.ModifiedOn,
    ServiceBase.Duration,
    ServiceBase.IsSchedulable,
    ServiceBase.StrategyId,
    ServiceBase.VersionNumber,
    ServiceBase.CreatedBy,
    ServiceBase.InitialStatusCode,
    ServiceBase.CalendarId,
    ServiceBase.ShowResources,
    ServiceBase.Granularity,
    ServiceBase.Description,
    ServiceBase.CreatedOn,
    ServiceBase.IsVisible,
    ServiceBase.ImportSequenceNumber,
    ServiceBase.OverriddenCreatedOn
from ServiceBase
    left join SystemUserBase lk_service_createdby with(nolock) on (ServiceBase.CreatedBy = lk_service_createdby.SystemUserId)
    left join SystemUserBase lk_service_modifiedby with(nolock) on (ServiceBase.ModifiedBy = lk_service_modifiedby.SystemUserId)
    left join OrganizationBase organization_services on (ServiceBase.OrganizationId = organization_services.OrganizationId)
    left join ResourceSpecBase resource_spec_services on (ServiceBase.ResourceSpecId = resource_spec_services.ResourceSpecId)

/****** Object:  View [dbo].[CalendarRule]    Script Date: 04/11/2008 06:57:39 ******/




--
-- base view for CalendarRule
--
create view [dbo].[CalendarRule] (
    -- logical attributes
    BusinessUnitId, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationId, 
    ServiceIdDsc, 
    ServiceIdName, 

    -- physical attributes
    IsVaried,
    Rank,
    CreatedOn,
    ModifiedBy,
    Description,
    CalendarRuleId,
    Effort,
    EndTime,
    DeletionStateCode,
    TimeCode,
    StartTime,
    CreatedBy,
    VersionNumber,
    Offset,
    IsSimple,
    Name,
    TimeZoneCode,
    IsSelected,
    ExtentCode,
    EffectiveIntervalEnd,
    ModifiedOn,
    CalendarId,
    InnerCalendarId,
    Pattern,
    GroupDesignator,
    IsModified,
    SubCode,
    Duration,
    EffectiveIntervalStart,
    ServiceId
) with view_metadata as 
select 
    -- logical attributes
    calendar_calendar_rules.BusinessUnitId, 
    lk_calendarrule_createdby.DeletionStateCode, 
    lk_calendarrule_createdby.FullName, 
    lk_calendarrule_createdby.YomiFullName, 
    lk_calendarrule_modifiedby.DeletionStateCode, 
    lk_calendarrule_modifiedby.FullName, 
    lk_calendarrule_modifiedby.YomiFullName, 
    calendar_calendar_rules.OrganizationId, 
    service_calendar_rules.DeletionStateCode, 
    service_calendar_rules.Name, 

    -- physical attributes
    CalendarRuleBase.IsVaried,
    CalendarRuleBase.Rank,
    CalendarRuleBase.CreatedOn,
    CalendarRuleBase.ModifiedBy,
    CalendarRuleBase.Description,
    CalendarRuleBase.CalendarRuleId,
    CalendarRuleBase.Effort,
    CalendarRuleBase.EndTime,
    CalendarRuleBase.DeletionStateCode,
    CalendarRuleBase.TimeCode,
    CalendarRuleBase.StartTime,
    CalendarRuleBase.CreatedBy,
    CalendarRuleBase.VersionNumber,
    CalendarRuleBase.Offset,
    CalendarRuleBase.IsSimple,
    CalendarRuleBase.Name,
    CalendarRuleBase.TimeZoneCode,
    CalendarRuleBase.IsSelected,
    CalendarRuleBase.ExtentCode,
    CalendarRuleBase.EffectiveIntervalEnd,
    CalendarRuleBase.ModifiedOn,
    CalendarRuleBase.CalendarId,
    CalendarRuleBase.InnerCalendarId,
    CalendarRuleBase.Pattern,
    CalendarRuleBase.GroupDesignator,
    CalendarRuleBase.IsModified,
    CalendarRuleBase.SubCode,
    CalendarRuleBase.Duration,
    CalendarRuleBase.EffectiveIntervalStart,
    CalendarRuleBase.ServiceId
from CalendarRuleBase
    left join CalendarBase calendar_calendar_rules on (CalendarRuleBase.CalendarId = calendar_calendar_rules.CalendarId)
    left join SystemUserBase lk_calendarrule_createdby with(nolock) on (CalendarRuleBase.CreatedBy = lk_calendarrule_createdby.SystemUserId)
    left join SystemUserBase lk_calendarrule_modifiedby with(nolock) on (CalendarRuleBase.ModifiedBy = lk_calendarrule_modifiedby.SystemUserId)
    left join ServiceBase service_calendar_rules on (CalendarRuleBase.ServiceId = service_calendar_rules.ServiceId)

/****** Object:  View [dbo].[ActivityPointer]    Script Date: 04/11/2008 06:57:35 ******/




--
-- base view for ActivityPointer
--
create view [dbo].[ActivityPointer] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ServiceIdDsc, 
    ServiceIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    OwningBusinessUnit,
    ActualEnd,
    VersionNumber,
    ActivityId,
    IsBilled,
    CreatedBy,
    Description,
    DeletionStateCode,
    ModifiedOn,
    ServiceId,
    ActivityTypeCode,
    StateCode,
    ScheduledEnd,
    ScheduledDurationMinutes,
    ActualDurationMinutes,
    StatusCode,
    ActualStart,
    CreatedOn,
    PriorityCode,
    RegardingObjectId,
    Subject,
    IsWorkflowCreated,
    ScheduledStart,
    ModifiedBy,
    OwningUser,
    RegardingObjectTypeCode,
    RegardingObjectIdDsc,
    RegardingObjectIdName,
    TimeZoneRuleVersionNumber,
    UTCConversionTimeZoneCode,
    RegardingObjectIdYomiName
) with view_metadata as 
select 
    -- logical attributes
    lk_activitypointer_createdby.DeletionStateCode, 
    lk_activitypointer_createdby.FullName, 
    lk_activitypointer_createdby.YomiFullName, 
    lk_activitypointer_modifiedby.DeletionStateCode, 
    lk_activitypointer_modifiedby.FullName, 
    lk_activitypointer_modifiedby.YomiFullName, 
    service_activity_pointers.DeletionStateCode, 
    service_activity_pointers.Name, 

    -- ownership entries
    OwnerId   = ActivityPointerBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when ActivityPointerBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    ActivityPointerBase.OwningBusinessUnit,
    ActivityPointerBase.ActualEnd,
    ActivityPointerBase.VersionNumber,
    ActivityPointerBase.ActivityId,
    ActivityPointerBase.IsBilled,
    ActivityPointerBase.CreatedBy,
    ActivityPointerBase.Description,
    ActivityPointerBase.DeletionStateCode,
    ActivityPointerBase.ModifiedOn,
    ActivityPointerBase.ServiceId,
    ActivityPointerBase.ActivityTypeCode,
    ActivityPointerBase.StateCode,
    ActivityPointerBase.ScheduledEnd,
    ActivityPointerBase.ScheduledDurationMinutes,
    ActivityPointerBase.ActualDurationMinutes,
    ActivityPointerBase.StatusCode,
    ActivityPointerBase.ActualStart,
    ActivityPointerBase.CreatedOn,
    ActivityPointerBase.PriorityCode,
    ActivityPointerBase.RegardingObjectId,
    ActivityPointerBase.Subject,
    ActivityPointerBase.IsWorkflowCreated,
    ActivityPointerBase.ScheduledStart,
    ActivityPointerBase.ModifiedBy,
    ActivityPointerBase.OwningUser,
    ActivityPointerBase.RegardingObjectTypeCode,
    ActivityPointerBase.RegardingObjectIdDsc,
    ActivityPointerBase.RegardingObjectIdName,
    ActivityPointerBase.TimeZoneRuleVersionNumber,
    ActivityPointerBase.UTCConversionTimeZoneCode,
    ActivityPointerBase.RegardingObjectIdYomiName
from ActivityPointerBase
    left join SystemUserBase lk_activitypointer_createdby with(nolock) on (ActivityPointerBase.CreatedBy = lk_activitypointer_createdby.SystemUserId)
    left join SystemUserBase lk_activitypointer_modifiedby with(nolock) on (ActivityPointerBase.ModifiedBy = lk_activitypointer_modifiedby.SystemUserId)
    left join ServiceBase service_activity_pointers on (ActivityPointerBase.ServiceId = service_activity_pointers.ServiceId)
    left join SystemUserBase XXowninguser with(nolock) on (ActivityPointerBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[SdkMessageRequest]    Script Date: 04/11/2008 06:58:31 ******/




--
-- base view for SdkMessageRequest
--
create view [dbo].[SdkMessageRequest] (
    -- physical attributes
    CustomizationLevel,
    SdkMessagePairId,
    DeletionStateCode,
    ModifiedOn,
    ModifiedBy,
    OrganizationId,
    VersionNumber,
    SdkMessageRequestIdUnique,
    Name,
    CreatedOn,
    CreatedBy,
    SdkMessageRequestId
) with view_metadata as 
select 
    -- physical attributes
     T1.CustomizationLevel,
     T1.SdkMessagePairId,
     T1.DeletionStateCode,
     T1.ModifiedOn,
     T1.ModifiedBy,
     T1.OrganizationId,
     T1.VersionNumber,
     T1.SdkMessageRequestIdUnique,
     T1.Name,
     T1.CreatedOn,
     T1.CreatedBy,
     T1.SdkMessageRequestId
from SdkMessageRequestBase T1
         left outer join SdkMessageRequestBase T2 on (T1.SdkMessageRequestId=T2.SdkMessageRequestId
              AND T1.SdkMessageRequestIdUnique<>T2.SdkMessageRequestIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  View [dbo].[ActivityAttachment]    Script Date: 04/11/2008 06:57:34 ******/




--
-- base view for ActivityAttachment
--
create view [dbo].[ActivityAttachment] (
    -- logical attributes
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    AttachmentNumber,
    ActivityMimeAttachmentId,
    ActivityId,
    Body,
    Subject,
    FileSize,
    MimeType,
    FileName,
    VersionNumber
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_activity_mime_attachments.OwningBusinessUnit, 
    activity_pointer_activity_mime_attachments.OwningUser, 

    -- physical attributes
    ActivityMimeAttachment.AttachmentNumber,
    ActivityMimeAttachment.ActivityMimeAttachmentId,
    ActivityMimeAttachment.ActivityId,
    ActivityMimeAttachment.Body,
    ActivityMimeAttachment.Subject,
    ActivityMimeAttachment.FileSize,
    ActivityMimeAttachment.MimeType,
    ActivityMimeAttachment.FileName,
    ActivityMimeAttachment.VersionNumber
from ActivityMimeAttachment
    left join ActivityPointerBase activity_pointer_activity_mime_attachments on (ActivityMimeAttachment.ActivityId = activity_pointer_activity_mime_attachments.ActivityId)

/****** Object:  View [dbo].[Letter]    Script Date: 04/11/2008 06:58:19 ******/




--
-- base view for Letter
--
create view [dbo].[Letter] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    PriorityCode, 
    RegardingObjectId, 
    RegardingObjectIdDsc, 
    RegardingObjectIdName, 
    RegardingObjectIdYomiName, 
    RegardingObjectTypeCode, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    DirectionCode,
    Address,
    Subcategory,
    ActivityId,
    Category,
    ImportSequenceNumber,
    OverriddenCreatedOn,
    SubscriptionId
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_letter.ActualDurationMinutes, 
    activity_pointer_letter.ActualEnd, 
    activity_pointer_letter.ActualStart, 
    activity_pointer_letter.CreatedBy, 
    lk_letter_createdby.DeletionStateCode, 
    lk_letter_createdby.FullName, 
    lk_letter_createdby.YomiFullName, 
    activity_pointer_letter.CreatedOn, 
    activity_pointer_letter.DeletionStateCode, 
    activity_pointer_letter.Description, 
    activity_pointer_letter.IsBilled, 
    activity_pointer_letter.IsWorkflowCreated, 
    activity_pointer_letter.ModifiedBy, 
    lk_letter_modifiedby.DeletionStateCode, 
    lk_letter_modifiedby.FullName, 
    lk_letter_modifiedby.YomiFullName, 
    activity_pointer_letter.ModifiedOn, 
    activity_pointer_letter.OwningBusinessUnit, 
    activity_pointer_letter.OwningUser, 
    activity_pointer_letter.PriorityCode, 
    activity_pointer_letter.RegardingObjectId, 
    activity_pointer_letter.RegardingObjectIdDsc, 
    activity_pointer_letter.RegardingObjectIdName, 
    activity_pointer_letter.RegardingObjectIdYomiName, 
    activity_pointer_letter.RegardingObjectTypeCode, 
    activity_pointer_letter.ScheduledDurationMinutes, 
    activity_pointer_letter.ScheduledEnd, 
    activity_pointer_letter.ScheduledStart, 
    activity_pointer_letter.ServiceId, 
    activity_pointer_letter.StateCode, 
    activity_pointer_letter.StatusCode, 
    activity_pointer_letter.Subject, 
    activity_pointer_letter.TimeZoneRuleVersionNumber, 
    activity_pointer_letter.UTCConversionTimeZoneCode, 
    activity_pointer_letter.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_letter.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_letter.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    LetterBase.DirectionCode,
    LetterBase.Address,
    LetterBase.Subcategory,
    LetterBase.ActivityId,
    LetterBase.Category,
    LetterBase.ImportSequenceNumber,
    LetterBase.OverriddenCreatedOn,
    LetterBase.SubscriptionId
from LetterBase
    left join ActivityPointerBase activity_pointer_letter on (LetterBase.ActivityId = activity_pointer_letter.ActivityId and activity_pointer_letter.ActivityTypeCode = 4207)
    left join SystemUserBase lk_letter_createdby with(nolock) on (activity_pointer_letter.CreatedBy = lk_letter_createdby.SystemUserId)
    left join SystemUserBase lk_letter_modifiedby with(nolock) on (activity_pointer_letter.ModifiedBy = lk_letter_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_letter.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Fax]    Script Date: 04/11/2008 06:57:46 ******/




--
-- base view for Fax
--
create view [dbo].[Fax] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    PriorityCode, 
    RegardingObjectId, 
    RegardingObjectIdDsc, 
    RegardingObjectIdName, 
    RegardingObjectIdYomiName, 
    RegardingObjectTypeCode, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    CoverPageName,
    BillingCode,
    NumberOfPages,
    FaxNumber,
    Category,
    Tsid,
    DirectionCode,
    ActivityId,
    Subcategory,
    OverriddenCreatedOn,
    SubscriptionId,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_fax.ActualDurationMinutes, 
    activity_pointer_fax.ActualEnd, 
    activity_pointer_fax.ActualStart, 
    activity_pointer_fax.CreatedBy, 
    lk_fax_createdby.DeletionStateCode, 
    lk_fax_createdby.FullName, 
    lk_fax_createdby.YomiFullName, 
    activity_pointer_fax.CreatedOn, 
    activity_pointer_fax.DeletionStateCode, 
    activity_pointer_fax.Description, 
    activity_pointer_fax.IsBilled, 
    activity_pointer_fax.IsWorkflowCreated, 
    activity_pointer_fax.ModifiedBy, 
    lk_fax_modifiedby.DeletionStateCode, 
    lk_fax_modifiedby.FullName, 
    lk_fax_modifiedby.YomiFullName, 
    activity_pointer_fax.ModifiedOn, 
    activity_pointer_fax.OwningBusinessUnit, 
    activity_pointer_fax.OwningUser, 
    activity_pointer_fax.PriorityCode, 
    activity_pointer_fax.RegardingObjectId, 
    activity_pointer_fax.RegardingObjectIdDsc, 
    activity_pointer_fax.RegardingObjectIdName, 
    activity_pointer_fax.RegardingObjectIdYomiName, 
    activity_pointer_fax.RegardingObjectTypeCode, 
    activity_pointer_fax.ScheduledDurationMinutes, 
    activity_pointer_fax.ScheduledEnd, 
    activity_pointer_fax.ScheduledStart, 
    activity_pointer_fax.ServiceId, 
    activity_pointer_fax.StateCode, 
    activity_pointer_fax.StatusCode, 
    activity_pointer_fax.Subject, 
    activity_pointer_fax.TimeZoneRuleVersionNumber, 
    activity_pointer_fax.UTCConversionTimeZoneCode, 
    activity_pointer_fax.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_fax.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_fax.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    FaxBase.CoverPageName,
    FaxBase.BillingCode,
    FaxBase.NumberOfPages,
    FaxBase.FaxNumber,
    FaxBase.Category,
    FaxBase.Tsid,
    FaxBase.DirectionCode,
    FaxBase.ActivityId,
    FaxBase.Subcategory,
    FaxBase.OverriddenCreatedOn,
    FaxBase.SubscriptionId,
    FaxBase.ImportSequenceNumber
from FaxBase
    left join ActivityPointerBase activity_pointer_fax on (FaxBase.ActivityId = activity_pointer_fax.ActivityId and activity_pointer_fax.ActivityTypeCode = 4204)
    left join SystemUserBase lk_fax_createdby with(nolock) on (activity_pointer_fax.CreatedBy = lk_fax_createdby.SystemUserId)
    left join SystemUserBase lk_fax_modifiedby with(nolock) on (activity_pointer_fax.ModifiedBy = lk_fax_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_fax.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[PhoneCall]    Script Date: 04/11/2008 06:58:23 ******/




--
-- base view for PhoneCall
--
create view [dbo].[PhoneCall] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    PriorityCode, 
    RegardingObjectId, 
    RegardingObjectIdDsc, 
    RegardingObjectIdName, 
    RegardingObjectIdYomiName, 
    RegardingObjectTypeCode, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    ActivityId,
    PhoneNumber,
    DirectionCode,
    Category,
    Subcategory,
    ImportSequenceNumber,
    OverriddenCreatedOn,
    SubscriptionId,
    New_Month
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_phonecall.ActualDurationMinutes, 
    activity_pointer_phonecall.ActualEnd, 
    activity_pointer_phonecall.ActualStart, 
    activity_pointer_phonecall.CreatedBy, 
    lk_phonecall_createdby.DeletionStateCode, 
    lk_phonecall_createdby.FullName, 
    lk_phonecall_createdby.YomiFullName, 
    activity_pointer_phonecall.CreatedOn, 
    activity_pointer_phonecall.DeletionStateCode, 
    activity_pointer_phonecall.Description, 
    activity_pointer_phonecall.IsBilled, 
    activity_pointer_phonecall.IsWorkflowCreated, 
    activity_pointer_phonecall.ModifiedBy, 
    lk_phonecall_modifiedby.DeletionStateCode, 
    lk_phonecall_modifiedby.FullName, 
    lk_phonecall_modifiedby.YomiFullName, 
    activity_pointer_phonecall.ModifiedOn, 
    activity_pointer_phonecall.OwningBusinessUnit, 
    activity_pointer_phonecall.OwningUser, 
    activity_pointer_phonecall.PriorityCode, 
    activity_pointer_phonecall.RegardingObjectId, 
    activity_pointer_phonecall.RegardingObjectIdDsc, 
    activity_pointer_phonecall.RegardingObjectIdName, 
    activity_pointer_phonecall.RegardingObjectIdYomiName, 
    activity_pointer_phonecall.RegardingObjectTypeCode, 
    activity_pointer_phonecall.ScheduledDurationMinutes, 
    activity_pointer_phonecall.ScheduledEnd, 
    activity_pointer_phonecall.ScheduledStart, 
    activity_pointer_phonecall.ServiceId, 
    activity_pointer_phonecall.StateCode, 
    activity_pointer_phonecall.StatusCode, 
    activity_pointer_phonecall.Subject, 
    activity_pointer_phonecall.TimeZoneRuleVersionNumber, 
    activity_pointer_phonecall.UTCConversionTimeZoneCode, 
    activity_pointer_phonecall.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_phonecall.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_phonecall.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    PhoneCallBase.ActivityId,
    PhoneCallBase.PhoneNumber,
    PhoneCallBase.DirectionCode,
    PhoneCallBase.Category,
    PhoneCallBase.Subcategory,
    PhoneCallBase.ImportSequenceNumber,
    PhoneCallBase.OverriddenCreatedOn,
    PhoneCallBase.SubscriptionId,
        PhoneCallExtensionBase.New_Month
from PhoneCallBase
    left join PhoneCallExtensionBase on (PhoneCallBase.ActivityId = PhoneCallExtensionBase.ActivityId)
    left join ActivityPointerBase activity_pointer_phonecall on (PhoneCallBase.ActivityId = activity_pointer_phonecall.ActivityId and activity_pointer_phonecall.ActivityTypeCode = 4210)
    left join SystemUserBase lk_phonecall_createdby with(nolock) on (activity_pointer_phonecall.CreatedBy = lk_phonecall_createdby.SystemUserId)
    left join SystemUserBase lk_phonecall_modifiedby with(nolock) on (activity_pointer_phonecall.ModifiedBy = lk_phonecall_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_phonecall.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[IncidentResolution]    Script Date: 04/11/2008 06:58:17 ******/




--
-- base view for IncidentResolution
--
create view [dbo].[IncidentResolution] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IncidentId, 
    IncidentIdDsc, 
    IncidentIdName, 
    IncidentIdType, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    Category,
    ActivityId,
    TimeSpent,
    Subcategory,
    ImportSequenceNumber,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_incident_resolution.ActualDurationMinutes, 
    activity_pointer_incident_resolution.ActualEnd, 
    activity_pointer_incident_resolution.ActualStart, 
    activity_pointer_incident_resolution.CreatedBy, 
    lk_incidentresolution_createdby.DeletionStateCode, 
    lk_incidentresolution_createdby.FullName, 
    lk_incidentresolution_createdby.YomiFullName, 
    activity_pointer_incident_resolution.CreatedOn, 
    activity_pointer_incident_resolution.DeletionStateCode, 
    activity_pointer_incident_resolution.Description, 
    activity_pointer_incident_resolution.RegardingObjectId, 
    activity_pointer_incident_resolution.RegardingObjectIdDsc, 
    activity_pointer_incident_resolution.RegardingObjectIdName, 
    activity_pointer_incident_resolution.RegardingObjectTypeCode, 
    activity_pointer_incident_resolution.IsBilled, 
    activity_pointer_incident_resolution.IsWorkflowCreated, 
    activity_pointer_incident_resolution.ModifiedBy, 
    lk_incidentresolution_modifiedby.DeletionStateCode, 
    lk_incidentresolution_modifiedby.FullName, 
    lk_incidentresolution_modifiedby.YomiFullName, 
    activity_pointer_incident_resolution.ModifiedOn, 
    activity_pointer_incident_resolution.OwningBusinessUnit, 
    activity_pointer_incident_resolution.OwningUser, 
    activity_pointer_incident_resolution.ScheduledDurationMinutes, 
    activity_pointer_incident_resolution.ScheduledEnd, 
    activity_pointer_incident_resolution.ScheduledStart, 
    activity_pointer_incident_resolution.ServiceId, 
    activity_pointer_incident_resolution.StateCode, 
    activity_pointer_incident_resolution.StatusCode, 
    activity_pointer_incident_resolution.Subject, 
    activity_pointer_incident_resolution.TimeZoneRuleVersionNumber, 
    activity_pointer_incident_resolution.UTCConversionTimeZoneCode, 
    activity_pointer_incident_resolution.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_incident_resolution.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_incident_resolution.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    IncidentResolutionBase.Category,
    IncidentResolutionBase.ActivityId,
    IncidentResolutionBase.TimeSpent,
    IncidentResolutionBase.Subcategory,
    IncidentResolutionBase.ImportSequenceNumber,
    IncidentResolutionBase.OverriddenCreatedOn
from IncidentResolutionBase
    left join ActivityPointerBase activity_pointer_incident_resolution on (IncidentResolutionBase.ActivityId = activity_pointer_incident_resolution.ActivityId and activity_pointer_incident_resolution.ActivityTypeCode = 4206)
    left join SystemUserBase lk_incidentresolution_createdby with(nolock) on (activity_pointer_incident_resolution.CreatedBy = lk_incidentresolution_createdby.SystemUserId)
    left join SystemUserBase lk_incidentresolution_modifiedby with(nolock) on (activity_pointer_incident_resolution.ModifiedBy = lk_incidentresolution_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_incident_resolution.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[CampaignActivityItem]    Script Date: 04/11/2008 06:57:40 ******/




--
-- base view for CampaignActivityItem
--
create view [dbo].[CampaignActivityItem] (
    -- logical attributes
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    ItemId,
    ItemObjectTypeCode,
    CampaignActivityItemId,
    VersionNumber,
    CampaignActivityId
) with view_metadata as 
select 
    -- logical attributes
    ActivityPointer_CampaignActivityItems.OwningBusinessUnit, 
    ActivityPointer_CampaignActivityItems.OwningUser, 

    -- physical attributes
    CampaignActivityItemBase.ItemId,
    CampaignActivityItemBase.ItemObjectTypeCode,
    CampaignActivityItemBase.CampaignActivityItemId,
    CampaignActivityItemBase.VersionNumber,
    CampaignActivityItemBase.CampaignActivityId
from CampaignActivityItemBase
    left join ActivityPointerBase ActivityPointer_CampaignActivityItems on (CampaignActivityItemBase.CampaignActivityId = ActivityPointer_CampaignActivityItems.ActivityId)

/****** Object:  View [dbo].[OrderClose]    Script Date: 04/11/2008 06:58:22 ******/




--
-- base view for OrderClose
--
create view [dbo].[OrderClose] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    SalesOrderId, 
    SalesOrderIdDsc, 
    SalesOrderIdName, 
    SalesOrderIdType, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    OrderNumber,
    Subcategory,
    Revision,
    ActivityId,
    Category,
    ImportSequenceNumber,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_order_close.ActualDurationMinutes, 
    activity_pointer_order_close.ActualEnd, 
    activity_pointer_order_close.ActualStart, 
    activity_pointer_order_close.CreatedBy, 
    lk_orderclose_createdby.DeletionStateCode, 
    lk_orderclose_createdby.FullName, 
    lk_orderclose_createdby.YomiFullName, 
    activity_pointer_order_close.CreatedOn, 
    activity_pointer_order_close.DeletionStateCode, 
    activity_pointer_order_close.Description, 
    activity_pointer_order_close.IsBilled, 
    activity_pointer_order_close.IsWorkflowCreated, 
    activity_pointer_order_close.ModifiedBy, 
    lk_orderclose_modifiedby.DeletionStateCode, 
    lk_orderclose_modifiedby.FullName, 
    lk_orderclose_modifiedby.YomiFullName, 
    activity_pointer_order_close.ModifiedOn, 
    activity_pointer_order_close.OwningBusinessUnit, 
    activity_pointer_order_close.OwningUser, 
    activity_pointer_order_close.RegardingObjectId, 
    activity_pointer_order_close.RegardingObjectIdDsc, 
    activity_pointer_order_close.RegardingObjectIdName, 
    activity_pointer_order_close.RegardingObjectTypeCode, 
    activity_pointer_order_close.ScheduledDurationMinutes, 
    activity_pointer_order_close.ScheduledEnd, 
    activity_pointer_order_close.ScheduledStart, 
    activity_pointer_order_close.ServiceId, 
    activity_pointer_order_close.StateCode, 
    activity_pointer_order_close.StatusCode, 
    activity_pointer_order_close.Subject, 
    activity_pointer_order_close.TimeZoneRuleVersionNumber, 
    activity_pointer_order_close.UTCConversionTimeZoneCode, 
    activity_pointer_order_close.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_order_close.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_order_close.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    OrderCloseBase.OrderNumber,
    OrderCloseBase.Subcategory,
    OrderCloseBase.Revision,
    OrderCloseBase.ActivityId,
    OrderCloseBase.Category,
    OrderCloseBase.ImportSequenceNumber,
    OrderCloseBase.OverriddenCreatedOn
from OrderCloseBase
    left join ActivityPointerBase activity_pointer_order_close on (OrderCloseBase.ActivityId = activity_pointer_order_close.ActivityId and activity_pointer_order_close.ActivityTypeCode = 4209)
    left join SystemUserBase lk_orderclose_createdby with(nolock) on (activity_pointer_order_close.CreatedBy = lk_orderclose_createdby.SystemUserId)
    left join SystemUserBase lk_orderclose_modifiedby with(nolock) on (activity_pointer_order_close.ModifiedBy = lk_orderclose_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_order_close.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Task]    Script Date: 04/11/2008 06:58:33 ******/




--
-- base view for Task
--
create view [dbo].[Task] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    PriorityCode, 
    RegardingObjectId, 
    RegardingObjectIdDsc, 
    RegardingObjectIdName, 
    RegardingObjectIdYomiName, 
    RegardingObjectTypeCode, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    ActivityId,
    Category,
    Subcategory,
    PercentComplete,
    SubscriptionId,
    ImportSequenceNumber,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_task.ActualDurationMinutes, 
    activity_pointer_task.ActualEnd, 
    activity_pointer_task.ActualStart, 
    activity_pointer_task.CreatedBy, 
    lk_task_createdby.DeletionStateCode, 
    lk_task_createdby.FullName, 
    lk_task_createdby.YomiFullName, 
    activity_pointer_task.CreatedOn, 
    activity_pointer_task.DeletionStateCode, 
    activity_pointer_task.Description, 
    activity_pointer_task.IsBilled, 
    activity_pointer_task.IsWorkflowCreated, 
    activity_pointer_task.ModifiedBy, 
    lk_task_modifiedby.DeletionStateCode, 
    lk_task_modifiedby.FullName, 
    lk_task_modifiedby.YomiFullName, 
    activity_pointer_task.ModifiedOn, 
    activity_pointer_task.OwningBusinessUnit, 
    activity_pointer_task.OwningUser, 
    activity_pointer_task.PriorityCode, 
    activity_pointer_task.RegardingObjectId, 
    activity_pointer_task.RegardingObjectIdDsc, 
    activity_pointer_task.RegardingObjectIdName, 
    activity_pointer_task.RegardingObjectIdYomiName, 
    activity_pointer_task.RegardingObjectTypeCode, 
    activity_pointer_task.ScheduledDurationMinutes, 
    activity_pointer_task.ScheduledEnd, 
    activity_pointer_task.ScheduledStart, 
    activity_pointer_task.ServiceId, 
    activity_pointer_task.StateCode, 
    activity_pointer_task.StatusCode, 
    activity_pointer_task.Subject, 
    activity_pointer_task.TimeZoneRuleVersionNumber, 
    activity_pointer_task.UTCConversionTimeZoneCode, 
    activity_pointer_task.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_task.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_task.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    TaskBase.ActivityId,
    TaskBase.Category,
    TaskBase.Subcategory,
    TaskBase.PercentComplete,
    TaskBase.SubscriptionId,
    TaskBase.ImportSequenceNumber,
    TaskBase.OverriddenCreatedOn
from TaskBase
    left join ActivityPointerBase activity_pointer_task on (TaskBase.ActivityId = activity_pointer_task.ActivityId and activity_pointer_task.ActivityTypeCode = 4212)
    left join SystemUserBase lk_task_createdby with(nolock) on (activity_pointer_task.CreatedBy = lk_task_createdby.SystemUserId)
    left join SystemUserBase lk_task_modifiedby with(nolock) on (activity_pointer_task.ModifiedBy = lk_task_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_task.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Email]    Script Date: 04/11/2008 06:57:44 ******/




--
-- base view for Email
--
create view [dbo].[Email] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    PriorityCode, 
    RegardingObjectId, 
    RegardingObjectIdDsc, 
    RegardingObjectIdName, 
    RegardingObjectIdYomiName, 
    RegardingObjectTypeCode, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    SubmittedBy,
    ActivityId,
    MimeType,
    ReadReceiptRequested,
    Subcategory,
    DirectionCode,
    TrackingToken,
    Category,
    Sender,
    ToRecipients,
    DeliveryReceiptRequested,
    MessageId,
    OverriddenCreatedOn,
    ImportSequenceNumber,
    DeliveryAttempts,
    MessageIdDupCheck,
    Compressed,
    Notifications
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_email.ActualDurationMinutes, 
    activity_pointer_email.ActualEnd, 
    activity_pointer_email.ActualStart, 
    activity_pointer_email.CreatedBy, 
    lk_email_createdby.DeletionStateCode, 
    lk_email_createdby.FullName, 
    lk_email_createdby.YomiFullName, 
    activity_pointer_email.CreatedOn, 
    activity_pointer_email.DeletionStateCode, 
    activity_pointer_email.Description, 
    activity_pointer_email.IsBilled, 
    activity_pointer_email.IsWorkflowCreated, 
    activity_pointer_email.ModifiedBy, 
    lk_email_modifiedby.DeletionStateCode, 
    lk_email_modifiedby.FullName, 
    lk_email_modifiedby.YomiFullName, 
    activity_pointer_email.ModifiedOn, 
    activity_pointer_email.OwningBusinessUnit, 
    activity_pointer_email.OwningUser, 
    activity_pointer_email.PriorityCode, 
    activity_pointer_email.RegardingObjectId, 
    activity_pointer_email.RegardingObjectIdDsc, 
    activity_pointer_email.RegardingObjectIdName, 
    activity_pointer_email.RegardingObjectIdYomiName, 
    activity_pointer_email.RegardingObjectTypeCode, 
    activity_pointer_email.ScheduledDurationMinutes, 
    activity_pointer_email.ScheduledEnd, 
    activity_pointer_email.ScheduledStart, 
    activity_pointer_email.ServiceId, 
    activity_pointer_email.StateCode, 
    activity_pointer_email.StatusCode, 
    activity_pointer_email.Subject, 
    activity_pointer_email.TimeZoneRuleVersionNumber, 
    activity_pointer_email.UTCConversionTimeZoneCode, 
    activity_pointer_email.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_email.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_email.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    EmailBase.SubmittedBy,
    EmailBase.ActivityId,
    EmailBase.MimeType,
    EmailBase.ReadReceiptRequested,
    EmailBase.Subcategory,
    EmailBase.DirectionCode,
    EmailBase.TrackingToken,
    EmailBase.Category,
    EmailBase.Sender,
    EmailBase.ToRecipients,
    EmailBase.DeliveryReceiptRequested,
    EmailBase.MessageId,
    EmailBase.OverriddenCreatedOn,
    EmailBase.ImportSequenceNumber,
    EmailBase.DeliveryAttempts,
    EmailBase.MessageIdDupCheck,
    EmailBase.Compressed,
    EmailBase.Notifications
from EmailBase
    left join ActivityPointerBase activity_pointer_email on (EmailBase.ActivityId = activity_pointer_email.ActivityId and activity_pointer_email.ActivityTypeCode = 4202)
    left join SystemUserBase lk_email_createdby with(nolock) on (activity_pointer_email.CreatedBy = lk_email_createdby.SystemUserId)
    left join SystemUserBase lk_email_modifiedby with(nolock) on (activity_pointer_email.ModifiedBy = lk_email_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_email.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[CampaignResponse]    Script Date: 04/11/2008 06:57:40 ******/




--
-- base view for CampaignResponse
--
create view [dbo].[CampaignResponse] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OriginatingActivityDsc, 
    OriginatingActivityName, 
    OwningBusinessUnit, 
    OwningUser, 
    PriorityCode, 
    RegardingObjectId, 
    RegardingObjectIdDsc, 
    RegardingObjectIdName, 
    RegardingObjectIdYomiName, 
    RegardingObjectTypeCode, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    LastName,
    PromotionCodeName,
    Fax,
    Category,
    Telephone,
    ResponseCode,
    Subcategory,
    CompanyName,
    ChannelTypeCode,
    FirstName,
    ActivityId,
    EMailAddress,
    ReceivedOn,
    OriginatingActivityId,
    OriginatingActivityIdTypeCode,
    OverriddenCreatedOn,
    ImportSequenceNumber,
    YomiLastName,
    YomiFirstName,
    YomiCompanyName
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_campaignresponse.ActualDurationMinutes, 
    activity_pointer_campaignresponse.ActualEnd, 
    activity_pointer_campaignresponse.ActualStart, 
    activity_pointer_campaignresponse.CreatedBy, 
    lk_campaignresponse_createdby.DeletionStateCode, 
    lk_campaignresponse_createdby.FullName, 
    lk_campaignresponse_createdby.YomiFullName, 
    activity_pointer_campaignresponse.CreatedOn, 
    activity_pointer_campaignresponse.DeletionStateCode, 
    activity_pointer_campaignresponse.Description, 
    activity_pointer_campaignresponse.IsBilled, 
    activity_pointer_campaignresponse.IsWorkflowCreated, 
    activity_pointer_campaignresponse.ModifiedBy, 
    lk_campaignresponse_modifiedby.DeletionStateCode, 
    lk_campaignresponse_modifiedby.FullName, 
    lk_campaignresponse_modifiedby.YomiFullName, 
    activity_pointer_campaignresponse.ModifiedOn, 
    activity_campaignresponse.DeletionStateCode, 
    activity_campaignresponse.Subject, 
    activity_pointer_campaignresponse.OwningBusinessUnit, 
    activity_pointer_campaignresponse.OwningUser, 
    activity_pointer_campaignresponse.PriorityCode, 
    activity_pointer_campaignresponse.RegardingObjectId, 
    activity_pointer_campaignresponse.RegardingObjectIdDsc, 
    activity_pointer_campaignresponse.RegardingObjectIdName, 
    activity_pointer_campaignresponse.RegardingObjectIdYomiName, 
    activity_pointer_campaignresponse.RegardingObjectTypeCode, 
    activity_pointer_campaignresponse.ScheduledDurationMinutes, 
    activity_pointer_campaignresponse.ScheduledEnd, 
    activity_pointer_campaignresponse.ScheduledStart, 
    activity_pointer_campaignresponse.ServiceId, 
    activity_pointer_campaignresponse.StateCode, 
    activity_pointer_campaignresponse.StatusCode, 
    activity_pointer_campaignresponse.Subject, 
    activity_pointer_campaignresponse.TimeZoneRuleVersionNumber, 
    activity_pointer_campaignresponse.UTCConversionTimeZoneCode, 
    activity_pointer_campaignresponse.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_campaignresponse.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_campaignresponse.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    CampaignResponseBase.LastName,
    CampaignResponseBase.PromotionCodeName,
    CampaignResponseBase.Fax,
    CampaignResponseBase.Category,
    CampaignResponseBase.Telephone,
    CampaignResponseBase.ResponseCode,
    CampaignResponseBase.Subcategory,
    CampaignResponseBase.CompanyName,
    CampaignResponseBase.ChannelTypeCode,
    CampaignResponseBase.FirstName,
    CampaignResponseBase.ActivityId,
    CampaignResponseBase.EMailAddress,
    CampaignResponseBase.ReceivedOn,
    CampaignResponseBase.OriginatingActivityId,
    CampaignResponseBase.OriginatingActivityIdTypeCode,
    CampaignResponseBase.OverriddenCreatedOn,
    CampaignResponseBase.ImportSequenceNumber,
    CampaignResponseBase.YomiLastName,
    CampaignResponseBase.YomiFirstName,
    CampaignResponseBase.YomiCompanyName
from CampaignResponseBase
    left join ActivityPointerBase activity_campaignresponse on (CampaignResponseBase.OriginatingActivityId = activity_campaignresponse.ActivityId)
    left join ActivityPointerBase activity_pointer_campaignresponse on (CampaignResponseBase.ActivityId = activity_pointer_campaignresponse.ActivityId and activity_pointer_campaignresponse.ActivityTypeCode = 4401)
    left join SystemUserBase lk_campaignresponse_createdby with(nolock) on (activity_pointer_campaignresponse.CreatedBy = lk_campaignresponse_createdby.SystemUserId)
    left join SystemUserBase lk_campaignresponse_modifiedby with(nolock) on (activity_pointer_campaignresponse.ModifiedBy = lk_campaignresponse_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_campaignresponse.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[EmailHash]    Script Date: 04/11/2008 06:57:44 ******/




--
-- base view for EmailHash
--
create view [dbo].[EmailHash] (
    -- logical attributes
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    HashType,
    Hash,
    EmailHashId,
    ActivityId,
    VersionNumber
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_email_hash.OwningBusinessUnit, 
    activity_pointer_email_hash.OwningUser, 

    -- physical attributes
    EmailHashBase.HashType,
    EmailHashBase.Hash,
    EmailHashBase.EmailHashId,
    EmailHashBase.ActivityId,
    EmailHashBase.VersionNumber
from EmailHashBase
    left join ActivityPointerBase activity_pointer_email_hash on (EmailHashBase.ActivityId = activity_pointer_email_hash.ActivityId)

/****** Object:  View [dbo].[Commitment]    Script Date: 04/11/2008 06:57:40 ******/




create view [dbo].[Commitment] (
    CommitmentId,
    ActivityId, 
    ActivityTypeCode, 
    PartyId, 
    PartyObjectTypeCode, 
    ParticipationTypeMask, 
    Effort,
    ResourceSpecId,
    ServiceId,
    StateCode,
    StatusCode,
    ScheduledStart,
    ScheduledEnd,
    Subject
) as 
select
    ActivityPartyBase.ActivityPartyId,
    ActivityPartyBase.ActivityId, 
    ActivityPointerBase.ActivityTypeCode,
    ActivityPartyBase.PartyId, 
    ActivityPartyBase.PartyObjectTypeCode, 
    ActivityPartyBase.ParticipationTypeMask, 
    ActivityPartyBase.Effort,
    ActivityPartyBase.ResourceSpecId,
    ActivityPointerBase.ServiceId,
    ActivityPointerBase.StateCode,
    ActivityPointerBase.StatusCode,
    ActivityPointerBase.ScheduledStart,
    ActivityPointerBase.ScheduledEnd,
    ActivityPointerBase.Subject
from 
    ActivityPartyBase join
    ActivityPointerBase on ActivityPartyBase.ActivityId = ActivityPointerBase.ActivityId 
where ActivityPointerBase.DeletionStateCode = 0
    and (ActivityPointerBase.ActivityTypeCode = 4214 or ActivityPointerBase.ActivityTypeCode = 4201)
    and (ActivityPartyBase.ParticipationTypeMask = 5
               or ActivityPartyBase.ParticipationTypeMask = 7
               or ActivityPartyBase.ParticipationTypeMask = 10)

/****** Object:  View [dbo].[Appointment]    Script Date: 04/11/2008 06:57:35 ******/




--
-- base view for Appointment
--
create view [dbo].[Appointment] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    DeletionStateCode, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    PriorityCode, 
    RegardingObjectId, 
    RegardingObjectIdDsc, 
    RegardingObjectIdName, 
    RegardingObjectIdYomiName, 
    RegardingObjectTypeCode, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    IsAllDayEvent,
    Category,
    GlobalObjectId,
    OutlookOwnerApptId,
    Location,
    SubscriptionId,
    ActivityId,
    Subcategory,
    OverriddenCreatedOn,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_appointment.ActualDurationMinutes, 
    activity_pointer_appointment.ActualEnd, 
    activity_pointer_appointment.ActualStart, 
    activity_pointer_appointment.CreatedBy, 
    lk_appointment_createdby.DeletionStateCode, 
    lk_appointment_createdby.FullName, 
    lk_appointment_createdby.YomiFullName, 
    activity_pointer_appointment.CreatedOn, 
    activity_pointer_appointment.DeletionStateCode, 
    activity_pointer_appointment.Description, 
    activity_pointer_appointment.IsBilled, 
    activity_pointer_appointment.IsWorkflowCreated, 
    activity_pointer_appointment.ModifiedBy, 
    lk_appointment_modifiedby.DeletionStateCode, 
    lk_appointment_modifiedby.FullName, 
    lk_appointment_modifiedby.YomiFullName, 
    activity_pointer_appointment.ModifiedOn, 
    activity_pointer_appointment.OwningBusinessUnit, 
    activity_pointer_appointment.OwningUser, 
    activity_pointer_appointment.PriorityCode, 
    activity_pointer_appointment.RegardingObjectId, 
    activity_pointer_appointment.RegardingObjectIdDsc, 
    activity_pointer_appointment.RegardingObjectIdName, 
    activity_pointer_appointment.RegardingObjectIdYomiName, 
    activity_pointer_appointment.RegardingObjectTypeCode, 
    activity_pointer_appointment.ScheduledDurationMinutes, 
    activity_pointer_appointment.ScheduledEnd, 
    activity_pointer_appointment.ScheduledStart, 
    activity_pointer_appointment.ServiceId, 
    activity_pointer_appointment.StateCode, 
    activity_pointer_appointment.StatusCode, 
    activity_pointer_appointment.Subject, 
    activity_pointer_appointment.TimeZoneRuleVersionNumber, 
    activity_pointer_appointment.UTCConversionTimeZoneCode, 
    activity_pointer_appointment.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_appointment.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_appointment.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    AppointmentBase.IsAllDayEvent,
    AppointmentBase.Category,
    AppointmentBase.GlobalObjectId,
    AppointmentBase.OutlookOwnerApptId,
    AppointmentBase.Location,
    AppointmentBase.SubscriptionId,
    AppointmentBase.ActivityId,
    AppointmentBase.Subcategory,
    AppointmentBase.OverriddenCreatedOn,
    AppointmentBase.ImportSequenceNumber
from AppointmentBase
    left join ActivityPointerBase activity_pointer_appointment on (AppointmentBase.ActivityId = activity_pointer_appointment.ActivityId and activity_pointer_appointment.ActivityTypeCode = 4201)
    left join SystemUserBase lk_appointment_createdby with(nolock) on (activity_pointer_appointment.CreatedBy = lk_appointment_createdby.SystemUserId)
    left join SystemUserBase lk_appointment_modifiedby with(nolock) on (activity_pointer_appointment.ModifiedBy = lk_appointment_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_appointment.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[ActivityParty]    Script Date: 04/11/2008 06:57:35 ******/




create view [dbo].[ActivityParty] (
    ActivityPartyId,
    ActivityId, 
    PartyId, 
    PartyObjectTypeCode, 
    ParticipationTypeMask, 
    AddressUsed, 
    DoNotEmail,
    DoNotFax,
    DoNotPostalMail,
    DoNotPhone,
    PartyIdDsc,
    PartyIdName,
    ExchangeEntryId,
    Effort,
    ResourceSpecId,
    ResourceSpecIdName,
    ResourceSpecIdDsc,
    ScheduledStart,
    ScheduledEnd,
    OwningUser,
    OwningBusinessUnit,
    VersionNumber
) as 
select
    ActivityPartyBase.ActivityPartyId,
    ActivityPartyBase.ActivityId, 
    ActivityPartyBase.PartyId, 
    ActivityPartyBase.PartyObjectTypeCode, 
    ActivityPartyBase.ParticipationTypeMask, 
    ActivityPartyBase.AddressUsed, 
    case ActivityPartyBase.PartyObjectTypeCode
        when 1 then AccountBase.DoNotEMail
        when 2 then ContactBase.DoNotEMail
        when 4 then LeadBase.DoNotEMail
        else null
    end,
    case ActivityPartyBase.PartyObjectTypeCode
        when 1 then AccountBase.DoNotFax
        when 2 then ContactBase.DoNotFax
        when 4 then LeadBase.DoNotFax
        else null
    end,
    case ActivityPartyBase.PartyObjectTypeCode
        when 1 then AccountBase.DoNotPostalMail
        when 2 then ContactBase.DoNotPostalMail
        when 4 then LeadBase.DoNotPostalMail
        else null
    end,
    case ActivityPartyBase.PartyObjectTypeCode
        when 1 then AccountBase.DoNotPhone
        when 2 then ContactBase.DoNotPhone
        when 4 then LeadBase.DoNotPhone
        else null
    end,
    ActivityPartyBase.PartyIdDsc,
    case ActivityPartyBase.PartyObjectTypeCode
        when 0 then ActivityPartyBase.AddressUsed
        else ActivityPartyBase.PartyIdName
    end,
    ActivityPartyBase.ExchangeEntryId,
    ActivityPartyBase.Effort,
    ActivityPartyBase.ResourceSpecId,
    ResourceSpecBase.Name,
    coalesce(ResourceSpecBase.DeletionStateCode, 2),
    AB.ScheduledStart,
    AB.ScheduledEnd,
    AB.OwningUser,
    AB.OwningBusinessUnit,
    ActivityPartyBase.VersionNumber 
from 
    ActivityPartyBase
     left outer join AccountBase on ActivityPartyBase.PartyObjectTypeCode = 1 and ActivityPartyBase.PartyId = AccountBase.AccountId
     left outer join ContactBase on ActivityPartyBase.PartyObjectTypeCode = 2 and ActivityPartyBase.PartyId = ContactBase.ContactId
     left outer join LeadBase on ActivityPartyBase.PartyObjectTypeCode = 4 and ActivityPartyBase.PartyId = LeadBase.LeadId
     left outer join ActivityPointerBase AB on ActivityPartyBase.ActivityId = AB.ActivityId 
     left outer join ResourceSpecBase on ActivityPartyBase.ResourceSpecId = ResourceSpecBase.ResourceSpecId

/****** Object:  View [dbo].[CampaignActivity]    Script Date: 04/11/2008 06:57:39 ******/




--
-- base view for CampaignActivity
--
create view [dbo].[CampaignActivity] (
    -- logical attributes
    ActualDurationMinutes, 
    ActualEnd, 
    ActualStart, 
    CreatedBy, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CreatedOn, 
    Description, 
    IsBilled, 
    IsWorkflowCreated, 
    ModifiedBy, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ModifiedOn, 
    OwningBusinessUnit, 
    OwningUser, 
    PriorityCode, 
    RegardingObjectId, 
    RegardingObjectIdDsc, 
    RegardingObjectIdName, 
    RegardingObjectIdYomiName, 
    RegardingObjectTypeCode, 
    ScheduledDurationMinutes, 
    ScheduledEnd, 
    ScheduledStart, 
    ServiceId, 
    StateCode, 
    StatusCode, 
    Subject, 
    TimeZoneRuleVersionNumber, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 
    UTCConversionTimeZoneCode, 
    VersionNumber, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    IgnoreInactiveListMembers,
    ActualCost,
    ChannelTypeCode,
    BudgetedCost,
    TypeCode,
    ActivityId,
    ExcludeIfContactedInXDays,
    Category,
    DeletionStateCode,
    DoNotSendOnOptOut,
    Subcategory,
    ImportSequenceNumber,
    ExchangeRate,
    OverriddenCreatedOn,
    TransactionCurrencyId,
    BudgetedCost_Base,
    ActualCost_Base
) with view_metadata as 
select 
    -- logical attributes
    activity_pointer_campaignactivity.ActualDurationMinutes, 
    activity_pointer_campaignactivity.ActualEnd, 
    activity_pointer_campaignactivity.ActualStart, 
    activity_pointer_campaignactivity.CreatedBy, 
    lk_campaignactivity_createdby.DeletionStateCode, 
    lk_campaignactivity_createdby.FullName, 
    lk_campaignactivity_createdby.YomiFullName, 
    activity_pointer_campaignactivity.CreatedOn, 
    activity_pointer_campaignactivity.Description, 
    activity_pointer_campaignactivity.IsBilled, 
    activity_pointer_campaignactivity.IsWorkflowCreated, 
    activity_pointer_campaignactivity.ModifiedBy, 
    lk_campaignactivity_modifiedby.DeletionStateCode, 
    lk_campaignactivity_modifiedby.FullName, 
    lk_campaignactivity_modifiedby.YomiFullName, 
    activity_pointer_campaignactivity.ModifiedOn, 
    activity_pointer_campaignactivity.OwningBusinessUnit, 
    activity_pointer_campaignactivity.OwningUser, 
    activity_pointer_campaignactivity.PriorityCode, 
    activity_pointer_campaignactivity.RegardingObjectId, 
    activity_pointer_campaignactivity.RegardingObjectIdDsc, 
    activity_pointer_campaignactivity.RegardingObjectIdName, 
    activity_pointer_campaignactivity.RegardingObjectIdYomiName, 
    activity_pointer_campaignactivity.RegardingObjectTypeCode, 
    activity_pointer_campaignactivity.ScheduledDurationMinutes, 
    activity_pointer_campaignactivity.ScheduledEnd, 
    activity_pointer_campaignactivity.ScheduledStart, 
    activity_pointer_campaignactivity.ServiceId, 
    activity_pointer_campaignactivity.StateCode, 
    activity_pointer_campaignactivity.StatusCode, 
    activity_pointer_campaignactivity.Subject, 
    activity_pointer_campaignactivity.TimeZoneRuleVersionNumber, 
    transactioncurrency_campaignactivity.DeletionStateCode, 
    transactioncurrency_campaignactivity.CurrencyName, 
    activity_pointer_campaignactivity.UTCConversionTimeZoneCode, 
    activity_pointer_campaignactivity.VersionNumber, 

    -- ownership entries
    OwnerId   = activity_pointer_campaignactivity.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when activity_pointer_campaignactivity.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    CampaignActivityBase.IgnoreInactiveListMembers,
    CampaignActivityBase.ActualCost,
    CampaignActivityBase.ChannelTypeCode,
    CampaignActivityBase.BudgetedCost,
    CampaignActivityBase.TypeCode,
    CampaignActivityBase.ActivityId,
    CampaignActivityBase.ExcludeIfContactedInXDays,
    CampaignActivityBase.Category,
    CampaignActivityBase.DeletionStateCode,
    CampaignActivityBase.DoNotSendOnOptOut,
    CampaignActivityBase.Subcategory,
    CampaignActivityBase.ImportSequenceNumber,
    CampaignActivityBase.ExchangeRate,
    CampaignActivityBase.OverriddenCreatedOn,
    CampaignActivityBase.TransactionCurrencyId,
    CampaignActivityBase.BudgetedCost_Base,
    CampaignActivityBase.ActualCost_Base
from CampaignActivityBase
    left join ActivityPointerBase activity_pointer_campaignactivity on (CampaignActivityBase.ActivityId = activity_pointer_campaignactivity.ActivityId and activity_pointer_campaignactivity.ActivityTypeCode = 4402)
    left join TransactionCurrencyBase transactioncurrency_campaignactivity on (CampaignActivityBase.TransactionCurrencyId = transactioncurrency_campaignactivity.TransactionCurrencyId)
    left join SystemUserBase lk_campaignactivity_createdby with(nolock) on (activity_pointer_campaignactivity.CreatedBy = lk_campaignactivity_createdby.SystemUserId)
    left join SystemUserBase lk_campaignactivity_modifiedby with(nolock) on (activity_pointer_campaignactivity.ModifiedBy = lk_campaignactivity_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (activity_pointer_campaignactivity.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Organization]    Script Date: 04/11/2008 06:58:22 ******/




--
-- base view for Organization
--
create view [dbo].[Organization] (
    -- logical attributes
    AcknowledgementTemplateIdDsc, 
    AcknowledgementTemplateIdName, 
    BaseCurrencyIdDsc, 
    BaseCurrencyIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- physical attributes
    OrganizationId,
    Name,
    UserGroupId,
    PrivilegeUserGroupId,
    DeletionStateCode,
    FiscalPeriodType,
    FiscalCalendarStart,
    DateFormatCode,
    TimeFormatCode,
    CurrencySymbol,
    WeekStartDayCode,
    DateSeparator,
    FullNameConventionCode,
    NegativeFormatCode,
    NumberFormat,
    IsDisabled,
    DisabledReason,
    KbPrefix,
    CurrentKbNumber,
    CasePrefix,
    CurrentCaseNumber,
    ContractPrefix,
    CurrentContractNumber,
    QuotePrefix,
    CurrentQuoteNumber,
    OrderPrefix,
    CurrentOrderNumber,
    InvoicePrefix,
    CurrentInvoiceNumber,
    UniqueSpecifierLength,
    CreatedOn,
    ModifiedOn,
    FiscalYearFormat,
    FiscalPeriodFormat,
    FiscalYearPeriodConnect,
    LanguageCode,
    SortId,
    DateFormatString,
    TimeFormatString,
    PricingDecimalPrecision,
    ShowWeekNumber,
    NextTrackingNumber,
    TagMaxAggressiveCycles,
    TokenKey,
    SystemUserId,
    CreatedBy,
    GrantAccessToNetworkService,
    AllowOutlookScheduledSyncs,
    AllowMarketingEmailExecution,
    SqlAccessGroupId,
    CurrencyFormatCode,
    FiscalSettingsUpdated,
    ReportingGroupId,
    TokenExpiry,
    ShareToPreviousOwnerOnAssign,
    AcknowledgementTemplateId,
    ModifiedBy,
    IntegrationUserId,
    TrackingTokenIdBase,
    BusinessClosureCalendarId,
    AllowAutoUnsubscribeAcknowledgement,
    AllowAutoUnsubscribe,
    RegistrationXml,
    Picture,
    VersionNumber,
    TrackingPrefix,
    MinOutlookSyncInterval,
    BulkOperationPrefix,
    AllowAutoResponseCreation,
    MaximumTrackingNumber,
    CampaignPrefix,
    SqlAccessGroupName,
    CurrentCampaignNumber,
    FiscalYearDisplayCode,
    SiteMapXml,
    IsRegistered,
    ReportingGroupName,
    CurrentBulkOperationNumber,
    SchemaNamePrefix,
    IgnoreInternalEmail,
    TagPollingPeriod,
    TrackingTokenIdDigits,
    NumberGroupFormat,
    LongDateFormatCode,
    UTCConversionTimeZoneCode,
    TimeZoneRuleVersionNumber,
    CurrentImportSequenceNumber,
    ParsedTablePrefix,
    V3CalloutConfigHash,
    IsFiscalPeriodMonthBased,
    LocaleId,
    ParsedTableColumnPrefix,
    SupportUserId,
    AMDesignator,
    CurrencyDisplayOption,
    MinAddressBookSyncInterval,
    IsDuplicateDetectionEnabledForOnlineCreateUpdate,
    FeatureSet,
    BlockedAttachments,
    IsDuplicateDetectionEnabledForOfflineSync,
    AllowOfflineScheduledSyncs,
    AllowUnresolvedPartiesOnEmailSend,
    TimeSeparator,
    CurrentParsedTableNumber,
    MinOfflineSyncInterval,
    AllowWebExcelExport,
    ReferenceSiteMapXml,
    IsDuplicateDetectionEnabledForImport,
    CalendarType,
    SQMEnabled,
    NegativeCurrencyFormatCode,
    AllowAddressBookSyncs,
    ISVIntegrationCode,
    DecimalSymbol,
    MaxUploadFileSize,
    IsAppMode,
    EnablePricingOnCreate,
    IsSOPIntegrationEnabled,
    PMDesignator,
    CurrencyDecimalPrecision,
    MaxAppointmentDurationDays,
    EmailSendPollingPeriod,
    RenderSecureIFrameForEmail,
    NumberSeparator,
    PrivReportingGroupId,
    BaseCurrencyId,
    MaxRecordsForExportToExcel,
    PrivReportingGroupName,
    YearStartWeekCode,
    IsPresenceEnabled,
    IsDuplicateDetectionEnabled
) with view_metadata as 
select 
    -- logical attributes
    Template_Organization.DeletionStateCode, 
    Template_Organization.Title, 
    basecurrency_organization.DeletionStateCode, 
    basecurrency_organization.CurrencyName, 
    lk_organizationbase_createdby.DeletionStateCode, 
    lk_organizationbase_createdby.FullName, 
    lk_organizationbase_createdby.YomiFullName, 
    lk_organizationbase_modifiedby.DeletionStateCode, 
    lk_organizationbase_modifiedby.FullName, 
    lk_organizationbase_modifiedby.YomiFullName, 

    -- physical attributes
    OrganizationBase.OrganizationId,
    OrganizationBase.Name,
    OrganizationBase.UserGroupId,
    OrganizationBase.PrivilegeUserGroupId,
    OrganizationBase.DeletionStateCode,
    OrganizationBase.FiscalPeriodType,
    OrganizationBase.FiscalCalendarStart,
    OrganizationBase.DateFormatCode,
    OrganizationBase.TimeFormatCode,
    OrganizationBase.CurrencySymbol,
    OrganizationBase.WeekStartDayCode,
    OrganizationBase.DateSeparator,
    OrganizationBase.FullNameConventionCode,
    OrganizationBase.NegativeFormatCode,
    OrganizationBase.NumberFormat,
    OrganizationBase.IsDisabled,
    OrganizationBase.DisabledReason,
    OrganizationBase.KbPrefix,
    OrganizationBase.CurrentKbNumber,
    OrganizationBase.CasePrefix,
    OrganizationBase.CurrentCaseNumber,
    OrganizationBase.ContractPrefix,
    OrganizationBase.CurrentContractNumber,
    OrganizationBase.QuotePrefix,
    OrganizationBase.CurrentQuoteNumber,
    OrganizationBase.OrderPrefix,
    OrganizationBase.CurrentOrderNumber,
    OrganizationBase.InvoicePrefix,
    OrganizationBase.CurrentInvoiceNumber,
    OrganizationBase.UniqueSpecifierLength,
    OrganizationBase.CreatedOn,
    OrganizationBase.ModifiedOn,
    OrganizationBase.FiscalYearFormat,
    OrganizationBase.FiscalPeriodFormat,
    OrganizationBase.FiscalYearPeriodConnect,
    OrganizationBase.LanguageCode,
    OrganizationBase.SortId,
    OrganizationBase.DateFormatString,
    OrganizationBase.TimeFormatString,
    OrganizationBase.PricingDecimalPrecision,
    OrganizationBase.ShowWeekNumber,
    OrganizationBase.NextTrackingNumber,
    OrganizationBase.TagMaxAggressiveCycles,
    OrganizationBase.TokenKey,
    OrganizationBase.SystemUserId,
    OrganizationBase.CreatedBy,
    OrganizationBase.GrantAccessToNetworkService,
    OrganizationBase.AllowOutlookScheduledSyncs,
    OrganizationBase.AllowMarketingEmailExecution,
    OrganizationBase.SqlAccessGroupId,
    OrganizationBase.CurrencyFormatCode,
    OrganizationBase.FiscalSettingsUpdated,
    OrganizationBase.ReportingGroupId,
    OrganizationBase.TokenExpiry,
    OrganizationBase.ShareToPreviousOwnerOnAssign,
    OrganizationBase.AcknowledgementTemplateId,
    OrganizationBase.ModifiedBy,
    OrganizationBase.IntegrationUserId,
    OrganizationBase.TrackingTokenIdBase,
    OrganizationBase.BusinessClosureCalendarId,
    OrganizationBase.AllowAutoUnsubscribeAcknowledgement,
    OrganizationBase.AllowAutoUnsubscribe,
    OrganizationBase.RegistrationXml,
    OrganizationBase.Picture,
    OrganizationBase.VersionNumber,
    OrganizationBase.TrackingPrefix,
    OrganizationBase.MinOutlookSyncInterval,
    OrganizationBase.BulkOperationPrefix,
    OrganizationBase.AllowAutoResponseCreation,
    OrganizationBase.MaximumTrackingNumber,
    OrganizationBase.CampaignPrefix,
    OrganizationBase.SqlAccessGroupName,
    OrganizationBase.CurrentCampaignNumber,
    OrganizationBase.FiscalYearDisplayCode,
    OrganizationBase.SiteMapXml,
    OrganizationBase.IsRegistered,
    OrganizationBase.ReportingGroupName,
    OrganizationBase.CurrentBulkOperationNumber,
    OrganizationBase.SchemaNamePrefix,
    OrganizationBase.IgnoreInternalEmail,
    OrganizationBase.TagPollingPeriod,
    OrganizationBase.TrackingTokenIdDigits,
    OrganizationBase.NumberGroupFormat,
    OrganizationBase.LongDateFormatCode,
    OrganizationBase.UTCConversionTimeZoneCode,
    OrganizationBase.TimeZoneRuleVersionNumber,
    OrganizationBase.CurrentImportSequenceNumber,
    OrganizationBase.ParsedTablePrefix,
    OrganizationBase.V3CalloutConfigHash,
    OrganizationBase.IsFiscalPeriodMonthBased,
    OrganizationBase.LocaleId,
    OrganizationBase.ParsedTableColumnPrefix,
    OrganizationBase.SupportUserId,
    OrganizationBase.AMDesignator,
    OrganizationBase.CurrencyDisplayOption,
    OrganizationBase.MinAddressBookSyncInterval,
    OrganizationBase.IsDuplicateDetectionEnabledForOnlineCreateUpdate,
    OrganizationBase.FeatureSet,
    OrganizationBase.BlockedAttachments,
    OrganizationBase.IsDuplicateDetectionEnabledForOfflineSync,
    OrganizationBase.AllowOfflineScheduledSyncs,
    OrganizationBase.AllowUnresolvedPartiesOnEmailSend,
    OrganizationBase.TimeSeparator,
    OrganizationBase.CurrentParsedTableNumber,
    OrganizationBase.MinOfflineSyncInterval,
    OrganizationBase.AllowWebExcelExport,
    OrganizationBase.ReferenceSiteMapXml,
    OrganizationBase.IsDuplicateDetectionEnabledForImport,
    OrganizationBase.CalendarType,
    OrganizationBase.SQMEnabled,
    OrganizationBase.NegativeCurrencyFormatCode,
    OrganizationBase.AllowAddressBookSyncs,
    OrganizationBase.ISVIntegrationCode,
    OrganizationBase.DecimalSymbol,
    OrganizationBase.MaxUploadFileSize,
    OrganizationBase.IsAppMode,
    OrganizationBase.EnablePricingOnCreate,
    OrganizationBase.IsSOPIntegrationEnabled,
    OrganizationBase.PMDesignator,
    OrganizationBase.CurrencyDecimalPrecision,
    OrganizationBase.MaxAppointmentDurationDays,
    OrganizationBase.EmailSendPollingPeriod,
    OrganizationBase.RenderSecureIFrameForEmail,
    OrganizationBase.NumberSeparator,
    OrganizationBase.PrivReportingGroupId,
    OrganizationBase.BaseCurrencyId,
    OrganizationBase.MaxRecordsForExportToExcel,
    OrganizationBase.PrivReportingGroupName,
    OrganizationBase.YearStartWeekCode,
    OrganizationBase.IsPresenceEnabled,
    OrganizationBase.IsDuplicateDetectionEnabled
from OrganizationBase
    left join TransactionCurrencyBase basecurrency_organization on (OrganizationBase.BaseCurrencyId = basecurrency_organization.TransactionCurrencyId)
    left join SystemUserBase lk_organizationbase_createdby with(nolock) on (OrganizationBase.CreatedBy = lk_organizationbase_createdby.SystemUserId)
    left join SystemUserBase lk_organizationbase_modifiedby with(nolock) on (OrganizationBase.ModifiedBy = lk_organizationbase_modifiedby.SystemUserId)
    left join TemplateBase Template_Organization on (OrganizationBase.AcknowledgementTemplateId = Template_Organization.TemplateId)

/****** Object:  View [dbo].[Template]    Script Date: 04/11/2008 06:58:33 ******/




--
-- base view for Template
--
create view [dbo].[Template] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    TemplateId,
    Subject,
    OwningBusinessUnit,
    IsPersonal,
    DeletionStateCode,
    OwningTeam,
    MimeType,
    TemplateTypeCode,
    Body,
    Title,
    Description,
    OwningUser,
    CreatedBy,
    PresentationXml,
    CreatedOn,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    SubjectPresentationXml,
    GenerationTypeCode,
    LanguageCode,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_templatebase_createdby.DeletionStateCode, 
    lk_templatebase_createdby.FullName, 
    lk_templatebase_createdby.YomiFullName, 
    lk_templatebase_modifiedby.DeletionStateCode, 
    lk_templatebase_modifiedby.FullName, 
    lk_templatebase_modifiedby.YomiFullName, 

    -- ownership entries
    OwnerId   = TemplateBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when TemplateBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    TemplateBase.TemplateId,
    TemplateBase.Subject,
    TemplateBase.OwningBusinessUnit,
    TemplateBase.IsPersonal,
    TemplateBase.DeletionStateCode,
    TemplateBase.OwningTeam,
    TemplateBase.MimeType,
    TemplateBase.TemplateTypeCode,
    TemplateBase.Body,
    TemplateBase.Title,
    TemplateBase.Description,
    TemplateBase.OwningUser,
    TemplateBase.CreatedBy,
    TemplateBase.PresentationXml,
    TemplateBase.CreatedOn,
    TemplateBase.ModifiedBy,
    TemplateBase.ModifiedOn,
    TemplateBase.VersionNumber,
    TemplateBase.SubjectPresentationXml,
    TemplateBase.GenerationTypeCode,
    TemplateBase.LanguageCode,
    TemplateBase.ImportSequenceNumber
from TemplateBase
    left join SystemUserBase lk_templatebase_createdby with(nolock) on (TemplateBase.CreatedBy = lk_templatebase_createdby.SystemUserId)
    left join SystemUserBase lk_templatebase_modifiedby with(nolock) on (TemplateBase.ModifiedBy = lk_templatebase_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (TemplateBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[CampaignItem]    Script Date: 04/11/2008 06:57:40 ******/




--
-- base view for CampaignItem
--
create view [dbo].[CampaignItem] (
    -- logical attributes
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    EntityType,
    EntityId,
    VersionNumber,
    CampaignItemId,
    CampaignId
) with view_metadata as 
select 
    -- logical attributes
    Campaign_RelatedEntities.OwningBusinessUnit, 
    Campaign_RelatedEntities.OwningUser, 

    -- physical attributes
    CampaignItemBase.EntityType,
    CampaignItemBase.EntityId,
    CampaignItemBase.VersionNumber,
    CampaignItemBase.CampaignItemId,
    CampaignItemBase.CampaignId
from CampaignItemBase
    left join CampaignBase Campaign_RelatedEntities on (CampaignItemBase.CampaignId = Campaign_RelatedEntities.CampaignId)

/****** Object:  View [dbo].[QueueItem]    Script Date: 04/11/2008 06:58:24 ******/




--
-- base view for QueueItem
--
create view [dbo].[QueueItem] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    QueueItemId,
    QueueId,
    ObjectId,
    ObjectTypeCode,
    Title,
    EnteredOn,
    Priority,
    State,
    Status,
    CreatedOn,
    CreatedBy,
    ModifiedBy,
    ModifiedOn,
    ToRecipients,
    Sender,
    OrganizationId,
    VersionNumber,
    DeletionStateCode,
    TimeZoneRuleVersionNumber,
    UTCConversionTimeZoneCode
) with view_metadata as 
select 
    -- logical attributes
    lk_queueitembase_createdby.DeletionStateCode, 
    lk_queueitembase_createdby.FullName, 
    lk_queueitembase_createdby.YomiFullName, 
    lk_queueitembase_modifiedby.DeletionStateCode, 
    lk_queueitembase_modifiedby.FullName, 
    lk_queueitembase_modifiedby.YomiFullName, 
    organization_queueitems.DeletionStateCode, 
    organization_queueitems.Name, 

    -- physical attributes
    QueueItemBase.QueueItemId,
    QueueItemBase.QueueId,
    QueueItemBase.ObjectId,
    QueueItemBase.ObjectTypeCode,
    QueueItemBase.Title,
    QueueItemBase.EnteredOn,
    QueueItemBase.Priority,
    QueueItemBase.State,
    QueueItemBase.Status,
    QueueItemBase.CreatedOn,
    QueueItemBase.CreatedBy,
    QueueItemBase.ModifiedBy,
    QueueItemBase.ModifiedOn,
    QueueItemBase.ToRecipients,
    QueueItemBase.Sender,
    QueueItemBase.OrganizationId,
    QueueItemBase.VersionNumber,
    QueueItemBase.DeletionStateCode,
    QueueItemBase.TimeZoneRuleVersionNumber,
    QueueItemBase.UTCConversionTimeZoneCode
from QueueItemBase
    left join SystemUserBase lk_queueitembase_createdby with(nolock) on (QueueItemBase.CreatedBy = lk_queueitembase_createdby.SystemUserId)
    left join SystemUserBase lk_queueitembase_modifiedby with(nolock) on (QueueItemBase.ModifiedBy = lk_queueitembase_modifiedby.SystemUserId)
    left join OrganizationBase organization_queueitems on (QueueItemBase.OrganizationId = organization_queueitems.OrganizationId)

/****** Object:  View [dbo].[DisplayString]    Script Date: 04/11/2008 06:57:43 ******/




--
-- base view for DisplayString
--
create view [dbo].[DisplayString] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    PublishedDisplayString,
    CustomDisplayString,
    DisplayStringKey,
    VersionNumber,
    CreatedBy,
    CustomComment,
    FormatParameters,
    OrganizationId,
    CreatedOn,
    ModifiedOn,
    LanguageCode,
    DisplayStringId,
    ModifiedBy
) with view_metadata as 
select 
    -- logical attributes
    lk_DisplayStringbase_createdby.DeletionStateCode, 
    lk_DisplayStringbase_createdby.FullName, 
    lk_DisplayStringbase_createdby.YomiFullName, 
    lk_DisplayStringbase_modifiedby.DeletionStateCode, 
    lk_DisplayStringbase_modifiedby.FullName, 
    lk_DisplayStringbase_modifiedby.YomiFullName, 
    organization_custom_displaystrings.DeletionStateCode, 
    organization_custom_displaystrings.Name, 

    -- physical attributes
    DisplayStringBase.PublishedDisplayString,
    DisplayStringBase.CustomDisplayString,
    DisplayStringBase.DisplayStringKey,
    DisplayStringBase.VersionNumber,
    DisplayStringBase.CreatedBy,
    DisplayStringBase.CustomComment,
    DisplayStringBase.FormatParameters,
    DisplayStringBase.OrganizationId,
    DisplayStringBase.CreatedOn,
    DisplayStringBase.ModifiedOn,
    DisplayStringBase.LanguageCode,
    DisplayStringBase.DisplayStringId,
    DisplayStringBase.ModifiedBy
from DisplayStringBase
    left join SystemUserBase lk_DisplayStringbase_createdby with(nolock) on (DisplayStringBase.CreatedBy = lk_DisplayStringbase_createdby.SystemUserId)
    left join SystemUserBase lk_DisplayStringbase_modifiedby with(nolock) on (DisplayStringBase.ModifiedBy = lk_DisplayStringbase_modifiedby.SystemUserId)
    left join OrganizationBase organization_custom_displaystrings on (DisplayStringBase.OrganizationId = organization_custom_displaystrings.OrganizationId)

/****** Object:  View [dbo].[IsvConfig]    Script Date: 04/11/2008 06:58:18 ******/




--
-- base view for IsvConfig
--
create view [dbo].[IsvConfig] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    ConfigXML,
    CreatedBy,
    OrganizationId,
    VersionNumber,
    CreatedOn,
    IsvConfigId,
    ModifiedBy,
    ModifiedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_isvconfigbase_createdby.DeletionStateCode, 
    lk_isvconfigbase_createdby.FullName, 
    lk_isvconfigbase_createdby.YomiFullName, 
    lk_isvconfigbase_modifiedby.DeletionStateCode, 
    lk_isvconfigbase_modifiedby.FullName, 
    lk_isvconfigbase_modifiedby.YomiFullName, 
    organization_isvconfigs.DeletionStateCode, 
    organization_isvconfigs.Name, 

    -- physical attributes
    IsvConfigBase.ConfigXML,
    IsvConfigBase.CreatedBy,
    IsvConfigBase.OrganizationId,
    IsvConfigBase.VersionNumber,
    IsvConfigBase.CreatedOn,
    IsvConfigBase.IsvConfigId,
    IsvConfigBase.ModifiedBy,
    IsvConfigBase.ModifiedOn
from IsvConfigBase
    left join SystemUserBase lk_isvconfigbase_createdby with(nolock) on (IsvConfigBase.CreatedBy = lk_isvconfigbase_createdby.SystemUserId)
    left join SystemUserBase lk_isvconfigbase_modifiedby with(nolock) on (IsvConfigBase.ModifiedBy = lk_isvconfigbase_modifiedby.SystemUserId)
    left join OrganizationBase organization_isvconfigs on (IsvConfigBase.OrganizationId = organization_isvconfigs.OrganizationId)

/****** Object:  View [dbo].[Product]    Script Date: 04/11/2008 06:58:24 ******/




--
-- base view for Product
--
create view [dbo].[Product] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    DefaultUoMIdDsc, 
    DefaultUoMIdName, 
    DefaultUoMScheduleIdDsc, 
    DefaultUoMScheduleIdName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    PriceLevelIdDsc, 
    PriceLevelIdName, 
    SubjectIdDsc, 
    SubjectIdName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- physical attributes
    ProductId,
    DefaultUoMScheduleId,
    SubjectId,
    OrganizationId,
    DeletionStateCode,
    Name,
    DefaultUoMId,
    PriceLevelId,
    Description,
    ProductTypeCode,
    ProductUrl,
    Price,
    IsKit,
    ProductNumber,
    Size,
    CurrentCost,
    StockVolume,
    StandardCost,
    StockWeight,
    QuantityDecimal,
    QuantityOnHand,
    IsStockItem,
    SupplierName,
    VendorName,
    VendorPartNumber,
    CreatedOn,
    ModifiedOn,
    CreatedBy,
    StateCode,
    ModifiedBy,
    StatusCode,
    VersionNumber,
    OverriddenCreatedOn,
    TransactionCurrencyId,
    ExchangeRate,
    UTCConversionTimeZoneCode,
    ImportSequenceNumber,
    TimeZoneRuleVersionNumber,
    CurrentCost_Base,
    Price_Base,
    StandardCost_Base
) with view_metadata as 
select 
    -- logical attributes
    lk_productbase_createdby.DeletionStateCode, 
    lk_productbase_createdby.FullName, 
    lk_productbase_createdby.YomiFullName, 
    unit_of_measurement_products.DeletionStateCode, 
    unit_of_measurement_products.Name, 
    unit_of_measurement_schedule_products.DeletionStateCode, 
    unit_of_measurement_schedule_products.Name, 
    lk_productbase_modifiedby.DeletionStateCode, 
    lk_productbase_modifiedby.FullName, 
    lk_productbase_modifiedby.YomiFullName, 
    organization_products.DeletionStateCode, 
    organization_products.Name, 
    price_level_products.DeletionStateCode, 
    price_level_products.Name, 
    subject_products.DeletionStateCode, 
    subject_products.Title, 
    transactioncurrency_product.DeletionStateCode, 
    transactioncurrency_product.CurrencyName, 

    -- physical attributes
    ProductBase.ProductId,
    ProductBase.DefaultUoMScheduleId,
    ProductBase.SubjectId,
    ProductBase.OrganizationId,
    ProductBase.DeletionStateCode,
    ProductBase.Name,
    ProductBase.DefaultUoMId,
    ProductBase.PriceLevelId,
    ProductBase.Description,
    ProductBase.ProductTypeCode,
    ProductBase.ProductUrl,
    ProductBase.Price,
    ProductBase.IsKit,
    ProductBase.ProductNumber,
    ProductBase.Size,
    ProductBase.CurrentCost,
    ProductBase.StockVolume,
    ProductBase.StandardCost,
    ProductBase.StockWeight,
    ProductBase.QuantityDecimal,
    ProductBase.QuantityOnHand,
    ProductBase.IsStockItem,
    ProductBase.SupplierName,
    ProductBase.VendorName,
    ProductBase.VendorPartNumber,
    ProductBase.CreatedOn,
    ProductBase.ModifiedOn,
    ProductBase.CreatedBy,
    ProductBase.StateCode,
    ProductBase.ModifiedBy,
    ProductBase.StatusCode,
    ProductBase.VersionNumber,
    ProductBase.OverriddenCreatedOn,
    ProductBase.TransactionCurrencyId,
    ProductBase.ExchangeRate,
    ProductBase.UTCConversionTimeZoneCode,
    ProductBase.ImportSequenceNumber,
    ProductBase.TimeZoneRuleVersionNumber,
    ProductBase.CurrentCost_Base,
    ProductBase.Price_Base,
    ProductBase.StandardCost_Base
from ProductBase
    left join SystemUserBase lk_productbase_createdby with(nolock) on (ProductBase.CreatedBy = lk_productbase_createdby.SystemUserId)
    left join SystemUserBase lk_productbase_modifiedby with(nolock) on (ProductBase.ModifiedBy = lk_productbase_modifiedby.SystemUserId)
    left join OrganizationBase organization_products on (ProductBase.OrganizationId = organization_products.OrganizationId)
    left join PriceLevelBase price_level_products on (ProductBase.PriceLevelId = price_level_products.PriceLevelId)
    left join SubjectBase subject_products on (ProductBase.SubjectId = subject_products.SubjectId)
    left join TransactionCurrencyBase transactioncurrency_product on (ProductBase.TransactionCurrencyId = transactioncurrency_product.TransactionCurrencyId)
    left join UoMBase unit_of_measurement_products on (ProductBase.DefaultUoMId = unit_of_measurement_products.UoMId)
    left join UoMScheduleBase unit_of_measurement_schedule_products on (ProductBase.DefaultUoMScheduleId = unit_of_measurement_schedule_products.UoMScheduleId)

/****** Object:  View [dbo].[Equipment]    Script Date: 04/11/2008 06:57:46 ******/




--
-- base view for Equipment
--
create view [dbo].[Equipment] (
    -- logical attributes
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    SiteIdDsc, 
    SiteIdName, 

    -- physical attributes
    EquipmentId,
    SiteId,
    ModifiedBy,
    CreatedBy,
    ModifiedOn,
    BusinessUnitId,
    Skills,
    VersionNumber,
    CreatedOn,
    TimeZoneCode,
    DisplayInServiceViews,
    IsDisabled,
    Name,
    CalendarId,
    Description,
    EMailAddress,
    OrganizationId,
    DeletionStateCode,
    ImportSequenceNumber,
    OverriddenCreatedOn,
    TimeZoneRuleVersionNumber,
    UTCConversionTimeZoneCode
) with view_metadata as 
select 
    -- logical attributes
    business_unit_equipment.DeletionStateCode, 
    business_unit_equipment.Name, 
    lk_equipment_createdby.DeletionStateCode, 
    lk_equipment_createdby.FullName, 
    lk_equipment_createdby.YomiFullName, 
    lk_equipment_modifiedby.DeletionStateCode, 
    lk_equipment_modifiedby.FullName, 
    lk_equipment_modifiedby.YomiFullName, 
    organization_equipment.DeletionStateCode, 
    organization_equipment.Name, 
    site_equipment.DeletionStateCode, 
    site_equipment.Name, 

    -- physical attributes
    EquipmentBase.EquipmentId,
    EquipmentBase.SiteId,
    EquipmentBase.ModifiedBy,
    EquipmentBase.CreatedBy,
    EquipmentBase.ModifiedOn,
    EquipmentBase.BusinessUnitId,
    EquipmentBase.Skills,
    EquipmentBase.VersionNumber,
    EquipmentBase.CreatedOn,
    EquipmentBase.TimeZoneCode,
    EquipmentBase.DisplayInServiceViews,
    EquipmentBase.IsDisabled,
    EquipmentBase.Name,
    EquipmentBase.CalendarId,
    EquipmentBase.Description,
    EquipmentBase.EMailAddress,
    EquipmentBase.OrganizationId,
    EquipmentBase.DeletionStateCode,
    EquipmentBase.ImportSequenceNumber,
    EquipmentBase.OverriddenCreatedOn,
    EquipmentBase.TimeZoneRuleVersionNumber,
    EquipmentBase.UTCConversionTimeZoneCode
from EquipmentBase
    left join BusinessUnitBase business_unit_equipment on (EquipmentBase.BusinessUnitId = business_unit_equipment.BusinessUnitId)
    left join SystemUserBase lk_equipment_createdby with(nolock) on (EquipmentBase.CreatedBy = lk_equipment_createdby.SystemUserId)
    left join SystemUserBase lk_equipment_modifiedby with(nolock) on (EquipmentBase.ModifiedBy = lk_equipment_modifiedby.SystemUserId)
    left join OrganizationBase organization_equipment on (EquipmentBase.OrganizationId = organization_equipment.OrganizationId)
    left join SiteBase site_equipment on (EquipmentBase.SiteId = site_equipment.SiteId)

/****** Object:  View [dbo].[Competitor]    Script Date: 04/11/2008 06:57:41 ******/




--
-- base view for Competitor
--
create view [dbo].[Competitor] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- linked address entities
    Address1_AddressId,
    Address1_AddressTypeCode,
    Address1_Name,
    Address1_Line1,
    Address1_Line2,
    Address1_Line3,
    Address1_City,
    Address1_StateOrProvince,
    Address1_County,
    Address1_Country,
    Address1_PostOfficeBox,
    Address1_PostalCode,
    Address1_UTCOffset,
    Address1_UPSZone,
    Address1_Latitude,
    Address1_Telephone1,
    Address1_Longitude,
    Address1_ShippingMethodCode,
    Address1_Telephone2,
    Address1_Telephone3,
    Address1_Fax,

    Address2_AddressId,
    Address2_AddressTypeCode,
    Address2_Name,
    Address2_Line1,
    Address2_Line2,
    Address2_Line3,
    Address2_City,
    Address2_StateOrProvince,
    Address2_County,
    Address2_Country,
    Address2_PostOfficeBox,
    Address2_PostalCode,
    Address2_UTCOffset,
    Address2_UPSZone,
    Address2_Latitude,
    Address2_Telephone1,
    Address2_Longitude,
    Address2_ShippingMethodCode,
    Address2_Telephone2,
    Address2_Telephone3,
    Address2_Fax,

    -- physical attributes
    CompetitorId,
    DeletionStateCode,
    OrganizationId,
    Name,
    Overview,
    ReferenceInfoUrl,
    ReportedRevenue,
    ReportingQuarter,
    ReportingYear,
    Strengths,
    Weaknesses,
    Opportunities,
    Threats,
    TickerSymbol,
    KeyProduct,
    StockExchange,
    WinPercentage,
    WebSiteUrl,
    CreatedOn,
    CreatedBy,
    ModifiedOn,
    ModifiedBy,
    VersionNumber,
    UTCConversionTimeZoneCode,
    TimeZoneRuleVersionNumber,
    OverriddenCreatedOn,
    ExchangeRate,
    TransactionCurrencyId,
    ImportSequenceNumber,
    ReportedRevenue_Base,
    YomiName
) with view_metadata as 
select 
    -- logical attributes
    lk_competitorbase_createdby.DeletionStateCode, 
    lk_competitorbase_createdby.FullName, 
    lk_competitorbase_createdby.YomiFullName, 
    lk_competitorbase_modifiedby.DeletionStateCode, 
    lk_competitorbase_modifiedby.FullName, 
    lk_competitorbase_modifiedby.YomiFullName, 
    organization_competitors.DeletionStateCode, 
    organization_competitors.Name, 
    transactioncurrency_competitor.DeletionStateCode, 
    transactioncurrency_competitor.CurrencyName, 

    -- linked address entities
    XXaddress1.CompetitorAddressId,
    XXaddress1.AddressTypeCode,
    XXaddress1.Name,
    XXaddress1.Line1,
    XXaddress1.Line2,
    XXaddress1.Line3,
    XXaddress1.City,
    XXaddress1.StateOrProvince,
    XXaddress1.County,
    XXaddress1.Country,
    XXaddress1.PostOfficeBox,
    XXaddress1.PostalCode,
    XXaddress1.UTCOffset,
    XXaddress1.UPSZone,
    XXaddress1.Latitude,
    XXaddress1.Telephone1,
    XXaddress1.Longitude,
    XXaddress1.ShippingMethodCode,
    XXaddress1.Telephone2,
    XXaddress1.Telephone3,
    XXaddress1.Fax,

    XXaddress2.CompetitorAddressId,
    XXaddress2.AddressTypeCode,
    XXaddress2.Name,
    XXaddress2.Line1,
    XXaddress2.Line2,
    XXaddress2.Line3,
    XXaddress2.City,
    XXaddress2.StateOrProvince,
    XXaddress2.County,
    XXaddress2.Country,
    XXaddress2.PostOfficeBox,
    XXaddress2.PostalCode,
    XXaddress2.UTCOffset,
    XXaddress2.UPSZone,
    XXaddress2.Latitude,
    XXaddress2.Telephone1,
    XXaddress2.Longitude,
    XXaddress2.ShippingMethodCode,
    XXaddress2.Telephone2,
    XXaddress2.Telephone3,
    XXaddress2.Fax,

    -- physical attributes
    CompetitorBase.CompetitorId,
    CompetitorBase.DeletionStateCode,
    CompetitorBase.OrganizationId,
    CompetitorBase.Name,
    CompetitorBase.Overview,
    CompetitorBase.ReferenceInfoUrl,
    CompetitorBase.ReportedRevenue,
    CompetitorBase.ReportingQuarter,
    CompetitorBase.ReportingYear,
    CompetitorBase.Strengths,
    CompetitorBase.Weaknesses,
    CompetitorBase.Opportunities,
    CompetitorBase.Threats,
    CompetitorBase.TickerSymbol,
    CompetitorBase.KeyProduct,
    CompetitorBase.StockExchange,
    CompetitorBase.WinPercentage,
    CompetitorBase.WebSiteUrl,
    CompetitorBase.CreatedOn,
    CompetitorBase.CreatedBy,
    CompetitorBase.ModifiedOn,
    CompetitorBase.ModifiedBy,
    CompetitorBase.VersionNumber,
    CompetitorBase.UTCConversionTimeZoneCode,
    CompetitorBase.TimeZoneRuleVersionNumber,
    CompetitorBase.OverriddenCreatedOn,
    CompetitorBase.ExchangeRate,
    CompetitorBase.TransactionCurrencyId,
    CompetitorBase.ImportSequenceNumber,
    CompetitorBase.ReportedRevenue_Base,
    CompetitorBase.YomiName
from CompetitorBase

    left join CompetitorAddressBase XXaddress1 on (CompetitorBase.CompetitorId = XXaddress1.ParentId and XXaddress1.AddressNumber = 1)
    left join CompetitorAddressBase XXaddress2 on (CompetitorBase.CompetitorId = XXaddress2.ParentId and XXaddress2.AddressNumber = 2)
    left join SystemUserBase lk_competitorbase_createdby with(nolock) on (CompetitorBase.CreatedBy = lk_competitorbase_createdby.SystemUserId)
    left join SystemUserBase lk_competitorbase_modifiedby with(nolock) on (CompetitorBase.ModifiedBy = lk_competitorbase_modifiedby.SystemUserId)
    left join OrganizationBase organization_competitors on (CompetitorBase.OrganizationId = organization_competitors.OrganizationId)
    left join TransactionCurrencyBase transactioncurrency_competitor on (CompetitorBase.TransactionCurrencyId = transactioncurrency_competitor.TransactionCurrencyId)

/****** Object:  View [dbo].[SalesLiterature]    Script Date: 04/11/2008 06:58:29 ******/




--
-- base view for SalesLiterature
--
create view [dbo].[SalesLiterature] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    EmployeeContactIdDsc, 
    EmployeeContactIdName, 
    EmployeeContactIdYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    SubjectIdDsc, 
    SubjectIdName, 

    -- physical attributes
    SalesLiteratureId,
    OrganizationId,
    DeletionStateCode,
    EmployeeContactId,
    SubjectId,
    Description,
    LiteratureTypeCode,
    Name,
    ExpirationDate,
    IsCustomerViewable,
    CreatedBy,
    KeyWords,
    HasAttachments,
    ModifiedBy,
    CreatedOn,
    ModifiedOn,
    VersionNumber,
    UTCConversionTimeZoneCode,
    OverriddenCreatedOn,
    TimeZoneRuleVersionNumber,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_salesliteraturebase_createdby.DeletionStateCode, 
    lk_salesliteraturebase_createdby.FullName, 
    lk_salesliteraturebase_createdby.YomiFullName, 
    system_user_sales_literature.DeletionStateCode, 
    system_user_sales_literature.FullName, 
    system_user_sales_literature.YomiFullName, 
    lk_salesliteraturebase_modifiedby.DeletionStateCode, 
    lk_salesliteraturebase_modifiedby.FullName, 
    lk_salesliteraturebase_modifiedby.YomiFullName, 
    organization_sales_literature.DeletionStateCode, 
    organization_sales_literature.Name, 
    subject_sales_literature.DeletionStateCode, 
    subject_sales_literature.Title, 

    -- physical attributes
    SalesLiteratureBase.SalesLiteratureId,
    SalesLiteratureBase.OrganizationId,
    SalesLiteratureBase.DeletionStateCode,
    SalesLiteratureBase.EmployeeContactId,
    SalesLiteratureBase.SubjectId,
    SalesLiteratureBase.Description,
    SalesLiteratureBase.LiteratureTypeCode,
    SalesLiteratureBase.Name,
    SalesLiteratureBase.ExpirationDate,
    SalesLiteratureBase.IsCustomerViewable,
    SalesLiteratureBase.CreatedBy,
    SalesLiteratureBase.KeyWords,
    SalesLiteratureBase.HasAttachments,
    SalesLiteratureBase.ModifiedBy,
    SalesLiteratureBase.CreatedOn,
    SalesLiteratureBase.ModifiedOn,
    SalesLiteratureBase.VersionNumber,
    SalesLiteratureBase.UTCConversionTimeZoneCode,
    SalesLiteratureBase.OverriddenCreatedOn,
    SalesLiteratureBase.TimeZoneRuleVersionNumber,
    SalesLiteratureBase.ImportSequenceNumber
from SalesLiteratureBase
    left join SystemUserBase lk_salesliteraturebase_createdby with(nolock) on (SalesLiteratureBase.CreatedBy = lk_salesliteraturebase_createdby.SystemUserId)
    left join SystemUserBase lk_salesliteraturebase_modifiedby with(nolock) on (SalesLiteratureBase.ModifiedBy = lk_salesliteraturebase_modifiedby.SystemUserId)
    left join OrganizationBase organization_sales_literature on (SalesLiteratureBase.OrganizationId = organization_sales_literature.OrganizationId)
    left join SubjectBase subject_sales_literature on (SalesLiteratureBase.SubjectId = subject_sales_literature.SubjectId)
    left join SystemUserBase system_user_sales_literature with(nolock) on (SalesLiteratureBase.EmployeeContactId = system_user_sales_literature.SystemUserId)

/****** Object:  View [dbo].[Subject]    Script Date: 04/11/2008 06:58:32 ******/




--
-- base view for Subject
--
create view [dbo].[Subject] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    ParentSubjectDsc, 
    ParentSubjectName, 

    -- physical attributes
    SubjectId,
    Title,
    OrganizationId,
    DeletionStateCode,
    Description,
    ParentSubject,
    FeatureMask,
    CreatedBy,
    CreatedOn,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    ImportSequenceNumber,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_subjectbase_createdby.DeletionStateCode, 
    lk_subjectbase_createdby.FullName, 
    lk_subjectbase_createdby.YomiFullName, 
    lk_subjectbase_modifiedby.DeletionStateCode, 
    lk_subjectbase_modifiedby.FullName, 
    lk_subjectbase_modifiedby.YomiFullName, 
    organization_subjects.DeletionStateCode, 
    organization_subjects.Name, 
    subject_parent_subject.DeletionStateCode, 
    subject_parent_subject.Title, 

    -- physical attributes
    SubjectBase.SubjectId,
    SubjectBase.Title,
    SubjectBase.OrganizationId,
    SubjectBase.DeletionStateCode,
    SubjectBase.Description,
    SubjectBase.ParentSubject,
    SubjectBase.FeatureMask,
    SubjectBase.CreatedBy,
    SubjectBase.CreatedOn,
    SubjectBase.ModifiedBy,
    SubjectBase.ModifiedOn,
    SubjectBase.VersionNumber,
    SubjectBase.ImportSequenceNumber,
    SubjectBase.OverriddenCreatedOn
from SubjectBase
    left join SystemUserBase lk_subjectbase_createdby with(nolock) on (SubjectBase.CreatedBy = lk_subjectbase_createdby.SystemUserId)
    left join SystemUserBase lk_subjectbase_modifiedby with(nolock) on (SubjectBase.ModifiedBy = lk_subjectbase_modifiedby.SystemUserId)
    left join OrganizationBase organization_subjects on (SubjectBase.OrganizationId = organization_subjects.OrganizationId)
    left join SubjectBase subject_parent_subject on (SubjectBase.ParentSubject = subject_parent_subject.SubjectId)

/****** Object:  View [dbo].[UoMSchedule]    Script Date: 04/11/2008 06:58:35 ******/




--
-- base view for UoMSchedule
--
create view [dbo].[UoMSchedule] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    UoMScheduleId,
    OrganizationId,
    DeletionStateCode,
    Name,
    Description,
    CreatedOn,
    CreatedBy,
    ModifiedOn,
    ModifiedBy,
    VersionNumber,
    ImportSequenceNumber,
    BaseUoMName,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_uomschedulebase_createdby.DeletionStateCode, 
    lk_uomschedulebase_createdby.FullName, 
    lk_uomschedulebase_createdby.YomiFullName, 
    lk_uomschedulebase_modifiedby.DeletionStateCode, 
    lk_uomschedulebase_modifiedby.FullName, 
    lk_uomschedulebase_modifiedby.YomiFullName, 
    organization_uof_schedules.DeletionStateCode, 
    organization_uof_schedules.Name, 

    -- physical attributes
    UoMScheduleBase.UoMScheduleId,
    UoMScheduleBase.OrganizationId,
    UoMScheduleBase.DeletionStateCode,
    UoMScheduleBase.Name,
    UoMScheduleBase.Description,
    UoMScheduleBase.CreatedOn,
    UoMScheduleBase.CreatedBy,
    UoMScheduleBase.ModifiedOn,
    UoMScheduleBase.ModifiedBy,
    UoMScheduleBase.VersionNumber,
    UoMScheduleBase.ImportSequenceNumber,
    UoMScheduleBase.BaseUoMName,
    UoMScheduleBase.OverriddenCreatedOn
from UoMScheduleBase
    left join SystemUserBase lk_uomschedulebase_createdby with(nolock) on (UoMScheduleBase.CreatedBy = lk_uomschedulebase_createdby.SystemUserId)
    left join SystemUserBase lk_uomschedulebase_modifiedby with(nolock) on (UoMScheduleBase.ModifiedBy = lk_uomschedulebase_modifiedby.SystemUserId)
    left join OrganizationBase organization_uof_schedules on (UoMScheduleBase.OrganizationId = organization_uof_schedules.OrganizationId)

/****** Object:  View [dbo].[WizardPage]    Script Date: 04/11/2008 06:58:37 ******/




--
-- base view for WizardPage
--
create view [dbo].[WizardPage] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    PageSequenceNumber,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    CreatedBy,
    OrganizationId,
    PageUrl,
    WebWizardId,
    DeletionStateCode,
    WizardPageId,
    PageDataToPost,
    CreatedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_wizardpage_createdby.DeletionStateCode, 
    lk_wizardpage_createdby.FullName, 
    lk_wizardpage_createdby.YomiFullName, 
    lk_wizardpage_modifiedby.DeletionStateCode, 
    lk_wizardpage_modifiedby.FullName, 
    lk_wizardpage_modifiedby.YomiFullName, 
    organization_wizardpage.DeletionStateCode, 
    organization_wizardpage.Name, 

    -- physical attributes
    WizardPageBase.PageSequenceNumber,
    WizardPageBase.ModifiedBy,
    WizardPageBase.ModifiedOn,
    WizardPageBase.VersionNumber,
    WizardPageBase.CreatedBy,
    WizardPageBase.OrganizationId,
    WizardPageBase.PageUrl,
    WizardPageBase.WebWizardId,
    WizardPageBase.DeletionStateCode,
    WizardPageBase.WizardPageId,
    WizardPageBase.PageDataToPost,
    WizardPageBase.CreatedOn
from WizardPageBase
    left join SystemUserBase lk_wizardpage_createdby with(nolock) on (WizardPageBase.CreatedBy = lk_wizardpage_createdby.SystemUserId)
    left join SystemUserBase lk_wizardpage_modifiedby with(nolock) on (WizardPageBase.ModifiedBy = lk_wizardpage_modifiedby.SystemUserId)
    left join OrganizationBase organization_wizardpage on (WizardPageBase.OrganizationId = organization_wizardpage.OrganizationId)

/****** Object:  View [dbo].[WizardAccessPrivilege]    Script Date: 04/11/2008 06:58:37 ******/




--
-- base view for WizardAccessPrivilege
--
create view [dbo].[WizardAccessPrivilege] (
    -- logical attributes
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    ModifiedBy,
    PrivilegeName,
    OrganizationId,
    WebWizardId,
    ModifiedOn,
    EntityName,
    CreatedOn,
    CreatedBy,
    DeletionStateCode,
    WizardAccessPrivilegeId,
    VersionNumber
) with view_metadata as 
select 
    -- logical attributes
    organization_wizardaccessprivilege.DeletionStateCode, 
    organization_wizardaccessprivilege.Name, 

    -- physical attributes
    WizardAccessPrivilegeBase.ModifiedBy,
    WizardAccessPrivilegeBase.PrivilegeName,
    WizardAccessPrivilegeBase.OrganizationId,
    WizardAccessPrivilegeBase.WebWizardId,
    WizardAccessPrivilegeBase.ModifiedOn,
    WizardAccessPrivilegeBase.EntityName,
    WizardAccessPrivilegeBase.CreatedOn,
    WizardAccessPrivilegeBase.CreatedBy,
    WizardAccessPrivilegeBase.DeletionStateCode,
    WizardAccessPrivilegeBase.WizardAccessPrivilegeId,
    WizardAccessPrivilegeBase.VersionNumber
from WizardAccessPrivilegeBase
    left join OrganizationBase organization_wizardaccessprivilege on (WizardAccessPrivilegeBase.OrganizationId = organization_wizardaccessprivilege.OrganizationId)

/****** Object:  View [dbo].[ConstraintBasedGroup]    Script Date: 04/11/2008 06:57:41 ******/




--
-- base view for ConstraintBasedGroup
--
create view [dbo].[ConstraintBasedGroup] (
    -- logical attributes
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    ModifiedBy,
    DeletionStateCode,
    GroupTypeCode,
    VersionNumber,
    Name,
    ModifiedOn,
    CreatedBy,
    OrganizationId,
    CreatedOn,
    ConstraintBasedGroupId,
    Description,
    Constraints,
    BusinessUnitId
) with view_metadata as 
select 
    -- logical attributes
    business_unit_constraint_based_groups.DeletionStateCode, 
    business_unit_constraint_based_groups.Name, 
    lk_constraintbasedgroup_createdby.DeletionStateCode, 
    lk_constraintbasedgroup_createdby.FullName, 
    lk_constraintbasedgroup_createdby.YomiFullName, 
    lk_constraintbasedgroup_modifiedby.DeletionStateCode, 
    lk_constraintbasedgroup_modifiedby.FullName, 
    lk_constraintbasedgroup_modifiedby.YomiFullName, 
    organization_constraint_based_groups.DeletionStateCode, 
    organization_constraint_based_groups.Name, 

    -- physical attributes
    ConstraintBasedGroupBase.ModifiedBy,
    ConstraintBasedGroupBase.DeletionStateCode,
    ConstraintBasedGroupBase.GroupTypeCode,
    ConstraintBasedGroupBase.VersionNumber,
    ConstraintBasedGroupBase.Name,
    ConstraintBasedGroupBase.ModifiedOn,
    ConstraintBasedGroupBase.CreatedBy,
    ConstraintBasedGroupBase.OrganizationId,
    ConstraintBasedGroupBase.CreatedOn,
    ConstraintBasedGroupBase.ConstraintBasedGroupId,
    ConstraintBasedGroupBase.Description,
    ConstraintBasedGroupBase.Constraints,
    ConstraintBasedGroupBase.BusinessUnitId
from ConstraintBasedGroupBase
    left join BusinessUnitBase business_unit_constraint_based_groups on (ConstraintBasedGroupBase.BusinessUnitId = business_unit_constraint_based_groups.BusinessUnitId)
    left join SystemUserBase lk_constraintbasedgroup_createdby with(nolock) on (ConstraintBasedGroupBase.CreatedBy = lk_constraintbasedgroup_createdby.SystemUserId)
    left join SystemUserBase lk_constraintbasedgroup_modifiedby with(nolock) on (ConstraintBasedGroupBase.ModifiedBy = lk_constraintbasedgroup_modifiedby.SystemUserId)
    left join OrganizationBase organization_constraint_based_groups on (ConstraintBasedGroupBase.OrganizationId = organization_constraint_based_groups.OrganizationId)

/****** Object:  View [dbo].[BusinessUnit]    Script Date: 04/11/2008 06:57:38 ******/




--
-- base view for BusinessUnit
--
create view [dbo].[BusinessUnit] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    ParentBusinessUnitIdDsc, 
    ParentBusinessUnitIdName, 

    -- linked address entities
    Address1_AddressId,
    Address1_AddressTypeCode,
    Address1_Name,
    Address1_Line1,
    Address1_Line2,
    Address1_Line3,
    Address1_City,
    Address1_StateOrProvince,
    Address1_County,
    Address1_Country,
    Address1_PostOfficeBox,
    Address1_PostalCode,
    Address1_UTCOffset,
    Address1_UPSZone,
    Address1_Latitude,
    Address1_Telephone1,
    Address1_Longitude,
    Address1_ShippingMethodCode,
    Address1_Telephone2,
    Address1_Telephone3,
    Address1_Fax,

    Address2_AddressId,
    Address2_AddressTypeCode,
    Address2_Name,
    Address2_Line1,
    Address2_Line2,
    Address2_Line3,
    Address2_City,
    Address2_StateOrProvince,
    Address2_County,
    Address2_Country,
    Address2_PostOfficeBox,
    Address2_PostalCode,
    Address2_UTCOffset,
    Address2_UPSZone,
    Address2_Latitude,
    Address2_Telephone1,
    Address2_Longitude,
    Address2_ShippingMethodCode,
    Address2_Telephone2,
    Address2_Telephone3,
    Address2_Fax,

    -- physical attributes
    BusinessUnitId,
    DeletionStateCode,
    OrganizationId,
    UserGroupId,
    Name,
    Description,
    DivisionName,
    FileAsName,
    TickerSymbol,
    StockExchange,
    UTCOffset,
    CreatedOn,
    ModifiedOn,
    CreditLimit,
    CostCenter,
    WebSiteUrl,
    FtpSiteUrl,
    EMailAddress,
    InheritanceMask,
    CreatedBy,
    ModifiedBy,
    WorkflowSuspended,
    ParentBusinessUnitId,
    IsDisabled,
    DisabledReason,
    VersionNumber,
    Picture,
    CalendarId,
    OverriddenCreatedOn,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_businessunitbase_createdby.DeletionStateCode, 
    lk_businessunitbase_createdby.FullName, 
    lk_businessunitbase_createdby.YomiFullName, 
    lk_businessunitbase_modifiedby.DeletionStateCode, 
    lk_businessunitbase_modifiedby.FullName, 
    lk_businessunitbase_modifiedby.YomiFullName, 
    organization_business_units.DeletionStateCode, 
    organization_business_units.Name, 
    business_unit_parent_business_unit.DeletionStateCode, 
    business_unit_parent_business_unit.Name, 

    -- linked address entities
    XXaddress1.InternalAddressId,
    XXaddress1.AddressTypeCode,
    XXaddress1.Name,
    XXaddress1.Line1,
    XXaddress1.Line2,
    XXaddress1.Line3,
    XXaddress1.City,
    XXaddress1.StateOrProvince,
    XXaddress1.County,
    XXaddress1.Country,
    XXaddress1.PostOfficeBox,
    XXaddress1.PostalCode,
    XXaddress1.UTCOffset,
    XXaddress1.UPSZone,
    XXaddress1.Latitude,
    XXaddress1.Telephone1,
    XXaddress1.Longitude,
    XXaddress1.ShippingMethodCode,
    XXaddress1.Telephone2,
    XXaddress1.Telephone3,
    XXaddress1.Fax,

    XXaddress2.InternalAddressId,
    XXaddress2.AddressTypeCode,
    XXaddress2.Name,
    XXaddress2.Line1,
    XXaddress2.Line2,
    XXaddress2.Line3,
    XXaddress2.City,
    XXaddress2.StateOrProvince,
    XXaddress2.County,
    XXaddress2.Country,
    XXaddress2.PostOfficeBox,
    XXaddress2.PostalCode,
    XXaddress2.UTCOffset,
    XXaddress2.UPSZone,
    XXaddress2.Latitude,
    XXaddress2.Telephone1,
    XXaddress2.Longitude,
    XXaddress2.ShippingMethodCode,
    XXaddress2.Telephone2,
    XXaddress2.Telephone3,
    XXaddress2.Fax,

    -- physical attributes
    BusinessUnitBase.BusinessUnitId,
    BusinessUnitBase.DeletionStateCode,
    BusinessUnitBase.OrganizationId,
    BusinessUnitBase.UserGroupId,
    BusinessUnitBase.Name,
    BusinessUnitBase.Description,
    BusinessUnitBase.DivisionName,
    BusinessUnitBase.FileAsName,
    BusinessUnitBase.TickerSymbol,
    BusinessUnitBase.StockExchange,
    BusinessUnitBase.UTCOffset,
    BusinessUnitBase.CreatedOn,
    BusinessUnitBase.ModifiedOn,
    BusinessUnitBase.CreditLimit,
    BusinessUnitBase.CostCenter,
    BusinessUnitBase.WebSiteUrl,
    BusinessUnitBase.FtpSiteUrl,
    BusinessUnitBase.EMailAddress,
    BusinessUnitBase.InheritanceMask,
    BusinessUnitBase.CreatedBy,
    BusinessUnitBase.ModifiedBy,
    BusinessUnitBase.WorkflowSuspended,
    BusinessUnitBase.ParentBusinessUnitId,
    BusinessUnitBase.IsDisabled,
    BusinessUnitBase.DisabledReason,
    BusinessUnitBase.VersionNumber,
    BusinessUnitBase.Picture,
    BusinessUnitBase.CalendarId,
    BusinessUnitBase.OverriddenCreatedOn,
    BusinessUnitBase.ImportSequenceNumber
from BusinessUnitBase

    left join InternalAddressBase XXaddress1 on (BusinessUnitBase.BusinessUnitId = XXaddress1.ParentId and XXaddress1.AddressNumber = 1)
    left join InternalAddressBase XXaddress2 on (BusinessUnitBase.BusinessUnitId = XXaddress2.ParentId and XXaddress2.AddressNumber = 2)
    left join BusinessUnitBase business_unit_parent_business_unit on (BusinessUnitBase.ParentBusinessUnitId = business_unit_parent_business_unit.BusinessUnitId)
    left join SystemUserBase lk_businessunitbase_createdby with(nolock) on (BusinessUnitBase.CreatedBy = lk_businessunitbase_createdby.SystemUserId)
    left join SystemUserBase lk_businessunitbase_modifiedby with(nolock) on (BusinessUnitBase.ModifiedBy = lk_businessunitbase_modifiedby.SystemUserId)
    left join OrganizationBase organization_business_units on (BusinessUnitBase.OrganizationId = organization_business_units.OrganizationId)

/****** Object:  View [dbo].[Role]    Script Date: 04/11/2008 06:58:28 ******/




--
-- base view for Role
--
create view [dbo].[Role] (
    -- logical attributes
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    ParentRoleIdDsc, 
    ParentRoleIdName, 

    -- physical attributes
    RoleId,
    RoleTemplateId,
    OrganizationId,
    DeletionStateCode,
    Name,
    BusinessUnitId,
    CreatedOn,
    ModifiedOn,
    CreatedBy,
    VersionNumber,
    ModifiedBy,
    ParentRoleId,
    OverriddenCreatedOn,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    business_unit_roles.DeletionStateCode, 
    business_unit_roles.Name, 
    lk_rolebase_createdby.DeletionStateCode, 
    lk_rolebase_createdby.FullName, 
    lk_rolebase_createdby.YomiFullName, 
    lk_rolebase_modifiedby.DeletionStateCode, 
    lk_rolebase_modifiedby.FullName, 
    lk_rolebase_modifiedby.YomiFullName, 
    organization_roles.DeletionStateCode, 
    organization_roles.Name, 
    role_parent_role.DeletionStateCode, 
    role_parent_role.Name, 

    -- physical attributes
    RoleBase.RoleId,
    RoleBase.RoleTemplateId,
    RoleBase.OrganizationId,
    RoleBase.DeletionStateCode,
    RoleBase.Name,
    RoleBase.BusinessUnitId,
    RoleBase.CreatedOn,
    RoleBase.ModifiedOn,
    RoleBase.CreatedBy,
    RoleBase.VersionNumber,
    RoleBase.ModifiedBy,
    RoleBase.ParentRoleId,
    RoleBase.OverriddenCreatedOn,
    RoleBase.ImportSequenceNumber
from RoleBase
    left join BusinessUnitBase business_unit_roles on (RoleBase.BusinessUnitId = business_unit_roles.BusinessUnitId)
    left join SystemUserBase lk_rolebase_createdby with(nolock) on (RoleBase.CreatedBy = lk_rolebase_createdby.SystemUserId)
    left join SystemUserBase lk_rolebase_modifiedby with(nolock) on (RoleBase.ModifiedBy = lk_rolebase_modifiedby.SystemUserId)
    left join OrganizationBase organization_roles on (RoleBase.OrganizationId = organization_roles.OrganizationId)
    left join RoleBase role_parent_role on (RoleBase.ParentRoleId = role_parent_role.RoleId)

/****** Object:  View [dbo].[SystemUser]    Script Date: 04/11/2008 06:58:33 ******/




--
-- base view for SystemUser
--
create view [dbo].[SystemUser] (
    -- logical attributes
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    ParentSystemUserIdDsc, 
    ParentSystemUserIdName, 
    ParentSystemUserIdYomiName, 
    SiteIdDsc, 
    SiteIdName, 
    TerritoryIdDsc, 
    TerritoryIdName, 

    -- linked address entities
    Address1_AddressId,
    Address1_AddressTypeCode,
    Address1_Name,
    Address1_Line1,
    Address1_Line2,
    Address1_Line3,
    Address1_City,
    Address1_StateOrProvince,
    Address1_County,
    Address1_Country,
    Address1_PostOfficeBox,
    Address1_PostalCode,
    Address1_UTCOffset,
    Address1_UPSZone,
    Address1_Latitude,
    Address1_Telephone1,
    Address1_Longitude,
    Address1_ShippingMethodCode,
    Address1_Telephone2,
    Address1_Telephone3,
    Address1_Fax,

    Address2_AddressId,
    Address2_AddressTypeCode,
    Address2_Name,
    Address2_Line1,
    Address2_Line2,
    Address2_Line3,
    Address2_City,
    Address2_StateOrProvince,
    Address2_County,
    Address2_Country,
    Address2_PostOfficeBox,
    Address2_PostalCode,
    Address2_UTCOffset,
    Address2_UPSZone,
    Address2_Latitude,
    Address2_Telephone1,
    Address2_Longitude,
    Address2_ShippingMethodCode,
    Address2_Telephone2,
    Address2_Telephone3,
    Address2_Fax,

    -- physical attributes
    SystemUserId,
    DeletionStateCode,
    TerritoryId,
    OrganizationId,
    BusinessUnitId,
    ParentSystemUserId,
    FirstName,
    Salutation,
    MiddleName,
    LastName,
    PersonalEMailAddress,
    FullName,
    NickName,
    Title,
    InternalEMailAddress,
    JobTitle,
    MobileAlertEMail,
    PreferredEmailCode,
    HomePhone,
    MobilePhone,
    PreferredPhoneCode,
    PreferredAddressCode,
    PhotoUrl,
    DomainName,
    PassportLo,
    CreatedOn,
    PassportHi,
    DisabledReason,
    ModifiedOn,
    CreatedBy,
    EmployeeId,
    ModifiedBy,
    IsDisabled,
    GovernmentId,
    VersionNumber,
    Skills,
    DisplayInServiceViews,
    CalendarId,
    ActiveDirectoryGuid,
    SetupUser,
    SiteId,
    WindowsLiveID,
    IncomingEmailDeliveryMethod,
    OutgoingEmailDeliveryMethod,
    ImportSequenceNumber,
    AccessMode,
    InviteStatusCode,
    IsActiveDirectoryUser,
    OverriddenCreatedOn,
    UTCConversionTimeZoneCode,
    TimeZoneRuleVersionNumber,
    YomiFullName,
    YomiLastName,
    YomiMiddleName,
    YomiFirstName
) with view_metadata as 
select 
    -- logical attributes
    business_unit_system_users.DeletionStateCode, 
    business_unit_system_users.Name, 
    lk_systemuserbase_createdby.DeletionStateCode, 
    lk_systemuserbase_createdby.FullName, 
    lk_systemuserbase_createdby.YomiFullName, 
    lk_systemuserbase_modifiedby.DeletionStateCode, 
    lk_systemuserbase_modifiedby.FullName, 
    lk_systemuserbase_modifiedby.YomiFullName, 
    organization_system_users.DeletionStateCode, 
    organization_system_users.Name, 
    user_parent_user.DeletionStateCode, 
    user_parent_user.FullName, 
    user_parent_user.YomiFullName, 
    site_system_users.DeletionStateCode, 
    site_system_users.Name, 
    territory_system_users.DeletionStateCode, 
    territory_system_users.Name, 

    -- linked address entities
    XXaddress1.InternalAddressId,
    XXaddress1.AddressTypeCode,
    XXaddress1.Name,
    XXaddress1.Line1,
    XXaddress1.Line2,
    XXaddress1.Line3,
    XXaddress1.City,
    XXaddress1.StateOrProvince,
    XXaddress1.County,
    XXaddress1.Country,
    XXaddress1.PostOfficeBox,
    XXaddress1.PostalCode,
    XXaddress1.UTCOffset,
    XXaddress1.UPSZone,
    XXaddress1.Latitude,
    XXaddress1.Telephone1,
    XXaddress1.Longitude,
    XXaddress1.ShippingMethodCode,
    XXaddress1.Telephone2,
    XXaddress1.Telephone3,
    XXaddress1.Fax,

    XXaddress2.InternalAddressId,
    XXaddress2.AddressTypeCode,
    XXaddress2.Name,
    XXaddress2.Line1,
    XXaddress2.Line2,
    XXaddress2.Line3,
    XXaddress2.City,
    XXaddress2.StateOrProvince,
    XXaddress2.County,
    XXaddress2.Country,
    XXaddress2.PostOfficeBox,
    XXaddress2.PostalCode,
    XXaddress2.UTCOffset,
    XXaddress2.UPSZone,
    XXaddress2.Latitude,
    XXaddress2.Telephone1,
    XXaddress2.Longitude,
    XXaddress2.ShippingMethodCode,
    XXaddress2.Telephone2,
    XXaddress2.Telephone3,
    XXaddress2.Fax,

    -- physical attributes
    SystemUserBase.SystemUserId,
    SystemUserBase.DeletionStateCode,
    SystemUserBase.TerritoryId,
    SystemUserBase.OrganizationId,
    SystemUserBase.BusinessUnitId,
    SystemUserBase.ParentSystemUserId,
    SystemUserBase.FirstName,
    SystemUserBase.Salutation,
    SystemUserBase.MiddleName,
    SystemUserBase.LastName,
    SystemUserBase.PersonalEMailAddress,
    SystemUserBase.FullName,
    SystemUserBase.NickName,
    SystemUserBase.Title,
    SystemUserBase.InternalEMailAddress,
    SystemUserBase.JobTitle,
    SystemUserBase.MobileAlertEMail,
    SystemUserBase.PreferredEmailCode,
    SystemUserBase.HomePhone,
    SystemUserBase.MobilePhone,
    SystemUserBase.PreferredPhoneCode,
    SystemUserBase.PreferredAddressCode,
    SystemUserBase.PhotoUrl,
    SystemUserBase.DomainName,
    SystemUserBase.PassportLo,
    SystemUserBase.CreatedOn,
    SystemUserBase.PassportHi,
    SystemUserBase.DisabledReason,
    SystemUserBase.ModifiedOn,
    SystemUserBase.CreatedBy,
    SystemUserBase.EmployeeId,
    SystemUserBase.ModifiedBy,
    SystemUserBase.IsDisabled,
    SystemUserBase.GovernmentId,
    SystemUserBase.VersionNumber,
    SystemUserBase.Skills,
    SystemUserBase.DisplayInServiceViews,
    SystemUserBase.CalendarId,
    SystemUserBase.ActiveDirectoryGuid,
    SystemUserBase.SetupUser,
    SystemUserBase.SiteId,
    SystemUserBase.WindowsLiveID,
    SystemUserBase.IncomingEmailDeliveryMethod,
    SystemUserBase.OutgoingEmailDeliveryMethod,
    SystemUserBase.ImportSequenceNumber,
    SystemUserBase.AccessMode,
    SystemUserBase.InviteStatusCode,
    SystemUserBase.IsActiveDirectoryUser,
    SystemUserBase.OverriddenCreatedOn,
    SystemUserBase.UTCConversionTimeZoneCode,
    SystemUserBase.TimeZoneRuleVersionNumber,
    SystemUserBase.YomiFullName,
    SystemUserBase.YomiLastName,
    SystemUserBase.YomiMiddleName,
    SystemUserBase.YomiFirstName
from SystemUserBase

    left join InternalAddressBase XXaddress1 on (SystemUserBase.SystemUserId = XXaddress1.ParentId and XXaddress1.AddressNumber = 1)
    left join InternalAddressBase XXaddress2 on (SystemUserBase.SystemUserId = XXaddress2.ParentId and XXaddress2.AddressNumber = 2)
    left join BusinessUnitBase business_unit_system_users on (SystemUserBase.BusinessUnitId = business_unit_system_users.BusinessUnitId)
    left join SystemUserBase lk_systemuserbase_createdby with(nolock) on (SystemUserBase.CreatedBy = lk_systemuserbase_createdby.SystemUserId)
    left join SystemUserBase lk_systemuserbase_modifiedby with(nolock) on (SystemUserBase.ModifiedBy = lk_systemuserbase_modifiedby.SystemUserId)
    left join OrganizationBase organization_system_users on (SystemUserBase.OrganizationId = organization_system_users.OrganizationId)
    left join SiteBase site_system_users on (SystemUserBase.SiteId = site_system_users.SiteId)
    left join TerritoryBase territory_system_users on (SystemUserBase.TerritoryId = territory_system_users.TerritoryId)
    left join SystemUserBase user_parent_user with(nolock) on (SystemUserBase.ParentSystemUserId = user_parent_user.SystemUserId)

/****** Object:  View [dbo].[KbArticle]    Script Date: 04/11/2008 06:58:18 ******/




--
-- base view for KbArticle
--
create view [dbo].[KbArticle] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    KbArticleTemplateIdDsc, 
    KbArticleTemplateIdTitle, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    SubjectIdDsc, 
    SubjectIdName, 

    -- physical attributes
    KbArticleId,
    KbArticleTemplateId,
    OrganizationId,
    SubjectId,
    ArticleXml,
    DeletionStateCode,
    Title,
    Number,
    Content,
    Description,
    Comments,
    CreatedOn,
    CreatedBy,
    ModifiedBy,
    ModifiedOn,
    StateCode,
    StatusCode,
    VersionNumber,
    KeyWords,
    ImportSequenceNumber,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_kbarticlebase_createdby.DeletionStateCode, 
    lk_kbarticlebase_createdby.FullName, 
    lk_kbarticlebase_createdby.YomiFullName, 
    kb_article_template_kb_articles.DeletionStateCode, 
    kb_article_template_kb_articles.Title, 
    lk_kbarticlebase_modifiedby.DeletionStateCode, 
    lk_kbarticlebase_modifiedby.FullName, 
    lk_kbarticlebase_modifiedby.YomiFullName, 
    organization_kb_articles.DeletionStateCode, 
    organization_kb_articles.Name, 
    subject_kb_articles.DeletionStateCode, 
    subject_kb_articles.Title, 

    -- physical attributes
    KbArticleBase.KbArticleId,
    KbArticleBase.KbArticleTemplateId,
    KbArticleBase.OrganizationId,
    KbArticleBase.SubjectId,
    KbArticleBase.ArticleXml,
    KbArticleBase.DeletionStateCode,
    KbArticleBase.Title,
    KbArticleBase.Number,
    KbArticleBase.Content,
    KbArticleBase.Description,
    KbArticleBase.Comments,
    KbArticleBase.CreatedOn,
    KbArticleBase.CreatedBy,
    KbArticleBase.ModifiedBy,
    KbArticleBase.ModifiedOn,
    KbArticleBase.StateCode,
    KbArticleBase.StatusCode,
    KbArticleBase.VersionNumber,
    KbArticleBase.KeyWords,
    KbArticleBase.ImportSequenceNumber,
    KbArticleBase.OverriddenCreatedOn
from KbArticleBase
    left join KbArticleTemplateBase kb_article_template_kb_articles on (KbArticleBase.KbArticleTemplateId = kb_article_template_kb_articles.KbArticleTemplateId)
    left join SystemUserBase lk_kbarticlebase_createdby with(nolock) on (KbArticleBase.CreatedBy = lk_kbarticlebase_createdby.SystemUserId)
    left join SystemUserBase lk_kbarticlebase_modifiedby with(nolock) on (KbArticleBase.ModifiedBy = lk_kbarticlebase_modifiedby.SystemUserId)
    left join OrganizationBase organization_kb_articles on (KbArticleBase.OrganizationId = organization_kb_articles.OrganizationId)
    left join SubjectBase subject_kb_articles on (KbArticleBase.SubjectId = subject_kb_articles.SubjectId)

/****** Object:  View [dbo].[RelationshipRole]    Script Date: 04/11/2008 06:58:26 ******/




--
-- base view for RelationshipRole
--
create view [dbo].[RelationshipRole] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    DeletionStateCode,
    Description,
    Name,
    StatusCode,
    RelationshipRoleId,
    CreatedOn,
    OrganizationId,
    ModifiedBy,
    VersionNumber,
    CreatedBy,
    ModifiedOn,
    StateCode,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    createdby_relationship_role.DeletionStateCode, 
    createdby_relationship_role.FullName, 
    createdby_relationship_role.YomiFullName, 
    modifiedby_relationship_role.DeletionStateCode, 
    modifiedby_relationship_role.FullName, 
    modifiedby_relationship_role.YomiFullName, 
    organization_relationship_roles.DeletionStateCode, 
    organization_relationship_roles.Name, 

    -- physical attributes
    RelationshipRoleBase.DeletionStateCode,
    RelationshipRoleBase.Description,
    RelationshipRoleBase.Name,
    RelationshipRoleBase.StatusCode,
    RelationshipRoleBase.RelationshipRoleId,
    RelationshipRoleBase.CreatedOn,
    RelationshipRoleBase.OrganizationId,
    RelationshipRoleBase.ModifiedBy,
    RelationshipRoleBase.VersionNumber,
    RelationshipRoleBase.CreatedBy,
    RelationshipRoleBase.ModifiedOn,
    RelationshipRoleBase.StateCode,
    RelationshipRoleBase.ImportSequenceNumber
from RelationshipRoleBase
    left join SystemUserBase createdby_relationship_role with(nolock) on (RelationshipRoleBase.CreatedBy = createdby_relationship_role.SystemUserId)
    left join SystemUserBase modifiedby_relationship_role with(nolock) on (RelationshipRoleBase.ModifiedBy = modifiedby_relationship_role.SystemUserId)
    left join OrganizationBase organization_relationship_roles on (RelationshipRoleBase.OrganizationId = organization_relationship_roles.OrganizationId)

/****** Object:  View [dbo].[Calendar]    Script Date: 04/11/2008 06:57:39 ******/




--
-- base view for Calendar
--
create view [dbo].[Calendar] (
    -- logical attributes
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    ModifiedBy,
    CalendarId,
    Description,
    CreatedOn,
    Name,
    BusinessUnitId,
    VersionNumber,
    ModifiedOn,
    CreatedBy,
    DeletionStateCode,
    PrimaryUserId,
    OrganizationId,
    IsShared
) with view_metadata as 
select 
    -- logical attributes
    business_unit_calendars.DeletionStateCode, 
    business_unit_calendars.Name, 
    lk_calendar_createdby.DeletionStateCode, 
    lk_calendar_createdby.FullName, 
    lk_calendar_createdby.YomiFullName, 
    lk_calendar_modifiedby.DeletionStateCode, 
    lk_calendar_modifiedby.FullName, 
    lk_calendar_modifiedby.YomiFullName, 
    organization_calendars.DeletionStateCode, 
    organization_calendars.Name, 

    -- physical attributes
    CalendarBase.ModifiedBy,
    CalendarBase.CalendarId,
    CalendarBase.Description,
    CalendarBase.CreatedOn,
    CalendarBase.Name,
    CalendarBase.BusinessUnitId,
    CalendarBase.VersionNumber,
    CalendarBase.ModifiedOn,
    CalendarBase.CreatedBy,
    CalendarBase.DeletionStateCode,
    CalendarBase.PrimaryUserId,
    CalendarBase.OrganizationId,
    CalendarBase.IsShared
from CalendarBase
    left join BusinessUnitBase business_unit_calendars on (CalendarBase.BusinessUnitId = business_unit_calendars.BusinessUnitId)
    left join SystemUserBase lk_calendar_createdby with(nolock) on (CalendarBase.CreatedBy = lk_calendar_createdby.SystemUserId)
    left join SystemUserBase lk_calendar_modifiedby with(nolock) on (CalendarBase.ModifiedBy = lk_calendar_modifiedby.SystemUserId)
    left join OrganizationBase organization_calendars on (CalendarBase.OrganizationId = organization_calendars.OrganizationId)

/****** Object:  StoredProcedure [dbo].[p_AddSpecialUsers]    Script Date: 04/11/2008 06:34:56 ******/




CREATE PROCEDURE [dbo].[p_AddSpecialUsers](@organizationid uniqueidentifier) as
BEGIN
	
	SET NOCOUNT ON
	
	declare @rootBizId uniqueidentifier
	
	select @rootBizId = BusinessUnitId from BusinessUnitBase where ParentBusinessUnitId is null and OrganizationId = @organizationid
	
	-- System User

	declare @sysUserId uniqueidentifier
	select @sysUserId = newid()
	
	-- TODO: localize the names
	
	insert into SystemUserBase(SystemUserId, DeletionStateCode, OrganizationId, BusinessUnitId, FirstName, LastName, FullName, DomainName, CreatedOn, CreatedBy, ModifiedOn, ModifiedBy, IsDisabled, ActiveDirectoryGuid)
	                    values(@sysUserId, 0, @organizationid, @rootBizId, '', 'SYSTEM', 'SYSTEM', '', getutcdate(), NULL, getutcdate(), NULL, 1, newid())

	
	-- Integration User	

	declare @integUserId uniqueidentifier
	select @integUserId = newid()
	
	insert into SystemUserBase(SystemUserId, DeletionStateCode, OrganizationId, BusinessUnitId, FirstName, LastName, FullName, DomainName, CreatedOn, CreatedBy, ModifiedOn, ModifiedBy, IsDisabled, ActiveDirectoryGuid)
	                    values(@integUserId, 0, @organizationid, @rootBizId, '', 'INTEGRATION', 'INTEGRATION', '', getutcdate(), NULL, getutcdate(), NULL, 1, newid())
	                    
	update OrganizationBase set SystemUserId = @sysUserId, IntegrationUserId = @integUserId where OrganizationId = @organizationid
	                    
	select @sysUserId as 'systemuserid', @integUserId as 'integrationuserid'
END

/****** Object:  View [dbo].[Resource]    Script Date: 04/11/2008 06:58:27 ******/




--
-- base view for Resource
--
create view [dbo].[Resource] (
    -- logical attributes
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    SiteIdDsc, 
    SiteIdName, 

    -- physical attributes
    DisplayInServiceViews,
    ObjectTypeCode,
    BusinessUnitId,
    CalendarId,
    IsDisabled,
    ResourceId,
    VersionNumber,
    OrganizationId,
    Name,
    SiteId,
    DeletionStateCode
) with view_metadata as 
select 
    -- logical attributes
    business_unit_resources.DeletionStateCode, 
    business_unit_resources.Name, 
    organization_resources.DeletionStateCode, 
    organization_resources.Name, 
    site_resources.DeletionStateCode, 
    site_resources.Name, 

    -- physical attributes
    ResourceBase.DisplayInServiceViews,
    ResourceBase.ObjectTypeCode,
    ResourceBase.BusinessUnitId,
    ResourceBase.CalendarId,
    ResourceBase.IsDisabled,
    ResourceBase.ResourceId,
    ResourceBase.VersionNumber,
    ResourceBase.OrganizationId,
    ResourceBase.Name,
    ResourceBase.SiteId,
    ResourceBase.DeletionStateCode
from ResourceBase
    left join BusinessUnitBase business_unit_resources on (ResourceBase.BusinessUnitId = business_unit_resources.BusinessUnitId)
    left join OrganizationBase organization_resources on (ResourceBase.OrganizationId = organization_resources.OrganizationId)
    left join SiteBase site_resources on (ResourceBase.SiteId = site_resources.SiteId)

/****** Object:  View [dbo].[KbArticleTemplate]    Script Date: 04/11/2008 06:58:19 ******/




--
-- base view for KbArticleTemplate
--
create view [dbo].[KbArticleTemplate] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    KbArticleTemplateId,
    StructureXml,
    OrganizationId,
    DeletionStateCode,
    FormatXml,
    Title,
    VersionNumber,
    Description,
    IsActive,
    CreatedBy,
    ModifiedBy,
    CreatedOn,
    ModifiedOn,
    OverriddenCreatedOn,
    LanguageCode,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_kbarticletemplatebase_createdby.DeletionStateCode, 
    lk_kbarticletemplatebase_createdby.FullName, 
    lk_kbarticletemplatebase_createdby.YomiFullName, 
    lk_kbarticletemplatebase_modifiedby.DeletionStateCode, 
    lk_kbarticletemplatebase_modifiedby.FullName, 
    lk_kbarticletemplatebase_modifiedby.YomiFullName, 
    organization_kb_article_templates.DeletionStateCode, 
    organization_kb_article_templates.Name, 

    -- physical attributes
    KbArticleTemplateBase.KbArticleTemplateId,
    KbArticleTemplateBase.StructureXml,
    KbArticleTemplateBase.OrganizationId,
    KbArticleTemplateBase.DeletionStateCode,
    KbArticleTemplateBase.FormatXml,
    KbArticleTemplateBase.Title,
    KbArticleTemplateBase.VersionNumber,
    KbArticleTemplateBase.Description,
    KbArticleTemplateBase.IsActive,
    KbArticleTemplateBase.CreatedBy,
    KbArticleTemplateBase.ModifiedBy,
    KbArticleTemplateBase.CreatedOn,
    KbArticleTemplateBase.ModifiedOn,
    KbArticleTemplateBase.OverriddenCreatedOn,
    KbArticleTemplateBase.LanguageCode,
    KbArticleTemplateBase.ImportSequenceNumber
from KbArticleTemplateBase
    left join SystemUserBase lk_kbarticletemplatebase_createdby with(nolock) on (KbArticleTemplateBase.CreatedBy = lk_kbarticletemplatebase_createdby.SystemUserId)
    left join SystemUserBase lk_kbarticletemplatebase_modifiedby with(nolock) on (KbArticleTemplateBase.ModifiedBy = lk_kbarticletemplatebase_modifiedby.SystemUserId)
    left join OrganizationBase organization_kb_article_templates on (KbArticleTemplateBase.OrganizationId = organization_kb_article_templates.OrganizationId)

/****** Object:  View [dbo].[ResourceSpec]    Script Date: 04/11/2008 06:58:28 ******/




--
-- base view for ResourceSpec
--
create view [dbo].[ResourceSpec] (
    -- logical attributes
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    EffortRequired,
    OrganizationId,
    ModifiedOn,
    DeletionStateCode,
    ObjectTypeCode,
    Description,
    ModifiedBy,
    BusinessUnitId,
    Name,
    CreatedBy,
    CreatedOn,
    VersionNumber,
    ObjectiveExpression,
    SameSite,
    Constraints,
    ResourceSpecId,
    GroupObjectId,
    RequiredCount
) with view_metadata as 
select 
    -- logical attributes
    business_unit_resource_specs.DeletionStateCode, 
    business_unit_resource_specs.Name, 
    lk_resourcespec_createdby.DeletionStateCode, 
    lk_resourcespec_createdby.FullName, 
    lk_resourcespec_createdby.YomiFullName, 
    lk_resourcespec_modifiedby.DeletionStateCode, 
    lk_resourcespec_modifiedby.FullName, 
    lk_resourcespec_modifiedby.YomiFullName, 
    organization_resource_specs.DeletionStateCode, 
    organization_resource_specs.Name, 

    -- physical attributes
    ResourceSpecBase.EffortRequired,
    ResourceSpecBase.OrganizationId,
    ResourceSpecBase.ModifiedOn,
    ResourceSpecBase.DeletionStateCode,
    ResourceSpecBase.ObjectTypeCode,
    ResourceSpecBase.Description,
    ResourceSpecBase.ModifiedBy,
    ResourceSpecBase.BusinessUnitId,
    ResourceSpecBase.Name,
    ResourceSpecBase.CreatedBy,
    ResourceSpecBase.CreatedOn,
    ResourceSpecBase.VersionNumber,
    ResourceSpecBase.ObjectiveExpression,
    ResourceSpecBase.SameSite,
    ResourceSpecBase.Constraints,
    ResourceSpecBase.ResourceSpecId,
    ResourceSpecBase.GroupObjectId,
    ResourceSpecBase.RequiredCount
from ResourceSpecBase
    left join BusinessUnitBase business_unit_resource_specs on (ResourceSpecBase.BusinessUnitId = business_unit_resource_specs.BusinessUnitId)
    left join SystemUserBase lk_resourcespec_createdby with(nolock) on (ResourceSpecBase.CreatedBy = lk_resourcespec_createdby.SystemUserId)
    left join SystemUserBase lk_resourcespec_modifiedby with(nolock) on (ResourceSpecBase.ModifiedBy = lk_resourcespec_modifiedby.SystemUserId)
    left join OrganizationBase organization_resource_specs on (ResourceSpecBase.OrganizationId = organization_resource_specs.OrganizationId)

/****** Object:  View [dbo].[philipri_customizationversion]    Script Date: 04/11/2008 06:58:22 ******/




--
-- base view for philipri_customizationversion
--
create view [dbo].[philipri_customizationversion] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    ModifiedByDsc, 
    ModifiedByName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    philipri_customizationversionId,
    CreatedOn,
    CreatedBy,
    ModifiedOn,
    ModifiedBy,
    OrganizationId,
    statecode,
    statuscode,
    DeletionStateCode,
    VersionNumber,
    ImportSequenceNumber,
    OverriddenCreatedOn,
    TimeZoneRuleVersionNumber,
    UTCConversionTimeZoneCode,
    philipri_name
) with view_metadata as 
select 
    -- logical attributes
    lk_philipri_customizationversion_createdby.DeletionStateCode, 
    lk_philipri_customizationversion_createdby.FullName, 
    lk_philipri_customizationversion_modifiedby.DeletionStateCode, 
    lk_philipri_customizationversion_modifiedby.FullName, 
    organization_philipri_customizationversion.DeletionStateCode, 
    organization_philipri_customizationversion.Name, 

    -- physical attributes
    philipri_customizationversionBase.philipri_customizationversionId,
    philipri_customizationversionBase.CreatedOn,
    philipri_customizationversionBase.CreatedBy,
    philipri_customizationversionBase.ModifiedOn,
    philipri_customizationversionBase.ModifiedBy,
    philipri_customizationversionBase.OrganizationId,
    philipri_customizationversionBase.statecode,
    philipri_customizationversionBase.statuscode,
    philipri_customizationversionBase.DeletionStateCode,
    philipri_customizationversionBase.VersionNumber,
    philipri_customizationversionBase.ImportSequenceNumber,
    philipri_customizationversionBase.OverriddenCreatedOn,
    philipri_customizationversionBase.TimeZoneRuleVersionNumber,
    philipri_customizationversionBase.UTCConversionTimeZoneCode,
        philipri_customizationversionExtensionBase.philipri_name
from philipri_customizationversionBase
    left join philipri_customizationversionExtensionBase on (philipri_customizationversionBase.philipri_customizationversionId = philipri_customizationversionExtensionBase.philipri_customizationversionId)
    left join SystemUserBase lk_philipri_customizationversion_createdby with(nolock) on (philipri_customizationversionBase.CreatedBy = lk_philipri_customizationversion_createdby.SystemUserId)
    left join SystemUserBase lk_philipri_customizationversion_modifiedby with(nolock) on (philipri_customizationversionBase.ModifiedBy = lk_philipri_customizationversion_modifiedby.SystemUserId)
    left join OrganizationBase organization_philipri_customizationversion on (philipri_customizationversionBase.OrganizationId = organization_philipri_customizationversion.OrganizationId)

/****** Object:  StoredProcedure [dbo].[p_GetNextEmailTrackingNumber]    Script Date: 04/11/2008 06:35:15 ******/




-- Register the new procedure
CREATE PROCEDURE [dbo].[p_GetNextEmailTrackingNumber] @IsOffline bit, @SystemUserId uniqueidentifier = NULL, @BusinessUnitId uniqueidentifier = NULL
AS
BEGIN
	-- Do not display the returned row count
	SET NOCOUNT ON
	
	-- Declare variables of interest
	DECLARE @maximumtrackingnumber	int				-- maximum tracking number
	DECLARE @trackingprefix			nvarchar(256)	-- tracking prefix history list
	DECLARE @trackingtokenid		int				-- tracking token id
	DECLARE @trackingtokeniddigits	tinyint			-- tracking token id digit count
	DECLARE @trackingtokenidbase	int				-- tracking token id base
	DECLARE @nexttrackingnumber		int				-- tracking number (online mode only)

	-- Get tracking information from the organization (assumes we have only one)
	SELECT 
		@maximumtrackingnumber		= MaximumTrackingNumber,
		@trackingprefix				= TrackingPrefix, 
		@trackingtokeniddigits		= TrackingTokenIdDigits, 
		@trackingtokenidbase		= TrackingTokenIdBase 
	FROM OrganizationBase

	-- Normalize the maximum tracking number
	IF @maximumtrackingnumber IS NULL SELECT @maximumtrackingnumber = 9999 -- default max tracking number
	IF @maximumtrackingnumber > 2147483647 SELECT @maximumtrackingnumber = 2147483647 -- max int
	
	-- Normalize the tracking token id digit count
	IF @trackingtokeniddigits IS NULL SELECT @trackingtokeniddigits = 3 -- digits reserved for the tracking token id
	
	-- Normalize the tracking token id base
	IF @trackingtokenidbase IS NULL SELECT @trackingtokenidbase = 0 -- default base for tracking token ids
		
	-- If the maximum tracking number is set to zero or less, we do not use tokens
	IF (@maximumtrackingnumber <= 0)
	BEGIN
		-- Set values
		SELECT @nexttrackingnumber		= 0
		SELECT @maximumtrackingnumber	= 0
		SELECT @trackingprefix			= ''
		SELECT @trackingtokenid			= 0
		SELECT @trackingtokeniddigits	= 0
		SELECT @trackingtokenidbase		= 0
	END
	ELSE
	BEGIN	
		BEGIN
			-- Create a transaction to read and increment the tracking number
			-- Since we will update only when offline, the transaction may not be required
			-- However this unifies the logic, and offline locking has almost no cost (since there is only one user)
			-- TODO: make sure we restore locking in the stored procedure generating tracking tokens once security and platform caches have migrated to managed code
			BEGIN TRANSACTION
				-- Get the tracking number either from the organization or the user
				IF (@SystemUserId IS NULL) SELECT @nexttrackingnumber = NextTrackingNumber, @trackingtokenid = 0 FROM OrganizationBase
				ELSE SELECT @nexttrackingnumber = NextTrackingNumber, @trackingtokenid = TrackingTokenId FROM UserSettingsBase WHERE SystemUserId = @SystemUserId AND BusinessUnitId = @BusinessUnitId
				
				-- In offline mode, we increment a registry value and must skip the update
				-- If we incremented the database value while offline, this would cause problems on client synchronization
				-- The latest update between the online and offline changes would win, which could be the lower number
				IF (@IsOffline = 0)
				BEGIN
					-- Increment and normalize the tracking number
					IF @nexttrackingnumber IS NULL SELECT @nexttrackingnumber = 0
					IF @nexttrackingnumber >= @maximumtrackingnumber SELECT @nexttrackingnumber = 0
					SELECT @nexttrackingnumber = (@nexttrackingnumber + 1)
				
					-- Update the tracking number on the organization or the user
					IF @SystemUserId IS NULL UPDATE OrganizationBase SET NextTrackingNumber = @nexttrackingnumber
					ELSE UPDATE UserSettingsBase SET NextTrackingNumber = @nexttrackingnumber FROM UserSettingsBase WHERE SystemUserId = @SystemUserId AND BusinessUnitId = @BusinessUnitId
				END
			COMMIT TRANSACTION
		END
	END
	
	-- Return results
	SELECT 
		@trackingprefix			AS 'trackingprefix', 
		@nexttrackingnumber		AS 'nexttrackingnumber', 
		@trackingtokenid		AS 'trackingtokenid', 
		@maximumtrackingnumber	AS 'maximumtrackingnumber', 
		@trackingtokeniddigits	AS 'trackingtokeniddigits', 
		@trackingtokenidbase	AS 'trackingtokenidbase'
END

/****** Object:  StoredProcedure [dbo].[p_GetFullName]    Script Date: 04/11/2008 06:35:14 ******/




create procedure [dbo].[p_GetFullName](@organizationid uniqueidentifier, @firstname nvarchar(50), @lastname nvarchar(50), @middlename nvarchar(50)) as
set nocount on

declare @fn_lastfirst int
declare @fn_firstname int
declare @fn_lastfirstmiddleinitial int
declare @fn_firstmiddleinitiallast int
declare @fn_lastfirstmiddle int
declare @fn_firstmiddlelast int
declare @fn_last_space_first int
declare @fn_last_nospace_first int

set @fn_lastfirst = 0
set @fn_firstname = 1
set @fn_lastfirstmiddleinitial = 2
set @fn_firstmiddleinitiallast = 3
set @fn_lastfirstmiddle = 4
set @fn_firstmiddlelast = 5
set @fn_last_space_first = 6
set @fn_last_nospace_first = 7

declare @FullnameConventionCode int
declare @fullname nvarchar(160)

if @organizationid is not null
	select @FullnameConventionCode = coalesce(FullNameConventionCode, @fn_lastfirst)
	from OrganizationBase
	where OrganizationId = @organizationid

set @firstname = rtrim(ltrim(@firstname))
set @lastname = rtrim(ltrim(@lastname))
set @middlename = rtrim(ltrim(@middlename))

if @FullnameConventionCode = @fn_lastfirst
begin
	set @fullname = coalesce(@lastname, '') + coalesce(', ' + @firstname, '')
end
else if @FullnameConventionCode = @fn_firstname or @FullnameConventionCode is null
begin
	set @fullname = coalesce(@firstname, '') + coalesce(' ' + @lastname, '')
end
else if @FullnameConventionCode = @fn_lastfirstmiddleinitial
begin
	if coalesce(datalength(@middlename), 0) = 0
	begin
		set @fullname = coalesce(@lastname, '') + coalesce(', ' + @firstname, '')
	end
	else
	begin
		set @fullname = coalesce(@lastname, '') + coalesce(', ' + @firstname, '') + coalesce(' ' + substring(@middlename, 1, 1) + '.', '')
	end
end
else if @FullnameConventionCode = @fn_firstmiddleinitiallast
begin
	if coalesce(datalength(@middlename), 0) = 0
	begin
		set @fullname = coalesce(@firstname, '') + coalesce(' ' + @lastname, '')
	end
	else
	begin
		set @fullname = coalesce(@firstname, '') + coalesce(' ' + substring(@middlename, 1, 1) + '.', '') + coalesce(' ' + @lastname, '')
	end
end
else if @FullnameConventionCode = @fn_lastfirstmiddle
begin
	if coalesce(datalength(@middlename), 0) = 0
	begin
		set @fullname = coalesce(@lastname, '') + coalesce(', ' + @firstname, '')
	end
	else
	begin
		set @fullname = coalesce(@lastname, '') + coalesce(', ' + @firstname, '') + coalesce(' ' + @middlename, '')
	end
end
else if @FullnameConventionCode = @fn_firstmiddlelast
begin
	if coalesce(datalength(@middlename), 0) = 0
	begin
		set @fullname = coalesce(@firstname, '') + coalesce(' ' + @lastname, '')
	end
	else
	begin
		set @fullname = coalesce(@firstname, '') + coalesce(' ' + @middlename, '') + coalesce(' ' + @lastname, '')
	end
end
else if @FullnameConventionCode = @fn_last_space_first
begin
	set @fullname = coalesce(@lastname, '') + coalesce(' ' + @firstname, '')
end
else if @FullnameConventionCode = @fn_last_nospace_first
begin
	set @fullname = coalesce(@lastname, '') + coalesce('' + @firstname, '')
end

-- remove leading and trailing spaces
set @fullname = rtrim(ltrim(@fullname))

--case no first name remove extra blankspace for firstname
set @fullname = replace(@fullname, '  ', ' ')

if left(@fullname, 2) = ', '
begin
	if (len(@fullname) > 2)
		set @fullname = substring(@fullname, 3, len(@fullname) - 2)
	else
		set @fullname = ''
end

if right(@fullname, 1) = ','
	set @fullname = substring(@fullname, 1, len(@fullname) - 1)

select @fullname = case len(@fullname)
	when 0 then null
	else @fullname
	end

select @fullname as 'fullname'

/****** Object:  View [dbo].[ApplicationFile]    Script Date: 04/11/2008 06:57:35 ******/




--
-- base view for ApplicationFile
--
create view [dbo].[ApplicationFile] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    CreatedBy,
    ModifiedBy,
    Body,
    ModifiedOn,
    CreatedOn,
    OrganizationId,
    FileId,
    Name,
    DeletionStateCode
) with view_metadata as 
select 
    -- logical attributes
    lk_applicationfile_createdby.DeletionStateCode, 
    lk_applicationfile_createdby.FullName, 
    lk_applicationfile_createdby.YomiFullName, 
    lk_applicationfile_modifiedby.DeletionStateCode, 
    lk_applicationfile_modifiedby.FullName, 
    lk_applicationfile_modifiedby.YomiFullName, 
    organization_applicationfile.DeletionStateCode, 
    organization_applicationfile.Name, 

    -- physical attributes
    ApplicationFileBase.CreatedBy,
    ApplicationFileBase.ModifiedBy,
    ApplicationFileBase.Body,
    ApplicationFileBase.ModifiedOn,
    ApplicationFileBase.CreatedOn,
    ApplicationFileBase.OrganizationId,
    ApplicationFileBase.FileId,
    ApplicationFileBase.Name,
    ApplicationFileBase.DeletionStateCode
from ApplicationFileBase
    left join SystemUserBase lk_applicationfile_createdby with(nolock) on (ApplicationFileBase.CreatedBy = lk_applicationfile_createdby.SystemUserId)
    left join SystemUserBase lk_applicationfile_modifiedby with(nolock) on (ApplicationFileBase.ModifiedBy = lk_applicationfile_modifiedby.SystemUserId)
    left join OrganizationBase organization_applicationfile on (ApplicationFileBase.OrganizationId = organization_applicationfile.OrganizationId)

/****** Object:  View [dbo].[BusinessTask]    Script Date: 04/11/2008 06:57:38 ******/




--
-- base view for BusinessTask
--
create view [dbo].[BusinessTask] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    ModifiedByDsc, 
    ModifiedByName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    ParentBusinessTaskIdDsc, 
    ParentBusinessTaskIdName, 

    -- physical attributes
    statuscode,
    CreatedBy,
    TaskOrder,
    ParentBusinessTaskId,
    Name,
    statecode,
    Privilege,
    IconUrl,
    HelpUrl,
    ModifiedBy,
    OrganizationId,
    BusinessTaskId,
    LanguageCode,
    CreatedOn,
    DeletionStateCode,
    ModifiedOn,
    ActionUrl,
    Description
) with view_metadata as 
select 
    -- logical attributes
    lk_businesstask_createdby.DeletionStateCode, 
    lk_businesstask_createdby.FullName, 
    lk_businesstask_modifiedby.DeletionStateCode, 
    lk_businesstask_modifiedby.FullName, 
    organization_businesstask.DeletionStateCode, 
    organization_businesstask.Name, 
    businesstask_parent_businesstask.DeletionStateCode, 
    businesstask_parent_businesstask.Name, 

    -- physical attributes
    BusinessTaskBase.statuscode,
    BusinessTaskBase.CreatedBy,
    BusinessTaskBase.TaskOrder,
    BusinessTaskBase.ParentBusinessTaskId,
    BusinessTaskBase.Name,
    BusinessTaskBase.statecode,
    BusinessTaskBase.Privilege,
    BusinessTaskBase.IconUrl,
    BusinessTaskBase.HelpUrl,
    BusinessTaskBase.ModifiedBy,
    BusinessTaskBase.OrganizationId,
    BusinessTaskBase.BusinessTaskId,
    BusinessTaskBase.LanguageCode,
    BusinessTaskBase.CreatedOn,
    BusinessTaskBase.DeletionStateCode,
    BusinessTaskBase.ModifiedOn,
    BusinessTaskBase.ActionUrl,
    BusinessTaskBase.Description
from BusinessTaskBase
    left join BusinessTaskBase businesstask_parent_businesstask on (BusinessTaskBase.ParentBusinessTaskId = businesstask_parent_businesstask.BusinessTaskId)
    left join SystemUserBase lk_businesstask_createdby with(nolock) on (BusinessTaskBase.CreatedBy = lk_businesstask_createdby.SystemUserId)
    left join SystemUserBase lk_businesstask_modifiedby with(nolock) on (BusinessTaskBase.ModifiedBy = lk_businesstask_modifiedby.SystemUserId)
    left join OrganizationBase organization_businesstask on (BusinessTaskBase.OrganizationId = organization_businesstask.OrganizationId)

/****** Object:  View [dbo].[ResourceGroup]    Script Date: 04/11/2008 06:58:28 ******/




--
-- base view for ResourceGroup
--
create view [dbo].[ResourceGroup] (
    -- logical attributes
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    Name,
    ObjectTypeCode,
    ResourceGroupId,
    GroupTypeCode,
    BusinessUnitId,
    VersionNumber,
    OrganizationId,
    DeletionStateCode
) with view_metadata as 
select 
    -- logical attributes
    business_unit_resource_groups.DeletionStateCode, 
    business_unit_resource_groups.Name, 
    organization_resource_groups.DeletionStateCode, 
    organization_resource_groups.Name, 

    -- physical attributes
    ResourceGroupBase.Name,
    ResourceGroupBase.ObjectTypeCode,
    ResourceGroupBase.ResourceGroupId,
    ResourceGroupBase.GroupTypeCode,
    ResourceGroupBase.BusinessUnitId,
    ResourceGroupBase.VersionNumber,
    ResourceGroupBase.OrganizationId,
    ResourceGroupBase.DeletionStateCode
from ResourceGroupBase
    left join BusinessUnitBase business_unit_resource_groups on (ResourceGroupBase.BusinessUnitId = business_unit_resource_groups.BusinessUnitId)
    left join OrganizationBase organization_resource_groups on (ResourceGroupBase.OrganizationId = organization_resource_groups.OrganizationId)

/****** Object:  View [dbo].[DiscountType]    Script Date: 04/11/2008 06:57:43 ******/




--
-- base view for DiscountType
--
create view [dbo].[DiscountType] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- physical attributes
    DiscountTypeId,
    OrganizationId,
    DeletionStateCode,
    Name,
    Description,
    IsAmountType,
    StateCode,
    CreatedOn,
    CreatedBy,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    StatusCode,
    OverriddenCreatedOn,
    TransactionCurrencyId,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_discounttypebase_createdby.DeletionStateCode, 
    lk_discounttypebase_createdby.FullName, 
    lk_discounttypebase_createdby.YomiFullName, 
    lk_discounttypebase_modifiedby.DeletionStateCode, 
    lk_discounttypebase_modifiedby.FullName, 
    lk_discounttypebase_modifiedby.YomiFullName, 
    organization_discount_types.DeletionStateCode, 
    organization_discount_types.Name, 
    transactioncurrency_discounttype.DeletionStateCode, 
    transactioncurrency_discounttype.CurrencyName, 

    -- physical attributes
    DiscountTypeBase.DiscountTypeId,
    DiscountTypeBase.OrganizationId,
    DiscountTypeBase.DeletionStateCode,
    DiscountTypeBase.Name,
    DiscountTypeBase.Description,
    DiscountTypeBase.IsAmountType,
    DiscountTypeBase.StateCode,
    DiscountTypeBase.CreatedOn,
    DiscountTypeBase.CreatedBy,
    DiscountTypeBase.ModifiedBy,
    DiscountTypeBase.ModifiedOn,
    DiscountTypeBase.VersionNumber,
    DiscountTypeBase.StatusCode,
    DiscountTypeBase.OverriddenCreatedOn,
    DiscountTypeBase.TransactionCurrencyId,
    DiscountTypeBase.ImportSequenceNumber
from DiscountTypeBase
    left join SystemUserBase lk_discounttypebase_createdby with(nolock) on (DiscountTypeBase.CreatedBy = lk_discounttypebase_createdby.SystemUserId)
    left join SystemUserBase lk_discounttypebase_modifiedby with(nolock) on (DiscountTypeBase.ModifiedBy = lk_discounttypebase_modifiedby.SystemUserId)
    left join OrganizationBase organization_discount_types on (DiscountTypeBase.OrganizationId = organization_discount_types.OrganizationId)
    left join TransactionCurrencyBase transactioncurrency_discounttype on (DiscountTypeBase.TransactionCurrencyId = transactioncurrency_discounttype.TransactionCurrencyId)

/****** Object:  View [dbo].[Queue]    Script Date: 04/11/2008 06:58:24 ******/




--
-- base view for Queue
--
create view [dbo].[Queue] (
    -- logical attributes
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    PrimaryUserIdDsc, 
    PrimaryUserIdName, 
    PrimaryUserIdYomiName, 

    -- physical attributes
    QueueId,
    BusinessUnitId,
    DeletionStateCode,
    OrganizationId,
    EMailAddress,
    PrimaryUserId,
    QueueTypeCode,
    Name,
    Description,
    QueueSemantics,
    CreatedOn,
    CreatedBy,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    IgnoreUnsolicitedEmail,
    IsFaxQueue,
    EmailPassword,
    IncomingEmailDeliveryMethod,
    EmailUsername,
    OutgoingEmailDeliveryMethod,
    AllowEmailCredentials,
    IncomingEmailFilteringMethod
) with view_metadata as 
select 
    -- logical attributes
    business_unit_queues.DeletionStateCode, 
    business_unit_queues.Name, 
    lk_queuebase_createdby.DeletionStateCode, 
    lk_queuebase_createdby.FullName, 
    lk_queuebase_createdby.YomiFullName, 
    lk_queuebase_modifiedby.DeletionStateCode, 
    lk_queuebase_modifiedby.FullName, 
    lk_queuebase_modifiedby.YomiFullName, 
    organization_queues.DeletionStateCode, 
    organization_queues.Name, 
    queue_primary_user.DeletionStateCode, 
    queue_primary_user.FullName, 
    queue_primary_user.YomiFullName, 

    -- physical attributes
    QueueBase.QueueId,
    QueueBase.BusinessUnitId,
    QueueBase.DeletionStateCode,
    QueueBase.OrganizationId,
    QueueBase.EMailAddress,
    QueueBase.PrimaryUserId,
    QueueBase.QueueTypeCode,
    QueueBase.Name,
    QueueBase.Description,
    QueueBase.QueueSemantics,
    QueueBase.CreatedOn,
    QueueBase.CreatedBy,
    QueueBase.ModifiedBy,
    QueueBase.ModifiedOn,
    QueueBase.VersionNumber,
    QueueBase.IgnoreUnsolicitedEmail,
    QueueBase.IsFaxQueue,
    QueueBase.EmailPassword,
    QueueBase.IncomingEmailDeliveryMethod,
    QueueBase.EmailUsername,
    QueueBase.OutgoingEmailDeliveryMethod,
    QueueBase.AllowEmailCredentials,
    QueueBase.IncomingEmailFilteringMethod
from QueueBase
    left join BusinessUnitBase business_unit_queues on (QueueBase.BusinessUnitId = business_unit_queues.BusinessUnitId)
    left join SystemUserBase lk_queuebase_createdby with(nolock) on (QueueBase.CreatedBy = lk_queuebase_createdby.SystemUserId)
    left join SystemUserBase lk_queuebase_modifiedby with(nolock) on (QueueBase.ModifiedBy = lk_queuebase_modifiedby.SystemUserId)
    left join OrganizationBase organization_queues on (QueueBase.OrganizationId = organization_queues.OrganizationId)
    left join SystemUserBase queue_primary_user with(nolock) on (QueueBase.PrimaryUserId = queue_primary_user.SystemUserId)

/****** Object:  View [dbo].[OrganizationUI]    Script Date: 04/11/2008 06:58:22 ******/




--
-- base view for OrganizationUI
--
create view [dbo].[OrganizationUI] (
    -- logical attributes
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    FormId,
    OrganizationId,
    FormXml,
    FieldXml,
    ObjectTypeCode,
    InProduction,
    PreviewXml,
    PreviewColumnsetXml,
    Version,
    OutlookShortcutIcon,
    VersionNumber,
    GridIcon,
    FormIdUnique,
    LargeEntityIcon,
    CustomizationLevel
) with view_metadata as 
select 
    -- logical attributes
    organization_forms.DeletionStateCode, 
    organization_forms.Name, 

    -- physical attributes
     T1.FormId,
     T1.OrganizationId,
     T1.FormXml,
     T1.FieldXml,
     T1.ObjectTypeCode,
     T1.InProduction,
     T1.PreviewXml,
     T1.PreviewColumnsetXml,
     T1.Version,
     T1.OutlookShortcutIcon,
     T1.VersionNumber,
     T1.GridIcon,
     T1.FormIdUnique,
     T1.LargeEntityIcon,
     T1.CustomizationLevel
from OrganizationUIBase T1
    left join OrganizationBase organization_forms on (T1.OrganizationId = organization_forms.OrganizationId)
         left outer join OrganizationUIBase T2 on (T1.FormId=T2.FormId
              AND T1.FormIdUnique<>T2.FormIdUnique
              AND T1.CustomizationLevel = 0
              AND T2.InProduction=1 )
         where T2.CustomizationLevel is null

/****** Object:  View [dbo].[IntegrationStatus]    Script Date: 04/11/2008 06:58:17 ******/




--
-- base view for IntegrationStatus
--
create view [dbo].[IntegrationStatus] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    IntegrationEntryId,
    SystemName,
    ObjectId,
    ObjectTypeCode,
    StateCode,
    StateDescription,
    StatusCode,
    StatusDescription,
    CreatedOn,
    ModifiedOn,
    CreatedBy,
    ModifiedBy,
    OrganizationId,
    VersionNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_integrationstatus_createdby.DeletionStateCode, 
    lk_integrationstatus_createdby.FullName, 
    lk_integrationstatus_createdby.YomiFullName, 
    lk_integrationstatus_modifiedby.DeletionStateCode, 
    lk_integrationstatus_modifiedby.FullName, 
    lk_integrationstatus_modifiedby.YomiFullName, 
    organization_integration_statuses.DeletionStateCode, 
    organization_integration_statuses.Name, 

    -- physical attributes
    IntegrationStatusBase.IntegrationEntryId,
    IntegrationStatusBase.SystemName,
    IntegrationStatusBase.ObjectId,
    IntegrationStatusBase.ObjectTypeCode,
    IntegrationStatusBase.StateCode,
    IntegrationStatusBase.StateDescription,
    IntegrationStatusBase.StatusCode,
    IntegrationStatusBase.StatusDescription,
    IntegrationStatusBase.CreatedOn,
    IntegrationStatusBase.ModifiedOn,
    IntegrationStatusBase.CreatedBy,
    IntegrationStatusBase.ModifiedBy,
    IntegrationStatusBase.OrganizationId,
    IntegrationStatusBase.VersionNumber
from IntegrationStatusBase
    left join SystemUserBase lk_integrationstatus_createdby with(nolock) on (IntegrationStatusBase.CreatedBy = lk_integrationstatus_createdby.SystemUserId)
    left join SystemUserBase lk_integrationstatus_modifiedby with(nolock) on (IntegrationStatusBase.ModifiedBy = lk_integrationstatus_modifiedby.SystemUserId)
    left join OrganizationBase organization_integration_statuses on (IntegrationStatusBase.OrganizationId = organization_integration_statuses.OrganizationId)

/****** Object:  View [dbo].[Territory]    Script Date: 04/11/2008 06:58:33 ******/




--
-- base view for Territory
--
create view [dbo].[Territory] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ManagerIdDsc, 
    ManagerIdName, 
    ManagerIdYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    TerritoryId,
    OrganizationId,
    ManagerId,
    Name,
    Description,
    DeletionStateCode,
    CreatedOn,
    CreatedBy,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    ImportSequenceNumber,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_territorybase_createdby.DeletionStateCode, 
    lk_territorybase_createdby.FullName, 
    lk_territorybase_createdby.YomiFullName, 
    system_user_territories.DeletionStateCode, 
    system_user_territories.FullName, 
    system_user_territories.YomiFullName, 
    lk_territorybase_modifiedby.DeletionStateCode, 
    lk_territorybase_modifiedby.FullName, 
    lk_territorybase_modifiedby.YomiFullName, 
    organization_territories.DeletionStateCode, 
    organization_territories.Name, 

    -- physical attributes
    TerritoryBase.TerritoryId,
    TerritoryBase.OrganizationId,
    TerritoryBase.ManagerId,
    TerritoryBase.Name,
    TerritoryBase.Description,
    TerritoryBase.DeletionStateCode,
    TerritoryBase.CreatedOn,
    TerritoryBase.CreatedBy,
    TerritoryBase.ModifiedBy,
    TerritoryBase.ModifiedOn,
    TerritoryBase.VersionNumber,
    TerritoryBase.ImportSequenceNumber,
    TerritoryBase.OverriddenCreatedOn
from TerritoryBase
    left join SystemUserBase lk_territorybase_createdby with(nolock) on (TerritoryBase.CreatedBy = lk_territorybase_createdby.SystemUserId)
    left join SystemUserBase lk_territorybase_modifiedby with(nolock) on (TerritoryBase.ModifiedBy = lk_territorybase_modifiedby.SystemUserId)
    left join OrganizationBase organization_territories on (TerritoryBase.OrganizationId = organization_territories.OrganizationId)
    left join SystemUserBase system_user_territories with(nolock) on (TerritoryBase.ManagerId = system_user_territories.SystemUserId)

/****** Object:  View [dbo].[BusinessUnitNewsArticle]    Script Date: 04/11/2008 06:57:39 ******/




--
-- base view for BusinessUnitNewsArticle
--
create view [dbo].[BusinessUnitNewsArticle] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    OrganizationId,
    BusinessUnitNewsArticleId,
    ActiveOn,
    ActiveUntil,
    NewsArticle,
    ArticleTypeCode,
    ShowOnHomepage,
    ArticleTitle,
    ArticleUrl,
    CreatedOn,
    CreatedBy,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    UTCConversionTimeZoneCode,
    OverriddenCreatedOn,
    TimeZoneRuleVersionNumber,
    DeletionStateCode,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_businessunitnewsarticlebase_createdby.DeletionStateCode, 
    lk_businessunitnewsarticlebase_createdby.FullName, 
    lk_businessunitnewsarticlebase_createdby.YomiFullName, 
    lk_businessunitnewsarticlebase_modifiedby.DeletionStateCode, 
    lk_businessunitnewsarticlebase_modifiedby.FullName, 
    lk_businessunitnewsarticlebase_modifiedby.YomiFullName, 
    organization_business_unit_news_articles.DeletionStateCode, 
    organization_business_unit_news_articles.Name, 

    -- physical attributes
    BusinessUnitNewsArticleBase.OrganizationId,
    BusinessUnitNewsArticleBase.BusinessUnitNewsArticleId,
    BusinessUnitNewsArticleBase.ActiveOn,
    BusinessUnitNewsArticleBase.ActiveUntil,
    BusinessUnitNewsArticleBase.NewsArticle,
    BusinessUnitNewsArticleBase.ArticleTypeCode,
    BusinessUnitNewsArticleBase.ShowOnHomepage,
    BusinessUnitNewsArticleBase.ArticleTitle,
    BusinessUnitNewsArticleBase.ArticleUrl,
    BusinessUnitNewsArticleBase.CreatedOn,
    BusinessUnitNewsArticleBase.CreatedBy,
    BusinessUnitNewsArticleBase.ModifiedBy,
    BusinessUnitNewsArticleBase.ModifiedOn,
    BusinessUnitNewsArticleBase.VersionNumber,
    BusinessUnitNewsArticleBase.UTCConversionTimeZoneCode,
    BusinessUnitNewsArticleBase.OverriddenCreatedOn,
    BusinessUnitNewsArticleBase.TimeZoneRuleVersionNumber,
    BusinessUnitNewsArticleBase.DeletionStateCode,
    BusinessUnitNewsArticleBase.ImportSequenceNumber
from BusinessUnitNewsArticleBase
    left join SystemUserBase lk_businessunitnewsarticlebase_createdby with(nolock) on (BusinessUnitNewsArticleBase.CreatedBy = lk_businessunitnewsarticlebase_createdby.SystemUserId)
    left join SystemUserBase lk_businessunitnewsarticlebase_modifiedby with(nolock) on (BusinessUnitNewsArticleBase.ModifiedBy = lk_businessunitnewsarticlebase_modifiedby.SystemUserId)
    left join OrganizationBase organization_business_unit_news_articles on (BusinessUnitNewsArticleBase.OrganizationId = organization_business_unit_news_articles.OrganizationId)

/****** Object:  View [dbo].[SavedQuery]    Script Date: 04/11/2008 06:58:30 ******/




--
-- base view for SavedQuery
--
create view [dbo].[SavedQuery] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    SavedQueryId,
    Name,
    OrganizationId,
    Description,
    QueryType,
    IsDefault,
    ReturnedTypeCode,
    QueryAppUsage,
    IsUserDefined,
    FetchXml,
    IsCustomizable,
    IsQuickFindQuery,
    ColumnSetXml,
    LayoutXml,
    QueryAPI,
    CreatedBy,
    CreatedOn,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    LatestDescription,
    LatestFetchXml,
    LatestName,
    LatestLayoutXml,
    LatestColumnSetXml,
    IsPrivate,
    CustomizationLevel,
    SavedQueryIdUnique,
    InProduction
) with view_metadata as 
select 
    -- logical attributes
    lk_savedquerybase_createdby.DeletionStateCode, 
    lk_savedquerybase_createdby.FullName, 
    lk_savedquerybase_createdby.YomiFullName, 
    lk_savedquerybase_modifiedby.DeletionStateCode, 
    lk_savedquerybase_modifiedby.FullName, 
    lk_savedquerybase_modifiedby.YomiFullName, 
    organization_saved_queries.DeletionStateCode, 
    organization_saved_queries.Name, 

    -- physical attributes
     T1.SavedQueryId,
     T1.Name,
     T1.OrganizationId,
     T1.Description,
     T1.QueryType,
     T1.IsDefault,
     T1.ReturnedTypeCode,
     T1.QueryAppUsage,
     T1.IsUserDefined,
     T1.FetchXml,
     T1.IsCustomizable,
     T1.IsQuickFindQuery,
     T1.ColumnSetXml,
     T1.LayoutXml,
     T1.QueryAPI,
     T1.CreatedBy,
     T1.CreatedOn,
     T1.ModifiedBy,
     T1.ModifiedOn,
     T1.VersionNumber,
     T1.LatestDescription,
     T1.LatestFetchXml,
     T1.LatestName,
     T1.LatestLayoutXml,
     T1.LatestColumnSetXml,
     T1.IsPrivate,
     T1.CustomizationLevel,
     T1.SavedQueryIdUnique,
     T1.InProduction
from SavedQueryBase T1
    left join SystemUserBase lk_savedquerybase_createdby with(nolock) on (T1.CreatedBy = lk_savedquerybase_createdby.SystemUserId)
    left join SystemUserBase lk_savedquerybase_modifiedby with(nolock) on (T1.ModifiedBy = lk_savedquerybase_modifiedby.SystemUserId)
    left join OrganizationBase organization_saved_queries on (T1.OrganizationId = organization_saved_queries.OrganizationId)
         left outer join SavedQueryBase T2 on (T1.SavedQueryId=T2.SavedQueryId
              AND T1.SavedQueryIdUnique<>T2.SavedQueryIdUnique
              AND T1.CustomizationLevel = 0
              AND T2.InProduction=1 )
         where T2.CustomizationLevel is null

/****** Object:  View [dbo].[ContractTemplate]    Script Date: 04/11/2008 06:57:42 ******/




--
-- base view for ContractTemplate
--
create view [dbo].[ContractTemplate] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    ContractTemplateId,
    Name,
    OrganizationId,
    Description,
    Abbreviation,
    ContractServiceLevelCode,
    DeletionStateCode,
    BillingFrequencyCode,
    AllotmentTypeCode,
    UseDiscountAsPercentage,
    EffectivityCalendar,
    CreatedOn,
    CreatedBy,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    OverriddenCreatedOn,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_contracttemplatebase_createdby.DeletionStateCode, 
    lk_contracttemplatebase_createdby.FullName, 
    lk_contracttemplatebase_createdby.YomiFullName, 
    lk_contracttemplatebase_modifiedby.DeletionStateCode, 
    lk_contracttemplatebase_modifiedby.FullName, 
    lk_contracttemplatebase_modifiedby.YomiFullName, 
    organization_contract_templates.DeletionStateCode, 
    organization_contract_templates.Name, 

    -- physical attributes
    ContractTemplateBase.ContractTemplateId,
    ContractTemplateBase.Name,
    ContractTemplateBase.OrganizationId,
    ContractTemplateBase.Description,
    ContractTemplateBase.Abbreviation,
    ContractTemplateBase.ContractServiceLevelCode,
    ContractTemplateBase.DeletionStateCode,
    ContractTemplateBase.BillingFrequencyCode,
    ContractTemplateBase.AllotmentTypeCode,
    ContractTemplateBase.UseDiscountAsPercentage,
    ContractTemplateBase.EffectivityCalendar,
    ContractTemplateBase.CreatedOn,
    ContractTemplateBase.CreatedBy,
    ContractTemplateBase.ModifiedBy,
    ContractTemplateBase.ModifiedOn,
    ContractTemplateBase.VersionNumber,
    ContractTemplateBase.OverriddenCreatedOn,
    ContractTemplateBase.ImportSequenceNumber
from ContractTemplateBase
    left join SystemUserBase lk_contracttemplatebase_createdby with(nolock) on (ContractTemplateBase.CreatedBy = lk_contracttemplatebase_createdby.SystemUserId)
    left join SystemUserBase lk_contracttemplatebase_modifiedby with(nolock) on (ContractTemplateBase.ModifiedBy = lk_contracttemplatebase_modifiedby.SystemUserId)
    left join OrganizationBase organization_contract_templates on (ContractTemplateBase.OrganizationId = organization_contract_templates.OrganizationId)

/****** Object:  View [dbo].[WebWizard]    Script Date: 04/11/2008 06:58:37 ******/




--
-- base view for WebWizard
--
create view [dbo].[WebWizard] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 

    -- physical attributes
    CreatedOn,
    CreatedBy,
    VersionNumber,
    OrganizationId,
    WebWizardId,
    Name,
    WizardPageHeight,
    ModifiedBy,
    ModifiedOn,
    DeletionStateCode,
    WizardPageWidth,
    StartPageSequenceNumber,
    AccessPrivileges,
    TitleResourceString,
    IsStaticPageSequence
) with view_metadata as 
select 
    -- logical attributes
    lk_webwizard_createdby.DeletionStateCode, 
    lk_webwizard_createdby.FullName, 
    lk_webwizard_createdby.YomiFullName, 
    lk_webwizard_modifiedby.DeletionStateCode, 
    lk_webwizard_modifiedby.FullName, 
    lk_webwizard_modifiedby.YomiFullName, 
    organization_webwizard.DeletionStateCode, 
    organization_webwizard.Name, 

    -- physical attributes
    WebWizardBase.CreatedOn,
    WebWizardBase.CreatedBy,
    WebWizardBase.VersionNumber,
    WebWizardBase.OrganizationId,
    WebWizardBase.WebWizardId,
    WebWizardBase.Name,
    WebWizardBase.WizardPageHeight,
    WebWizardBase.ModifiedBy,
    WebWizardBase.ModifiedOn,
    WebWizardBase.DeletionStateCode,
    WebWizardBase.WizardPageWidth,
    WebWizardBase.StartPageSequenceNumber,
    WebWizardBase.AccessPrivileges,
    WebWizardBase.TitleResourceString,
    WebWizardBase.IsStaticPageSequence
from WebWizardBase
    left join SystemUserBase lk_webwizard_createdby with(nolock) on (WebWizardBase.CreatedBy = lk_webwizard_createdby.SystemUserId)
    left join SystemUserBase lk_webwizard_modifiedby with(nolock) on (WebWizardBase.ModifiedBy = lk_webwizard_modifiedby.SystemUserId)
    left join OrganizationBase organization_webwizard on (WebWizardBase.OrganizationId = organization_webwizard.OrganizationId)

/****** Object:  View [dbo].[PriceLevel]    Script Date: 04/11/2008 06:58:24 ******/




--
-- base view for PriceLevel
--
create view [dbo].[PriceLevel] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationIdDsc, 
    OrganizationIdName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- physical attributes
    PriceLevelId,
    OrganizationId,
    DeletionStateCode,
    Name,
    Description,
    ShippingMethodCode,
    BeginDate,
    PaymentMethodCode,
    FreightTermsCode,
    EndDate,
    CreatedBy,
    CreatedOn,
    ModifiedBy,
    ModifiedOn,
    StateCode,
    VersionNumber,
    StatusCode,
    ImportSequenceNumber,
    TransactionCurrencyId,
    OverriddenCreatedOn,
    TimeZoneRuleVersionNumber,
    UTCConversionTimeZoneCode
) with view_metadata as 
select 
    -- logical attributes
    lk_pricelevelbase_createdby.DeletionStateCode, 
    lk_pricelevelbase_createdby.FullName, 
    lk_pricelevelbase_createdby.YomiFullName, 
    lk_pricelevelbase_modifiedby.DeletionStateCode, 
    lk_pricelevelbase_modifiedby.FullName, 
    lk_pricelevelbase_modifiedby.YomiFullName, 
    organization_price_levels.DeletionStateCode, 
    organization_price_levels.Name, 
    transactioncurrency_pricelevel.DeletionStateCode, 
    transactioncurrency_pricelevel.CurrencyName, 

    -- physical attributes
    PriceLevelBase.PriceLevelId,
    PriceLevelBase.OrganizationId,
    PriceLevelBase.DeletionStateCode,
    PriceLevelBase.Name,
    PriceLevelBase.Description,
    PriceLevelBase.ShippingMethodCode,
    PriceLevelBase.BeginDate,
    PriceLevelBase.PaymentMethodCode,
    PriceLevelBase.FreightTermsCode,
    PriceLevelBase.EndDate,
    PriceLevelBase.CreatedBy,
    PriceLevelBase.CreatedOn,
    PriceLevelBase.ModifiedBy,
    PriceLevelBase.ModifiedOn,
    PriceLevelBase.StateCode,
    PriceLevelBase.VersionNumber,
    PriceLevelBase.StatusCode,
    PriceLevelBase.ImportSequenceNumber,
    PriceLevelBase.TransactionCurrencyId,
    PriceLevelBase.OverriddenCreatedOn,
    PriceLevelBase.TimeZoneRuleVersionNumber,
    PriceLevelBase.UTCConversionTimeZoneCode
from PriceLevelBase
    left join SystemUserBase lk_pricelevelbase_createdby with(nolock) on (PriceLevelBase.CreatedBy = lk_pricelevelbase_createdby.SystemUserId)
    left join SystemUserBase lk_pricelevelbase_modifiedby with(nolock) on (PriceLevelBase.ModifiedBy = lk_pricelevelbase_modifiedby.SystemUserId)
    left join OrganizationBase organization_price_levels on (PriceLevelBase.OrganizationId = organization_price_levels.OrganizationId)
    left join TransactionCurrencyBase transactioncurrency_pricelevel on (PriceLevelBase.TransactionCurrencyId = transactioncurrency_pricelevel.TransactionCurrencyId)

/****** Object:  View [dbo].[Annotation]    Script Date: 04/11/2008 06:57:35 ******/




--
-- base view for Annotation
--
create view [dbo].[Annotation] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    AnnotationId,
    OwningTeam,
    DeletionStateCode,
    ObjectTypeCode,
    OwningUser,
    ObjectId,
    OwningBusinessUnit,
    Subject,
    IsDocument,
    NoteText,
    MimeType,
    LangId,
    DocumentBody,
    CreatedOn,
    FileSize,
    FileName,
    CreatedBy,
    IsPrivate,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    StepId,
    OverriddenCreatedOn,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_annotationbase_createdby.DeletionStateCode, 
    lk_annotationbase_createdby.FullName, 
    lk_annotationbase_createdby.YomiFullName, 
    lk_annotationbase_modifiedby.DeletionStateCode, 
    lk_annotationbase_modifiedby.FullName, 
    lk_annotationbase_modifiedby.YomiFullName, 

    -- ownership entries
    OwnerId   = AnnotationBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when AnnotationBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    AnnotationBase.AnnotationId,
    AnnotationBase.OwningTeam,
    AnnotationBase.DeletionStateCode,
    AnnotationBase.ObjectTypeCode,
    AnnotationBase.OwningUser,
    AnnotationBase.ObjectId,
    AnnotationBase.OwningBusinessUnit,
    AnnotationBase.Subject,
    AnnotationBase.IsDocument,
    AnnotationBase.NoteText,
    AnnotationBase.MimeType,
    AnnotationBase.LangId,
    AnnotationBase.DocumentBody,
    AnnotationBase.CreatedOn,
    AnnotationBase.FileSize,
    AnnotationBase.FileName,
    AnnotationBase.CreatedBy,
    AnnotationBase.IsPrivate,
    AnnotationBase.ModifiedBy,
    AnnotationBase.ModifiedOn,
    AnnotationBase.VersionNumber,
    AnnotationBase.StepId,
    AnnotationBase.OverriddenCreatedOn,
    AnnotationBase.ImportSequenceNumber
from AnnotationBase
    left join SystemUserBase lk_annotationbase_createdby with(nolock) on (AnnotationBase.CreatedBy = lk_annotationbase_createdby.SystemUserId)
    left join SystemUserBase lk_annotationbase_modifiedby with(nolock) on (AnnotationBase.ModifiedBy = lk_annotationbase_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (AnnotationBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[ReportLink]    Script Date: 04/11/2008 06:58:27 ******/




--
-- base view for ReportLink
--
create view [dbo].[ReportLink] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    CreatedOn,
    ModifiedBy,
    CreatedBy,
    ReportLinkId,
    LinkTypeCode,
    LinkedReportName,
    ImportSequenceNumber,
    ModifiedOn,
    VersionNumber,
    ReportId,
    LinkedReportId
) with view_metadata as 
select 
    -- logical attributes
    lk_reportlinkbase_createdby.DeletionStateCode, 
    lk_reportlinkbase_createdby.FullName, 
    lk_reportlinkbase_createdby.YomiFullName, 
    lk_reportlinkbase_modifiedby.DeletionStateCode, 
    lk_reportlinkbase_modifiedby.FullName, 
    lk_reportlinkbase_modifiedby.YomiFullName, 
    report_reportlink.OwningBusinessUnit, 
    report_reportlink.OwningUser, 

    -- physical attributes
    ReportLinkBase.CreatedOn,
    ReportLinkBase.ModifiedBy,
    ReportLinkBase.CreatedBy,
    ReportLinkBase.ReportLinkId,
    ReportLinkBase.LinkTypeCode,
    ReportLinkBase.LinkedReportName,
    ReportLinkBase.ImportSequenceNumber,
    ReportLinkBase.ModifiedOn,
    ReportLinkBase.VersionNumber,
    ReportLinkBase.ReportId,
    ReportLinkBase.LinkedReportId
from ReportLinkBase
    left join SystemUserBase lk_reportlinkbase_createdby with(nolock) on (ReportLinkBase.CreatedBy = lk_reportlinkbase_createdby.SystemUserId)
    left join SystemUserBase lk_reportlinkbase_modifiedby with(nolock) on (ReportLinkBase.ModifiedBy = lk_reportlinkbase_modifiedby.SystemUserId)
    left join ReportBase report_reportlink on (ReportLinkBase.ReportId = report_reportlink.ReportId)

/****** Object:  View [dbo].[UnresolvedAddress]    Script Date: 04/11/2008 06:58:35 ******/




--
-- base view for UnresolvedAddress
--
create view [dbo].[UnresolvedAddress] (
    -- physical attributes
    UnresolvedAddressId,
    DeletionStateCode,
    FullName,
    Telephone,
    EMailAddress,
    VersionNumber
) with view_metadata as 
select 
    -- physical attributes
    UnresolvedAddressBase.UnresolvedAddressId,
    UnresolvedAddressBase.DeletionStateCode,
    UnresolvedAddressBase.FullName,
    UnresolvedAddressBase.Telephone,
    UnresolvedAddressBase.EMailAddress,
    UnresolvedAddressBase.VersionNumber
from UnresolvedAddressBase

/****** Object:  View [dbo].[ResourceGroupExpansion]    Script Date: 04/11/2008 06:58:28 ******/




--
-- base view for ResourceGroupExpansion
--
create view [dbo].[ResourceGroupExpansion] (
    -- physical attributes
    ObjectId,
    ResourceGroupExpansionId,
    ModifiedOn,
    ItemId,
    MethodCode
) with view_metadata as 
select 
    -- physical attributes
    ResourceGroupExpansionBase.ObjectId,
    ResourceGroupExpansionBase.ResourceGroupExpansionId,
    ResourceGroupExpansionBase.ModifiedOn,
    ResourceGroupExpansionBase.ItemId,
    ResourceGroupExpansionBase.MethodCode
from ResourceGroupExpansionBase

/****** Object:  View [dbo].[ContractDetail]    Script Date: 04/11/2008 06:57:42 ******/




--
-- base view for ContractDetail
--
create view [dbo].[ContractDetail] (
    -- logical attributes
    ContractIdDsc, 
    ContractIdName, 
    ContractStateCode, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 
    ProductIdDsc, 
    ProductIdName, 
    ServiceAddressDsc, 
    ServiceAddressName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 
    UoMIdDsc, 
    UoMIdName, 
    UoMScheduleIdDsc, 
    UoMScheduleIdName, 


    CustomerId,
    CustomerIdName,
    CustomerIdYomiName,
    CustomerIdDsc,
    CustomerIdType,

    -- physical attributes
    ContractDetailId,
    AccountId,
    ServiceAddress,
    UoMId,
    ProductId,
    DeletionStateCode,
    ProductSerialNumber,
    ContactId,
    ContractId,
    LineItemOrder,
    ServiceContractUnitsCode,
    InitialQuantity,
    Title,
    EffectivityCalendar,
    ActiveOn,
    CreatedOn,
    ExpiresOn,
    CreatedBy,
    TotalAllotments,
    ModifiedBy,
    Rate,
    ModifiedOn,
    VersionNumber,
    Price,
    Discount,
    Net,
    StateCode,
    AllotmentsRemaining,
    StatusCode,
    AllotmentsUsed,
    UoMScheduleId,
    DiscountPercentage,
    TimeZoneRuleVersionNumber,
    ImportSequenceNumber,
    OverriddenCreatedOn,
    TransactionCurrencyId,
    ExchangeRate,
    UTCConversionTimeZoneCode,
    Discount_Base,
    Rate_Base,
    Price_Base,
    Net_Base
) with view_metadata as 
select 
    -- logical attributes
    contract_line_items.DeletionStateCode, 
    contract_line_items.Title, 
    contract_line_items.StateCode, 
    lk_contractdetailbase_createdby.DeletionStateCode, 
    lk_contractdetailbase_createdby.FullName, 
    lk_contractdetailbase_createdby.YomiFullName, 
    lk_contractdetailbase_modifiedby.DeletionStateCode, 
    lk_contractdetailbase_modifiedby.FullName, 
    lk_contractdetailbase_modifiedby.YomiFullName, 
    contract_line_items.OwningBusinessUnit, 
    contract_line_items.OwningUser, 
    product_contract_line_items.DeletionStateCode, 
    product_contract_line_items.Name, 
    customer_address_contract_line_items.DeletionStateCode, 
    customer_address_contract_line_items.Name, 
    transactioncurrency_contractdetail.DeletionStateCode, 
    transactioncurrency_contractdetail.CurrencyName, 
    unit_of_measurement_contract_line_items.DeletionStateCode, 
    unit_of_measurement_contract_line_items.Name, 
    contract_detail_unit_of_measure_schedule.DeletionStateCode, 
    contract_detail_unit_of_measure_schedule.Name, 


    CustomerId   = coalesce(ContractDetailBase.AccountId, ContractDetailBase.ContactId), 
    CustomerIdName = coalesce(XXparentaccount.Name, XXparentcontact.FullName), 
    CustomerIdYomiName = coalesce(XXparentaccount.YomiName, XXparentcontact.YomiFullName), 
    CustomerIdDsc  = coalesce(XXparentaccount.DeletionStateCode, XXparentcontact.DeletionStateCode), 
    CustomerIdType = case 
              when ContractDetailBase.AccountId IS NOT NULL then 1
              when ContractDetailBase.ContactId IS NOT NULL then 2
              else NULL
              end,

    -- physical attributes
    ContractDetailBase.ContractDetailId,
    ContractDetailBase.AccountId,
    ContractDetailBase.ServiceAddress,
    ContractDetailBase.UoMId,
    ContractDetailBase.ProductId,
    ContractDetailBase.DeletionStateCode,
    ContractDetailBase.ProductSerialNumber,
    ContractDetailBase.ContactId,
    ContractDetailBase.ContractId,
    ContractDetailBase.LineItemOrder,
    ContractDetailBase.ServiceContractUnitsCode,
    ContractDetailBase.InitialQuantity,
    ContractDetailBase.Title,
    ContractDetailBase.EffectivityCalendar,
    ContractDetailBase.ActiveOn,
    ContractDetailBase.CreatedOn,
    ContractDetailBase.ExpiresOn,
    ContractDetailBase.CreatedBy,
    ContractDetailBase.TotalAllotments,
    ContractDetailBase.ModifiedBy,
    ContractDetailBase.Rate,
    ContractDetailBase.ModifiedOn,
    ContractDetailBase.VersionNumber,
    ContractDetailBase.Price,
    ContractDetailBase.Discount,
    ContractDetailBase.Net,
    ContractDetailBase.StateCode,
    ContractDetailBase.AllotmentsRemaining,
    ContractDetailBase.StatusCode,
    ContractDetailBase.AllotmentsUsed,
    ContractDetailBase.UoMScheduleId,
    ContractDetailBase.DiscountPercentage,
    ContractDetailBase.TimeZoneRuleVersionNumber,
    ContractDetailBase.ImportSequenceNumber,
    ContractDetailBase.OverriddenCreatedOn,
    ContractDetailBase.TransactionCurrencyId,
    ContractDetailBase.ExchangeRate,
    ContractDetailBase.UTCConversionTimeZoneCode,
    ContractDetailBase.Discount_Base,
    ContractDetailBase.Rate_Base,
    ContractDetailBase.Price_Base,
    ContractDetailBase.Net_Base
from ContractDetailBase
    left join AccountBase XXparentaccount on (ContractDetailBase.AccountId = XXparentaccount.AccountId)
    left join ContactBase XXparentcontact on (ContractDetailBase.ContactId = XXparentcontact.ContactId)

    left join UoMScheduleBase contract_detail_unit_of_measure_schedule on (ContractDetailBase.UoMScheduleId = contract_detail_unit_of_measure_schedule.UoMScheduleId)
    left join ContractBase contract_line_items on (ContractDetailBase.ContractId = contract_line_items.ContractId)
    left join CustomerAddressBase customer_address_contract_line_items on (ContractDetailBase.ServiceAddress = customer_address_contract_line_items.CustomerAddressId)
    left join SystemUserBase lk_contractdetailbase_createdby with(nolock) on (ContractDetailBase.CreatedBy = lk_contractdetailbase_createdby.SystemUserId)
    left join SystemUserBase lk_contractdetailbase_modifiedby with(nolock) on (ContractDetailBase.ModifiedBy = lk_contractdetailbase_modifiedby.SystemUserId)
    left join ProductBase product_contract_line_items on (ContractDetailBase.ProductId = product_contract_line_items.ProductId)
    left join TransactionCurrencyBase transactioncurrency_contractdetail on (ContractDetailBase.TransactionCurrencyId = transactioncurrency_contractdetail.TransactionCurrencyId)
    left join UoMBase unit_of_measurement_contract_line_items on (ContractDetailBase.UoMId = unit_of_measurement_contract_line_items.UoMId)

/****** Object:  View [dbo].[InvoiceDetail]    Script Date: 04/11/2008 06:58:18 ******/




--
-- base view for InvoiceDetail
--
create view [dbo].[InvoiceDetail] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    InvoiceIsPriceLocked, 
    InvoiceStateCode, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 
    ProductIdDsc, 
    ProductIdName, 
    SalesRepIdDsc, 
    SalesRepIdName, 
    SalesRepIdYomiName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 
    UoMIdDsc, 
    UoMIdName, 

    -- physical attributes
    InvoiceDetailId,
    DeletionStateCode,
    SalesRepId,
    IsProductOverridden,
    LineItemNumber,
    IsCopied,
    InvoiceId,
    QuantityBackordered,
    UoMId,
    ProductId,
    ActualDeliveryOn,
    Quantity,
    ManualDiscountAmount,
    ProductDescription,
    VolumeDiscountAmount,
    PricePerUnit,
    BaseAmount,
    QuantityCancelled,
    ShippingTrackingNumber,
    ExtendedAmount,
    Description,
    IsPriceOverridden,
    ShipTo_Name,
    PricingErrorCode,
    Tax,
    CreatedOn,
    ShipTo_Line1,
    CreatedBy,
    ModifiedBy,
    ShipTo_Line2,
    ShipTo_Line3,
    ModifiedOn,
    ShipTo_City,
    ShipTo_StateOrProvince,
    ShipTo_Country,
    ShipTo_PostalCode,
    WillCall,
    ShipTo_Telephone,
    ShipTo_Fax,
    ShipTo_FreightTermsCode,
    QuantityShipped,
    VersionNumber,
    ExchangeRate,
    TransactionCurrencyId,
    UTCConversionTimeZoneCode,
    TimeZoneRuleVersionNumber,
    ImportSequenceNumber,
    OverriddenCreatedOn,
    VolumeDiscountAmount_Base,
    BaseAmount_Base,
    PricePerUnit_Base,
    Tax_Base,
    ExtendedAmount_Base,
    ManualDiscountAmount_Base
) with view_metadata as 
select 
    -- logical attributes
    lk_invoicedetailbase_createdby.DeletionStateCode, 
    lk_invoicedetailbase_createdby.FullName, 
    lk_invoicedetailbase_createdby.YomiFullName, 
    invoice_details.IsPriceLocked, 
    invoice_details.StateCode, 
    lk_invoicedetailbase_modifiedby.DeletionStateCode, 
    lk_invoicedetailbase_modifiedby.FullName, 
    lk_invoicedetailbase_modifiedby.YomiFullName, 
    invoice_details.OwningBusinessUnit, 
    invoice_details.OwningUser, 
    product_invoice_details.DeletionStateCode, 
    product_invoice_details.Name, 
    system_user_invoicedetail.DeletionStateCode, 
    system_user_invoicedetail.FullName, 
    system_user_invoicedetail.YomiFullName, 
    transactioncurrency_invoicedetail.DeletionStateCode, 
    transactioncurrency_invoicedetail.CurrencyName, 
    unit_of_measurement_invoice_details.DeletionStateCode, 
    unit_of_measurement_invoice_details.Name, 

    -- physical attributes
    InvoiceDetailBase.InvoiceDetailId,
    InvoiceDetailBase.DeletionStateCode,
    InvoiceDetailBase.SalesRepId,
    InvoiceDetailBase.IsProductOverridden,
    InvoiceDetailBase.LineItemNumber,
    InvoiceDetailBase.IsCopied,
    InvoiceDetailBase.InvoiceId,
    InvoiceDetailBase.QuantityBackordered,
    InvoiceDetailBase.UoMId,
    InvoiceDetailBase.ProductId,
    InvoiceDetailBase.ActualDeliveryOn,
    InvoiceDetailBase.Quantity,
    InvoiceDetailBase.ManualDiscountAmount,
    InvoiceDetailBase.ProductDescription,
    InvoiceDetailBase.VolumeDiscountAmount,
    InvoiceDetailBase.PricePerUnit,
    InvoiceDetailBase.BaseAmount,
    InvoiceDetailBase.QuantityCancelled,
    InvoiceDetailBase.ShippingTrackingNumber,
    InvoiceDetailBase.ExtendedAmount,
    InvoiceDetailBase.Description,
    InvoiceDetailBase.IsPriceOverridden,
    InvoiceDetailBase.ShipTo_Name,
    InvoiceDetailBase.PricingErrorCode,
    InvoiceDetailBase.Tax,
    InvoiceDetailBase.CreatedOn,
    InvoiceDetailBase.ShipTo_Line1,
    InvoiceDetailBase.CreatedBy,
    InvoiceDetailBase.ModifiedBy,
    InvoiceDetailBase.ShipTo_Line2,
    InvoiceDetailBase.ShipTo_Line3,
    InvoiceDetailBase.ModifiedOn,
    InvoiceDetailBase.ShipTo_City,
    InvoiceDetailBase.ShipTo_StateOrProvince,
    InvoiceDetailBase.ShipTo_Country,
    InvoiceDetailBase.ShipTo_PostalCode,
    InvoiceDetailBase.WillCall,
    InvoiceDetailBase.ShipTo_Telephone,
    InvoiceDetailBase.ShipTo_Fax,
    InvoiceDetailBase.ShipTo_FreightTermsCode,
    InvoiceDetailBase.QuantityShipped,
    InvoiceDetailBase.VersionNumber,
    InvoiceDetailBase.ExchangeRate,
    InvoiceDetailBase.TransactionCurrencyId,
    InvoiceDetailBase.UTCConversionTimeZoneCode,
    InvoiceDetailBase.TimeZoneRuleVersionNumber,
    InvoiceDetailBase.ImportSequenceNumber,
    InvoiceDetailBase.OverriddenCreatedOn,
    InvoiceDetailBase.VolumeDiscountAmount_Base,
    InvoiceDetailBase.BaseAmount_Base,
    InvoiceDetailBase.PricePerUnit_Base,
    InvoiceDetailBase.Tax_Base,
    InvoiceDetailBase.ExtendedAmount_Base,
    InvoiceDetailBase.ManualDiscountAmount_Base
from InvoiceDetailBase
    left join InvoiceBase invoice_details on (InvoiceDetailBase.InvoiceId = invoice_details.InvoiceId)
    left join SystemUserBase lk_invoicedetailbase_createdby with(nolock) on (InvoiceDetailBase.CreatedBy = lk_invoicedetailbase_createdby.SystemUserId)
    left join SystemUserBase lk_invoicedetailbase_modifiedby with(nolock) on (InvoiceDetailBase.ModifiedBy = lk_invoicedetailbase_modifiedby.SystemUserId)
    left join ProductBase product_invoice_details on (InvoiceDetailBase.ProductId = product_invoice_details.ProductId)
    left join SystemUserBase system_user_invoicedetail with(nolock) on (InvoiceDetailBase.SalesRepId = system_user_invoicedetail.SystemUserId)
    left join TransactionCurrencyBase transactioncurrency_invoicedetail on (InvoiceDetailBase.TransactionCurrencyId = transactioncurrency_invoicedetail.TransactionCurrencyId)
    left join UoMBase unit_of_measurement_invoice_details on (InvoiceDetailBase.UoMId = unit_of_measurement_invoice_details.UoMId)

/****** Object:  View [dbo].[SalesOrderDetail]    Script Date: 04/11/2008 06:58:29 ******/




--
-- base view for SalesOrderDetail
--
create view [dbo].[SalesOrderDetail] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 
    ProductIdDsc, 
    ProductIdName, 
    SalesOrderIsPriceLocked, 
    SalesOrderStateCode, 
    SalesRepIdDsc, 
    SalesRepIdName, 
    SalesRepIdYomiName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 
    UoMIdDsc, 
    UoMIdName, 

    -- physical attributes
    SalesOrderDetailId,
    SalesOrderId,
    SalesRepId,
    IsProductOverridden,
    IsCopied,
    DeletionStateCode,
    QuantityShipped,
    LineItemNumber,
    QuantityBackordered,
    UoMId,
    QuantityCancelled,
    ProductId,
    RequestDeliveryBy,
    Quantity,
    PricingErrorCode,
    ManualDiscountAmount,
    ProductDescription,
    VolumeDiscountAmount,
    PricePerUnit,
    BaseAmount,
    ExtendedAmount,
    Description,
    IsPriceOverridden,
    ShipTo_Name,
    Tax,
    CreatedOn,
    ShipTo_Line1,
    CreatedBy,
    ModifiedBy,
    ShipTo_Line2,
    ShipTo_Line3,
    ModifiedOn,
    ShipTo_City,
    ShipTo_StateOrProvince,
    ShipTo_Country,
    ShipTo_PostalCode,
    WillCall,
    ShipTo_Telephone,
    ShipTo_Fax,
    ShipTo_FreightTermsCode,
    ShipTo_ContactName,
    VersionNumber,
    ShipTo_AddressId,
    TimeZoneRuleVersionNumber,
    ImportSequenceNumber,
    UTCConversionTimeZoneCode,
    ExchangeRate,
    OverriddenCreatedOn,
    TransactionCurrencyId,
    BaseAmount_Base,
    PricePerUnit_Base,
    VolumeDiscountAmount_Base,
    ExtendedAmount_Base,
    Tax_Base,
    ManualDiscountAmount_Base
) with view_metadata as 
select 
    -- logical attributes
    lk_salesorderdetailbase_createdby.DeletionStateCode, 
    lk_salesorderdetailbase_createdby.FullName, 
    lk_salesorderdetailbase_createdby.YomiFullName, 
    lk_salesorderdetailbase_modifiedby.DeletionStateCode, 
    lk_salesorderdetailbase_modifiedby.FullName, 
    lk_salesorderdetailbase_modifiedby.YomiFullName, 
    order_details.OwningBusinessUnit, 
    order_details.OwningUser, 
    product_order_details.DeletionStateCode, 
    product_order_details.Name, 
    order_details.IsPriceLocked, 
    order_details.StateCode, 
    system_user_salesorderdetail.DeletionStateCode, 
    system_user_salesorderdetail.FullName, 
    system_user_salesorderdetail.YomiFullName, 
    transactioncurrency_salesorderdetail.DeletionStateCode, 
    transactioncurrency_salesorderdetail.CurrencyName, 
    unit_of_measurement_order_details.DeletionStateCode, 
    unit_of_measurement_order_details.Name, 

    -- physical attributes
    SalesOrderDetailBase.SalesOrderDetailId,
    SalesOrderDetailBase.SalesOrderId,
    SalesOrderDetailBase.SalesRepId,
    SalesOrderDetailBase.IsProductOverridden,
    SalesOrderDetailBase.IsCopied,
    SalesOrderDetailBase.DeletionStateCode,
    SalesOrderDetailBase.QuantityShipped,
    SalesOrderDetailBase.LineItemNumber,
    SalesOrderDetailBase.QuantityBackordered,
    SalesOrderDetailBase.UoMId,
    SalesOrderDetailBase.QuantityCancelled,
    SalesOrderDetailBase.ProductId,
    SalesOrderDetailBase.RequestDeliveryBy,
    SalesOrderDetailBase.Quantity,
    SalesOrderDetailBase.PricingErrorCode,
    SalesOrderDetailBase.ManualDiscountAmount,
    SalesOrderDetailBase.ProductDescription,
    SalesOrderDetailBase.VolumeDiscountAmount,
    SalesOrderDetailBase.PricePerUnit,
    SalesOrderDetailBase.BaseAmount,
    SalesOrderDetailBase.ExtendedAmount,
    SalesOrderDetailBase.Description,
    SalesOrderDetailBase.IsPriceOverridden,
    SalesOrderDetailBase.ShipTo_Name,
    SalesOrderDetailBase.Tax,
    SalesOrderDetailBase.CreatedOn,
    SalesOrderDetailBase.ShipTo_Line1,
    SalesOrderDetailBase.CreatedBy,
    SalesOrderDetailBase.ModifiedBy,
    SalesOrderDetailBase.ShipTo_Line2,
    SalesOrderDetailBase.ShipTo_Line3,
    SalesOrderDetailBase.ModifiedOn,
    SalesOrderDetailBase.ShipTo_City,
    SalesOrderDetailBase.ShipTo_StateOrProvince,
    SalesOrderDetailBase.ShipTo_Country,
    SalesOrderDetailBase.ShipTo_PostalCode,
    SalesOrderDetailBase.WillCall,
    SalesOrderDetailBase.ShipTo_Telephone,
    SalesOrderDetailBase.ShipTo_Fax,
    SalesOrderDetailBase.ShipTo_FreightTermsCode,
    SalesOrderDetailBase.ShipTo_ContactName,
    SalesOrderDetailBase.VersionNumber,
    SalesOrderDetailBase.ShipTo_AddressId,
    SalesOrderDetailBase.TimeZoneRuleVersionNumber,
    SalesOrderDetailBase.ImportSequenceNumber,
    SalesOrderDetailBase.UTCConversionTimeZoneCode,
    SalesOrderDetailBase.ExchangeRate,
    SalesOrderDetailBase.OverriddenCreatedOn,
    SalesOrderDetailBase.TransactionCurrencyId,
    SalesOrderDetailBase.BaseAmount_Base,
    SalesOrderDetailBase.PricePerUnit_Base,
    SalesOrderDetailBase.VolumeDiscountAmount_Base,
    SalesOrderDetailBase.ExtendedAmount_Base,
    SalesOrderDetailBase.Tax_Base,
    SalesOrderDetailBase.ManualDiscountAmount_Base
from SalesOrderDetailBase
    left join SystemUserBase lk_salesorderdetailbase_createdby with(nolock) on (SalesOrderDetailBase.CreatedBy = lk_salesorderdetailbase_createdby.SystemUserId)
    left join SystemUserBase lk_salesorderdetailbase_modifiedby with(nolock) on (SalesOrderDetailBase.ModifiedBy = lk_salesorderdetailbase_modifiedby.SystemUserId)
    left join SalesOrderBase order_details on (SalesOrderDetailBase.SalesOrderId = order_details.SalesOrderId)
    left join ProductBase product_order_details on (SalesOrderDetailBase.ProductId = product_order_details.ProductId)
    left join SystemUserBase system_user_salesorderdetail with(nolock) on (SalesOrderDetailBase.SalesRepId = system_user_salesorderdetail.SystemUserId)
    left join TransactionCurrencyBase transactioncurrency_salesorderdetail on (SalesOrderDetailBase.TransactionCurrencyId = transactioncurrency_salesorderdetail.TransactionCurrencyId)
    left join UoMBase unit_of_measurement_order_details on (SalesOrderDetailBase.UoMId = unit_of_measurement_order_details.UoMId)

/****** Object:  View [dbo].[UoM]    Script Date: 04/11/2008 06:58:35 ******/




--
-- base view for UoM
--
create view [dbo].[UoM] (
    -- logical attributes
    BaseUoMName, 
    BaseUoMNameDsc, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationId, 

    -- physical attributes
    UoMId,
    BaseUoM,
    DeletionStateCode,
    Name,
    UoMScheduleId,
    Quantity,
    CreatedOn,
    CreatedBy,
    ModifiedBy,
    ModifiedOn,
    IsScheduleBaseUoM,
    VersionNumber,
    ImportSequenceNumber,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    unit_of_measurement_base_unit.Name, 
    unit_of_measurement_base_unit.DeletionStateCode, 
    lk_uombase_createdby.DeletionStateCode, 
    lk_uombase_createdby.FullName, 
    lk_uombase_createdby.YomiFullName, 
    lk_uombase_modifiedby.DeletionStateCode, 
    lk_uombase_modifiedby.FullName, 
    lk_uombase_modifiedby.YomiFullName, 
    unit_of_measure_schedule_conversions.OrganizationId, 

    -- physical attributes
    UoMBase.UoMId,
    UoMBase.BaseUoM,
    UoMBase.DeletionStateCode,
    UoMBase.Name,
    UoMBase.UoMScheduleId,
    UoMBase.Quantity,
    UoMBase.CreatedOn,
    UoMBase.CreatedBy,
    UoMBase.ModifiedBy,
    UoMBase.ModifiedOn,
    UoMBase.IsScheduleBaseUoM,
    UoMBase.VersionNumber,
    UoMBase.ImportSequenceNumber,
    UoMBase.OverriddenCreatedOn
from UoMBase
    left join SystemUserBase lk_uombase_createdby with(nolock) on (UoMBase.CreatedBy = lk_uombase_createdby.SystemUserId)
    left join SystemUserBase lk_uombase_modifiedby with(nolock) on (UoMBase.ModifiedBy = lk_uombase_modifiedby.SystemUserId)
    left join UoMScheduleBase unit_of_measure_schedule_conversions on (UoMBase.UoMScheduleId = unit_of_measure_schedule_conversions.UoMScheduleId)
    left join UoMBase unit_of_measurement_base_unit on (UoMBase.BaseUoM = unit_of_measurement_base_unit.UoMId)

/****** Object:  View [dbo].[ProductPriceLevel]    Script Date: 04/11/2008 06:58:24 ******/




--
-- base view for ProductPriceLevel
--
create view [dbo].[ProductPriceLevel] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    DiscountTypeIdDsc, 
    DiscountTypeIdName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationId, 
    PriceLevelIdDsc, 
    PriceLevelIdName, 
    ProductIdDsc, 
    ProductIdName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 
    UoMIdDsc, 
    UoMIdName, 
    UoMScheduleIdDsc, 
    UoMScheduleIdName, 

    -- physical attributes
    PriceLevelId,
    ProductPriceLevelId,
    UoMId,
    UoMScheduleId,
    DiscountTypeId,
    ProductId,
    Percentage,
    Amount,
    CreatedOn,
    QuantitySellingCode,
    RoundingPolicyCode,
    ModifiedOn,
    PricingMethodCode,
    RoundingOptionCode,
    RoundingOptionAmount,
    VersionNumber,
    CreatedBy,
    ModifiedBy,
    ExchangeRate,
    TransactionCurrencyId,
    OverriddenCreatedOn,
    ImportSequenceNumber,
    Amount_Base,
    RoundingOptionAmount_Base
) with view_metadata as 
select 
    -- logical attributes
    lk_productpricelevelbase_createdby.DeletionStateCode, 
    lk_productpricelevelbase_createdby.FullName, 
    lk_productpricelevelbase_createdby.YomiFullName, 
    discount_type_product_price_levels.DeletionStateCode, 
    discount_type_product_price_levels.Name, 
    lk_productpricelevelbase_modifiedby.DeletionStateCode, 
    lk_productpricelevelbase_modifiedby.FullName, 
    lk_productpricelevelbase_modifiedby.YomiFullName, 
    price_level_product_price_levels.OrganizationId, 
    price_level_product_price_levels.DeletionStateCode, 
    price_level_product_price_levels.Name, 
    product_price_levels.DeletionStateCode, 
    product_price_levels.Name, 
    transactioncurrency_productpricelevel.DeletionStateCode, 
    transactioncurrency_productpricelevel.CurrencyName, 
    unit_of_measurement_product_price_levels.DeletionStateCode, 
    unit_of_measurement_product_price_levels.Name, 
    unit_of_measure_schedule_product_price_level.DeletionStateCode, 
    unit_of_measure_schedule_product_price_level.Name, 

    -- physical attributes
    ProductPriceLevelBase.PriceLevelId,
    ProductPriceLevelBase.ProductPriceLevelId,
    ProductPriceLevelBase.UoMId,
    ProductPriceLevelBase.UoMScheduleId,
    ProductPriceLevelBase.DiscountTypeId,
    ProductPriceLevelBase.ProductId,
    ProductPriceLevelBase.Percentage,
    ProductPriceLevelBase.Amount,
    ProductPriceLevelBase.CreatedOn,
    ProductPriceLevelBase.QuantitySellingCode,
    ProductPriceLevelBase.RoundingPolicyCode,
    ProductPriceLevelBase.ModifiedOn,
    ProductPriceLevelBase.PricingMethodCode,
    ProductPriceLevelBase.RoundingOptionCode,
    ProductPriceLevelBase.RoundingOptionAmount,
    ProductPriceLevelBase.VersionNumber,
    ProductPriceLevelBase.CreatedBy,
    ProductPriceLevelBase.ModifiedBy,
    ProductPriceLevelBase.ExchangeRate,
    ProductPriceLevelBase.TransactionCurrencyId,
    ProductPriceLevelBase.OverriddenCreatedOn,
    ProductPriceLevelBase.ImportSequenceNumber,
    ProductPriceLevelBase.Amount_Base,
    ProductPriceLevelBase.RoundingOptionAmount_Base
from ProductPriceLevelBase
    left join DiscountTypeBase discount_type_product_price_levels on (ProductPriceLevelBase.DiscountTypeId = discount_type_product_price_levels.DiscountTypeId)
    left join SystemUserBase lk_productpricelevelbase_createdby with(nolock) on (ProductPriceLevelBase.CreatedBy = lk_productpricelevelbase_createdby.SystemUserId)
    left join SystemUserBase lk_productpricelevelbase_modifiedby with(nolock) on (ProductPriceLevelBase.ModifiedBy = lk_productpricelevelbase_modifiedby.SystemUserId)
    left join PriceLevelBase price_level_product_price_levels on (ProductPriceLevelBase.PriceLevelId = price_level_product_price_levels.PriceLevelId)
    left join ProductBase product_price_levels on (ProductPriceLevelBase.ProductId = product_price_levels.ProductId)
    left join TransactionCurrencyBase transactioncurrency_productpricelevel on (ProductPriceLevelBase.TransactionCurrencyId = transactioncurrency_productpricelevel.TransactionCurrencyId)
    left join UoMScheduleBase unit_of_measure_schedule_product_price_level on (ProductPriceLevelBase.UoMScheduleId = unit_of_measure_schedule_product_price_level.UoMScheduleId)
    left join UoMBase unit_of_measurement_product_price_levels on (ProductPriceLevelBase.UoMId = unit_of_measurement_product_price_levels.UoMId)

/****** Object:  StoredProcedure [dbo].[p_DetectUnitLoop]    Script Date: 04/11/2008 06:35:06 ******/




CREATE procedure [dbo].[p_DetectUnitLoop](
 @UoMId uniqueidentifier, 
 @BaseUoMId uniqueidentifier) 
as
/*
	This proc is to be used to determine if creating one unit based on another would create a loop in the unit hierarchy.
It also detects if a loop already exists somewhere at or below the unit.

Pre-condition:
	We assume @UoMId and @BaseUoMId are in the same unit schedule.

Return Values : 
ErrorCode ErrorMessage
  '4'  'The BaseUoMId passed in is not valid' as ErrorMessage.'
  '3'  'The UoMId passed in is not valid' as ErrorMessage.'
  '2'  'Using this base unit would create a loop in the unit hierarchy.'
  '1'  'There is already a loop existing in the unit hierarchy.'
*/
set nocount on
Declare @TempBaseUnitId uniqueidentifier


   -- make sure that the @BaseUoMId is a valid unit id.
   IF not exists(select UoMId from UoMBase where UoMId = @BaseUoMId)
     BEGIN 
      select '4' as ErrorCode,  'The BaseUoMId passed in is not valid.' as ErrorMessage
      return 
     END

   -- make sure that the @UoMId is a valid unit id.
   IF not exists(select UoMId from UoMBase where UoMId = @UoMId)
     BEGIN 
      select '3' as ErrorCode, 'The UoMId passed in is not valid.' as ErrorMessage
      return 
     END


select @TempBaseUnitId = @BaseUoMId 

create table #Ids ( IdVisited uniqueidentifier primary key)
WHILE ( 1 = 1 )

 BEGIN
   if (@TempBaseUnitId = @UoMId)
     -- while chasing down the base unit of the base unit (of the base unit...) you bumped into the unit.  this would create a loop	
     BEGIN
	select '2' as ErrorCode, 'Using this base unit would create a loop in the unit hierarchy.' as ErrorMessage
	BREAK
     END

   select @TempBaseUnitId = BaseUoM from UoMBase  where UoMId = @TempBaseUnitId 

   IF (@TempBaseUnitId is null)
     BEGIN 
      -- This implies that there is a dead end to the unit->base unit-> chain and hence no fear of looping.	
      select '0' as ErrorCode, 'This base unit is valid and would create no loop in the unit hierarchy.' as ErrorMessage
      BREAK
     END
   ELSE
     BEGIN 
	if exists (select * from #Ids where @TempBaseUnitId = IdVisited)
	  BEGIN
	      -- This should never happen.  if it does, that means there is already a loop in the 1.x database.
	      select '1' as ErrorCode, 'There is already a loop existing in the unit hierarchy.' as ErrorMessage             
      	      BREAK
	  END
	else
	  BEGIN
		Insert into #Ids(IdVisited) values (@TempBaseUnitId)
		CONTINUE
	  END
     END
   BREAK 	
 END

/****** Object:  View [dbo].[QuoteDetail]    Script Date: 04/11/2008 06:58:25 ******/




--
-- base view for QuoteDetail
--
create view [dbo].[QuoteDetail] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 
    ProductIdDsc, 
    ProductIdName, 
    QuoteStateCode, 
    SalesRepIdDsc, 
    SalesRepIdName, 
    SalesRepIdYomiName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 
    UoMIdDsc, 
    UoMIdName, 

    -- physical attributes
    QuoteDetailId,
    QuoteId,
    SalesRepId,
    DeletionStateCode,
    LineItemNumber,
    UoMId,
    ProductId,
    RequestDeliveryBy,
    Quantity,
    PricingErrorCode,
    ManualDiscountAmount,
    ProductDescription,
    VolumeDiscountAmount,
    PricePerUnit,
    BaseAmount,
    ExtendedAmount,
    Description,
    ShipTo_Name,
    IsPriceOverridden,
    Tax,
    ShipTo_Line1,
    CreatedOn,
    ShipTo_Line2,
    CreatedBy,
    ModifiedBy,
    ShipTo_Line3,
    ShipTo_City,
    ModifiedOn,
    ShipTo_StateOrProvince,
    ShipTo_Country,
    ShipTo_PostalCode,
    WillCall,
    IsProductOverridden,
    ShipTo_Telephone,
    ShipTo_Fax,
    ShipTo_FreightTermsCode,
    ShipTo_AddressId,
    ShipTo_ContactName,
    VersionNumber,
    ImportSequenceNumber,
    UTCConversionTimeZoneCode,
    OverriddenCreatedOn,
    TransactionCurrencyId,
    ExchangeRate,
    TimeZoneRuleVersionNumber,
    Tax_Base,
    ExtendedAmount_Base,
    PricePerUnit_Base,
    BaseAmount_Base,
    ManualDiscountAmount_Base,
    VolumeDiscountAmount_Base
) with view_metadata as 
select 
    -- logical attributes
    lk_quotedetailbase_createdby.DeletionStateCode, 
    lk_quotedetailbase_createdby.FullName, 
    lk_quotedetailbase_createdby.YomiFullName, 
    lk_quotedetailbase_modifiedby.DeletionStateCode, 
    lk_quotedetailbase_modifiedby.FullName, 
    lk_quotedetailbase_modifiedby.YomiFullName, 
    quote_details.OwningBusinessUnit, 
    quote_details.OwningUser, 
    product_quote_details.DeletionStateCode, 
    product_quote_details.Name, 
    quote_details.StateCode, 
    system_user_quotedetail.DeletionStateCode, 
    system_user_quotedetail.FullName, 
    system_user_quotedetail.YomiFullName, 
    transactioncurrency_quotedetail.DeletionStateCode, 
    transactioncurrency_quotedetail.CurrencyName, 
    unit_of_measurement_quote_details.DeletionStateCode, 
    unit_of_measurement_quote_details.Name, 

    -- physical attributes
    QuoteDetailBase.QuoteDetailId,
    QuoteDetailBase.QuoteId,
    QuoteDetailBase.SalesRepId,
    QuoteDetailBase.DeletionStateCode,
    QuoteDetailBase.LineItemNumber,
    QuoteDetailBase.UoMId,
    QuoteDetailBase.ProductId,
    QuoteDetailBase.RequestDeliveryBy,
    QuoteDetailBase.Quantity,
    QuoteDetailBase.PricingErrorCode,
    QuoteDetailBase.ManualDiscountAmount,
    QuoteDetailBase.ProductDescription,
    QuoteDetailBase.VolumeDiscountAmount,
    QuoteDetailBase.PricePerUnit,
    QuoteDetailBase.BaseAmount,
    QuoteDetailBase.ExtendedAmount,
    QuoteDetailBase.Description,
    QuoteDetailBase.ShipTo_Name,
    QuoteDetailBase.IsPriceOverridden,
    QuoteDetailBase.Tax,
    QuoteDetailBase.ShipTo_Line1,
    QuoteDetailBase.CreatedOn,
    QuoteDetailBase.ShipTo_Line2,
    QuoteDetailBase.CreatedBy,
    QuoteDetailBase.ModifiedBy,
    QuoteDetailBase.ShipTo_Line3,
    QuoteDetailBase.ShipTo_City,
    QuoteDetailBase.ModifiedOn,
    QuoteDetailBase.ShipTo_StateOrProvince,
    QuoteDetailBase.ShipTo_Country,
    QuoteDetailBase.ShipTo_PostalCode,
    QuoteDetailBase.WillCall,
    QuoteDetailBase.IsProductOverridden,
    QuoteDetailBase.ShipTo_Telephone,
    QuoteDetailBase.ShipTo_Fax,
    QuoteDetailBase.ShipTo_FreightTermsCode,
    QuoteDetailBase.ShipTo_AddressId,
    QuoteDetailBase.ShipTo_ContactName,
    QuoteDetailBase.VersionNumber,
    QuoteDetailBase.ImportSequenceNumber,
    QuoteDetailBase.UTCConversionTimeZoneCode,
    QuoteDetailBase.OverriddenCreatedOn,
    QuoteDetailBase.TransactionCurrencyId,
    QuoteDetailBase.ExchangeRate,
    QuoteDetailBase.TimeZoneRuleVersionNumber,
    QuoteDetailBase.Tax_Base,
    QuoteDetailBase.ExtendedAmount_Base,
    QuoteDetailBase.PricePerUnit_Base,
    QuoteDetailBase.BaseAmount_Base,
    QuoteDetailBase.ManualDiscountAmount_Base,
    QuoteDetailBase.VolumeDiscountAmount_Base
from QuoteDetailBase
    left join SystemUserBase lk_quotedetailbase_createdby with(nolock) on (QuoteDetailBase.CreatedBy = lk_quotedetailbase_createdby.SystemUserId)
    left join SystemUserBase lk_quotedetailbase_modifiedby with(nolock) on (QuoteDetailBase.ModifiedBy = lk_quotedetailbase_modifiedby.SystemUserId)
    left join ProductBase product_quote_details on (QuoteDetailBase.ProductId = product_quote_details.ProductId)
    left join QuoteBase quote_details on (QuoteDetailBase.QuoteId = quote_details.QuoteId)
    left join SystemUserBase system_user_quotedetail with(nolock) on (QuoteDetailBase.SalesRepId = system_user_quotedetail.SystemUserId)
    left join TransactionCurrencyBase transactioncurrency_quotedetail on (QuoteDetailBase.TransactionCurrencyId = transactioncurrency_quotedetail.TransactionCurrencyId)
    left join UoMBase unit_of_measurement_quote_details on (QuoteDetailBase.UoMId = unit_of_measurement_quote_details.UoMId)

/****** Object:  View [dbo].[RelationshipRoleMap]    Script Date: 04/11/2008 06:58:26 ******/




--
-- base view for RelationshipRoleMap
--
create view [dbo].[RelationshipRoleMap] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationId, 
    RelationshipRoleIdDsc, 
    RelationshipRoleIdName, 

    -- physical attributes
    ModifiedOn,
    CreatedOn,
    RelationshipRoleMapId,
    CreatedBy,
    VersionNumber,
    ModifiedBy,
    AssociateObjectTypeCode,
    RelationshipRoleId,
    PrimaryObjectTypeCode
) with view_metadata as 
select 
    -- logical attributes
    createdby_relationship_role_map.DeletionStateCode, 
    createdby_relationship_role_map.FullName, 
    createdby_relationship_role_map.YomiFullName, 
    modifiedby_relationship_role_map.DeletionStateCode, 
    modifiedby_relationship_role_map.FullName, 
    modifiedby_relationship_role_map.YomiFullName, 
    relationship_role_relationship_role_map.OrganizationId, 
    relationship_role_relationship_role_map.DeletionStateCode, 
    relationship_role_relationship_role_map.Name, 

    -- physical attributes
    RelationshipRoleMapBase.ModifiedOn,
    RelationshipRoleMapBase.CreatedOn,
    RelationshipRoleMapBase.RelationshipRoleMapId,
    RelationshipRoleMapBase.CreatedBy,
    RelationshipRoleMapBase.VersionNumber,
    RelationshipRoleMapBase.ModifiedBy,
    RelationshipRoleMapBase.AssociateObjectTypeCode,
    RelationshipRoleMapBase.RelationshipRoleId,
    RelationshipRoleMapBase.PrimaryObjectTypeCode
from RelationshipRoleMapBase
    left join SystemUserBase createdby_relationship_role_map with(nolock) on (RelationshipRoleMapBase.CreatedBy = createdby_relationship_role_map.SystemUserId)
    left join SystemUserBase modifiedby_relationship_role_map with(nolock) on (RelationshipRoleMapBase.ModifiedBy = modifiedby_relationship_role_map.SystemUserId)
    left join RelationshipRoleBase relationship_role_relationship_role_map on (RelationshipRoleMapBase.RelationshipRoleId = relationship_role_relationship_role_map.RelationshipRoleId)

/****** Object:  StoredProcedure [dbo].[p_IsInBusinessDeep]    Script Date: 04/11/2008 06:35:21 ******/




/*
This proc is to be used to test if ?BusinessId is in ParentId's business hierarchy.
*/
CREATE procedure [dbo].[p_IsInBusinessDeep](
 @BusinessId uniqueidentifier,
 @ParentId uniqueidentifier) 
as
begin
set nocount on

declare @TempParentId uniqueidentifier
select @TempParentId = @BusinessId

declare @CurBizId uniqueidentifier
while (@TempParentId is not null)
begin
	if (@TempParentId = @ParentId)
	begin
		select IsInBusinessDeep = 1
		return
	end

	select @CurBizId = @TempParentId

	select @TempParentId = ParentBusinessUnitId
	from BusinessUnitBase
	where BusinessUnitId = @CurBizId
end

select IsInBusinessDeep = 0

end

/****** Object:  StoredProcedure [dbo].[p_DetectBusinessLoop]    Script Date: 04/11/2008 06:35:05 ******/




CREATE procedure [dbo].[p_DetectBusinessLoop](
 @ParentId uniqueidentifier, 
 @ChildId uniqueidentifier) 
as
/*
	This proc is to be used to determine if parenting one business to another would create a loop inside the business hierarchy.
It also detects if a loop already exists somewhere at or above the parent business

Return Values : 
ErrorCode ErrorMessage
  '4'  'The ParentId passed in is not valid'
  '3'  'The ChildId passed in is not valid'
  '2'  'This association would create a loop in the database.'
  '1'  'There is already a loop existing in the database.'
*/
set nocount on
Declare @TempParentId uniqueidentifier

	

   -- make sure that the @ParentId is a valid business id.
   IF not exists(select BusinessUnitId from BusinessUnitBase where BusinessUnitId = @ParentId)
     BEGIN 
      select '4' as ErrorCode,  'The ParentId passed in is not valid.' as ErrorMessage
      return 
     END

   -- make sure that the @ChildId is a valid account id.
   IF not exists(select BusinessUnitId from BusinessUnitBase where BusinessUnitId = @ChildId)
     BEGIN 
      select '3' as ErrorCode, 'The ChildId passed in is not valid.' as ErrorMessage
      return 
     END


select @TempParentId = @ParentId 

create table #Ids ( IdVisited uniqueidentifier primary key)
WHILE ( 1 = 1 )

 BEGIN
   if (@TempParentId = @ChildId)
     -- while chasing the parent of the parent (of the parent...) you bumped into the child.  this would create a loop	
     BEGIN
	select '2' as ErrorCode, 'This association would create a loop in the database.' as ErrorMessage
	BREAK
     END

   select @TempParentId = ParentBusinessUnitId from BusinessUnitBase  where BusinessUnitId = @TempParentId	

   IF (@TempParentId is null)
     BEGIN 
      -- This implies that there is a dead end to the parent->grand parent-> chain and hence no fear of looping.	
      select '0' as ErrorCode, 'This association is valid and would create no loop in the database.' as ErrorMessage
      BREAK
     END
   ELSE
     BEGIN 
	if exists (select * from #Ids where @TempParentId = IdVisited)
	  BEGIN
	      -- This should never happen.  if it does, that means some one has been mucking with the DB from the backend.	
	      select '1' as ErrorCode, 'There is already a loop existing in the database.' as ErrorMessage             
      	      BREAK
	  END
	else
	  BEGIN
		Insert into #Ids(IdVisited) values (@TempParentId)
		CONTINUE
	  END
     END
   BREAK 	
 END

/****** Object:  View [dbo].[UserSettings]    Script Date: 04/11/2008 06:58:36 ******/




--
-- base view for UserSettings
--
create view [dbo].[UserSettings] (
    -- logical attributes
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- physical attributes
    SystemUserId,
    BusinessUnitId,
    HomepageArea,
    PagingLimit,
    HomepageSubarea,
    DefaultCalendarView,
    WorkdayStartTime,
    WorkdayStopTime,
    IgnoreUnsolicitedEmail,
    TimeZoneBias,
    TimeZoneStandardBias,
    TimeZoneDaylightBias,
    TimeZoneCode,
    TimeZoneStandardYear,
    TimeZoneStandardMonth,
    TimeZoneStandardDay,
    TimeZoneStandardDayOfWeek,
    TimeZoneStandardHour,
    TimeZoneStandardMinute,
    TimeZoneStandardSecond,
    TimeZoneDaylightYear,
    TimeZoneDaylightMonth,
    TimeZoneDaylightDay,
    TimeZoneDaylightDayOfWeek,
    TimeZoneDaylightHour,
    TimeZoneDaylightMinute,
    TimeZoneDaylightSecond,
    ModifiedBy,
    AdvancedFindStartupMode,
    CreatedOn,
    TrackingTokenId,
    NextTrackingNumber,
    ModifiedOn,
    CreatedBy,
    VersionNumber,
    UserProfile,
    NumberSeparator,
    OutlookSyncInterval,
    UseCrmFormForTask,
    PricingDecimalPrecision,
    SyncContactCompany,
    DateSeparator,
    LongDateFormatCode,
    AllowEmailCredentials,
    FullNameConventionCode,
    TimeSeparator,
    TimeFormatCode,
    NegativeFormatCode,
    OfflineSyncInterval,
    CalendarType,
    CurrencySymbol,
    TransactionCurrencyId,
    UILanguageId,
    UseCrmFormForContact,
    CurrencyFormatCode,
    AddressBookSyncInterval,
    DecimalSymbol,
    UseCrmFormForEmail,
    ShowWeekNumber,
    NegativeCurrencyFormatCode,
    TimeFormatString,
    EmailUsername,
    DateFormatString,
    ReportScriptErrors,
    UseImageStrips,
    EmailPassword,
    DateFormatCode,
    UseCrmFormForAppointment,
    IsDuplicateDetectionEnabledWhenGoingOnline,
    LocaleId,
    IncomingEmailFilteringMethod,
    CurrencyDecimalPrecision,
    AMDesignator,
    NumberGroupFormat,
    HelpLanguageId,
    PMDesignator
) with view_metadata as 
select 
    -- logical attributes
    business_unit_user_settings.DeletionStateCode, 
    business_unit_user_settings.Name, 
    lk_usersettingsbase_createdby.DeletionStateCode, 
    lk_usersettingsbase_createdby.FullName, 
    lk_usersettingsbase_createdby.YomiFullName, 
    lk_usersettingsbase_modifiedby.DeletionStateCode, 
    lk_usersettingsbase_modifiedby.FullName, 
    lk_usersettingsbase_modifiedby.YomiFullName, 
    transactioncurrency_usersettings.DeletionStateCode, 
    transactioncurrency_usersettings.CurrencyName, 

    -- physical attributes
    UserSettingsBase.SystemUserId,
    UserSettingsBase.BusinessUnitId,
    UserSettingsBase.HomepageArea,
    UserSettingsBase.PagingLimit,
    UserSettingsBase.HomepageSubarea,
    UserSettingsBase.DefaultCalendarView,
    UserSettingsBase.WorkdayStartTime,
    UserSettingsBase.WorkdayStopTime,
    UserSettingsBase.IgnoreUnsolicitedEmail,
    UserSettingsBase.TimeZoneBias,
    UserSettingsBase.TimeZoneStandardBias,
    UserSettingsBase.TimeZoneDaylightBias,
    UserSettingsBase.TimeZoneCode,
    UserSettingsBase.TimeZoneStandardYear,
    UserSettingsBase.TimeZoneStandardMonth,
    UserSettingsBase.TimeZoneStandardDay,
    UserSettingsBase.TimeZoneStandardDayOfWeek,
    UserSettingsBase.TimeZoneStandardHour,
    UserSettingsBase.TimeZoneStandardMinute,
    UserSettingsBase.TimeZoneStandardSecond,
    UserSettingsBase.TimeZoneDaylightYear,
    UserSettingsBase.TimeZoneDaylightMonth,
    UserSettingsBase.TimeZoneDaylightDay,
    UserSettingsBase.TimeZoneDaylightDayOfWeek,
    UserSettingsBase.TimeZoneDaylightHour,
    UserSettingsBase.TimeZoneDaylightMinute,
    UserSettingsBase.TimeZoneDaylightSecond,
    UserSettingsBase.ModifiedBy,
    UserSettingsBase.AdvancedFindStartupMode,
    UserSettingsBase.CreatedOn,
    UserSettingsBase.TrackingTokenId,
    UserSettingsBase.NextTrackingNumber,
    UserSettingsBase.ModifiedOn,
    UserSettingsBase.CreatedBy,
    UserSettingsBase.VersionNumber,
    UserSettingsBase.UserProfile,
    UserSettingsBase.NumberSeparator,
    UserSettingsBase.OutlookSyncInterval,
    UserSettingsBase.UseCrmFormForTask,
    UserSettingsBase.PricingDecimalPrecision,
    UserSettingsBase.SyncContactCompany,
    UserSettingsBase.DateSeparator,
    UserSettingsBase.LongDateFormatCode,
    UserSettingsBase.AllowEmailCredentials,
    UserSettingsBase.FullNameConventionCode,
    UserSettingsBase.TimeSeparator,
    UserSettingsBase.TimeFormatCode,
    UserSettingsBase.NegativeFormatCode,
    UserSettingsBase.OfflineSyncInterval,
    UserSettingsBase.CalendarType,
    UserSettingsBase.CurrencySymbol,
    UserSettingsBase.TransactionCurrencyId,
    UserSettingsBase.UILanguageId,
    UserSettingsBase.UseCrmFormForContact,
    UserSettingsBase.CurrencyFormatCode,
    UserSettingsBase.AddressBookSyncInterval,
    UserSettingsBase.DecimalSymbol,
    UserSettingsBase.UseCrmFormForEmail,
    UserSettingsBase.ShowWeekNumber,
    UserSettingsBase.NegativeCurrencyFormatCode,
    UserSettingsBase.TimeFormatString,
    UserSettingsBase.EmailUsername,
    UserSettingsBase.DateFormatString,
    UserSettingsBase.ReportScriptErrors,
    UserSettingsBase.UseImageStrips,
    UserSettingsBase.EmailPassword,
    UserSettingsBase.DateFormatCode,
    UserSettingsBase.UseCrmFormForAppointment,
    UserSettingsBase.IsDuplicateDetectionEnabledWhenGoingOnline,
    UserSettingsBase.LocaleId,
    UserSettingsBase.IncomingEmailFilteringMethod,
    UserSettingsBase.CurrencyDecimalPrecision,
    UserSettingsBase.AMDesignator,
    UserSettingsBase.NumberGroupFormat,
    UserSettingsBase.HelpLanguageId,
    UserSettingsBase.PMDesignator
from UserSettingsBase
    left join BusinessUnitBase business_unit_user_settings on (UserSettingsBase.BusinessUnitId = business_unit_user_settings.BusinessUnitId)
    left join SystemUserBase lk_usersettingsbase_createdby with(nolock) on (UserSettingsBase.CreatedBy = lk_usersettingsbase_createdby.SystemUserId)
    left join SystemUserBase lk_usersettingsbase_modifiedby with(nolock) on (UserSettingsBase.ModifiedBy = lk_usersettingsbase_modifiedby.SystemUserId)
    left join TransactionCurrencyBase transactioncurrency_usersettings on (UserSettingsBase.TransactionCurrencyId = transactioncurrency_usersettings.TransactionCurrencyId)

/****** Object:  StoredProcedure [dbo].[p_GetBusinessHierarchy]    Script Date: 04/11/2008 06:35:10 ******/




/*
This proc is to be used to get all business ids within the business hierarchy for the given BusinessId.
*/
CREATE procedure [dbo].[p_GetBusinessHierarchy](
 @BusinessId uniqueidentifier) 
as
begin
set nocount on

-- make sure that the @BusinessId is a valid business id.
IF not exists(select BusinessUnitId from BusinessUnitBase where BusinessUnitId = @BusinessId)
    BEGIN 
    select '4' as ErrorCode,  'The BusinessId passed in is not valid.' as ErrorMessage
    return 
    END

declare @ParentId uniqueidentifier
select @ParentId = @BusinessId

declare @CurBizId uniqueidentifier
while (@ParentId is not null) 
begin
	select @CurBizId = @ParentId

	select @ParentId = ParentBusinessUnitId
	from BusinessUnitBase
	where BusinessUnitId = @CurBizId
end

create table #BizIds (BusinessUnitId uniqueidentifier, nLevel int)
insert into #BizIds (BusinessUnitId, nLevel) values (@CurBizId, 0)

declare @nLevel int
select @nLevel = 0

while (@@ROWCOUNT > 0) 
begin
	select @nLevel = @nLevel + 1

	insert into #BizIds (BusinessUnitId, nLevel)
	select biz.BusinessUnitId, @nLevel 
	from BusinessUnitBase biz
		join #BizIds res on biz.ParentBusinessUnitId = res.BusinessUnitId
	where res.nLevel = @nLevel - 1
end

select distinct BusinessUnitId as 'businessunitid' from #BizIds
end

/****** Object:  View [dbo].[Workflow]    Script Date: 04/11/2008 06:58:37 ******/




--
-- base view for Workflow
--
create view [dbo].[Workflow] (
    -- logical attributes
    ActiveWorkflowIdDsc, 
    ActiveWorkflowIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnitDsc, 
    OwningBusinessUnitName, 
    ParentWorkflowIdDsc, 
    ParentWorkflowIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    OnDemand,
    Activities,
    PluginTypeId,
    CreatedOn,
    Type,
    WorkflowId,
    ActiveWorkflowId,
    ParentWorkflowId,
    UIData,
    PrimaryEntity,
    ModifiedOn,
    DeletionStateCode,
    IsCrmUIWorkflow,
    Subprocess,
    Scope,
    StatusCode,
    ModifiedBy,
    Rules,
    Description,
    CreatedBy,
    Name,
    OwningBusinessUnit,
    StateCode,
    OwningUser
) with view_metadata as 
select 
    -- logical attributes
    workflow_active_workflow.DeletionStateCode, 
    workflow_active_workflow.Name, 
    workflow_createdby.DeletionStateCode, 
    workflow_createdby.FullName, 
    workflow_createdby.YomiFullName, 
    workflow_modifiedby.DeletionStateCode, 
    workflow_modifiedby.FullName, 
    workflow_modifiedby.YomiFullName, 
    business_unit_workflow.DeletionStateCode, 
    business_unit_workflow.Name, 
    workflow_parent_workflow.DeletionStateCode, 
    workflow_parent_workflow.Name, 

    -- ownership entries
    OwnerId   = WorkflowBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when WorkflowBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    WorkflowBase.OnDemand,
    WorkflowBase.Activities,
    WorkflowBase.PluginTypeId,
    WorkflowBase.CreatedOn,
    WorkflowBase.Type,
    WorkflowBase.WorkflowId,
    WorkflowBase.ActiveWorkflowId,
    WorkflowBase.ParentWorkflowId,
    WorkflowBase.UIData,
    WorkflowBase.PrimaryEntity,
    WorkflowBase.ModifiedOn,
    WorkflowBase.DeletionStateCode,
    WorkflowBase.IsCrmUIWorkflow,
    WorkflowBase.Subprocess,
    WorkflowBase.Scope,
    WorkflowBase.StatusCode,
    WorkflowBase.ModifiedBy,
    WorkflowBase.Rules,
    WorkflowBase.Description,
    WorkflowBase.CreatedBy,
    WorkflowBase.Name,
    WorkflowBase.OwningBusinessUnit,
    WorkflowBase.StateCode,
    WorkflowBase.OwningUser
from WorkflowBase
    left join BusinessUnitBase business_unit_workflow on (WorkflowBase.OwningBusinessUnit = business_unit_workflow.BusinessUnitId)
    left join WorkflowBase workflow_active_workflow on (WorkflowBase.ActiveWorkflowId = workflow_active_workflow.WorkflowId)
    left join SystemUserBase workflow_createdby with(nolock) on (WorkflowBase.CreatedBy = workflow_createdby.SystemUserId)
    left join SystemUserBase workflow_modifiedby with(nolock) on (WorkflowBase.ModifiedBy = workflow_modifiedby.SystemUserId)
    left join WorkflowBase workflow_parent_workflow on (WorkflowBase.ParentWorkflowId = workflow_parent_workflow.WorkflowId)
    left join SystemUserBase XXowninguser with(nolock) on (WorkflowBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  StoredProcedure [dbo].[p_ChangeRolesForBusinessMove]    Script Date: 04/11/2008 06:34:59 ******/




--
-- this stored procedure will update roles as part of a business move
-- if it is a built-in role, it will reparent it, otherwise, it will
-- sever the parent link.
-- NOTE: this sproc assumes the parent business id for BizId has already been
-- changed (in the transaction).
--
create procedure [dbo].[p_ChangeRolesForBusinessMove](@bizId uniqueidentifier, @userid uniqueidentifier) as
begin

declare @parentBizId uniqueidentifier
select @parentBizId = ParentBusinessUnitId from BusinessUnitBase where BusinessUnitId = @bizId

--
-- reparent roles (for pre-canned roles)
--
update rb
set rb.ParentRoleId = rbParent.RoleId, rb.ModifiedBy = @userid, rb.ModifiedOn = getutcdate()
from RoleBase as rb
join RoleBase as rbParent on(
	rb.BusinessUnitId = @bizId and 
	rbParent.BusinessUnitId = @parentBizId and
	rbParent.RoleTemplateId = rb.RoleTemplateId and
	rbParent.RoleTemplateId is not null
	)

--
-- delete inherited custom roles (will be inherited from new parent if necessary)
--

--
-- first remove users from SystemUserRoles
-- 

create table #biz(id uniqueidentifier primary key clustered)
insert into #biz(id) values(@bizId)

create table #role(id uniqueidentifier primary key clustered)
insert into #role(id) 
	select rb.RoleId from RoleBase rb 
	where rb.BusinessUnitId = @bizId and rb.RoleTemplateId is null and rb.ParentRoleId is null

while (1=1)
begin
	declare @count int
	select @count = 0
	insert into #biz(id) 
	select BusinessUnitId from BusinessUnitBase where ParentBusinessUnitId in (select id from #biz)
	and BusinessUnitId not in (select id from #biz)

	insert into #role(id)
		select rb.RoleId from RoleBase rb 
		where rb.BusinessUnitId in (select id from #biz) 
		and rb.RoleTemplateId is null and rb.ParentRoleId is null
		and not exists (select id from #role where id = rb.RoleId)

	select @count = @@rowcount

	insert into #role(id) 
		select rb.RoleId from RoleBase rb
		where rb.ParentRoleId in (select id from #role)
		and not exists (select id from #role where id = rb.RoleId)

	select @count = @count + @@rowcount
	
	if (@count = 0)
		break
end

delete SystemUserRoles from SystemUserRoles as sur
where sur.RoleId in (
	select rb.RoleId from RoleBase rb
	where rb.BusinessUnitId in 
	(
		select bum.SubBusinessId from BusinessUnitMap bum where bum.BusinessId = @bizId
	)
	and rb.RoleId not in (select id from #role)
	and rb.RoleTemplateId is null and rb.ParentRoleId is not null
)

--
-- now delete from RolePrivileges
--

delete RolePrivileges from RolePrivileges as rp
where rp.RoleId in (
	select rb.RoleId from RoleBase rb
	where rb.BusinessUnitId in 
	(
		select bum.SubBusinessId from BusinessUnitMap bum where bum.BusinessId = @bizId
	)
	and rb.RoleId not in (select id from #role)
	and rb.RoleTemplateId is null and rb.ParentRoleId is not null
)

--
-- now delete the roles
--

delete RoleBase from RoleBase as rb
where rb.BusinessUnitId in 
(
	select bum.SubBusinessId from BusinessUnitMap bum where bum.BusinessId = @bizId
)
and rb.RoleId not in (select id from #role)
and rb.RoleTemplateId is null and rb.ParentRoleId is not null

drop table #role

end -- p_ChangeRolesForBusinessMove

/****** Object:  View [dbo].[UserFiscalCalendar]    Script Date: 04/11/2008 06:58:35 ******/




--
-- base view for UserFiscalCalendar
--
create view [dbo].[UserFiscalCalendar] (
    -- logical attributes
    BusinessUnitId, 
    BusinessUnitIdDsc, 
    BusinessUnitIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    SalesPersonIdDsc, 
    SalesPersonIdName, 
    SalesPersonIdYomiName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- physical attributes
    UserFiscalCalendarId,
    SalesPersonId,
    FiscalPeriodType,
    EffectiveOn,
    Period1,
    Period2,
    Period3,
    Period4,
    Period5,
    Period6,
    Period7,
    Period8,
    Period9,
    Period10,
    Period11,
    Period12,
    Period13,
    CreatedBy,
    CreatedOn,
    ModifiedBy,
    ModifiedOn,
    ImportSequenceNumber,
    TransactionCurrencyId,
    UTCConversionTimeZoneCode,
    ExchangeRate,
    TimeZoneRuleVersionNumber,
    Period4_Base,
    Period11_Base,
    Period3_Base,
    Period1_Base,
    Period6_Base,
    Period8_Base,
    Period9_Base,
    Period7_Base,
    Period5_Base,
    Period13_Base,
    Period10_Base,
    Period12_Base,
    Period2_Base
) with view_metadata as 
select 
    -- logical attributes
    system_user_quotas.BusinessUnitId, 
    lk_userfiscalcalendar_businessunit.DeletionStateCode, 
    lk_userfiscalcalendar_businessunit.Name, 
    lk_userfiscalcalendar_createdby.DeletionStateCode, 
    lk_userfiscalcalendar_createdby.FullName, 
    lk_userfiscalcalendar_createdby.YomiFullName, 
    lk_userfiscalcalendar_modifiedby.DeletionStateCode, 
    lk_userfiscalcalendar_modifiedby.FullName, 
    lk_userfiscalcalendar_modifiedby.YomiFullName, 
    system_user_quotas.DeletionStateCode, 
    system_user_quotas.FullName, 
    system_user_quotas.YomiFullName, 
    transactioncurrency_userfiscalcalendar.DeletionStateCode, 
    transactioncurrency_userfiscalcalendar.CurrencyName, 

    -- physical attributes
    UserFiscalCalendarBase.UserFiscalCalendarId,
    UserFiscalCalendarBase.SalesPersonId,
    UserFiscalCalendarBase.FiscalPeriodType,
    UserFiscalCalendarBase.EffectiveOn,
    UserFiscalCalendarBase.Period1,
    UserFiscalCalendarBase.Period2,
    UserFiscalCalendarBase.Period3,
    UserFiscalCalendarBase.Period4,
    UserFiscalCalendarBase.Period5,
    UserFiscalCalendarBase.Period6,
    UserFiscalCalendarBase.Period7,
    UserFiscalCalendarBase.Period8,
    UserFiscalCalendarBase.Period9,
    UserFiscalCalendarBase.Period10,
    UserFiscalCalendarBase.Period11,
    UserFiscalCalendarBase.Period12,
    UserFiscalCalendarBase.Period13,
    UserFiscalCalendarBase.CreatedBy,
    UserFiscalCalendarBase.CreatedOn,
    UserFiscalCalendarBase.ModifiedBy,
    UserFiscalCalendarBase.ModifiedOn,
    UserFiscalCalendarBase.ImportSequenceNumber,
    UserFiscalCalendarBase.TransactionCurrencyId,
    UserFiscalCalendarBase.UTCConversionTimeZoneCode,
    UserFiscalCalendarBase.ExchangeRate,
    UserFiscalCalendarBase.TimeZoneRuleVersionNumber,
    UserFiscalCalendarBase.Period4_Base,
    UserFiscalCalendarBase.Period11_Base,
    UserFiscalCalendarBase.Period3_Base,
    UserFiscalCalendarBase.Period1_Base,
    UserFiscalCalendarBase.Period6_Base,
    UserFiscalCalendarBase.Period8_Base,
    UserFiscalCalendarBase.Period9_Base,
    UserFiscalCalendarBase.Period7_Base,
    UserFiscalCalendarBase.Period5_Base,
    UserFiscalCalendarBase.Period13_Base,
    UserFiscalCalendarBase.Period10_Base,
    UserFiscalCalendarBase.Period12_Base,
    UserFiscalCalendarBase.Period2_Base
from UserFiscalCalendarBase
    left join SystemUserBase lk_userfiscalcalendar_createdby with(nolock) on (UserFiscalCalendarBase.CreatedBy = lk_userfiscalcalendar_createdby.SystemUserId)
    left join SystemUserBase lk_userfiscalcalendar_modifiedby with(nolock) on (UserFiscalCalendarBase.ModifiedBy = lk_userfiscalcalendar_modifiedby.SystemUserId)
    left join SystemUserBase system_user_quotas with(nolock) on (UserFiscalCalendarBase.SalesPersonId = system_user_quotas.SystemUserId)
    left join TransactionCurrencyBase transactioncurrency_userfiscalcalendar on (UserFiscalCalendarBase.TransactionCurrencyId = transactioncurrency_userfiscalcalendar.TransactionCurrencyId)
    left join BusinessUnitBase lk_userfiscalcalendar_businessunit on (system_user_quotas.BusinessUnitId = lk_userfiscalcalendar_businessunit.BusinessUnitId)

/****** Object:  StoredProcedure [dbo].[p_ReinitializeUsersSubscriptionsForBusinessUnitMove]    Script Date: 04/11/2008 06:35:27 ******/
SET ANSI_NULLS OFF



--
-- This stored procedure will reinitialize subscriptions for all users in oldParent and newParent business units hierarchy
-- up to first join parent node in the business hierarchy.
-- For examples: original business units hierarchy is b0( b1(b3(b4)), b2(b5))
--		where 'bi' is business unit 'i'. 
-- Scenario A: b3 will be moved under b2. New hierarchy will be b0( b1, b2((b3(b4)), b5)). 
--        Users from b1 will loze deep visiability of entities from b3&b4
--		  Users from b2 will gain deep visiability of entities from b3&b4	
--		  Affected business units are b1 and b2.
-- Scenario B: b4 will be moved under b5. New hierarchy will be b0( b1(b3), b2(b5(b4))). 
--        Users from b1 and b3 will loze deep visiability of entities from b4
--		  Users from b2 and b5 will gain deep visiability of entities from b4	
--		  Affected business units are b1, b2, b3, b5.
-- Scenario C: b3 will be moved under b5. New hierarchy will be b0( b1, b2(b5(b3(b4)))). 
--        Users from b1 will loze deep visiability of entities from b3&b4
--		  Users from b2 and b5 will gain deep visiability of entities from b3&b4
--		  Affected business units are b1, b5.

create procedure [dbo].[p_ReinitializeUsersSubscriptionsForBusinessUnitMove](@oldParentId uniqueidentifier, @newParentId uniqueidentifier) as
begin

Declare @oldId uniqueidentifier
Declare @newId uniqueidentifier

select @oldId = @oldParentId
select @newId = @newParentId

create table #tempBuIds (BusinessUnitId uniqueidentifier)

-- Collect affected parent BU ids in temptable 
-- duplicate are allowed, we will exclude them later by select distinct
while @oldId <> @newId
begin
	insert into #tempBuIds select @oldId
	insert into #tempBuIds select @newId

	-- get parents one level up and stop on the root (ParentBusinessUnitId is null)
	select @oldId = ParentBusinessUnitId from BusinessUnitBase 
		where BusinessUnitId = @oldId and ParentBusinessUnitId is not null
	select @newId = ParentBusinessUnitId from BusinessUnitBase 
		where BusinessUnitId = @newId and ParentBusinessUnitId is not null
end

-- Remove root if it was added as join parent node
delete #tempBuIds where BusinessUnitId in 
	(select BusinessUnitId from BusinessUnitBase  where ParentBusinessUnitId is null)

-- debug select
--select distinct #tempBuIds.BusinessUnitId, bu.Name from #tempBuIds 
--  join BusinessUnitBase as bu on (bu.BusinessUnitId = #tempBuIds.BusinessUnitId)

update Subscription Set ReInitialize = 1 
where SystemUserId in 
	(select SystemUserId from SystemUserBase 
		where BusinessUnitId in (select distinct BusinessUnitId from #tempBuIds)
	)

drop table #tempBuIds

end -- p_ReinitializeUsersSubscriptionsForBusinessUnitMove

/****** Object:  UserDefinedFunction [dbo].[GetSubsidiaryBusinesses]    Script Date: 04/11/2008 06:57:34 ******/




create function [dbo].[GetSubsidiaryBusinesses](@rootId uniqueidentifier) returns @SubsidiaryBusinesses table 
            (businessunitid uniqueidentifier primary key, depth int)
as
begin
            declare @depth int
            select @depth = 0
            insert @SubsidiaryBusinesses 
                        select @rootId, @depth from BusinessUnitBase where BusinessUnitId = @rootId
            while (@@rowcount > 0)
            begin
                        select @depth = @depth +1
                        insert @SubsidiaryBusinesses
                                    select t.BusinessUnitId, @depth
                                    from BusinessUnitBase t
                                    where exists(
                                                select * from @SubsidiaryBusinesses s
                                                where s.depth = (@depth - 1) and s.businessunitid = t.ParentBusinessUnitId)
            end
            return
end

/****** Object:  View [dbo].[ImportMap]    Script Date: 04/11/2008 06:58:17 ******/




--
-- base view for ImportMap
--
create view [dbo].[ImportMap] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    StatusCode,
    ModifiedBy,
    ModifiedOn,
    TargetEntity,
    ImportMapType,
    DeletionStateCode,
    TargetUserIdentifierForSourceCRMUserLink,
    IsWizardCreated,
    CreatedOn,
    CreatedBy,
    ImportMapId,
    Description,
    Name,
    SourceUserIdentifierForSourceDataSourceUserLink,
    SourceUserIdentifierForSourceCRMUserLink,
    StateCode,
    OwningBusinessUnit,
    Source,
    IsValidForImport,
    OwningUser
) with view_metadata as 
select 
    -- logical attributes
    lk_importmapbase_createdby.DeletionStateCode, 
    lk_importmapbase_createdby.FullName, 
    lk_importmapbase_createdby.YomiFullName, 
    lk_importmapbase_modifiedby.DeletionStateCode, 
    lk_importmapbase_modifiedby.FullName, 
    lk_importmapbase_modifiedby.YomiFullName, 

    -- ownership entries
    OwnerId   = ImportMapBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when ImportMapBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    ImportMapBase.StatusCode,
    ImportMapBase.ModifiedBy,
    ImportMapBase.ModifiedOn,
    ImportMapBase.TargetEntity,
    ImportMapBase.ImportMapType,
    ImportMapBase.DeletionStateCode,
    ImportMapBase.TargetUserIdentifierForSourceCRMUserLink,
    ImportMapBase.IsWizardCreated,
    ImportMapBase.CreatedOn,
    ImportMapBase.CreatedBy,
    ImportMapBase.ImportMapId,
    ImportMapBase.Description,
    ImportMapBase.Name,
    ImportMapBase.SourceUserIdentifierForSourceDataSourceUserLink,
    ImportMapBase.SourceUserIdentifierForSourceCRMUserLink,
    ImportMapBase.StateCode,
    ImportMapBase.OwningBusinessUnit,
    ImportMapBase.Source,
    ImportMapBase.IsValidForImport,
    ImportMapBase.OwningUser
from ImportMapBase
    left join SystemUserBase lk_importmapbase_createdby with(nolock) on (ImportMapBase.CreatedBy = lk_importmapbase_createdby.SystemUserId)
    left join SystemUserBase lk_importmapbase_modifiedby with(nolock) on (ImportMapBase.ModifiedBy = lk_importmapbase_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (ImportMapBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[TransformationMapping]    Script Date: 04/11/2008 06:58:34 ******/




--
-- base view for TransformationMapping
--
create view [dbo].[TransformationMapping] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ImportMapIdDsc, 
    ImportMapIdName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- physical attributes
    ImportMapId,
    TransformationTypeName,
    ProcessCode,
    SourceEntityName,
    StatusCode,
    ModifiedOn,
    CreatedBy,
    DeletionStateCode,
    TransformationMappingId,
    ModifiedBy,
    CreatedOn,
    StateCode,
    TargetEntityName
) with view_metadata as 
select 
    -- logical attributes
    lk_transformationmapping_createdby.DeletionStateCode, 
    lk_transformationmapping_createdby.FullName, 
    lk_transformationmapping_createdby.YomiFullName, 
    TransformationMapping_ImportMap.DeletionStateCode, 
    TransformationMapping_ImportMap.Name, 
    lk_transformationmapping_modifiedby.DeletionStateCode, 
    lk_transformationmapping_modifiedby.FullName, 
    lk_transformationmapping_modifiedby.YomiFullName, 

    -- physical attributes
    TransformationMappingBase.ImportMapId,
    TransformationMappingBase.TransformationTypeName,
    TransformationMappingBase.ProcessCode,
    TransformationMappingBase.SourceEntityName,
    TransformationMappingBase.StatusCode,
    TransformationMappingBase.ModifiedOn,
    TransformationMappingBase.CreatedBy,
    TransformationMappingBase.DeletionStateCode,
    TransformationMappingBase.TransformationMappingId,
    TransformationMappingBase.ModifiedBy,
    TransformationMappingBase.CreatedOn,
    TransformationMappingBase.StateCode,
    TransformationMappingBase.TargetEntityName
from TransformationMappingBase
    left join SystemUserBase lk_transformationmapping_createdby with(nolock) on (TransformationMappingBase.CreatedBy = lk_transformationmapping_createdby.SystemUserId)
    left join SystemUserBase lk_transformationmapping_modifiedby with(nolock) on (TransformationMappingBase.ModifiedBy = lk_transformationmapping_modifiedby.SystemUserId)
    left join ImportMapBase TransformationMapping_ImportMap on (TransformationMappingBase.ImportMapId = TransformationMapping_ImportMap.ImportMapId)

/****** Object:  View [dbo].[OwnerMapping]    Script Date: 04/11/2008 06:58:22 ******/




--
-- base view for OwnerMapping
--
create view [dbo].[OwnerMapping] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ImportMapIdDsc, 
    ImportMapIdName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- physical attributes
    CreatedOn,
    TargetUserValueForSourceCRMUserLink,
    StatusCode,
    ImportMapId,
    ModifiedBy,
    OwnerMappingId,
    CreatedBy,
    ProcessCode,
    SourceSystemUserName,
    TargetSystemUserId,
    StateCode,
    SourceUserValueForSourceCRMUserLink,
    TargetSystemUserDomainName,
    ModifiedOn,
    DeletionStateCode
) with view_metadata as 
select 
    -- logical attributes
    lk_ownermapping_createdby.DeletionStateCode, 
    lk_ownermapping_createdby.FullName, 
    lk_ownermapping_createdby.YomiFullName, 
    OwnerMapping_ImportMap.DeletionStateCode, 
    OwnerMapping_ImportMap.Name, 
    lk_ownermapping_modifiedby.DeletionStateCode, 
    lk_ownermapping_modifiedby.FullName, 
    lk_ownermapping_modifiedby.YomiFullName, 

    -- physical attributes
    OwnerMappingBase.CreatedOn,
    OwnerMappingBase.TargetUserValueForSourceCRMUserLink,
    OwnerMappingBase.StatusCode,
    OwnerMappingBase.ImportMapId,
    OwnerMappingBase.ModifiedBy,
    OwnerMappingBase.OwnerMappingId,
    OwnerMappingBase.CreatedBy,
    OwnerMappingBase.ProcessCode,
    OwnerMappingBase.SourceSystemUserName,
    OwnerMappingBase.TargetSystemUserId,
    OwnerMappingBase.StateCode,
    OwnerMappingBase.SourceUserValueForSourceCRMUserLink,
    OwnerMappingBase.TargetSystemUserDomainName,
    OwnerMappingBase.ModifiedOn,
    OwnerMappingBase.DeletionStateCode
from OwnerMappingBase
    left join SystemUserBase lk_ownermapping_createdby with(nolock) on (OwnerMappingBase.CreatedBy = lk_ownermapping_createdby.SystemUserId)
    left join SystemUserBase lk_ownermapping_modifiedby with(nolock) on (OwnerMappingBase.ModifiedBy = lk_ownermapping_modifiedby.SystemUserId)
    left join ImportMapBase OwnerMapping_ImportMap on (OwnerMappingBase.ImportMapId = OwnerMapping_ImportMap.ImportMapId)

/****** Object:  View [dbo].[ColumnMapping]    Script Date: 04/11/2008 06:57:40 ******/




--
-- base view for ColumnMapping
--
create view [dbo].[ColumnMapping] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ImportMapIdDsc, 
    ImportMapIdName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- physical attributes
    ColumnMappingId,
    CreatedBy,
    TargetEntityName,
    StatusCode,
    ProcessCode,
    ModifiedOn,
    TargetAttributeName,
    CreatedOn,
    ImportMapId,
    SourceAttributeName,
    SourceEntityName,
    ModifiedBy,
    DeletionStateCode,
    StateCode
) with view_metadata as 
select 
    -- logical attributes
    lk_columnmapping_createdby.DeletionStateCode, 
    lk_columnmapping_createdby.FullName, 
    lk_columnmapping_createdby.YomiFullName, 
    ColumnMapping_ImportMap.DeletionStateCode, 
    ColumnMapping_ImportMap.Name, 
    lk_columnmapping_modifiedby.DeletionStateCode, 
    lk_columnmapping_modifiedby.FullName, 
    lk_columnmapping_modifiedby.YomiFullName, 

    -- physical attributes
    ColumnMappingBase.ColumnMappingId,
    ColumnMappingBase.CreatedBy,
    ColumnMappingBase.TargetEntityName,
    ColumnMappingBase.StatusCode,
    ColumnMappingBase.ProcessCode,
    ColumnMappingBase.ModifiedOn,
    ColumnMappingBase.TargetAttributeName,
    ColumnMappingBase.CreatedOn,
    ColumnMappingBase.ImportMapId,
    ColumnMappingBase.SourceAttributeName,
    ColumnMappingBase.SourceEntityName,
    ColumnMappingBase.ModifiedBy,
    ColumnMappingBase.DeletionStateCode,
    ColumnMappingBase.StateCode
from ColumnMappingBase
    left join ImportMapBase ColumnMapping_ImportMap on (ColumnMappingBase.ImportMapId = ColumnMapping_ImportMap.ImportMapId)
    left join SystemUserBase lk_columnmapping_createdby with(nolock) on (ColumnMappingBase.CreatedBy = lk_columnmapping_createdby.SystemUserId)
    left join SystemUserBase lk_columnmapping_modifiedby with(nolock) on (ColumnMappingBase.ModifiedBy = lk_columnmapping_modifiedby.SystemUserId)

/****** Object:  View [dbo].[DuplicateRuleCondition]    Script Date: 04/11/2008 06:57:44 ******/




--
-- base view for DuplicateRuleCondition
--
create view [dbo].[DuplicateRuleCondition] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    DeletionStateCode,
    CreatedBy,
    OperatorParam,
    OperatorCode,
    ModifiedOn,
    BaseAttributeName,
    RegardingObjectId,
    DuplicateRuleConditionId,
    MatchingAttributeName,
    CreatedOn,
    ModifiedBy
) with view_metadata as 
select 
    -- logical attributes
    lk_duplicateruleconditionbase_createdby.DeletionStateCode, 
    lk_duplicateruleconditionbase_createdby.FullName, 
    lk_duplicateruleconditionbase_createdby.YomiFullName, 
    lk_duplicateruleconditionbase_modifiedby.DeletionStateCode, 
    lk_duplicateruleconditionbase_modifiedby.FullName, 
    lk_duplicateruleconditionbase_modifiedby.YomiFullName, 
    DuplicateRule_DuplicateRuleConditions.OwningBusinessUnit, 
    DuplicateRule_DuplicateRuleConditions.OwningUser, 

    -- physical attributes
    DuplicateRuleConditionBase.DeletionStateCode,
    DuplicateRuleConditionBase.CreatedBy,
    DuplicateRuleConditionBase.OperatorParam,
    DuplicateRuleConditionBase.OperatorCode,
    DuplicateRuleConditionBase.ModifiedOn,
    DuplicateRuleConditionBase.BaseAttributeName,
    DuplicateRuleConditionBase.RegardingObjectId,
    DuplicateRuleConditionBase.DuplicateRuleConditionId,
    DuplicateRuleConditionBase.MatchingAttributeName,
    DuplicateRuleConditionBase.CreatedOn,
    DuplicateRuleConditionBase.ModifiedBy
from DuplicateRuleConditionBase
    left join DuplicateRuleBase DuplicateRule_DuplicateRuleConditions on (DuplicateRuleConditionBase.RegardingObjectId = DuplicateRule_DuplicateRuleConditions.DuplicateRuleId)
    left join SystemUserBase lk_duplicateruleconditionbase_createdby with(nolock) on (DuplicateRuleConditionBase.CreatedBy = lk_duplicateruleconditionbase_createdby.SystemUserId)
    left join SystemUserBase lk_duplicateruleconditionbase_modifiedby with(nolock) on (DuplicateRuleConditionBase.ModifiedBy = lk_duplicateruleconditionbase_modifiedby.SystemUserId)

/****** Object:  StoredProcedure [dbo].[p_PopulateDefaultFilters]    Script Date: 04/11/2008 06:35:25 ******/




-- create the stored procedure
create procedure [dbo].[p_PopulateDefaultFilters](@userid uniqueidentifier, @bizid uniqueidentifier) as
begin
set nocount on

declare @name nvarchar(200)
declare @description nvarchar(max)
declare @fetchxml nvarchar(max)
declare @rtc int
declare @qt int

declare c cursor FORWARD_ONLY READ_ONLY for
	select Name, Description, FetchXml, ReturnedTypeCode, QueryType from FilterTemplate

open c
fetch next from c into @name, @description, @fetchxml, @rtc, @qt

while (@@fetch_status = 0)
begin

	insert into UserQueryBase (UserQueryId, Name, Description, OwningUser, OwningBusinessUnit, FetchXml, CreatedBy, CreatedOn, ModifiedBy, ModifiedOn, ReturnedTypeCode, QueryType)
	values(newid(), @name, @description, @userid, @bizid, @fetchxml, @userid, getutcdate(), @userid, getutcdate(), @rtc, @qt)
	
	fetch next from c into @name, @description, @fetchxml, @rtc, @qt

end

close c
deallocate c

end

/****** Object:  View [dbo].[SdkMessageRequestField]    Script Date: 04/11/2008 06:58:31 ******/




--
-- base view for SdkMessageRequestField
--
create view [dbo].[SdkMessageRequestField] (
    -- physical attributes
    CreatedOn,
    SdkMessageRequestFieldIdUnique,
    Optional,
    CreatedBy,
    Position,
    ClrParser,
    PublicName,
    SdkMessageRequestId,
    DeletionStateCode,
    ModifiedOn,
    Parser,
    CustomizationLevel,
    OrganizationId,
    SdkMessageRequestFieldId,
    ModifiedBy,
    Name,
    VersionNumber
) with view_metadata as 
select 
    -- physical attributes
     T1.CreatedOn,
     T1.SdkMessageRequestFieldIdUnique,
     T1.Optional,
     T1.CreatedBy,
     T1.Position,
     T1.ClrParser,
     T1.PublicName,
     T1.SdkMessageRequestId,
     T1.DeletionStateCode,
     T1.ModifiedOn,
     T1.Parser,
     T1.CustomizationLevel,
     T1.OrganizationId,
     T1.SdkMessageRequestFieldId,
     T1.ModifiedBy,
     T1.Name,
     T1.VersionNumber
from SdkMessageRequestFieldBase T1
         left outer join SdkMessageRequestFieldBase T2 on (T1.SdkMessageRequestFieldId=T2.SdkMessageRequestFieldId
              AND T1.SdkMessageRequestFieldIdUnique<>T2.SdkMessageRequestFieldIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  View [dbo].[PluginType]    Script Date: 04/11/2008 06:58:23 ******/




--
-- base view for PluginType
--
create view [dbo].[PluginType] (
    -- logical attributes
    AssemblyName, 
    Culture, 
    PublicKeyToken, 
    Version, 

    -- physical attributes
    FriendlyName,
    PluginTypeId,
    ModifiedBy,
    CreatedOn,
    CreatedBy,
    OrganizationId,
    TypeName,
    DeletionStateCode,
    ModifiedOn,
    VersionNumber,
    IsWorkflowActivity,
    PluginTypeIdUnique,
    PluginAssemblyId,
    CustomizationLevel
) with view_metadata as 
select 
    -- logical attributes
    pluginassembly_plugintype.Name, 
    pluginassembly_plugintype.Culture, 
    pluginassembly_plugintype.PublicKeyToken, 
    pluginassembly_plugintype.Version, 

    -- physical attributes
     T1.FriendlyName,
     T1.PluginTypeId,
     T1.ModifiedBy,
     T1.CreatedOn,
     T1.CreatedBy,
     T1.OrganizationId,
     T1.TypeName,
     T1.DeletionStateCode,
     T1.ModifiedOn,
     T1.VersionNumber,
     T1.IsWorkflowActivity,
     T1.PluginTypeIdUnique,
     T1.PluginAssemblyId,
     T1.CustomizationLevel
from PluginTypeBase T1
    left join PluginAssemblyBase pluginassembly_plugintype on (T1.PluginAssemblyId = pluginassembly_plugintype.PluginAssemblyId)
         left outer join PluginTypeBase T2 on (T1.PluginTypeId=T2.PluginTypeId
              AND T1.PluginTypeIdUnique<>T2.PluginTypeIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  View [dbo].[CompetitorAddress]    Script Date: 04/11/2008 06:57:41 ******/




--
-- base view for CompetitorAddress
--
create view [dbo].[CompetitorAddress] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ParentIdDsc, 
    ParentIdName, 
    ParentIdYomiName, 

    -- physical attributes
    ParentId,
    CompetitorAddressId,
    AddressNumber,
    AddressTypeCode,
    Name,
    Line1,
    Line2,
    Line3,
    City,
    StateOrProvince,
    County,
    Country,
    PostOfficeBox,
    PostalCode,
    UTCOffset,
    UPSZone,
    Latitude,
    Telephone1,
    Longitude,
    ShippingMethodCode,
    Telephone2,
    Telephone3,
    Fax,
    VersionNumber,
    CreatedBy,
    CreatedOn,
    ModifiedBy,
    ModifiedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_competitoraddressbase_createdby.DeletionStateCode, 
    lk_competitoraddressbase_createdby.FullName, 
    lk_competitoraddressbase_createdby.YomiFullName, 
    lk_competitoraddressbase_modifiedby.DeletionStateCode, 
    lk_competitoraddressbase_modifiedby.FullName, 
    lk_competitoraddressbase_modifiedby.YomiFullName, 
    competitor_addresses.DeletionStateCode, 
    competitor_addresses.Name, 
    competitor_addresses.YomiName, 

    -- physical attributes
    CompetitorAddressBase.ParentId,
    CompetitorAddressBase.CompetitorAddressId,
    CompetitorAddressBase.AddressNumber,
    CompetitorAddressBase.AddressTypeCode,
    CompetitorAddressBase.Name,
    CompetitorAddressBase.Line1,
    CompetitorAddressBase.Line2,
    CompetitorAddressBase.Line3,
    CompetitorAddressBase.City,
    CompetitorAddressBase.StateOrProvince,
    CompetitorAddressBase.County,
    CompetitorAddressBase.Country,
    CompetitorAddressBase.PostOfficeBox,
    CompetitorAddressBase.PostalCode,
    CompetitorAddressBase.UTCOffset,
    CompetitorAddressBase.UPSZone,
    CompetitorAddressBase.Latitude,
    CompetitorAddressBase.Telephone1,
    CompetitorAddressBase.Longitude,
    CompetitorAddressBase.ShippingMethodCode,
    CompetitorAddressBase.Telephone2,
    CompetitorAddressBase.Telephone3,
    CompetitorAddressBase.Fax,
    CompetitorAddressBase.VersionNumber,
    CompetitorAddressBase.CreatedBy,
    CompetitorAddressBase.CreatedOn,
    CompetitorAddressBase.ModifiedBy,
    CompetitorAddressBase.ModifiedOn
from CompetitorAddressBase
    left join CompetitorBase competitor_addresses on (CompetitorAddressBase.ParentId = competitor_addresses.CompetitorId)
    left join SystemUserBase lk_competitoraddressbase_createdby with(nolock) on (CompetitorAddressBase.CreatedBy = lk_competitoraddressbase_createdby.SystemUserId)
    left join SystemUserBase lk_competitoraddressbase_modifiedby with(nolock) on (CompetitorAddressBase.ModifiedBy = lk_competitoraddressbase_modifiedby.SystemUserId)

/****** Object:  StoredProcedure [dbo].[p_FixUsersForBusinessMove]    Script Date: 04/11/2008 06:35:08 ******/




--
-- this stored procedure will update the manager of each user to NULL if the manager
-- is no longer in the business hierarchy.
-- NOTE: this sproc assumes the parent business id for BizId has already been
-- changed (in the transaction).
--
create procedure [dbo].[p_FixUsersForBusinessMove](@bizId uniqueidentifier, @userid uniqueidentifier) as
begin

update sub
set sub.ParentSystemUserId = null, sub.ModifiedBy = @userid, sub.ModifiedOn = getutcdate()
from SystemUserBase as sub
join SystemUserBase as subParent on ( 
	sub.BusinessUnitId = @bizId and 
	sub.ParentSystemUserId is not null and 
	subParent.SystemUserId = sub.ParentSystemUserId
	)
where
not exists (
	select SubBusinessId 
	from BusinessUnitMap 
	where BusinessId = subParent.BusinessUnitId and SubBusinessId = @bizId
)

end -- p_FixUsersForBusinessMove

/****** Object:  StoredProcedure [dbo].[p_GenCascadeSecurityCollect]    Script Date: 04/11/2008 06:35:08 ******/




create proc [dbo].[p_GenCascadeSecurityCollect](@cascade_type varchar(40), @alter int = 0)
as
begin
    set nocount on
    
    declare @count int

    -- temp table to hold the generated stored proc
    create table #txttbl (id int identity, line varchar(4000), layer int, objecttypecode int)

    declare @fn_name as varchar(255)
    set @fn_name = 'fn_CollectFor'+@cascade_type

    -- head of the function
    -- comments
    insert into #txttbl (line) values ('--------------------------------------------------------------')
    insert into #txttbl (line) values ('--                    *** DO NOT CHANGE! ***                --')
    insert into #txttbl (line) values ('-- THIS FUNCTION IS GENERATED AUTOMATICALLY BY MSCRM SYSTEM --')
    insert into #txttbl (line) values ('-- at '      +     cast(getdate() as char(54))     +       '--')  
    insert into #txttbl (line) values ('--------------------------------------------------------------')
    -- if this is at the setup/upgrade phase, then drop and create the function
    if (@alter = 0) 
    begin
        insert into #txttbl (line) values ('if object_id(''' + @fn_name + ''') is not null')
        insert into #txttbl (line) values ('drop function ' + @fn_name)
        insert into #txttbl (line) values ('go')
        insert into #txttbl (line) values ('create function ' + @fn_name)
    end
    else
    -- if this is at the meta-data change phase, then alter the function
        insert into #txttbl (line) values ('alter function ' + @fn_name)

    insert into #txttbl (line) values ('(')
    insert into #txttbl (line) values ('    @root_id uniqueidentifier, ')
    insert into #txttbl (line) values ('    @root_otc int,')
    insert into #txttbl (line) values ('    @isoffline int,')
    insert into #txttbl (line) values ('    @old_owner uniqueidentifier ')
    insert into #txttbl (line) values (')')
    insert into #txttbl (line) values ('returns @tbl table
( 	
     objectid uniqueidentifier primary key clustered,
     objecttype int,
     tablename nvarchar(255),
     relationshipname nvarchar(255),
     processed int default 0
) ')
    insert into #txttbl (line) values ('as')
    insert into #txttbl (line) values ('begin')

    create table #entitylayer(objecttypecode int , layer int, constraint _idx_entitylayer_ primary key clustered (objecttypecode, layer))
    -- cascade related stuff
    exec p_TopoSortEntityRelationshipAll @cascade_type, N'not in (0, 2)'
        
    insert into #txttbl (line) values (char(9)+' insert into @tbl values(@root_id, @root_otc, null, null, 0)')
    
    declare @sql nvarchar(4000)
    
    set @sql = 
        N'insert into #txttbl (line, layer, objecttypecode)
          select distinct nchar(9)
        + N'' if (exists (select top 1 objecttype from @tbl''
        + N'' where objecttype = ''+cast(e.ObjectTypeCode as nvarchar(40))+N''))''
	+ N'' begin ''
        + N'' insert into @tbl (objectid, objecttype, tablename, relationshipname, processed)''
        + N'' select o.''+pk.PhysicalName+N'', ''+cast(re.ObjectTypeCode as nvarchar(40))
        + N'', N''''''+re.PhysicalName+N'''''', N''''''+r.Name+N'''''', 0''
        + N'' from ''+re.PhysicalName+N'' o, @tbl c ''
        + case r.'+@cascade_type+N' 
          when 5 then
          N'' , ''+e.PhysicalName+N'' p ''
          else ''''
          end
        + N'' where o.''+ra.PhysicalName+'' = c.objectid''
        + N'' and c.objecttype = ''+cast(pl.objecttypecode as nvarchar(40))
        + case r.'+@cascade_type+N' 
          when 5 then
          N'' and  p.''+ppk.PhysicalName+N''=c.objectid and p.OwningUser = o.OwningUser ''
          when 4 then
              case dbo.fn_GetEntityActiveStateCode(re.ObjectTypeCode)
              when -1 then 
                  N'''' 
              else
                  N'' and o.StateCode = ''+cast(dbo.fn_GetEntityActiveStateCode(re.ObjectTypeCode) as nvarchar(40))
              end
          else ''''
          end
        + N'' and c.processed = 0''
        + case re.HasDeletionStateCode 
          when 0 then N''''
          else N'' and o.DeletionStateCode = 0 ''
          end
        + N'' and o.''+pk.PhysicalName+N'' not in (select objectid from @tbl where objecttype = ''
        + cast(re.ObjectTypeCode as nvarchar(40)) + N'')''
	+ case r.ReferencingEntityId
	     when r.ReferencedEntityId then 
		nchar(10)+nchar(9)+nchar(9)+ N'' while (@@rowcount <> 0)''
		+ N'' insert into @tbl (objectid, objecttype, tablename, relationshipname, processed)''
	        + N'' select o.''+pk.PhysicalName+N'', ''+cast(re.ObjectTypeCode as nvarchar(40))
	        + N'', N''''''+re.PhysicalName+N'''''', N''''''+r.Name+N'''''', 0''
	        + N'' from ''+re.PhysicalName+N'' o, @tbl c ''
	        + case r.'+@cascade_type+N' 
	          when 5 then
	          N'' , ''+e.PhysicalName+N'' p ''
	          else ''''
	          end
	        + N'' where o.''+ra.PhysicalName+'' = c.objectid''
	        + N'' and c.objecttype = ''+cast(pl.objecttypecode as nvarchar(40))
	        + case r.'+@cascade_type+N' 
	          when 5 then
	          N'' and  p.''+ppk.PhysicalName+N''=c.objectid and p.OwningUser = o.OwningUser ''
	          when 4 then
	              case dbo.fn_GetEntityActiveStateCode(re.ObjectTypeCode)
	              when -1 then 
	                  N'''' 
	              else
	                  N'' and o.StateCode = ''+cast(dbo.fn_GetEntityActiveStateCode(re.ObjectTypeCode) as nvarchar(40))
	              end
	          else ''''
	          end
	        + N'' and c.processed = 0''
	        + case re.HasDeletionStateCode 
	          when 0 then N''''
	          else N'' and o.DeletionStateCode = 0 ''
	          end
	        + N'' and o.''+pk.PhysicalName+N'' not in (select objectid from @tbl where objecttype = ''
	        + cast(re.ObjectTypeCode as nvarchar(40)) + N'')''
	     else N''''
		end
	+ N''end''
        , l.layer, l.objecttypecode
    from EntityView e, EntityView re, RelationshipView r, 
         #entitylayer l, #entitylayer pl,
         AttributeView pk, AttributeView ra, AttributeView ppk
    where r.ReferencedEntityId = e.EntityId
    and   r.ReferencingEntityId = re.EntityId
    and   e.ObjectTypeCode = pl.objecttypecode
    and   re.ObjectTypeCode = l.objecttypecode
    and   pk.EntityId = re.EntityId and  pk.IsPKAttribute = 1
    and  ppk.EntityId =  e.EntityId and ppk.IsPKAttribute = 1
    and   ra.AttributeId = r.ReferencingAttributeId
    and   pl.layer <= l.layer
    and   r.'+@cascade_type+N'<>0 
    order by l.layer asc, l.objecttypecode asc'

    exec sp_executesql @sql

    -- tail of the stored proc
    insert into #txttbl (line) values ('    return')
    insert into #txttbl (line) values ('end')

    select line from #txttbl where line is not null order by id, objecttypecode
  
    -- drop the temp table
    drop table #entitylayer
    drop table #txttbl 
end

/****** Object:  View [dbo].[WorkflowLog]    Script Date: 04/11/2008 06:58:38 ******/




--
-- base view for WorkflowLog
--
create view [dbo].[WorkflowLog] (
    -- logical attributes
    AsyncOperationIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    AsyncOperationId,
    ModifiedBy,
    CompletedOn,
    WorkflowLogId,
    Description,
    Message,
    CreatedBy,
    StageName,
    CreatedOn,
    StepName,
    ModifiedOn,
    RegardingObjectId,
    Status,
    ErrorCode,
    ActivityName,
    RegardingObjectIdName,
    RegardingObjectTypeCode,
    RegardingObjectIdYomiName,
    RegardingObjectIdDsc
) with view_metadata as 
select 
    -- logical attributes
    lk_workflowlog_asyncoperation.Name, 
    lk_workflowlog_createdby.DeletionStateCode, 
    lk_workflowlog_createdby.FullName, 
    lk_workflowlog_createdby.YomiFullName, 
    lk_workflowlog_modifiedby.DeletionStateCode, 
    lk_workflowlog_modifiedby.FullName, 
    lk_workflowlog_modifiedby.YomiFullName, 
    lk_workflowlog_asyncoperation.OwningBusinessUnit, 
    lk_workflowlog_asyncoperation.OwningUser, 

    -- physical attributes
    WorkflowLogBase.AsyncOperationId,
    WorkflowLogBase.ModifiedBy,
    WorkflowLogBase.CompletedOn,
    WorkflowLogBase.WorkflowLogId,
    WorkflowLogBase.Description,
    WorkflowLogBase.Message,
    WorkflowLogBase.CreatedBy,
    WorkflowLogBase.StageName,
    WorkflowLogBase.CreatedOn,
    WorkflowLogBase.StepName,
    WorkflowLogBase.ModifiedOn,
    WorkflowLogBase.RegardingObjectId,
    WorkflowLogBase.Status,
    WorkflowLogBase.ErrorCode,
    WorkflowLogBase.ActivityName,
    WorkflowLogBase.RegardingObjectIdName,
    WorkflowLogBase.RegardingObjectTypeCode,
    WorkflowLogBase.RegardingObjectIdYomiName,
    WorkflowLogBase.RegardingObjectIdDsc
from WorkflowLogBase
    left join AsyncOperationBase lk_workflowlog_asyncoperation on (WorkflowLogBase.AsyncOperationId = lk_workflowlog_asyncoperation.AsyncOperationId)
    left join SystemUserBase lk_workflowlog_createdby with(nolock) on (WorkflowLogBase.CreatedBy = lk_workflowlog_createdby.SystemUserId)
    left join SystemUserBase lk_workflowlog_modifiedby with(nolock) on (WorkflowLogBase.ModifiedBy = lk_workflowlog_modifiedby.SystemUserId)

/****** Object:  View [dbo].[CustomerRelationship]    Script Date: 04/11/2008 06:57:42 ******/




--
-- base view for CustomerRelationship
--
create view [dbo].[CustomerRelationship] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    CustomerRoleIdDsc, 
    CustomerRoleIdName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    PartnerRoleIdDsc, 
    PartnerRoleIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,


    CustomerIdName,
    CustomerIdYomiName,
    CustomerIdDsc,
    PartnerIdName,
    PartnerIdYomiName,
    PartnerIdDsc,

    -- physical attributes
    VersionNumber,
    CreatedOn,
    ModifiedOn,
    CustomerRoleId,
    CustomerRelationshipId,
    DeletionStateCode,
    CreatedBy,
    PartnerId,
    OwningBusinessUnit,
    ConverseRelationshipId,
    PartnerRoleId,
    CustomerRoleDescription,
    CustomerId,
    ModifiedBy,
    PartnerRoleDescription,
    OwningUser,
    PartnerIdType,
    CustomerIdType,
    OverriddenCreatedOn,
    ImportSequenceNumber,
    UniqueDscId
) with view_metadata as 
select 
    -- logical attributes
    createdby_customer_relationship.DeletionStateCode, 
    createdby_customer_relationship.FullName, 
    createdby_customer_relationship.YomiFullName, 
    relationship_role_customer_role.DeletionStateCode, 
    relationship_role_customer_role.Name, 
    modifiedby_customer_relationship.DeletionStateCode, 
    modifiedby_customer_relationship.FullName, 
    modifiedby_customer_relationship.YomiFullName, 
    relationship_role_partner_role.DeletionStateCode, 
    relationship_role_partner_role.Name, 

    -- ownership entries
    OwnerId   = CustomerRelationshipBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when CustomerRelationshipBase.OwningUser IS NOT NULL then 8
              else NULL
              end,


    CustomerIdName = coalesce(XXaccount.Name, XXcontact.FullName), 
    CustomerIdYomiName = coalesce(XXaccount.YomiName, XXcontact.YomiFullName), 
    CustomerIdDsc  = coalesce(XXaccount.DeletionStateCode, XXcontact.DeletionStateCode), 
    PartnerIdName = coalesce(YYaccount.Name, YYcontact.FullName), 
    PartnerIdYomiName = coalesce(YYaccount.YomiName, YYcontact.YomiFullName), 
    PartnerIdDsc  = coalesce(YYaccount.DeletionStateCode, YYcontact.DeletionStateCode), 

    -- physical attributes
    CustomerRelationshipBase.VersionNumber,
    CustomerRelationshipBase.CreatedOn,
    CustomerRelationshipBase.ModifiedOn,
    CustomerRelationshipBase.CustomerRoleId,
    CustomerRelationshipBase.CustomerRelationshipId,
    CustomerRelationshipBase.DeletionStateCode,
    CustomerRelationshipBase.CreatedBy,
    CustomerRelationshipBase.PartnerId,
    CustomerRelationshipBase.OwningBusinessUnit,
    CustomerRelationshipBase.ConverseRelationshipId,
    CustomerRelationshipBase.PartnerRoleId,
    CustomerRelationshipBase.CustomerRoleDescription,
    CustomerRelationshipBase.CustomerId,
    CustomerRelationshipBase.ModifiedBy,
    CustomerRelationshipBase.PartnerRoleDescription,
    CustomerRelationshipBase.OwningUser,
    CustomerRelationshipBase.PartnerIdType,
    CustomerRelationshipBase.CustomerIdType,
    CustomerRelationshipBase.OverriddenCreatedOn,
    CustomerRelationshipBase.ImportSequenceNumber,
    CustomerRelationshipBase.UniqueDscId
from CustomerRelationshipBase
    left join AccountBase XXaccount on (CustomerRelationshipBase.CustomerId = XXaccount.AccountId and CustomerRelationshipBase.CustomerIdType = 1)
    left join ContactBase XXcontact on (CustomerRelationshipBase.CustomerId = XXcontact.ContactId and CustomerRelationshipBase.CustomerIdType = 2)
    left join AccountBase YYaccount on (CustomerRelationshipBase.PartnerId = YYaccount.AccountId and CustomerRelationshipBase.PartnerIdType = 1)
    left join ContactBase YYcontact on (CustomerRelationshipBase.PartnerId = YYcontact.ContactId and CustomerRelationshipBase.PartnerIdType = 2)

    left join SystemUserBase createdby_customer_relationship with(nolock) on (CustomerRelationshipBase.CreatedBy = createdby_customer_relationship.SystemUserId)
    left join SystemUserBase modifiedby_customer_relationship with(nolock) on (CustomerRelationshipBase.ModifiedBy = modifiedby_customer_relationship.SystemUserId)
    left join RelationshipRoleBase relationship_role_customer_role on (CustomerRelationshipBase.CustomerRoleId = relationship_role_customer_role.RelationshipRoleId)
    left join RelationshipRoleBase relationship_role_partner_role on (CustomerRelationshipBase.PartnerRoleId = relationship_role_partner_role.RelationshipRoleId)
    left join SystemUserBase XXowninguser with(nolock) on (CustomerRelationshipBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[ReportCategory]    Script Date: 04/11/2008 06:58:27 ******/




--
-- base view for ReportCategory
--
create view [dbo].[ReportCategory] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 
    ReportIdDsc, 
    ReportIdName, 

    -- physical attributes
    ModifiedBy,
    VersionNumber,
    ImportSequenceNumber,
    CategoryCode,
    UTCConversionTimeZoneCode,
    ReportCategoryId,
    CreatedBy,
    TimeZoneRuleVersionNumber,
    CreatedOn,
    ModifiedOn,
    ReportId
) with view_metadata as 
select 
    -- logical attributes
    lk_reportcategorybase_createdby.DeletionStateCode, 
    lk_reportcategorybase_createdby.FullName, 
    lk_reportcategorybase_createdby.YomiFullName, 
    lk_reportcategorybase_modifiedby.DeletionStateCode, 
    lk_reportcategorybase_modifiedby.FullName, 
    lk_reportcategorybase_modifiedby.YomiFullName, 
    report_reportcategories.OwningBusinessUnit, 
    report_reportcategories.OwningUser, 
    report_reportcategories.DeletionStateCode, 
    report_reportcategories.Name, 

    -- physical attributes
    ReportCategoryBase.ModifiedBy,
    ReportCategoryBase.VersionNumber,
    ReportCategoryBase.ImportSequenceNumber,
    ReportCategoryBase.CategoryCode,
    ReportCategoryBase.UTCConversionTimeZoneCode,
    ReportCategoryBase.ReportCategoryId,
    ReportCategoryBase.CreatedBy,
    ReportCategoryBase.TimeZoneRuleVersionNumber,
    ReportCategoryBase.CreatedOn,
    ReportCategoryBase.ModifiedOn,
    ReportCategoryBase.ReportId
from ReportCategoryBase
    left join SystemUserBase lk_reportcategorybase_createdby with(nolock) on (ReportCategoryBase.CreatedBy = lk_reportcategorybase_createdby.SystemUserId)
    left join SystemUserBase lk_reportcategorybase_modifiedby with(nolock) on (ReportCategoryBase.ModifiedBy = lk_reportcategorybase_modifiedby.SystemUserId)
    left join ReportBase report_reportcategories on (ReportCategoryBase.ReportId = report_reportcategories.ReportId)

/****** Object:  StoredProcedure [dbo].[p_CreateDefaultCalendar]    Script Date: 04/11/2008 06:35:00 ******/




CREATE PROCEDURE [dbo].[p_CreateDefaultCalendar](@timeZoneCode int, @userId uniqueidentifier, @businessUnitId uniqueidentifier, @organizationId uniqueidentifier, @primaryUserId uniqueidentifier) as
BEGIN

	set nocount on

	-- Creates sub calendar.
	declare @subCalendarId uniqueidentifier
	select @subCalendarId = NewId()
	
	INSERT INTO CalendarBase(CreatedBy, CreatedOn, ModifiedBy, ModifiedOn, BusinessUnitId, OrganizationId, DeletionStateCode, CalendarId, PrimaryUserId)
		Values(@userId, GETUTCDATE(), @userId, GETUTCDATE(), @businessUnitId, @organizationId, 0, @subCalendarId, @primaryUserId)

	-- Creates relative calendar rule.
	declare @relativeRuleId uniqueidentifier
	select @relativeRuleId = NewId()
	
	INSERT INTO CalendarRuleBase(CreatedBy, CreatedOn, ModifiedBy, ModifiedOn, DeletionStateCode, CalendarRuleId, CalendarId, IsSimple, Rank, Duration, Effort, TimeZoneCode, Offset, TimeCode, SubCode)
		VALUES(@userId, GETUTCDATE(), @userId, GETUTCDATE(), 0, @relativeRuleId, @subCalendarId, 1, 0, 1440, 1.0, -1, 0, 0, 1)

	-- Creates top level calendar.
	declare @topCalendarId uniqueidentifier
	select @topCalendarId = NewId()

	INSERT INTO CalendarBase(CreatedBy, CreatedOn, ModifiedBy, ModifiedOn, BusinessUnitId, OrganizationId, DeletionStateCode, CalendarId, PrimaryUserId)
		Values(@userId, GETUTCDATE(), @userId, GETUTCDATE(), @businessUnitId, @organizationId, 0, @topCalendarId, @primaryUserId)

	-- Creates nested calendar rule.
	declare @nestedRuleId uniqueidentifier
	select @nestedRuleId = NewId()
	
	-- Sets startTime, The old date of 1900 causes problem for Taiwanese Calendar users, bug# 29230
	declare @startTime datetime
	select @startTime = CONVERT(datetime, '20000101', 112)

	INSERT INTO CalendarRuleBase(CreatedBy, CreatedOn, ModifiedBy, ModifiedOn, DeletionStateCode, CalendarRuleId, CalendarId, InnerCalendarId, Rank, Duration, TimeZoneCode, Pattern, StartTime, GroupDesignator, IsVaried, IsSelected)
		VALUES(@userId, GETUTCDATE(), @userId, GETUTCDATE(), 0, @nestedRuleId, @topCalendarId, @subCalendarId, 2, 1440, @timeZoneCode, 'FREQ=WEEKLY;INTERVAL=1;BYDAY=SU,MO,TU,WE,TH,FR,SA', @startTime, 'FC5769FC-4DE9-445d-8F4E-6E9869E60857', 0, 1)

	select @topCalendarId as 'calendarid'
END

/****** Object:  StoredProcedure [dbo].[p_GetEntityPrivileges]    Script Date: 04/11/2008 06:35:12 ******/




create procedure [dbo].[p_GetEntityPrivileges] as
begin
set nocount on 


select 'PrivilegeId' = p.PrivilegeId, 
       'CanBeLocal' = p.CanBeLocal, 
       'CanBeDeep' = p.CanBeDeep, 
       'CanBeGlobal' = p.CanBeGlobal, 
       'CanBeBasic' = p.CanBeBasic, 
       'AccessRight' = p.AccessRight, 
       'ObjectTypeCode' = potc.ObjectTypeCode
from PrivilegeBase p 
join PrivilegeObjectTypeCodes potc on (p.PrivilegeId = potc.PrivilegeId and potc.ObjectTypeCode <> 0)
order by potc.ObjectTypeCode, p.AccessRight

end

/****** Object:  View [dbo].[SdkMessageProcessingStepSecureConfig]    Script Date: 04/11/2008 06:58:31 ******/




--
-- base view for SdkMessageProcessingStepSecureConfig
--
create view [dbo].[SdkMessageProcessingStepSecureConfig] (
    -- physical attributes
    CustomizationLevel,
    CreatedOn,
    SecureConfig,
    SdkMessageProcessingStepSecureConfigId,
    ModifiedBy,
    SdkMessageProcessingStepSecureConfigIdUnique,
    ModifiedOn,
    DeletionStateCode,
    OrganizationId,
    CreatedBy
) with view_metadata as 
select 
    -- physical attributes
     T1.CustomizationLevel,
     T1.CreatedOn,
     T1.SecureConfig,
     T1.SdkMessageProcessingStepSecureConfigId,
     T1.ModifiedBy,
     T1.SdkMessageProcessingStepSecureConfigIdUnique,
     T1.ModifiedOn,
     T1.DeletionStateCode,
     T1.OrganizationId,
     T1.CreatedBy
from SdkMessageProcessingStepSecureConfigBase T1
         left outer join SdkMessageProcessingStepSecureConfigBase T2 on (T1.SdkMessageProcessingStepSecureConfigId=T2.SdkMessageProcessingStepSecureConfigId
              AND T1.SdkMessageProcessingStepSecureConfigIdUnique<>T2.SdkMessageProcessingStepSecureConfigIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  View [dbo].[FilteredCompetitorProduct]    Script Date: 04/11/2008 06:57:51 ******/




--
-- report view for competitorproduct
--
create view [dbo].[FilteredCompetitorProduct] (
    competitorid,
    competitorproductid,
    productid
) with view_metadata as 
select 
    CompetitorProduct.CompetitorId,
    CompetitorProduct.CompetitorProductId,
    CompetitorProduct.ProductId
from CompetitorProduct

/****** Object:  StoredProcedure [dbo].[p_PublishLabelsByObjectId]    Script Date: 04/11/2008 06:35:26 ******/




create procedure [dbo].[p_PublishLabelsByObjectId]
as
begin
	-- Get the set of labels from the data that has been pre-populated in the temp table
	insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
		select l.LocalizedLabelId, 7, l.InProduction from LocalizedLabelLogicalView l
		left outer join LocalizedLabelLogicalView l2 on l.LocalizedLabelId = l2.LocalizedLabelId and l.LocalizedLabelRowId <> l2.LocalizedLabelRowId and l.InProduction = 1
		join #MetadataPublishCollect mpc on l.ObjectId = mpc.ObjectId
		where l2.InProduction is null
		
	-- Now delete from the temp table anything that is in production or has a metadata object type code of 0 (these are the seeded entries of objects
	-- that have labels but might not necessarily have a metadata object type code, such as form objects or saved queries).
	delete from #MetadataPublishCollect where InProduction = 1 or ObjectTypeCode = 0
	
	-- Now run the publish for the labels in the table
	exec p_PublishMetadataInTable 'LocalizedLabel', 'LocalizedLabelId', 7, null, null

end

/****** Object:  StoredProcedure [dbo].[p_PublishMetadata]    Script Date: 04/11/2008 06:35:26 ******/




create procedure [dbo].[p_PublishMetadata]
(
    @publishDeep bit
)
as
begin
	-- If publish deep is true then we need to do some additional collection steps
	set nocount on
	if(@publishDeep = 1)
	begin
		-- If there exist any entities in the table then collect all PARENT attributes and localized labels related to those entities
		if(exists(select top 1 ObjectTypeCode from #MetadataPublishCollect where ObjectTypeCode = 1))
		begin
			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select a.AttributeId, 2, a.InProduction from AttributeLogicalView a
				left outer join AttributeLogicalView a2 on a.AttributeId = a2.AttributeId and a.AttributeRowId <> a2.AttributeRowId and a.InProduction = 1
				join #MetadataPublishCollect mpc on a.EntityId = mpc.ObjectId
				where a2.InProduction is null and mpc.ObjectTypeCode = 1 and a.AttributeOf is null and a.AggregateOf is null and a.YomiOf is null

			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select l.LocalizedLabelId, 7, l.InProduction FROM LocalizedLabelLogicalView l
				left outer join LocalizedLabelLogicalView l2 on l.LocalizedLabelId = l2.LocalizedLabelId and l.LocalizedLabelRowId <> l2.LocalizedLabelRowId and l.InProduction = 1
				join #MetadataPublishCollect mpc on l.ObjectId = mpc.ObjectId
				where l2.InProduction is null and mpc.ObjectTypeCode = 1
		end
		
		-- If there exist any attributes in the table then collect related child attributes, localized labels, picklist values, and lookup values
		if(exists(select top 1 ObjectTypeCode from #MetadataPublishCollect where ObjectTypeCode = 2))
		begin
			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select a.AttributeId, 2, a.InProduction from AttributeLogicalView a
				left outer join AttributeLogicalView a2 on a.AttributeId = a2.AttributeId and a.AttributeRowId <> a2.AttributeRowId and a.InProduction = 1
				join #MetadataPublishCollect mpc on a.AttributeOf = mpc.ObjectId
				where a2.InProduction is null and mpc.ObjectTypeCode = 2

			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select a.AttributeId, 2, a.InProduction from AttributeLogicalView a
				left outer join AttributeLogicalView a2 on a.AttributeId = a2.AttributeId and a.AttributeRowId <> a2.AttributeRowId and a.InProduction = 1
				join #MetadataPublishCollect mpc on a.AggregateOf = mpc.ObjectId
				where a2.InProduction is null and mpc.ObjectTypeCode = 2

			-- We have an additional clause for YomiOf - most YomiOf attributes are also AttributeOfs which we've already added, but some are not
			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select a.AttributeId, 2, a.InProduction from AttributeLogicalView a
				left outer join AttributeLogicalView a2 on a.AttributeId = a2.AttributeId and a.AttributeRowId <> a2.AttributeRowId and a.InProduction = 1
				join #MetadataPublishCollect mpc on a.YomiOf = mpc.ObjectId
				where a2.InProduction is null and mpc.ObjectTypeCode = 2 and a.AttributeOf is null

			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select l.LocalizedLabelId, 7, l.InProduction from LocalizedLabelLogicalView l
				left outer join LocalizedLabelLogicalView l2 on l.LocalizedLabelId = l2.LocalizedLabelId and l.LocalizedLabelRowId <> l2.LocalizedLabelRowId and l.InProduction = 1
				join #MetadataPublishCollect mpc on l.ObjectId = mpc.ObjectId
				where l2.InProduction is null and mpc.ObjectTypeCode = 2

			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select a.AttributePicklistValueId, 4, a.InProduction from AttributePicklistValueLogicalView a
				left outer join AttributePicklistValueLogicalView a2 on a.AttributePicklistValueId = a2.AttributePicklistValueId and a.AttributePicklistValueRowId <> a2.AttributePicklistValueRowId and a.InProduction = 1
				join #MetadataPublishCollect mpc on a.AttributeId = mpc.ObjectId
				where a2.InProduction is null and mpc.ObjectTypeCode = 2

			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select a.AttributeLookupValueId, 5, a.InProduction from AttributeLookupValueLogicalView a
				left outer join AttributeLookupValueLogicalView a2 on a.AttributeLookupValueId = a2.AttributeLookupValueId and a.AttributeLookupValueRowId <> a2.AttributeLookupValueRowId and a.InProduction = 1
				join #MetadataPublishCollect mpc on a.AttributeId = mpc.ObjectId
				where a2.InProduction is null and mpc.ObjectTypeCode = 2
		end

		-- If there exist any attribute picklist values in the table then collect related localized labels
		if(exists(select top 1 ObjectTypeCode from #MetadataPublishCollect where ObjectTypeCode = 4))
		begin
			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select l.LocalizedLabelId, 7, l.InProduction from LocalizedLabelLogicalView l
				left outer join LocalizedLabelLogicalView l2 on l.LocalizedLabelId = l2.LocalizedLabelId and l.LocalizedLabelRowId <> l2.LocalizedLabelRowId and l.InProduction = 1
				join #MetadataPublishCollect mpc on l.ObjectId = mpc.ObjectId
				where l2.InProduction is null and mpc.ObjectTypeCode = 4
		end
		
		-- if there exist any entities in the table then find localized labels that are associated with entity relationship roles associated
		-- with the given entities.  We do this by finding the entity relationships associated with this entity, then find all of the
		-- entity relationship roles associated with the given entity relationships, then find all of the associated localized labels
		if(exists(select top 1 ObjectTypeCode from #MetadataPublishCollect where ObjectTypeCode = 1))
		begin
			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select distinct err.EntityRelationshipId, 12, 1 from EntityRelationshipRoleLogicalView err
				join #MetadataPublishCollect mpc on err.EntityId = mpc.ObjectId
				where mpc.ObjectTypeCode = 1
		end
		
		-- Find the entity relationship roles for the given entity relationships
		-- REVIEW:  Should we limit the number by only selecting roles that we know will have labels, e.g. association and referencing roles?
		if(exists(select top 1 ObjectTypeCode from #MetadataPublishCollect where ObjectTypeCode = 12))
		begin
			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select err.EntityRelationshipRoleId, 13, 1 from EntityRelationshipRoleLogicalView err
				join #MetadataPublishCollect mpc on err.EntityRelationshipId = mpc.ObjectId
				where mpc.ObjectTypeCode = 12
		end
		
		-- Finally look for labels associated with the given entity roles
		if(exists(select top 1 ObjectTypeCode from #MetadataPublishCollect where ObjectTypeCode = 4))
		begin
			insert into #MetadataPublishCollect(ObjectId, ObjectTypeCode, InProduction)
				select l.LocalizedLabelId, 7, l.InProduction from LocalizedLabelLogicalView l
				left outer join LocalizedLabelLogicalView l2 on l.LocalizedLabelId = l2.LocalizedLabelId and l.LocalizedLabelRowId <> l2.LocalizedLabelRowId and l.InProduction = 1
				join #MetadataPublishCollect mpc on l.ObjectId = mpc.ObjectId
				where l2.InProduction is null and mpc.ObjectTypeCode = 13
		end
	end

	-- Now delete from the temp table anything that is in production - we don't want those in this table anymore (we needed
	-- them for collection only but from here on we assume only non-published data exists in the temp table)
	delete from #MetadataPublishCollect where InProduction = 1

	-- Finally run publish on our four publishable metadata entity tables
	exec p_PublishMetadataInTable 'Attribute', 'AttributeId', 2, 'AttributeIds', 'AttributeId'
	exec p_PublishMetadataInTable 'AttributePicklistValue', 'AttributePicklistValueId', 4, null, null
	exec p_PublishMetadataInTable 'AttributeLookupValue', 'AttributeLookupValueId', 5, null, null
	exec p_PublishMetadataInTable 'LocalizedLabel', 'LocalizedLabelId', 7, null, null

end

/****** Object:  View [dbo].[Lead]    Script Date: 04/11/2008 06:58:19 ******/




--
-- base view for Lead
--
create view [dbo].[Lead] (
    -- logical attributes
    AccountIdDsc, 
    AccountIdName, 
    AccountIdYomiName, 
    CampaignIdDsc, 
    CampaignIdName, 
    ContactIdDsc, 
    ContactIdName, 
    ContactIdYomiName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    MasterLeadIdDsc, 
    MasterLeadIdName, 
    MasterLeadIdYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- linked address entities
    Address1_AddressId,
    Address1_AddressTypeCode,
    Address1_Name,
    Address1_Line1,
    Address1_Line2,
    Address1_Line3,
    Address1_City,
    Address1_StateOrProvince,
    Address1_County,
    Address1_Country,
    Address1_PostOfficeBox,
    Address1_PostalCode,
    Address1_UTCOffset,
    Address1_UPSZone,
    Address1_Latitude,
    Address1_Telephone1,
    Address1_Longitude,
    Address1_ShippingMethodCode,
    Address1_Telephone2,
    Address1_Telephone3,
    Address1_Fax,

    Address2_AddressId,
    Address2_AddressTypeCode,
    Address2_Name,
    Address2_Line1,
    Address2_Line2,
    Address2_Line3,
    Address2_City,
    Address2_StateOrProvince,
    Address2_County,
    Address2_Country,
    Address2_PostOfficeBox,
    Address2_PostalCode,
    Address2_UTCOffset,
    Address2_UPSZone,
    Address2_Latitude,
    Address2_Telephone1,
    Address2_Longitude,
    Address2_ShippingMethodCode,
    Address2_Telephone2,
    Address2_Telephone3,
    Address2_Fax,

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,


    CustomerId,
    CustomerIdName,
    CustomerIdYomiName,
    CustomerIdDsc,
    CustomerIdType,

    -- physical attributes
    LeadId,
    DeletionStateCode,
    ContactId,
    AccountId,
    LeadSourceCode,
    LeadQualityCode,
    PriorityCode,
    IndustryCode,
    PreferredContactMethodCode,
    SalesStageCode,
    OwningBusinessUnit,
    OwningTeam,
    Subject,
    ParticipatesInWorkflow,
    Description,
    EstimatedValue,
    EstimatedCloseDate,
    CompanyName,
    FirstName,
    MiddleName,
    LastName,
    Revenue,
    NumberOfEmployees,
    DoNotPhone,
    SIC,
    DoNotFax,
    EMailAddress1,
    JobTitle,
    Salutation,
    DoNotEMail,
    EMailAddress2,
    DoNotPostalMail,
    EMailAddress3,
    FullName,
    YomiFirstName,
    WebSiteUrl,
    Telephone1,
    Telephone2,
    Telephone3,
    CreatedOn,
    IsPrivate,
    Fax,
    YomiMiddleName,
    YomiLastName,
    CreatedBy,
    ModifiedOn,
    ModifiedBy,
    YomiFullName,
    OwningUser,
    MobilePhone,
    StateCode,
    Pager,
    StatusCode,
    VersionNumber,
    MasterId,
    CampaignId,
    DoNotSendMM,
    Merged,
    DoNotBulkEMail,
    LastUsedInCampaign,
    TransactionCurrencyId,
    TimeZoneRuleVersionNumber,
    UTCConversionTimeZoneCode,
    ImportSequenceNumber,
    OverriddenCreatedOn,
    ExchangeRate,
    EstimatedAmount,
    EstimatedAmount_Base,
    Revenue_Base,
    YomiCompanyName
) with view_metadata as 
select 
    -- logical attributes
    account_primary_leads.DeletionStateCode, 
    account_primary_leads.Name, 
    account_primary_leads.YomiName, 
    campaign_leads.DeletionStateCode, 
    campaign_leads.Name, 
    contact_primary_leads.DeletionStateCode, 
    contact_primary_leads.FullName, 
    contact_primary_leads.YomiFullName, 
    lk_leadbase_createdby.DeletionStateCode, 
    lk_leadbase_createdby.FullName, 
    lk_leadbase_createdby.YomiFullName, 
    lead_master_lead.DeletionStateCode, 
    lead_master_lead.FullName, 
    lead_master_lead.YomiFullName, 
    lk_leadbase_modifiedby.DeletionStateCode, 
    lk_leadbase_modifiedby.FullName, 
    lk_leadbase_modifiedby.YomiFullName, 
    transactioncurrency_lead.DeletionStateCode, 
    transactioncurrency_lead.CurrencyName, 

    -- linked address entities
    XXaddress1.LeadAddressId,
    XXaddress1.AddressTypeCode,
    XXaddress1.Name,
    XXaddress1.Line1,
    XXaddress1.Line2,
    XXaddress1.Line3,
    XXaddress1.City,
    XXaddress1.StateOrProvince,
    XXaddress1.County,
    XXaddress1.Country,
    XXaddress1.PostOfficeBox,
    XXaddress1.PostalCode,
    XXaddress1.UTCOffset,
    XXaddress1.UPSZone,
    XXaddress1.Latitude,
    XXaddress1.Telephone1,
    XXaddress1.Longitude,
    XXaddress1.ShippingMethodCode,
    XXaddress1.Telephone2,
    XXaddress1.Telephone3,
    XXaddress1.Fax,

    XXaddress2.LeadAddressId,
    XXaddress2.AddressTypeCode,
    XXaddress2.Name,
    XXaddress2.Line1,
    XXaddress2.Line2,
    XXaddress2.Line3,
    XXaddress2.City,
    XXaddress2.StateOrProvince,
    XXaddress2.County,
    XXaddress2.Country,
    XXaddress2.PostOfficeBox,
    XXaddress2.PostalCode,
    XXaddress2.UTCOffset,
    XXaddress2.UPSZone,
    XXaddress2.Latitude,
    XXaddress2.Telephone1,
    XXaddress2.Longitude,
    XXaddress2.ShippingMethodCode,
    XXaddress2.Telephone2,
    XXaddress2.Telephone3,
    XXaddress2.Fax,

    -- ownership entries
    OwnerId   = LeadBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when LeadBase.OwningUser IS NOT NULL then 8
              else NULL
              end,


    CustomerId   = coalesce(LeadBase.AccountId, LeadBase.ContactId), 
    CustomerIdName = coalesce(XXparentaccount.Name, XXparentcontact.FullName), 
    CustomerIdYomiName = coalesce(XXparentaccount.YomiName, XXparentcontact.YomiFullName), 
    CustomerIdDsc  = coalesce(XXparentaccount.DeletionStateCode, XXparentcontact.DeletionStateCode), 
    CustomerIdType = case 
              when LeadBase.AccountId IS NOT NULL then 1
              when LeadBase.ContactId IS NOT NULL then 2
              else NULL
              end,

    -- physical attributes
    LeadBase.LeadId,
    LeadBase.DeletionStateCode,
    LeadBase.ContactId,
    LeadBase.AccountId,
    LeadBase.LeadSourceCode,
    LeadBase.LeadQualityCode,
    LeadBase.PriorityCode,
    LeadBase.IndustryCode,
    LeadBase.PreferredContactMethodCode,
    LeadBase.SalesStageCode,
    LeadBase.OwningBusinessUnit,
    LeadBase.OwningTeam,
    LeadBase.Subject,
    LeadBase.ParticipatesInWorkflow,
    LeadBase.Description,
    LeadBase.EstimatedValue,
    LeadBase.EstimatedCloseDate,
    LeadBase.CompanyName,
    LeadBase.FirstName,
    LeadBase.MiddleName,
    LeadBase.LastName,
    LeadBase.Revenue,
    LeadBase.NumberOfEmployees,
    LeadBase.DoNotPhone,
    LeadBase.SIC,
    LeadBase.DoNotFax,
    LeadBase.EMailAddress1,
    LeadBase.JobTitle,
    LeadBase.Salutation,
    LeadBase.DoNotEMail,
    LeadBase.EMailAddress2,
    LeadBase.DoNotPostalMail,
    LeadBase.EMailAddress3,
    LeadBase.FullName,
    LeadBase.YomiFirstName,
    LeadBase.WebSiteUrl,
    LeadBase.Telephone1,
    LeadBase.Telephone2,
    LeadBase.Telephone3,
    LeadBase.CreatedOn,
    LeadBase.IsPrivate,
    LeadBase.Fax,
    LeadBase.YomiMiddleName,
    LeadBase.YomiLastName,
    LeadBase.CreatedBy,
    LeadBase.ModifiedOn,
    LeadBase.ModifiedBy,
    LeadBase.YomiFullName,
    LeadBase.OwningUser,
    LeadBase.MobilePhone,
    LeadBase.StateCode,
    LeadBase.Pager,
    LeadBase.StatusCode,
    LeadBase.VersionNumber,
    LeadBase.MasterId,
    LeadBase.CampaignId,
    LeadBase.DoNotSendMM,
    LeadBase.Merged,
    LeadBase.DoNotBulkEMail,
    LeadBase.LastUsedInCampaign,
    LeadBase.TransactionCurrencyId,
    LeadBase.TimeZoneRuleVersionNumber,
    LeadBase.UTCConversionTimeZoneCode,
    LeadBase.ImportSequenceNumber,
    LeadBase.OverriddenCreatedOn,
    LeadBase.ExchangeRate,
    LeadBase.EstimatedAmount,
    LeadBase.EstimatedAmount_Base,
    LeadBase.Revenue_Base,
    LeadBase.YomiCompanyName
from LeadBase
    left join AccountBase XXparentaccount on (LeadBase.AccountId = XXparentaccount.AccountId)
    left join ContactBase XXparentcontact on (LeadBase.ContactId = XXparentcontact.ContactId)


    left join LeadAddressBase XXaddress1 on (LeadBase.LeadId = XXaddress1.ParentId and XXaddress1.AddressNumber = 1)
    left join LeadAddressBase XXaddress2 on (LeadBase.LeadId = XXaddress2.ParentId and XXaddress2.AddressNumber = 2)
    left join AccountBase account_primary_leads on (LeadBase.AccountId = account_primary_leads.AccountId)
    left join CampaignBase campaign_leads on (LeadBase.CampaignId = campaign_leads.CampaignId)
    left join ContactBase contact_primary_leads on (LeadBase.ContactId = contact_primary_leads.ContactId)
    left join LeadBase lead_master_lead on (LeadBase.MasterId = lead_master_lead.LeadId)
    left join SystemUserBase lk_leadbase_createdby with(nolock) on (LeadBase.CreatedBy = lk_leadbase_createdby.SystemUserId)
    left join SystemUserBase lk_leadbase_modifiedby with(nolock) on (LeadBase.ModifiedBy = lk_leadbase_modifiedby.SystemUserId)
    left join TransactionCurrencyBase transactioncurrency_lead on (LeadBase.TransactionCurrencyId = transactioncurrency_lead.TransactionCurrencyId)
    left join SystemUserBase XXowninguser with(nolock) on (LeadBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Campaign]    Script Date: 04/11/2008 06:57:39 ******/




--
-- base view for Campaign
--
create view [dbo].[Campaign] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    PriceListDsc, 
    PriceListName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    TypeCode,
    ProposedEnd,
    BudgetedCost,
    CreatedOn,
    PromotionCodeName,
    ModifiedOn,
    PriceListId,
    StatusCode,
    CreatedBy,
    IsTemplate,
    CampaignId,
    ActualStart,
    OwningBusinessUnit,
    TotalActualCost,
    Message,
    ModifiedBy,
    ExpectedRevenue,
    VersionNumber,
    CodeName,
    ProposedStart,
    Objective,
    ActualEnd,
    StateCode,
    DeletionStateCode,
    OtherCost,
    Description,
    TotalCampaignActivityActualCost,
    ExpectedResponse,
    Name,
    OwningUser,
    ExchangeRate,
    TimeZoneRuleVersionNumber,
    TransactionCurrencyId,
    ImportSequenceNumber,
    OverriddenCreatedOn,
    UTCConversionTimeZoneCode,
    TotalCampaignActivityActualCost_Base,
    BudgetedCost_Base,
    ExpectedRevenue_Base,
    OtherCost_Base,
    TotalActualCost_Base
) with view_metadata as 
select 
    -- logical attributes
    lk_campaign_createdby.DeletionStateCode, 
    lk_campaign_createdby.FullName, 
    lk_campaign_createdby.YomiFullName, 
    lk_campaign_modifiedby.DeletionStateCode, 
    lk_campaign_modifiedby.FullName, 
    lk_campaign_modifiedby.YomiFullName, 
    PriceList_Campaigns.DeletionStateCode, 
    PriceList_Campaigns.Name, 
    transactioncurrency_campaign.DeletionStateCode, 
    transactioncurrency_campaign.CurrencyName, 

    -- ownership entries
    OwnerId   = CampaignBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when CampaignBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    CampaignBase.TypeCode,
    CampaignBase.ProposedEnd,
    CampaignBase.BudgetedCost,
    CampaignBase.CreatedOn,
    CampaignBase.PromotionCodeName,
    CampaignBase.ModifiedOn,
    CampaignBase.PriceListId,
    CampaignBase.StatusCode,
    CampaignBase.CreatedBy,
    CampaignBase.IsTemplate,
    CampaignBase.CampaignId,
    CampaignBase.ActualStart,
    CampaignBase.OwningBusinessUnit,
    CampaignBase.TotalActualCost,
    CampaignBase.Message,
    CampaignBase.ModifiedBy,
    CampaignBase.ExpectedRevenue,
    CampaignBase.VersionNumber,
    CampaignBase.CodeName,
    CampaignBase.ProposedStart,
    CampaignBase.Objective,
    CampaignBase.ActualEnd,
    CampaignBase.StateCode,
    CampaignBase.DeletionStateCode,
    CampaignBase.OtherCost,
    CampaignBase.Description,
    CampaignBase.TotalCampaignActivityActualCost,
    CampaignBase.ExpectedResponse,
    CampaignBase.Name,
    CampaignBase.OwningUser,
    CampaignBase.ExchangeRate,
    CampaignBase.TimeZoneRuleVersionNumber,
    CampaignBase.TransactionCurrencyId,
    CampaignBase.ImportSequenceNumber,
    CampaignBase.OverriddenCreatedOn,
    CampaignBase.UTCConversionTimeZoneCode,
    CampaignBase.TotalCampaignActivityActualCost_Base,
    CampaignBase.BudgetedCost_Base,
    CampaignBase.ExpectedRevenue_Base,
    CampaignBase.OtherCost_Base,
    CampaignBase.TotalActualCost_Base
from CampaignBase
    left join SystemUserBase lk_campaign_createdby with(nolock) on (CampaignBase.CreatedBy = lk_campaign_createdby.SystemUserId)
    left join SystemUserBase lk_campaign_modifiedby with(nolock) on (CampaignBase.ModifiedBy = lk_campaign_modifiedby.SystemUserId)
    left join PriceLevelBase PriceList_Campaigns on (CampaignBase.PriceListId = PriceList_Campaigns.PriceLevelId)
    left join TransactionCurrencyBase transactioncurrency_campaign on (CampaignBase.TransactionCurrencyId = transactioncurrency_campaign.TransactionCurrencyId)
    left join SystemUserBase XXowninguser with(nolock) on (CampaignBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[FilteredCompetitorSalesLiterature]    Script Date: 04/11/2008 06:57:52 ******/




--
-- report view for competitorsalesliterature
--
create view [dbo].[FilteredCompetitorSalesLiterature] (
    competitorid,
    competitorsalesliteratureid,
    salesliteratureid
) with view_metadata as 
select 
    CompetitorSalesLiterature.CompetitorId,
    CompetitorSalesLiterature.CompetitorSalesLiteratureId,
    CompetitorSalesLiterature.SalesLiteratureId
from CompetitorSalesLiterature

/****** Object:  View [dbo].[TimeZoneLocalizedName]    Script Date: 04/11/2008 06:58:34 ******/




--
-- base view for TimeZoneLocalizedName
--
create view [dbo].[TimeZoneLocalizedName] (
    -- physical attributes
    CultureId,
    ModifiedOn,
    DeletionStateCode,
    CreatedOn,
    TimeZoneDefinitionId,
    StandardName,
    VersionNumber,
    ModifiedBy,
    TimeZoneLocalizedNameId,
    UserInterfaceName,
    DaylightName,
    CreatedBy,
    OrganizationId
) with view_metadata as 
select 
    -- physical attributes
    TimeZoneLocalizedNameBase.CultureId,
    TimeZoneLocalizedNameBase.ModifiedOn,
    TimeZoneLocalizedNameBase.DeletionStateCode,
    TimeZoneLocalizedNameBase.CreatedOn,
    TimeZoneLocalizedNameBase.TimeZoneDefinitionId,
    TimeZoneLocalizedNameBase.StandardName,
    TimeZoneLocalizedNameBase.VersionNumber,
    TimeZoneLocalizedNameBase.ModifiedBy,
    TimeZoneLocalizedNameBase.TimeZoneLocalizedNameId,
    TimeZoneLocalizedNameBase.UserInterfaceName,
    TimeZoneLocalizedNameBase.DaylightName,
    TimeZoneLocalizedNameBase.CreatedBy,
    TimeZoneLocalizedNameBase.OrganizationId
from TimeZoneLocalizedNameBase

/****** Object:  StoredProcedure [dbo].[p_CascadePrivilegeChanges]    Script Date: 04/11/2008 06:34:58 ******/




-- this stored procedure fixes handles: adding/removing privileges at a root
-- role or changing privilege depth.
--


CREATE     procedure [dbo].[p_CascadePrivilegeChanges](@parentRoleid uniqueidentifier) as
begin
SET NOCOUNT ON


declare @parentBizId uniqueidentifier
declare @currParentRoleId uniqueidentifier
declare @prevParentRoleId uniqueidentifier
declare @rowcnt int

select @parentBizId = BusinessUnitId from RoleBase where RoleId = @parentRoleid

create table #Roles(RoleId Uniqueidentifier primary key clustered, ParentRoleId uniqueidentifier)
create index ParentRoleIdx on #Roles(ParentRoleId)

create table #roleprivileges(
	roleid uniqueidentifier,
	privilegeid uniqueidentifier not null, 
	privilegedepthmask int not null
 )

create index privilegedepthmaskIdx on #roleprivileges(privilegedepthmask)

create table #parents(parentroleid uniqueidentifier primary key clustered)
insert into #parents(parentroleid) values(@parentRoleid)

SELECT @currParentRoleId = @parentRoleid

while (@currParentRoleId is not null)
begin
	insert into #Roles(RoleId, ParentRoleId)
	select distinct r.RoleId, r.ParentRoleId
	From RoleBase r
	where r.BusinessUnitId in (select b.SubBusinessId from BusinessUnitMap b
	where b.BusinessId = @parentBizId
	and b.SubBusinessId <> @parentBizId)
	and r.RoleId <> @parentRoleid
	and r.ParentRoleId is not null
	and r.ParentRoleId = @currParentRoleId

	Select @prevParentRoleId = @currParentRoleId
	select @currParentRoleId = null

	select top 1 @currParentRoleId = RoleId
	from #Roles where RoleId not in (select distinct ParentRoleId from #Roles)
	and exists (select top 1 r.ParentRoleId from RoleBase r where r.ParentRoleId = #Roles.RoleId)

	if (@prevParentRoleId = @currParentRoleId)
	begin
		--This is only to break out of the loop. Error Condn.
		select @currParentRoleId = null
	end
end

delete from RolePrivileges where RoleId in (select RoleId from #Roles)

select @rowcnt = count(*) from #Roles

-- getting the root parent
select top 1 @currParentRoleId = r.ParentRoleId
from #Roles r, RolePrivileges rp where
r.ParentRoleId = rp.RoleId

insert into #roleprivileges(roleid, privilegeid, privilegedepthmask)
	select r.RoleId, rp.PrivilegeId, rp.PrivilegeDepthMask
	from #Roles r, RolePrivileges rp
	where r.ParentRoleId = @currParentRoleId
	and rp.RoleId = @currParentRoleId
	delete from #Roles where ParentRoleId = @currParentRoleId

-- case when all privileges for the parentrole have been removed
if(@currParentRoleId is not null)
begin
select @rowcnt = count(*) from #Roles
while (@rowcnt > 0)
begin
	--By joining the #Roles and #roleprivileges
	--we are guaranteed that a child role will be processed
	--only after its parent.
	select top 1 @currParentRoleId = r.ParentRoleId
	from #Roles r, #roleprivileges rp where
	r.ParentRoleId = rp.roleid

	insert into #roleprivileges(roleid, privilegeid, privilegedepthmask)
	select r.RoleId, rp.privilegeid, rp.privilegedepthmask
	from #Roles r, #roleprivileges rp
	where r.ParentRoleId = @currParentRoleId
	and rp.roleid = @currParentRoleId

	delete from #Roles where ParentRoleId = @currParentRoleId
	-- Since multiple Roles can have the same ParentRoleId we subtract the number of rows deleted from #Roles table from @rowcnt
	select @rowcnt = @rowcnt - @@rowcount
	insert into #parents(parentroleid) values(@currParentRoleId)
end
end

-- update the privilegedepthmasks
	exec p_UpdateRolePrivilegeMaskInTempTable

-- Copy privileges from temptable in one statement
insert into RolePrivileges(RoleId, PrivilegeId, PrivilegeDepthMask)
	select roleid, privilegeid, privilegedepthmask from #roleprivileges

	-- Reinitialize subscriptions for users with changing roles
update Subscription Set ReInitialize = 1 
where SystemUserId in 
	(select SystemUserId from SystemUserRoles where RoleId in (select parentroleid from #parents))

drop table #parents
drop table #roleprivileges
drop table #Roles


end

/****** Object:  UserDefinedFunction [dbo].[fn_GetLocalizedLabel]    Script Date: 04/11/2008 06:57:29 ******/




create function [dbo].[fn_GetLocalizedLabel] (
	@ObjectId uniqueidentifier,
	@ColumnName nvarchar(255),
	@LanguageCode int
)
returns nvarchar(255)
as
begin
	declare @LocalizedLabel		nvarchar(255)
	
	begin
		select @LocalizedLabel = l.Label
			from MetadataSchema.LocalizedLabel l
			where @ObjectId = l.ObjectId
			and @LanguageCode = l.LanguageId
			and @ColumnName = l.ObjectColumnName
	end
	return @LocalizedLabel
end

/****** Object:  View [dbo].[Incident]    Script Date: 04/11/2008 06:58:17 ******/




--
-- base view for Incident
--
create view [dbo].[Incident] (
    -- logical attributes
    AccountIdDsc, 
    AccountIdName, 
    AccountIdYomiName, 
    ContactIdDsc, 
    ContactIdName, 
    ContactIdYomiName, 
    ContractDetailIdDsc, 
    ContractDetailIdName, 
    ContractIdDsc, 
    ContractIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    KbArticleIdDsc, 
    KbArticleIdName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ProductIdDsc, 
    ProductIdName, 
    ResponsibleContactIdDsc, 
    ResponsibleContactIdName, 
    ResponsibleContactIdYomiName, 
    SubjectIdDsc, 
    SubjectIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,


    CustomerId,
    CustomerIdName,
    CustomerIdYomiName,
    CustomerIdDsc,
    CustomerIdType,

    -- physical attributes
    IncidentId,
    OwningBusinessUnit,
    ContractDetailId,
    SubjectId,
    ContractId,
    DeletionStateCode,
    OwningTeam,
    OwningUser,
    ActualServiceUnits,
    CaseOriginCode,
    BilledServiceUnits,
    CaseTypeCode,
    ProductSerialNumber,
    Title,
    ProductId,
    ContractServiceLevelCode,
    AccountId,
    Description,
    ContactId,
    IsDecrementing,
    CreatedOn,
    TicketNumber,
    PriorityCode,
    CustomerSatisfactionCode,
    IncidentStageCode,
    ModifiedOn,
    CreatedBy,
    FollowupBy,
    ModifiedBy,
    VersionNumber,
    StateCode,
    SeverityCode,
    StatusCode,
    ResponsibleContactId,
    KbArticleId,
    TimeZoneRuleVersionNumber,
    ImportSequenceNumber,
    UTCConversionTimeZoneCode,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    account_as_customer_cases.DeletionStateCode, 
    account_as_customer_cases.Name, 
    account_as_customer_cases.YomiName, 
    contact_as_customer_cases.DeletionStateCode, 
    contact_as_customer_cases.FullName, 
    contact_as_customer_cases.YomiFullName, 
    contract_detail_cases.DeletionStateCode, 
    contract_detail_cases.Title, 
    contract_cases.DeletionStateCode, 
    contract_cases.Title, 
    lk_incidentbase_createdby.DeletionStateCode, 
    lk_incidentbase_createdby.FullName, 
    lk_incidentbase_createdby.YomiFullName, 
    kbarticle_incidents.DeletionStateCode, 
    kbarticle_incidents.Title, 
    lk_incidentbase_modifiedby.DeletionStateCode, 
    lk_incidentbase_modifiedby.FullName, 
    lk_incidentbase_modifiedby.YomiFullName, 
    product_incidents.DeletionStateCode, 
    product_incidents.Name, 
    contact_as_responsible_contact.DeletionStateCode, 
    contact_as_responsible_contact.FullName, 
    contact_as_responsible_contact.YomiFullName, 
    subject_incidents.DeletionStateCode, 
    subject_incidents.Title, 

    -- ownership entries
    OwnerId   = IncidentBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when IncidentBase.OwningUser IS NOT NULL then 8
              else NULL
              end,


    CustomerId   = coalesce(IncidentBase.AccountId, IncidentBase.ContactId), 
    CustomerIdName = coalesce(XXparentaccount.Name, XXparentcontact.FullName), 
    CustomerIdYomiName = coalesce(XXparentaccount.YomiName, XXparentcontact.YomiFullName), 
    CustomerIdDsc  = coalesce(XXparentaccount.DeletionStateCode, XXparentcontact.DeletionStateCode), 
    CustomerIdType = case 
              when IncidentBase.AccountId IS NOT NULL then 1
              when IncidentBase.ContactId IS NOT NULL then 2
              else NULL
              end,

    -- physical attributes
    IncidentBase.IncidentId,
    IncidentBase.OwningBusinessUnit,
    IncidentBase.ContractDetailId,
    IncidentBase.SubjectId,
    IncidentBase.ContractId,
    IncidentBase.DeletionStateCode,
    IncidentBase.OwningTeam,
    IncidentBase.OwningUser,
    IncidentBase.ActualServiceUnits,
    IncidentBase.CaseOriginCode,
    IncidentBase.BilledServiceUnits,
    IncidentBase.CaseTypeCode,
    IncidentBase.ProductSerialNumber,
    IncidentBase.Title,
    IncidentBase.ProductId,
    IncidentBase.ContractServiceLevelCode,
    IncidentBase.AccountId,
    IncidentBase.Description,
    IncidentBase.ContactId,
    IncidentBase.IsDecrementing,
    IncidentBase.CreatedOn,
    IncidentBase.TicketNumber,
    IncidentBase.PriorityCode,
    IncidentBase.CustomerSatisfactionCode,
    IncidentBase.IncidentStageCode,
    IncidentBase.ModifiedOn,
    IncidentBase.CreatedBy,
    IncidentBase.FollowupBy,
    IncidentBase.ModifiedBy,
    IncidentBase.VersionNumber,
    IncidentBase.StateCode,
    IncidentBase.SeverityCode,
    IncidentBase.StatusCode,
    IncidentBase.ResponsibleContactId,
    IncidentBase.KbArticleId,
    IncidentBase.TimeZoneRuleVersionNumber,
    IncidentBase.ImportSequenceNumber,
    IncidentBase.UTCConversionTimeZoneCode,
    IncidentBase.OverriddenCreatedOn
from IncidentBase
    left join AccountBase XXparentaccount on (IncidentBase.AccountId = XXparentaccount.AccountId)
    left join ContactBase XXparentcontact on (IncidentBase.ContactId = XXparentcontact.ContactId)

    left join AccountBase account_as_customer_cases on (IncidentBase.AccountId = account_as_customer_cases.AccountId)
    left join ContactBase contact_as_customer_cases on (IncidentBase.ContactId = contact_as_customer_cases.ContactId)
    left join ContactBase contact_as_responsible_contact on (IncidentBase.ResponsibleContactId = contact_as_responsible_contact.ContactId)
    left join ContractBase contract_cases on (IncidentBase.ContractId = contract_cases.ContractId)
    left join ContractDetailBase contract_detail_cases on (IncidentBase.ContractDetailId = contract_detail_cases.ContractDetailId)
    left join KbArticleBase kbarticle_incidents on (IncidentBase.KbArticleId = kbarticle_incidents.KbArticleId)
    left join SystemUserBase lk_incidentbase_createdby with(nolock) on (IncidentBase.CreatedBy = lk_incidentbase_createdby.SystemUserId)
    left join SystemUserBase lk_incidentbase_modifiedby with(nolock) on (IncidentBase.ModifiedBy = lk_incidentbase_modifiedby.SystemUserId)
    left join ProductBase product_incidents on (IncidentBase.ProductId = product_incidents.ProductId)
    left join SubjectBase subject_incidents on (IncidentBase.SubjectId = subject_incidents.SubjectId)
    left join SystemUserBase XXowninguser with(nolock) on (IncidentBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[Contract]    Script Date: 04/11/2008 06:57:41 ******/




--
-- base view for Contract
--
create view [dbo].[Contract] (
    -- logical attributes
    AccountIdDsc, 
    AccountIdName, 
    AccountIdYomiName, 
    BillingAccountIdDsc, 
    BillingAccountIdName, 
    BillingAccountIdYomiName, 
    BillingContactIdDsc, 
    BillingContactIdName, 
    BillingContactIdYomiName, 
    BillToAddressDsc, 
    BillToAddressName, 
    ContactIdDsc, 
    ContactIdName, 
    ContactIdYomiName, 
    ContractTemplateAbbreviation, 
    ContractTemplateIdDsc, 
    ContractTemplateIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OriginatingContractDsc, 
    OriginatingContractName, 
    ServiceAddressDsc, 
    ServiceAddressName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,


    BillingCustomerId,
    BillingCustomerIdName,
    BillingCustomerIdYomiName,
    BillingCustomerIdDsc,
    BillingCustomerIdType,


    CustomerId,
    CustomerIdName,
    CustomerIdYomiName,
    CustomerIdDsc,
    CustomerIdType,

    -- physical attributes
    ContractId,
    OwningBusinessUnit,
    ContractTemplateId,
    ContractServiceLevelCode,
    ServiceAddress,
    BillToAddress,
    DeletionStateCode,
    OwningTeam,
    OwningUser,
    ContactId,
    AccountId,
    BillingAccountId,
    ContractNumber,
    BillingContactId,
    ActiveOn,
    ExpiresOn,
    CancelOn,
    Title,
    ContractLanguage,
    BillingStartOn,
    EffectivityCalendar,
    BillingEndOn,
    BillingFrequencyCode,
    CreatedBy,
    CreatedOn,
    ModifiedBy,
    AllotmentTypeCode,
    UseDiscountAsPercentage,
    ModifiedOn,
    TotalPrice,
    VersionNumber,
    TotalDiscount,
    StateCode,
    NetPrice,
    StatusCode,
    OriginatingContract,
    Duration,
    TimeZoneRuleVersionNumber,
    OverriddenCreatedOn,
    ImportSequenceNumber,
    UTCConversionTimeZoneCode,
    TransactionCurrencyId,
    ExchangeRate,
    TotalDiscount_Base,
    NetPrice_Base,
    TotalPrice_Base
) with view_metadata as 
select 
    -- logical attributes
    account_contracts_as_customer.DeletionStateCode, 
    account_contracts_as_customer.Name, 
    account_contracts_as_customer.YomiName, 
    account_contracts_as_billing_customer.DeletionStateCode, 
    account_contracts_as_billing_customer.Name, 
    account_contracts_as_billing_customer.YomiName, 
    contact_contracts_as_billing_customer.DeletionStateCode, 
    contact_contracts_as_billing_customer.FullName, 
    contact_contracts_as_billing_customer.YomiFullName, 
    customer_address_contracts_as_billing_address.DeletionStateCode, 
    customer_address_contracts_as_billing_address.Name, 
    contact_contracts_as_customer.DeletionStateCode, 
    contact_contracts_as_customer.FullName, 
    contact_contracts_as_customer.YomiFullName, 
    contract_template_contracts.Abbreviation, 
    contract_template_contracts.DeletionStateCode, 
    contract_template_contracts.Name, 
    lk_contractbase_createdby.DeletionStateCode, 
    lk_contractbase_createdby.FullName, 
    lk_contractbase_createdby.YomiFullName, 
    lk_contractbase_modifiedby.DeletionStateCode, 
    lk_contractbase_modifiedby.FullName, 
    lk_contractbase_modifiedby.YomiFullName, 
    contract_originating_contract.DeletionStateCode, 
    contract_originating_contract.Title, 
    customer_address_contracts_as_service_address.DeletionStateCode, 
    customer_address_contracts_as_service_address.Name, 
    transactioncurrency_contract.DeletionStateCode, 
    transactioncurrency_contract.CurrencyName, 

    -- ownership entries
    OwnerId   = ContractBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when ContractBase.OwningUser IS NOT NULL then 8
              else NULL
              end,


    BillingCustomerId   = coalesce(ContractBase.BillingAccountId, ContractBase.BillingContactId), 
    BillingCustomerIdName = coalesce(XXbillingaccount.Name, XXbillingcontact.FullName), 
    BillingCustomerIdYomiName = coalesce(XXbillingaccount.YomiName, XXbillingcontact.YomiFullName), 
    BillingCustomerIdDsc  = coalesce(XXbillingaccount.DeletionStateCode, XXbillingcontact.DeletionStateCode), 
    BillingCustomerIdType = case 
              when ContractBase.BillingAccountId IS NOT NULL then 1
              when ContractBase.BillingContactId IS NOT NULL then 2
              else NULL
              end,


    CustomerId   = coalesce(ContractBase.AccountId, ContractBase.ContactId), 
    CustomerIdName = coalesce(XXparentaccount.Name, XXparentcontact.FullName), 
    CustomerIdYomiName = coalesce(XXparentaccount.YomiName, XXparentcontact.YomiFullName), 
    CustomerIdDsc  = coalesce(XXparentaccount.DeletionStateCode, XXparentcontact.DeletionStateCode), 
    CustomerIdType = case 
              when ContractBase.AccountId IS NOT NULL then 1
              when ContractBase.ContactId IS NOT NULL then 2
              else NULL
              end,

    -- physical attributes
    ContractBase.ContractId,
    ContractBase.OwningBusinessUnit,
    ContractBase.ContractTemplateId,
    ContractBase.ContractServiceLevelCode,
    ContractBase.ServiceAddress,
    ContractBase.BillToAddress,
    ContractBase.DeletionStateCode,
    ContractBase.OwningTeam,
    ContractBase.OwningUser,
    ContractBase.ContactId,
    ContractBase.AccountId,
    ContractBase.BillingAccountId,
    ContractBase.ContractNumber,
    ContractBase.BillingContactId,
    ContractBase.ActiveOn,
    ContractBase.ExpiresOn,
    ContractBase.CancelOn,
    ContractBase.Title,
    ContractBase.ContractLanguage,
    ContractBase.BillingStartOn,
    ContractBase.EffectivityCalendar,
    ContractBase.BillingEndOn,
    ContractBase.BillingFrequencyCode,
    ContractBase.CreatedBy,
    ContractBase.CreatedOn,
    ContractBase.ModifiedBy,
    ContractBase.AllotmentTypeCode,
    ContractBase.UseDiscountAsPercentage,
    ContractBase.ModifiedOn,
    ContractBase.TotalPrice,
    ContractBase.VersionNumber,
    ContractBase.TotalDiscount,
    ContractBase.StateCode,
    ContractBase.NetPrice,
    ContractBase.StatusCode,
    ContractBase.OriginatingContract,
    ContractBase.Duration,
    ContractBase.TimeZoneRuleVersionNumber,
    ContractBase.OverriddenCreatedOn,
    ContractBase.ImportSequenceNumber,
    ContractBase.UTCConversionTimeZoneCode,
    ContractBase.TransactionCurrencyId,
    ContractBase.ExchangeRate,
    ContractBase.TotalDiscount_Base,
    ContractBase.NetPrice_Base,
    ContractBase.TotalPrice_Base
from ContractBase
    left join AccountBase XXbillingaccount on (ContractBase.BillingAccountId = XXbillingaccount.AccountId)
    left join ContactBase XXbillingcontact on (ContractBase.BillingContactId = XXbillingcontact.ContactId)

    left join AccountBase XXparentaccount on (ContractBase.AccountId = XXparentaccount.AccountId)
    left join ContactBase XXparentcontact on (ContractBase.ContactId = XXparentcontact.ContactId)

    left join AccountBase account_contracts_as_billing_customer on (ContractBase.BillingAccountId = account_contracts_as_billing_customer.AccountId)
    left join AccountBase account_contracts_as_customer on (ContractBase.AccountId = account_contracts_as_customer.AccountId)
    left join ContactBase contact_contracts_as_billing_customer on (ContractBase.BillingContactId = contact_contracts_as_billing_customer.ContactId)
    left join ContactBase contact_contracts_as_customer on (ContractBase.ContactId = contact_contracts_as_customer.ContactId)
    left join ContractBase contract_originating_contract on (ContractBase.OriginatingContract = contract_originating_contract.ContractId)
    left join ContractTemplateBase contract_template_contracts on (ContractBase.ContractTemplateId = contract_template_contracts.ContractTemplateId)
    left join CustomerAddressBase customer_address_contracts_as_billing_address on (ContractBase.BillToAddress = customer_address_contracts_as_billing_address.CustomerAddressId)
    left join CustomerAddressBase customer_address_contracts_as_service_address on (ContractBase.ServiceAddress = customer_address_contracts_as_service_address.CustomerAddressId)
    left join SystemUserBase lk_contractbase_createdby with(nolock) on (ContractBase.CreatedBy = lk_contractbase_createdby.SystemUserId)
    left join SystemUserBase lk_contractbase_modifiedby with(nolock) on (ContractBase.ModifiedBy = lk_contractbase_modifiedby.SystemUserId)
    left join TransactionCurrencyBase transactioncurrency_contract on (ContractBase.TransactionCurrencyId = transactioncurrency_contract.TransactionCurrencyId)
    left join SystemUserBase XXowninguser with(nolock) on (ContractBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  StoredProcedure [dbo].[p_DetectContactLoop]    Script Date: 04/11/2008 06:35:05 ******/




CREATE procedure [dbo].[p_DetectContactLoop](
 @ParentId uniqueidentifier, 
 @ChildId uniqueidentifier) 
as
/*
	This proc is to be used to determine if parenting one contact to another would create a loop inside the contact hierarchy.
It also detects if a loop already exists somewhere at or above the parent contact.

Return Values : 
ErrorCode ErrorMessage
  '4'  'The ParentId passed in is not valid' as ErrorMessage.'
  '3'  'The ChildId passed in is not valid' as ErrorMessage.'
  '2'  'This association would create a loop in the database.'
  '1'  'There is already a loop existing in the database.'
*/
set nocount on
Declare @TempParentId uniqueidentifier

	

   -- make sure that the @ParentId is a valid contact id.
   IF not exists(select ContactId from ContactBase where ContactId = @ParentId)
     BEGIN 
      select '4' as ErrorCode,  'The ParentId passed in is not valid.' as ErrorMessage
      return 
     END

   -- make sure that the @ChildId is a valid account id.
   IF not exists(select ContactId from ContactBase where ContactId = @ChildId)
     BEGIN 
      select '3' as ErrorCode, 'The ChildId passed in is not valid.' as ErrorMessage
      return 
     END


select @TempParentId = @ParentId 

create table #Ids ( IdVisited uniqueidentifier primary key)
WHILE ( 1 = 1 )

 BEGIN
   if (@TempParentId = @ChildId)
     -- while chasing the parent of the parent (of the parent...) you bumped into the child.  this would create a loop	
     BEGIN
	select '2' as ErrorCode, 'This association would create a loop in the database.' as ErrorMessage
	BREAK
     END

   select @TempParentId = ParentContactId from ContactBase  where ContactId = @TempParentId	

   IF (@TempParentId is null)
     BEGIN 
      -- This implies that there is a dead end to the parent->grand parent-> chain and hence no fear of looping.	
      select '0' as ErrorCode, 'This association is valid and would create no loop in the database.' as ErrorMessage
      BREAK
     END
   ELSE
     BEGIN 
	if exists (select * from #Ids where @TempParentId = IdVisited)
	  BEGIN
	      -- This should never happen.  if it does, that means some one has been mucking with the DB from the backend.	
	      select '1' as ErrorCode, 'There is already a loop existing in the database.' as ErrorMessage             
      	      BREAK
	  END
	else
	  BEGIN
		Insert into #Ids(IdVisited) values (@TempParentId)
		CONTINUE
	  END
     END
   BREAK 	
 END

/****** Object:  View [dbo].[CustomerAddress]    Script Date: 04/11/2008 06:57:42 ******/




--
-- base view for CustomerAddress
--
create view [dbo].[CustomerAddress] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    OwningUser,
    OwningBusinessUnit,
    -- physical attributes
    ParentId,
    CustomerAddressId,
    AddressNumber,
    ObjectTypeCode,
    AddressTypeCode,
    Name,
    PrimaryContactName,
    Line1,
    Line2,
    Line3,
    City,
    StateOrProvince,
    County,
    Country,
    PostOfficeBox,
    PostalCode,
    UTCOffset,
    FreightTermsCode,
    UPSZone,
    Latitude,
    Telephone1,
    Longitude,
    ShippingMethodCode,
    Telephone2,
    Telephone3,
    Fax,
    VersionNumber,
    CreatedBy,
    CreatedOn,
    ModifiedBy,
    ModifiedOn,
    DeletionStateCode,
    TimeZoneRuleVersionNumber,
    OverriddenCreatedOn,
    UTCConversionTimeZoneCode,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_customeraddressbase_createdby.DeletionStateCode, 
    lk_customeraddressbase_createdby.FullName, 
    lk_customeraddressbase_createdby.YomiFullName, 
    lk_customeraddressbase_modifiedby.DeletionStateCode, 
    lk_customeraddressbase_modifiedby.FullName, 
    lk_customeraddressbase_modifiedby.YomiFullName, 

    OwningUser = coalesce(XXaccount.OwningUser, XXcontact.OwningUser), 
    OwningBusinessUnit = coalesce(XXaccount.OwningBusinessUnit, XXcontact.OwningBusinessUnit), 
    -- physical attributes
    CustomerAddressBase.ParentId,
    CustomerAddressBase.CustomerAddressId,
    CustomerAddressBase.AddressNumber,
    CustomerAddressBase.ObjectTypeCode,
    CustomerAddressBase.AddressTypeCode,
    CustomerAddressBase.Name,
    CustomerAddressBase.PrimaryContactName,
    CustomerAddressBase.Line1,
    CustomerAddressBase.Line2,
    CustomerAddressBase.Line3,
    CustomerAddressBase.City,
    CustomerAddressBase.StateOrProvince,
    CustomerAddressBase.County,
    CustomerAddressBase.Country,
    CustomerAddressBase.PostOfficeBox,
    CustomerAddressBase.PostalCode,
    CustomerAddressBase.UTCOffset,
    CustomerAddressBase.FreightTermsCode,
    CustomerAddressBase.UPSZone,
    CustomerAddressBase.Latitude,
    CustomerAddressBase.Telephone1,
    CustomerAddressBase.Longitude,
    CustomerAddressBase.ShippingMethodCode,
    CustomerAddressBase.Telephone2,
    CustomerAddressBase.Telephone3,
    CustomerAddressBase.Fax,
    CustomerAddressBase.VersionNumber,
    CustomerAddressBase.CreatedBy,
    CustomerAddressBase.CreatedOn,
    CustomerAddressBase.ModifiedBy,
    CustomerAddressBase.ModifiedOn,
    CustomerAddressBase.DeletionStateCode,
    CustomerAddressBase.TimeZoneRuleVersionNumber,
    CustomerAddressBase.OverriddenCreatedOn,
    CustomerAddressBase.UTCConversionTimeZoneCode,
    CustomerAddressBase.ImportSequenceNumber
from CustomerAddressBase
    left join AccountBase XXaccount on (CustomerAddressBase.ParentId = XXaccount.AccountId and CustomerAddressBase.ObjectTypeCode = 1)
    left join ContactBase XXcontact on (CustomerAddressBase.ParentId = XXcontact.ContactId and CustomerAddressBase.ObjectTypeCode = 2)
    left join SystemUserBase lk_customeraddressbase_createdby with(nolock) on (CustomerAddressBase.CreatedBy = lk_customeraddressbase_createdby.SystemUserId)
    left join SystemUserBase lk_customeraddressbase_modifiedby with(nolock) on (CustomerAddressBase.ModifiedBy = lk_customeraddressbase_modifiedby.SystemUserId)

/****** Object:  View [dbo].[ReportVisibility]    Script Date: 04/11/2008 06:58:27 ******/




--
-- base view for ReportVisibility
--
create view [dbo].[ReportVisibility] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 
    ReportIdDsc, 
    ReportIdName, 

    -- physical attributes
    ReportId,
    ReportVisibilityId,
    VersionNumber,
    ImportSequenceNumber,
    ModifiedOn,
    CreatedOn,
    CreatedBy,
    VisibilityCode,
    ModifiedBy
) with view_metadata as 
select 
    -- logical attributes
    lk_reportvisibilitybase_createdby.DeletionStateCode, 
    lk_reportvisibilitybase_createdby.FullName, 
    lk_reportvisibilitybase_createdby.YomiFullName, 
    lk_reportvisibilitybase_modifiedby.DeletionStateCode, 
    lk_reportvisibilitybase_modifiedby.FullName, 
    lk_reportvisibilitybase_modifiedby.YomiFullName, 
    report_reportvisibility.OwningBusinessUnit, 
    report_reportvisibility.OwningUser, 
    report_reportvisibility.DeletionStateCode, 
    report_reportvisibility.Name, 

    -- physical attributes
    ReportVisibilityBase.ReportId,
    ReportVisibilityBase.ReportVisibilityId,
    ReportVisibilityBase.VersionNumber,
    ReportVisibilityBase.ImportSequenceNumber,
    ReportVisibilityBase.ModifiedOn,
    ReportVisibilityBase.CreatedOn,
    ReportVisibilityBase.CreatedBy,
    ReportVisibilityBase.VisibilityCode,
    ReportVisibilityBase.ModifiedBy
from ReportVisibilityBase
    left join SystemUserBase lk_reportvisibilitybase_createdby with(nolock) on (ReportVisibilityBase.CreatedBy = lk_reportvisibilitybase_createdby.SystemUserId)
    left join SystemUserBase lk_reportvisibilitybase_modifiedby with(nolock) on (ReportVisibilityBase.ModifiedBy = lk_reportvisibilitybase_modifiedby.SystemUserId)
    left join ReportBase report_reportvisibility on (ReportVisibilityBase.ReportId = report_reportvisibility.ReportId)

/****** Object:  StoredProcedure [dbo].[p_DetectReportLoop]    Script Date: 04/11/2008 06:35:05 ******/




CREATE procedure [dbo].[p_DetectReportLoop](
 @ParentId uniqueidentifier, 
 @ChildId uniqueidentifier) 
as
/*
	This proc is to be used to determine if parenting one report to another would create a loop inside the report hierarchy.
It also detects if a loop already exists somewhere at or above the parent report.

Return Values : 
ErrorCode ErrorMessage
  '4'  'The ParentId passed in is not valid' as ErrorMessage.'
  '3'  'The ChildId passed in is not valid' as ErrorMessage.'
  '2'  'This association would create a loop in the database.'
  '1'  'There is already a loop existing in the database.'
*/
set nocount on
Declare @TempParentId uniqueidentifier

	

   -- make sure that the @ParentId is a valid report id.
   IF not exists(select ReportId from ReportBase where ReportId = @ParentId)
     BEGIN 
      select '4' as ErrorCode,  'The ParentId passed in is not valid.' as ErrorMessage
      return 
     END

   -- make sure that the @ChildId is a valid report id.
   IF not exists(select ReportId from ReportBase where ReportId = @ChildId)
     BEGIN 
      select '3' as ErrorCode, 'The ChildId passed in is not valid.' as ErrorMessage
      return 
     END


select @TempParentId = @ParentId 

create table #Ids ( IdVisited uniqueidentifier primary key)
WHILE ( 1 = 1 )

 BEGIN
   if (@TempParentId = @ChildId)
     -- while chasing the parent of the parent (of the parent...) you bumped into the child.  this would create a loop	
     BEGIN
	select '2' as ErrorCode, 'This association would create a loop in the database.' as ErrorMessage
	BREAK
     END

   select @TempParentId = ParentReportId from ReportBase  where ReportId = @TempParentId	

   IF (@TempParentId is null)
     BEGIN 
      -- This implies that there is a dead end to the parent->grand parent-> chain and hence no fear of looping.	
      select '0' as ErrorCode, 'This association is valid and would create no loop in the database.' as ErrorMessage
      BREAK
     END
   ELSE
     BEGIN 
	if exists (select * from #Ids where @TempParentId = IdVisited)
	  BEGIN
	      -- This should never happen.  if it does, that means some one has been mucking with the DB from the backend.	
	      select '1' as ErrorCode, 'There is already a loop existing in the database.' as ErrorMessage             
      	      BREAK
	  END
	else
	  BEGIN
		Insert into #Ids(IdVisited) values (@TempParentId)
		CONTINUE
	  END
     END
   BREAK 	
 END

/****** Object:  View [dbo].[Report]    Script Date: 04/11/2008 06:58:26 ******/




--
-- base view for Report
--
create view [dbo].[Report] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ParentReportIdDsc, 
    ParentReportIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    DefaultFilter,
    OwningBusinessUnit,
    Name,
    IsCustomReport,
    ModifiedOn,
    SignatureMajorVersion,
    CreatedBy,
    BodyText,
    ModifiedBy,
    IsPersonal,
    CreatedOn,
    SignatureLcid,
    TimeZoneRuleVersionNumber,
    FileSize,
    CustomReportXml,
    Description,
    DeletionStateCode,
    ScheduleXml,
    SignatureDate,
    UTCConversionTimeZoneCode,
    FileName,
    ParentReportId,
    BodyBinary,
    QueryInfo,
    LanguageCode,
    SignatureId,
    BodyUrl,
    MimeType,
    SignatureMinorVersion,
    ReportId,
    IsScheduledReport,
    VersionNumber,
    ReportTypeCode,
    OwningUser
) with view_metadata as 
select 
    -- logical attributes
    lk_reportbase_createdby.DeletionStateCode, 
    lk_reportbase_createdby.FullName, 
    lk_reportbase_createdby.YomiFullName, 
    lk_reportbase_modifiedby.DeletionStateCode, 
    lk_reportbase_modifiedby.FullName, 
    lk_reportbase_modifiedby.YomiFullName, 
    report_parent_report.DeletionStateCode, 
    report_parent_report.Name, 

    -- ownership entries
    OwnerId   = ReportBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when ReportBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    ReportBase.DefaultFilter,
    ReportBase.OwningBusinessUnit,
    ReportBase.Name,
    ReportBase.IsCustomReport,
    ReportBase.ModifiedOn,
    ReportBase.SignatureMajorVersion,
    ReportBase.CreatedBy,
    ReportBase.BodyText,
    ReportBase.ModifiedBy,
    ReportBase.IsPersonal,
    ReportBase.CreatedOn,
    ReportBase.SignatureLcid,
    ReportBase.TimeZoneRuleVersionNumber,
    ReportBase.FileSize,
    ReportBase.CustomReportXml,
    ReportBase.Description,
    ReportBase.DeletionStateCode,
    ReportBase.ScheduleXml,
    ReportBase.SignatureDate,
    ReportBase.UTCConversionTimeZoneCode,
    ReportBase.FileName,
    ReportBase.ParentReportId,
    ReportBase.BodyBinary,
    ReportBase.QueryInfo,
    ReportBase.LanguageCode,
    ReportBase.SignatureId,
    ReportBase.BodyUrl,
    ReportBase.MimeType,
    ReportBase.SignatureMinorVersion,
    ReportBase.ReportId,
    ReportBase.IsScheduledReport,
    ReportBase.VersionNumber,
    ReportBase.ReportTypeCode,
    ReportBase.OwningUser
from ReportBase
    left join SystemUserBase lk_reportbase_createdby with(nolock) on (ReportBase.CreatedBy = lk_reportbase_createdby.SystemUserId)
    left join SystemUserBase lk_reportbase_modifiedby with(nolock) on (ReportBase.ModifiedBy = lk_reportbase_modifiedby.SystemUserId)
    left join ReportBase report_parent_report on (ReportBase.ParentReportId = report_parent_report.ReportId)
    left join SystemUserBase XXowninguser with(nolock) on (ReportBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[ReportEntity]    Script Date: 04/11/2008 06:58:27 ******/




--
-- base view for ReportEntity
--
create view [dbo].[ReportEntity] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 
    ReportIdDsc, 
    ReportIdName, 

    -- physical attributes
    CreatedOn,
    IsFilterable,
    ImportSequenceNumber,
    VersionNumber,
    CreatedBy,
    ReportId,
    ReportEntityId,
    ObjectTypeCode,
    ModifiedOn,
    ModifiedBy
) with view_metadata as 
select 
    -- logical attributes
    lk_reportentitybase_createdby.DeletionStateCode, 
    lk_reportentitybase_createdby.FullName, 
    lk_reportentitybase_createdby.YomiFullName, 
    lk_reportentitybase_modifiedby.DeletionStateCode, 
    lk_reportentitybase_modifiedby.FullName, 
    lk_reportentitybase_modifiedby.YomiFullName, 
    report_reportentities.OwningBusinessUnit, 
    report_reportentities.OwningUser, 
    report_reportentities.DeletionStateCode, 
    report_reportentities.Name, 

    -- physical attributes
    ReportEntityBase.CreatedOn,
    ReportEntityBase.IsFilterable,
    ReportEntityBase.ImportSequenceNumber,
    ReportEntityBase.VersionNumber,
    ReportEntityBase.CreatedBy,
    ReportEntityBase.ReportId,
    ReportEntityBase.ReportEntityId,
    ReportEntityBase.ObjectTypeCode,
    ReportEntityBase.ModifiedOn,
    ReportEntityBase.ModifiedBy
from ReportEntityBase
    left join SystemUserBase lk_reportentitybase_createdby with(nolock) on (ReportEntityBase.CreatedBy = lk_reportentitybase_createdby.SystemUserId)
    left join SystemUserBase lk_reportentitybase_modifiedby with(nolock) on (ReportEntityBase.ModifiedBy = lk_reportentitybase_modifiedby.SystemUserId)
    left join ReportBase report_reportentities on (ReportEntityBase.ReportId = report_reportentities.ReportId)

/****** Object:  StoredProcedure [dbo].[p_GrantAccessBulkForCreate]    Script Date: 04/11/2008 06:35:20 ******/
SET ANSI_NULLS OFF



CREATE PROC [dbo].[p_GrantAccessBulkForCreate](
		@objectId uniqueidentifier,
		@objectTypeCode INT,
        @principal_ids nvarchar(max),
        @principal_type INT,
        @access_rights INT
        ) AS
BEGIN
    SET NOCOUNT ON
        
    -- SHARE THE ENTITY for all principals by setting AccessRightsMask
    INSERT INTO PrincipalObjectAccess (ObjectId,PrincipalId,ObjectTypeCode,PrincipalTypeCode,ChangedOn,AccessRightsMask,InheritedAccessRightsMask)
        SELECT @objectId, id, @objectTypeCode, @principal_type
            , GETUTCDATE(), @access_rights, 0 
		FROM fn_GetGuidsFromString(@principal_ids) 
   
END

/****** Object:  StoredProcedure [dbo].[p_GrantInheritedAccess]    Script Date: 04/11/2008 06:35:20 ******/




Create Proc [dbo].[p_GrantInheritedAccess]
	@ReferencingObjectId		uniqueidentifier,
	@ReferencingObjectTypeCode 	int,
	@ReferencedObjectId		uniqueidentifier,
	@ReferencedObjectTypeCode	int

As
Begin
	SET NOCOUNT ON

	-- Update Existing rows in POA that indicate that the referencing object was already 
	-- shared to the principals that have share access to the referenced object
	
	UPDATE poa1
	SET InheritedAccessRightsMask = poa1.InheritedAccessRightsMask | poa2.AccessRightsMask | poa2.InheritedAccessRightsMask | 0x08000000
	FROM PrincipalObjectAccess poa1 JOIN PrincipalObjectAccess poa2 ON (poa1.PrincipalId = poa2.PrincipalId)
	WHERE poa1.ObjectId = @ReferencingObjectId 
	AND   poa1.ObjectTypeCode = @ReferencingObjectTypeCode
	AND   poa2.ObjectId = @ReferencedObjectId
	AND   poa2.ObjectTypeCode = @ReferencedObjectTypeCode

	-- insert new rows for principals who were shared the referenced Object but not
	-- the referencing Object

	INSERT into PrincipalObjectAccess ( PrincipalId, PrincipalTypeCode, ObjectId, ObjectTypeCode, AccessRightsMask, InheritedAccessRightsMask)
	SELECT PrincipalId, PrincipalTypeCode, @ReferencingObjectId, @ReferencingObjectTypeCode, 0, AccessRightsMask | InheritedAccessRightsMask | 0x08000000
	FROM PrincipalObjectAccess
	WHERE PrincipalId NOT IN (SELECT PrincipalId FROM PrincipalObjectAccess WHERE ObjectId = @ReferencingObjectId AND ObjectTypeCode = @ReferencingObjectTypeCode)
	AND ObjectId = @ReferencedObjectId
	AND ObjectTypeCode = @ReferencedObjectTypeCode

End

/****** Object:  View [dbo].[FilteredContactInvoices]    Script Date: 04/11/2008 06:57:52 ******/




--
-- report view for contactinvoices
--
create view [dbo].[FilteredContactInvoices] (
    contactid,
    contactinvoiceid,
    invoiceid
) with view_metadata as 
select 
    ContactInvoices.ContactId,
    ContactInvoices.ContactInvoiceId,
    ContactInvoices.InvoiceId
from ContactInvoices

/****** Object:  View [dbo].[Privilege]    Script Date: 04/11/2008 06:58:24 ******/




--
-- base view for Privilege
--
create view [dbo].[Privilege] (
    -- physical attributes
    PrivilegeId,
    Name,
    CanBeLocal,
    CanBeDeep,
    VersionNumber,
    CanBeGlobal,
    CanBeBasic,
    AccessRight,
    IsDisabledWhenIntegrated
) with view_metadata as 
select 
    -- physical attributes
    PrivilegeBase.PrivilegeId,
    PrivilegeBase.Name,
    PrivilegeBase.CanBeLocal,
    PrivilegeBase.CanBeDeep,
    PrivilegeBase.VersionNumber,
    PrivilegeBase.CanBeGlobal,
    PrivilegeBase.CanBeBasic,
    PrivilegeBase.AccessRight,
    PrivilegeBase.IsDisabledWhenIntegrated
from PrivilegeBase

/****** Object:  View [dbo].[v_attributeobjecttypes]    Script Date: 04/11/2008 06:58:36 ******/




create view [dbo].[v_attributeobjecttypes] (EntityId, 
                                    AttributeId, AttributeName, LocalizedName, Description, 
                                    ObjectTypeCode, 
                                    IsRequiredByPlatform, IsRequiredForGrid, IsRequiredForForm, IsValidForAdvancedFind,
                                    ValidForGrid, ValidForForm, ValidForRead, ValidForCreate, ValidForUpdate,
                                    Datatype, MaxLength, IsCustomField) as
select Attribute.EntityId, 
       Attribute.AttributeId,
       Attribute.LogicalName,
       NULL,
       LL.Label,
       case Attribute.LogicalName
         when 'createdby' then 8 
         when 'modifiedby' then 8
         else coalesce(Entity.ObjectTypeCode, 0)
       end,
       
       case Attribute.IsNullable
         when 1 then 'false'
         else 'true'
       end,
       
       case cast(coalesce(Attribute.DisplayMask & 1073741824, 0) as bit)
         when 1 then 'true'
         else 'false'
       end,
       
       case cast(coalesce(Attribute.DisplayMask & 536870912, 0) as bit)
         when 1 then 'true'
         else 'false'
       end,
       
       case cast(coalesce(Attribute.DisplayMask & 67108864, 0) as bit)
         when 1 then 'true'
         else 'false'
       end,
       
       case cast(coalesce(Attribute.DisplayMask & 268435456, 0) as bit)
         when 1 then 'true'
         else 'false'
       end,
       
       case cast(coalesce(Attribute.DisplayMask & 134217728, 0) as bit)
         when 1 then 'true'
         else 'false'
       end,
       
       case Attribute.ValidForReadAPI
         when 1 then 'true'
         else 'false'
       end,
       
       case Attribute.ValidForCreateAPI
         when 1 then 'true'
         else 'false'
       end,
       
       case Attribute.ValidForUpdateAPI
         when 1 then 'true'
         else 'false'
       end,
       case AttributeTypes.Description
        when 'nvarchar' then 'text'
        when 'ntext' then 'memo'
        when 'int' then 'integer'
        when 'float' then 'float'
        when 'decimal' then 'decimal'
        when 'bit' then 'boolean'
        when 'datetime' then 'datetime'
        when 'lookup' then 'lookup'
        when 'uniqueidentifier' then 'uniqueidentifier'
        when 'picklist' then 'picklist'
        when 'money' then 'money'
        when 'state' then 'state'
        when 'status' then 'status'
        when 'primarykey' then 'primarykey'
        when 'virtual' then 'string'
        when 'customer' then 'customer'
        when 'owner' then 'owner'
        when 'timezone' then 'timezone'
        when 'partylist' then 'partylist'
        else 'unknown-data-type: ' + AttributeTypes.Description
       end,
       case AttributeTypes.Description
        when 'nvarchar' then Attribute.Length / 2
        when 'nchar' then Attribute.Length / 2
        when 'ntext' then 5000
        else Attribute.Length
       end,
       case Attribute.IsCustomField
         when 1 then 'true'
         else 'false'
       end
from AttributeTypes 
       join AttributeView as Attribute on AttributeTypes.AttributeTypeId = Attribute.AttributeTypeId
       
       
       left join LocalizedLabel as LL on (Attribute.AttributeId = LL.ObjectId AND LL.LanguageId = (SELECT TOP 1 LanguageCode FROM Organization) AND LL.ObjectColumnName='Description')
       left join RelationshipView as Relationship on (Relationship.ReferencingAttributeId = Attribute.AttributeId)
       left join EntityView as Entity on (Entity.EntityId = Relationship.ReferencedEntityId)
where Attribute.AttributeOf is NULL
  and Attribute.AggregateOf is NULL
  and (Attribute.ValidForCreateAPI = 1 or Attribute.ValidForUpdateAPI = 1 or Attribute.ValidForReadAPI = 1)

/****** Object:  View [dbo].[LocalizedLabelLogicalView]    Script Date: 04/11/2008 06:58:20 ******/




create view [dbo].[LocalizedLabelLogicalView] as
(select l1.* from LocalizedLabel l1
left outer join LocalizedLabel l2 on
(l1.LocalizedLabelId = l2.LocalizedLabelId and l1.LocalizedLabelRowId <> l2.LocalizedLabelRowId and l1.CustomizationLevel = 0
and l2.InProduction = 1)
where l2.CustomizationLevel is null)

/****** Object:  View [dbo].[UserQuery]    Script Date: 04/11/2008 06:58:36 ******/




--
-- base view for UserQuery
--
create view [dbo].[UserQuery] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    QueryType,
    ModifiedOn,
    ModifiedBy,
    StatusCode,
    VersionNumber,
    FetchXml,
    Description,
    ColumnSetXml,
    StateCode,
    UserQueryId,
    Name,
    CreatedBy,
    ReturnedTypeCode,
    OwningBusinessUnit,
    LayoutXml,
    CreatedOn,
    OwningUser,
    DeletionStateCode
) with view_metadata as 
select 
    -- logical attributes
    lk_userquery_createdby.DeletionStateCode, 
    lk_userquery_createdby.FullName, 
    lk_userquery_createdby.YomiFullName, 
    lk_userquery_modifiedby.DeletionStateCode, 
    lk_userquery_modifiedby.FullName, 
    lk_userquery_modifiedby.YomiFullName, 

    -- ownership entries
    OwnerId   = UserQueryBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when UserQueryBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    UserQueryBase.QueryType,
    UserQueryBase.ModifiedOn,
    UserQueryBase.ModifiedBy,
    UserQueryBase.StatusCode,
    UserQueryBase.VersionNumber,
    UserQueryBase.FetchXml,
    UserQueryBase.Description,
    UserQueryBase.ColumnSetXml,
    UserQueryBase.StateCode,
    UserQueryBase.UserQueryId,
    UserQueryBase.Name,
    UserQueryBase.CreatedBy,
    UserQueryBase.ReturnedTypeCode,
    UserQueryBase.OwningBusinessUnit,
    UserQueryBase.LayoutXml,
    UserQueryBase.CreatedOn,
    UserQueryBase.OwningUser,
    UserQueryBase.DeletionStateCode
from UserQueryBase
    left join SystemUserBase lk_userquery_createdby with(nolock) on (UserQueryBase.CreatedBy = lk_userquery_createdby.SystemUserId)
    left join SystemUserBase lk_userquery_modifiedby with(nolock) on (UserQueryBase.ModifiedBy = lk_userquery_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (UserQueryBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[FilteredContactLeads]    Script Date: 04/11/2008 06:57:52 ******/




--
-- report view for contactleads
--
create view [dbo].[FilteredContactLeads] (
    contactid,
    contactleadid,
    leadid
) with view_metadata as 
select 
    ContactLeads.ContactId,
    ContactLeads.ContactLeadId,
    ContactLeads.LeadId
from ContactLeads

/****** Object:  StoredProcedure [dbo].[p_DetectProductKitLoop]    Script Date: 04/11/2008 06:35:05 ******/




CREATE procedure [dbo].[p_DetectProductKitLoop](
 @KitId uniqueidentifier, 
 @ProductId uniqueidentifier) 
as
/*
This proc is to be used to determine if adding a product to a kit would create a loop inside the kit hierarchy.

Return Values : 
ErrorCode ErrorMessage
  '4'  'The KitId passed in is not valid' as ErrorMessage.'
  '3'  'The ProductId passed in is not valid' as ErrorMessage.'
  '2'  'This association would create a loop in the database.'
  '1'  'There is already a loop existing in the database.'
*/
set nocount on
Declare @TempParentId uniqueidentifier

	

   -- make sure that the @KitId is a valid product id.
   IF not exists(select ProductId from ProductBase where ProductId = @KitId)
     BEGIN 
      select '4' as ErrorCode,  'The KitId passed in is not valid.' as ErrorMessage
      return 
     END

   -- make sure that the @ProductId is a valid product id.
   IF not exists(select ProductId from ProductBase where ProductId = @ProductId)
     BEGIN 
      select '3' as ErrorCode, 'The ProductId passed in is not valid.' as ErrorMessage
      return 
     END


select @TempParentId = @KitId 

create table #Ids ( IdVisited uniqueidentifier primary key)
WHILE ( 1 = 1 )

 BEGIN
   if (@TempParentId = @ProductId)
     -- while chasing the parent of the parent (of the parent...) you bumped into the child.  this would create a loop	
     BEGIN
	select '2' as ErrorCode, 'This association would create a loop in the database.' as ErrorMessage
	BREAK
     END

   IF EXISTS (select ProductId from ProductAssociation where AssociatedProduct = @TempParentId)
     BEGIN
   	select @TempParentId = ProductId from ProductAssociation where AssociatedProduct = @TempParentId
     END
   ELSE
     BEGIN
	select @TempParentId = null
     END	

   IF (@TempParentId is null)
     BEGIN 
      -- This implies that there is a dead end to the parent->grand parent-> chain and hence no fear of looping.	
      select '0' as ErrorCode, 'This association is valid and would create no loop in the database.' as ErrorMessage
      BREAK
     END
   ELSE
     BEGIN 
	if exists (select * from #Ids where @TempParentId = IdVisited)
	  BEGIN
	      -- This should never happen.  if it does, that means some one has been mucking with the DB from the backend.	
	      select '1' as ErrorCode, 'There is already a loop existing in the database.' as ErrorMessage             
      	      BREAK
	  END
	else
	  BEGIN
		Insert into #Ids(IdVisited) values (@TempParentId)
		CONTINUE
	  END
     END
   BREAK 	
 END

/****** Object:  View [dbo].[FilteredProductAssociation]    Script Date: 04/11/2008 06:58:03 ******/




--
-- report view for productassociation
--
create view [dbo].[FilteredProductAssociation] (
    associatedproduct,
    productassociationid,
    productid
) with view_metadata as 
select 
    ProductAssociation.AssociatedProduct,
    ProductAssociation.ProductAssociationId,
    ProductAssociation.ProductId
from ProductAssociation

/****** Object:  View [dbo].[WorkflowWaitSubscription]    Script Date: 04/11/2008 06:58:38 ******/




--
-- base view for WorkflowWaitSubscription
--
create view [dbo].[WorkflowWaitSubscription] (
    -- logical attributes
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    EntityId,
    WorkflowWaitSubscriptionId,
    AsyncOperationId,
    Data,
    ModifiedOn,
    EntityName,
    IsModified
) with view_metadata as 
select 
    -- logical attributes
    asyncoperation_workflowwaitsubscription.OwningBusinessUnit, 
    asyncoperation_workflowwaitsubscription.OwningUser, 

    -- physical attributes
    WorkflowWaitSubscriptionBase.EntityId,
    WorkflowWaitSubscriptionBase.WorkflowWaitSubscriptionId,
    WorkflowWaitSubscriptionBase.AsyncOperationId,
    WorkflowWaitSubscriptionBase.Data,
    WorkflowWaitSubscriptionBase.ModifiedOn,
    WorkflowWaitSubscriptionBase.EntityName,
    WorkflowWaitSubscriptionBase.IsModified
from WorkflowWaitSubscriptionBase
    left join AsyncOperationBase asyncoperation_workflowwaitsubscription on (WorkflowWaitSubscriptionBase.AsyncOperationId = asyncoperation_workflowwaitsubscription.AsyncOperationId)

/****** Object:  View [dbo].[FilteredContactOrders]    Script Date: 04/11/2008 06:57:53 ******/




--
-- report view for contactorders
--
create view [dbo].[FilteredContactOrders] (
    contactid,
    contactorderid,
    salesorderid
) with view_metadata as 
select 
    ContactOrders.ContactId,
    ContactOrders.ContactOrderId,
    ContactOrders.SalesOrderId
from ContactOrders

/****** Object:  View [dbo].[AttributePicklistValueLogicalView]    Script Date: 04/11/2008 06:57:37 ******/




create view [dbo].[AttributePicklistValueLogicalView] as
	(select a1.* from AttributePicklistValue a1
	left outer join AttributePicklistValue a2 on
	(a1.AttributePicklistValueId = a2.AttributePicklistValueId and a1.AttributePicklistValueRowId <> a2.AttributePicklistValueRowId and a1.CustomizationLevel = 0
	and a2.InProduction = 1)
	where a2.CustomizationLevel is null)

/****** Object:  View [dbo].[PickListMapping]    Script Date: 04/11/2008 06:58:23 ******/




--
-- base view for PickListMapping
--
create view [dbo].[PickListMapping] (
    -- logical attributes
    ColumnMappingIdDsc, 
    ColumnMappingIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- physical attributes
    StatusCode,
    PickListMappingId,
    ModifiedOn,
    ModifiedBy,
    TargetValue,
    DeletionStateCode,
    ProcessCode,
    ColumnMappingId,
    SourceValue,
    CreatedOn,
    StateCode,
    CreatedBy
) with view_metadata as 
select 
    -- logical attributes
    PickListMapping_ColumnMapping.DeletionStateCode, 
    PickListMapping_ColumnMapping.SourceAttributeName, 
    lk_picklistmapping_createdby.DeletionStateCode, 
    lk_picklistmapping_createdby.FullName, 
    lk_picklistmapping_createdby.YomiFullName, 
    lk_picklistmapping_modifiedby.DeletionStateCode, 
    lk_picklistmapping_modifiedby.FullName, 
    lk_picklistmapping_modifiedby.YomiFullName, 

    -- physical attributes
    PickListMappingBase.StatusCode,
    PickListMappingBase.PickListMappingId,
    PickListMappingBase.ModifiedOn,
    PickListMappingBase.ModifiedBy,
    PickListMappingBase.TargetValue,
    PickListMappingBase.DeletionStateCode,
    PickListMappingBase.ProcessCode,
    PickListMappingBase.ColumnMappingId,
    PickListMappingBase.SourceValue,
    PickListMappingBase.CreatedOn,
    PickListMappingBase.StateCode,
    PickListMappingBase.CreatedBy
from PickListMappingBase
    left join SystemUserBase lk_picklistmapping_createdby with(nolock) on (PickListMappingBase.CreatedBy = lk_picklistmapping_createdby.SystemUserId)
    left join SystemUserBase lk_picklistmapping_modifiedby with(nolock) on (PickListMappingBase.ModifiedBy = lk_picklistmapping_modifiedby.SystemUserId)
    left join ColumnMappingBase PickListMapping_ColumnMapping on (PickListMappingBase.ColumnMappingId = PickListMapping_ColumnMapping.ColumnMappingId)

/****** Object:  View [dbo].[FilteredContactQuotes]    Script Date: 04/11/2008 06:57:53 ******/




--
-- report view for contactquotes
--
create view [dbo].[FilteredContactQuotes] (
    contactid,
    contactquoteid,
    quoteid
) with view_metadata as 
select 
    ContactQuotes.ContactId,
    ContactQuotes.ContactQuoteId,
    ContactQuotes.QuoteId
from ContactQuotes

/****** Object:  View [dbo].[FilteredProductSalesLiterature]    Script Date: 04/11/2008 06:58:03 ******/




--
-- report view for productsalesliterature
--
create view [dbo].[FilteredProductSalesLiterature] (
    productid,
    productsalesliteratureid,
    salesliteratureid
) with view_metadata as 
select 
    ProductSalesLiterature.ProductId,
    ProductSalesLiterature.ProductSalesLiteratureId,
    ProductSalesLiterature.SalesLiteratureId
from ProductSalesLiterature

/****** Object:  View [dbo].[AttributeLookupValueLogicalView]    Script Date: 04/11/2008 06:57:36 ******/




create view [dbo].[AttributeLookupValueLogicalView] as
(select a1.* from AttributeLookupValue a1
left outer join AttributeLookupValue a2 on
(a1.AttributeLookupValueId = a2.AttributeLookupValueId and a1.AttributeLookupValueRowId <> a2.AttributeLookupValueRowId and a1.CustomizationLevel = 0
and a2.InProduction = 1)
where a2.CustomizationLevel is null)

/****** Object:  View [dbo].[AsyncOperation]    Script Date: 04/11/2008 06:57:36 ******/




--
-- base view for AsyncOperation
--
create view [dbo].[AsyncOperation] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    WorkflowActivationIdDsc, 
    WorkflowActivationIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    MessageName,
    Depth,
    PrimaryEntityType,
    Data,
    RegardingObjectId,
    WorkflowStageName,
    OperationType,
    DependencyToken,
    RecurrencePattern,
    DeletionStateCode,
    Name,
    PostponeUntil,
    WorkflowState,
    TimeZoneRuleVersionNumber,
    OwningBusinessUnit,
    IsWaitingForEvent,
    CreatedBy,
    ErrorCode,
    ModifiedBy,
    CorrelationId,
    RecurrenceStartTime,
    StatusCode,
    AsyncOperationId,
    Sequence,
    RequestId,
    WorkflowIsBlocked,
    ModifiedOn,
    Message,
    StartedOn,
    HostId,
    StateCode,
    WorkflowActivationId,
    CompletedOn,
    CorrelationUpdatedTime,
    UTCConversionTimeZoneCode,
    RetryCount,
    CreatedOn,
    OwningUser,
    RegardingObjectIdDsc,
    RegardingObjectIdName,
    RegardingObjectTypeCode,
    RegardingObjectIdYomiName
) with view_metadata as 
select 
    -- logical attributes
    lk_asyncoperation_createdby.DeletionStateCode, 
    lk_asyncoperation_createdby.FullName, 
    lk_asyncoperation_createdby.YomiFullName, 
    lk_asyncoperation_modifiedby.DeletionStateCode, 
    lk_asyncoperation_modifiedby.FullName, 
    lk_asyncoperation_modifiedby.YomiFullName, 
    lk_asyncoperation_workflowactivationid.DeletionStateCode, 
    lk_asyncoperation_workflowactivationid.Name, 

    -- ownership entries
    OwnerId   = AsyncOperationBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when AsyncOperationBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    AsyncOperationBase.MessageName,
    AsyncOperationBase.Depth,
    AsyncOperationBase.PrimaryEntityType,
    AsyncOperationBase.Data,
    AsyncOperationBase.RegardingObjectId,
    AsyncOperationBase.WorkflowStageName,
    AsyncOperationBase.OperationType,
    AsyncOperationBase.DependencyToken,
    AsyncOperationBase.RecurrencePattern,
    AsyncOperationBase.DeletionStateCode,
    AsyncOperationBase.Name,
    AsyncOperationBase.PostponeUntil,
    AsyncOperationBase.WorkflowState,
    AsyncOperationBase.TimeZoneRuleVersionNumber,
    AsyncOperationBase.OwningBusinessUnit,
    AsyncOperationBase.IsWaitingForEvent,
    AsyncOperationBase.CreatedBy,
    AsyncOperationBase.ErrorCode,
    AsyncOperationBase.ModifiedBy,
    AsyncOperationBase.CorrelationId,
    AsyncOperationBase.RecurrenceStartTime,
    AsyncOperationBase.StatusCode,
    AsyncOperationBase.AsyncOperationId,
    AsyncOperationBase.Sequence,
    AsyncOperationBase.RequestId,
    AsyncOperationBase.WorkflowIsBlocked,
    AsyncOperationBase.ModifiedOn,
    AsyncOperationBase.Message,
    AsyncOperationBase.StartedOn,
    AsyncOperationBase.HostId,
    AsyncOperationBase.StateCode,
    AsyncOperationBase.WorkflowActivationId,
    AsyncOperationBase.CompletedOn,
    AsyncOperationBase.CorrelationUpdatedTime,
    AsyncOperationBase.UTCConversionTimeZoneCode,
    AsyncOperationBase.RetryCount,
    AsyncOperationBase.CreatedOn,
    AsyncOperationBase.OwningUser,
    AsyncOperationBase.RegardingObjectIdDsc,
    AsyncOperationBase.RegardingObjectIdName,
    AsyncOperationBase.RegardingObjectTypeCode,
    AsyncOperationBase.RegardingObjectIdYomiName
from AsyncOperationBase
    left join SystemUserBase lk_asyncoperation_createdby with(nolock) on (AsyncOperationBase.CreatedBy = lk_asyncoperation_createdby.SystemUserId)
    left join SystemUserBase lk_asyncoperation_modifiedby with(nolock) on (AsyncOperationBase.ModifiedBy = lk_asyncoperation_modifiedby.SystemUserId)
    left join WorkflowBase lk_asyncoperation_workflowactivationid on (AsyncOperationBase.WorkflowActivationId = lk_asyncoperation_workflowactivationid.WorkflowId)
    left join SystemUserBase XXowninguser with(nolock) on (AsyncOperationBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[WorkflowDependency]    Script Date: 04/11/2008 06:58:38 ******/




--
-- base view for WorkflowDependency
--
create view [dbo].[WorkflowDependency] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    ParameterName,
    RelatedEntityName,
    RelatedAttributeName,
    DeletionStateCode,
    WorkflowId,
    SdkMessageId,
    ModifiedBy,
    ModifiedOn,
    Type,
    EntityAttributes,
    CustomEntityName,
    DependentEntityName,
    DependentAttributeName,
    WorkflowDependencyId,
    CreatedBy,
    CreatedOn,
    ParameterType
) with view_metadata as 
select 
    -- logical attributes
    workflow_dependency_createdby.DeletionStateCode, 
    workflow_dependency_createdby.FullName, 
    workflow_dependency_createdby.YomiFullName, 
    workflow_dependency_modifiedby.DeletionStateCode, 
    workflow_dependency_modifiedby.FullName, 
    workflow_dependency_modifiedby.YomiFullName, 
    workflow_dependencies.OwningBusinessUnit, 
    workflow_dependencies.OwningUser, 

    -- physical attributes
    WorkflowDependencyBase.ParameterName,
    WorkflowDependencyBase.RelatedEntityName,
    WorkflowDependencyBase.RelatedAttributeName,
    WorkflowDependencyBase.DeletionStateCode,
    WorkflowDependencyBase.WorkflowId,
    WorkflowDependencyBase.SdkMessageId,
    WorkflowDependencyBase.ModifiedBy,
    WorkflowDependencyBase.ModifiedOn,
    WorkflowDependencyBase.Type,
    WorkflowDependencyBase.EntityAttributes,
    WorkflowDependencyBase.CustomEntityName,
    WorkflowDependencyBase.DependentEntityName,
    WorkflowDependencyBase.DependentAttributeName,
    WorkflowDependencyBase.WorkflowDependencyId,
    WorkflowDependencyBase.CreatedBy,
    WorkflowDependencyBase.CreatedOn,
    WorkflowDependencyBase.ParameterType
from WorkflowDependencyBase
    left join WorkflowBase workflow_dependencies on (WorkflowDependencyBase.WorkflowId = workflow_dependencies.WorkflowId)
    left join SystemUserBase workflow_dependency_createdby with(nolock) on (WorkflowDependencyBase.CreatedBy = workflow_dependency_createdby.SystemUserId)
    left join SystemUserBase workflow_dependency_modifiedby with(nolock) on (WorkflowDependencyBase.ModifiedBy = workflow_dependency_modifiedby.SystemUserId)

/****** Object:  View [dbo].[FilteredProductSubstitute]    Script Date: 04/11/2008 06:58:04 ******/




--
-- report view for productsubstitute
--
create view [dbo].[FilteredProductSubstitute] (
    productid,
    productsubstituteid,
    substitutedproductid
) with view_metadata as 
select 
    ProductSubstitute.ProductId,
    ProductSubstitute.ProductSubstituteId,
    ProductSubstitute.SubstitutedProductId
from ProductSubstitute

/****** Object:  View [dbo].[WorkflowCompletedScope]    Script Date: 04/11/2008 06:58:37 ******/




--
-- base view for WorkflowCompletedScope
--
create view [dbo].[WorkflowCompletedScope] (
    -- logical attributes
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    WorkflowCompletedScopeId,
    AsyncOperationId,
    ScopeState,
    ModifiedOn
) with view_metadata as 
select 
    -- logical attributes
    asyncoperation_workflowcompletedscope.OwningBusinessUnit, 
    asyncoperation_workflowcompletedscope.OwningUser, 

    -- physical attributes
    WorkflowCompletedScopeBase.WorkflowCompletedScopeId,
    WorkflowCompletedScopeBase.AsyncOperationId,
    WorkflowCompletedScopeBase.ScopeState,
    WorkflowCompletedScopeBase.ModifiedOn
from WorkflowCompletedScopeBase
    left join AsyncOperationBase asyncoperation_workflowcompletedscope on (WorkflowCompletedScopeBase.AsyncOperationId = asyncoperation_workflowcompletedscope.AsyncOperationId)

/****** Object:  StoredProcedure [dbo].[p_PrimeCascade]    Script Date: 04/11/2008 06:35:25 ******/
SET ANSI_NULLS OFF



create proc [dbo].[p_PrimeCascade](@opType nvarchar(256)) as
begin
set nocount off
set arithabort on
set ansi_null_dflt_on on
set implicit_transactions off
set quoted_identifier on
set implicit_transactions off
set cursor_close_on_commit off
set ansi_warnings on


set concat_null_yields_null on
set language us_english
set dateformat mdy
set datefirst 7

declare @fakeid uniqueidentifier
set @fakeid = newid()

exec dbo.p_CascadeCollect @opType, 1, @fakeid, 0

end -- p_PrimeCascade

/****** Object:  View [dbo].[AttributeMap]    Script Date: 04/11/2008 06:57:36 ******/




--
-- base view for AttributeMap
--
create view [dbo].[AttributeMap] (
    -- physical attributes
    ModifiedOn,
    VersionNumber,
    CreatedBy,
    IsSystem,
    EntityMapId,
    OrganizationId,
    CreatedOn,
    TargetAttributeName,
    DeletionStateCode,
    SourceAttributeName,
    ModifiedBy,
    ParentAttributeMapId,
    AttributeMapId
) with view_metadata as 
select 
    -- physical attributes
    AttributeMapBase.ModifiedOn,
    AttributeMapBase.VersionNumber,
    AttributeMapBase.CreatedBy,
    AttributeMapBase.IsSystem,
    AttributeMapBase.EntityMapId,
    AttributeMapBase.OrganizationId,
    AttributeMapBase.CreatedOn,
    AttributeMapBase.TargetAttributeName,
    AttributeMapBase.DeletionStateCode,
    AttributeMapBase.SourceAttributeName,
    AttributeMapBase.ModifiedBy,
    AttributeMapBase.ParentAttributeMapId,
    AttributeMapBase.AttributeMapId
from AttributeMapBase

/****** Object:  View [dbo].[LookUpMapping]    Script Date: 04/11/2008 06:58:20 ******/




--
-- base view for LookUpMapping
--
create view [dbo].[LookUpMapping] (
    -- logical attributes
    ColumnMappingIdDsc, 
    ColumnMappingIdName, 
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    TransformationParameterMappingIdDsc, 

    -- physical attributes
    LookUpEntityName,
    CreatedBy,
    LookUpSourceCode,
    ColumnMappingId,
    ModifiedOn,
    LookUpMappingId,
    TransformationParameterMappingId,
    ProcessCode,
    StatusCode,
    StateCode,
    CreatedOn,
    DeletionStateCode,
    LookUpAttributeName,
    ModifiedBy
) with view_metadata as 
select 
    -- logical attributes
    LookUpMapping_ColumnMapping.DeletionStateCode, 
    LookUpMapping_ColumnMapping.SourceAttributeName, 
    lk_lookupmapping_createdby.DeletionStateCode, 
    lk_lookupmapping_createdby.FullName, 
    lk_lookupmapping_createdby.YomiFullName, 
    lk_lookupmapping_modifiedby.DeletionStateCode, 
    lk_lookupmapping_modifiedby.FullName, 
    lk_lookupmapping_modifiedby.YomiFullName, 
    LookUpMapping_TransformationParameterMapping.DeletionStateCode, 

    -- physical attributes
    LookUpMappingBase.LookUpEntityName,
    LookUpMappingBase.CreatedBy,
    LookUpMappingBase.LookUpSourceCode,
    LookUpMappingBase.ColumnMappingId,
    LookUpMappingBase.ModifiedOn,
    LookUpMappingBase.LookUpMappingId,
    LookUpMappingBase.TransformationParameterMappingId,
    LookUpMappingBase.ProcessCode,
    LookUpMappingBase.StatusCode,
    LookUpMappingBase.StateCode,
    LookUpMappingBase.CreatedOn,
    LookUpMappingBase.DeletionStateCode,
    LookUpMappingBase.LookUpAttributeName,
    LookUpMappingBase.ModifiedBy
from LookUpMappingBase
    left join SystemUserBase lk_lookupmapping_createdby with(nolock) on (LookUpMappingBase.CreatedBy = lk_lookupmapping_createdby.SystemUserId)
    left join SystemUserBase lk_lookupmapping_modifiedby with(nolock) on (LookUpMappingBase.ModifiedBy = lk_lookupmapping_modifiedby.SystemUserId)
    left join ColumnMappingBase LookUpMapping_ColumnMapping on (LookUpMappingBase.ColumnMappingId = LookUpMapping_ColumnMapping.ColumnMappingId)
    left join TransformationParameterMappingBase LookUpMapping_TransformationParameterMapping on (LookUpMappingBase.TransformationParameterMappingId = LookUpMapping_TransformationParameterMapping.TransformationParameterMappingId)

/****** Object:  View [dbo].[DuplicateRule]    Script Date: 04/11/2008 06:57:43 ******/




--
-- base view for DuplicateRule
--
create view [dbo].[DuplicateRule] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    Description,
    OwningBusinessUnit,
    IsCaseSensitive,
    StateCode,
    StatusCode,
    Name,
    MatchingEntityMatchCodeTable,
    TimeZoneRuleVersionNumber,
    BaseEntityTypeCode,
    UTCConversionTimeZoneCode,
    DuplicateRuleId,
    ModifiedBy,
    DeletionStateCode,
    MatchingEntityTypeCode,
    BaseEntityMatchCodeTable,
    BaseEntityName,
    CreatedBy,
    ModifiedOn,
    MatchingEntityName,
    CreatedOn,
    OwningUser
) with view_metadata as 
select 
    -- logical attributes
    lk_duplicaterulebase_createdby.DeletionStateCode, 
    lk_duplicaterulebase_createdby.FullName, 
    lk_duplicaterulebase_createdby.YomiFullName, 
    lk_duplicaterulebase_modifiedby.DeletionStateCode, 
    lk_duplicaterulebase_modifiedby.FullName, 
    lk_duplicaterulebase_modifiedby.YomiFullName, 

    -- ownership entries
    OwnerId   = DuplicateRuleBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when DuplicateRuleBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    DuplicateRuleBase.Description,
    DuplicateRuleBase.OwningBusinessUnit,
    DuplicateRuleBase.IsCaseSensitive,
    DuplicateRuleBase.StateCode,
    DuplicateRuleBase.StatusCode,
    DuplicateRuleBase.Name,
    DuplicateRuleBase.MatchingEntityMatchCodeTable,
    DuplicateRuleBase.TimeZoneRuleVersionNumber,
    DuplicateRuleBase.BaseEntityTypeCode,
    DuplicateRuleBase.UTCConversionTimeZoneCode,
    DuplicateRuleBase.DuplicateRuleId,
    DuplicateRuleBase.ModifiedBy,
    DuplicateRuleBase.DeletionStateCode,
    DuplicateRuleBase.MatchingEntityTypeCode,
    DuplicateRuleBase.BaseEntityMatchCodeTable,
    DuplicateRuleBase.BaseEntityName,
    DuplicateRuleBase.CreatedBy,
    DuplicateRuleBase.ModifiedOn,
    DuplicateRuleBase.MatchingEntityName,
    DuplicateRuleBase.CreatedOn,
    DuplicateRuleBase.OwningUser
from DuplicateRuleBase
    left join SystemUserBase lk_duplicaterulebase_createdby with(nolock) on (DuplicateRuleBase.CreatedBy = lk_duplicaterulebase_createdby.SystemUserId)
    left join SystemUserBase lk_duplicaterulebase_modifiedby with(nolock) on (DuplicateRuleBase.ModifiedBy = lk_duplicaterulebase_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (DuplicateRuleBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[ListMember]    Script Date: 04/11/2008 06:58:20 ******/




--
-- base view for ListMember
--
create view [dbo].[ListMember] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    EntityType,
    CreatedOn,
    CreatedBy,
    VersionNumber,
    EntityId,
    ModifiedBy,
    ListId,
    ListMemberId,
    ModifiedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_listmember_createdby.DeletionStateCode, 
    lk_listmember_createdby.FullName, 
    lk_listmember_createdby.YomiFullName, 
    lk_listmember_modifiedby.DeletionStateCode, 
    lk_listmember_modifiedby.FullName, 
    lk_listmember_modifiedby.YomiFullName, 
    list_member.OwningBusinessUnit, 
    list_member.OwningUser, 

    -- physical attributes
    ListMemberBase.EntityType,
    ListMemberBase.CreatedOn,
    ListMemberBase.CreatedBy,
    ListMemberBase.VersionNumber,
    ListMemberBase.EntityId,
    ListMemberBase.ModifiedBy,
    ListMemberBase.ListId,
    ListMemberBase.ListMemberId,
    ListMemberBase.ModifiedOn
from ListMemberBase
    left join ListBase list_member on (ListMemberBase.ListId = list_member.ListId)
    left join SystemUserBase lk_listmember_createdby with(nolock) on (ListMemberBase.CreatedBy = lk_listmember_createdby.SystemUserId)
    left join SystemUserBase lk_listmember_modifiedby with(nolock) on (ListMemberBase.ModifiedBy = lk_listmember_modifiedby.SystemUserId)

/****** Object:  StoredProcedure [dbo].[p_ma_DeleteListMembers]    Script Date: 04/11/2008 06:35:23 ******/




create procedure 
[dbo].[p_ma_DeleteListMembers]
(
     @guid_list as uniqueidentifier
)
as
begin 
    declare @message nvarchar(2000)
    set nocount on

    delete from ListMemberBase where ListId = @guid_list
    
end

/****** Object:  View [dbo].[Discount]    Script Date: 04/11/2008 06:57:42 ******/




--
-- base view for Discount
--
create view [dbo].[Discount] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    DiscountTypeIdDsc, 
    DiscountTypeIdName, 
    IsAmountType, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationId, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- physical attributes
    DiscountId,
    DiscountTypeId,
    DeletionStateCode,
    LowQuantity,
    HighQuantity,
    Percentage,
    Amount,
    StatusCode,
    CreatedOn,
    CreatedBy,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    OverriddenCreatedOn,
    TransactionCurrencyId,
    ExchangeRate,
    ImportSequenceNumber,
    Amount_Base
) with view_metadata as 
select 
    -- logical attributes
    lk_discountbase_createdby.DeletionStateCode, 
    lk_discountbase_createdby.FullName, 
    lk_discountbase_createdby.YomiFullName, 
    discount_type_discounts.DeletionStateCode, 
    discount_type_discounts.Name, 
    discount_type_discounts.IsAmountType, 
    lk_discountbase_modifiedby.DeletionStateCode, 
    lk_discountbase_modifiedby.FullName, 
    lk_discountbase_modifiedby.YomiFullName, 
    discount_type_discounts.OrganizationId, 
    transactioncurrency_discount.DeletionStateCode, 
    transactioncurrency_discount.CurrencyName, 

    -- physical attributes
    DiscountBase.DiscountId,
    DiscountBase.DiscountTypeId,
    DiscountBase.DeletionStateCode,
    DiscountBase.LowQuantity,
    DiscountBase.HighQuantity,
    DiscountBase.Percentage,
    DiscountBase.Amount,
    DiscountBase.StatusCode,
    DiscountBase.CreatedOn,
    DiscountBase.CreatedBy,
    DiscountBase.ModifiedBy,
    DiscountBase.ModifiedOn,
    DiscountBase.VersionNumber,
    DiscountBase.OverriddenCreatedOn,
    DiscountBase.TransactionCurrencyId,
    DiscountBase.ExchangeRate,
    DiscountBase.ImportSequenceNumber,
    DiscountBase.Amount_Base
from DiscountBase
    left join DiscountTypeBase discount_type_discounts on (DiscountBase.DiscountTypeId = discount_type_discounts.DiscountTypeId)
    left join SystemUserBase lk_discountbase_createdby with(nolock) on (DiscountBase.CreatedBy = lk_discountbase_createdby.SystemUserId)
    left join SystemUserBase lk_discountbase_modifiedby with(nolock) on (DiscountBase.ModifiedBy = lk_discountbase_modifiedby.SystemUserId)
    left join TransactionCurrencyBase transactioncurrency_discount on (DiscountBase.TransactionCurrencyId = transactioncurrency_discount.TransactionCurrencyId)

/****** Object:  View [dbo].[BulkDeleteFailure]    Script Date: 04/11/2008 06:57:37 ******/




--
-- base view for BulkDeleteFailure
--
create view [dbo].[BulkDeleteFailure] (
    -- logical attributes
    BulkDeleteOperationIdDsc, 
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    ErrorDescription,
    AsyncOperationId,
    BulkDeleteFailureId,
    RegardingObjectId,
    ErrorNumber,
    OrderedQueryIndex,
    BulkDeleteOperationId,
    RegardingObjectIdYomiName,
    RegardingObjectTypeCode,
    RegardingObjectIdDsc,
    RegardingObjectIdName
) with view_metadata as 
select 
    -- logical attributes
    BulkDeleteOperation_BulkDeleteFailure.DeletionStateCode, 
    BulkDeleteOperation_BulkDeleteFailure.OwningBusinessUnit, 
    BulkDeleteOperation_BulkDeleteFailure.OwningUser, 

    -- physical attributes
    BulkDeleteFailureBase.ErrorDescription,
    BulkDeleteFailureBase.AsyncOperationId,
    BulkDeleteFailureBase.BulkDeleteFailureId,
    BulkDeleteFailureBase.RegardingObjectId,
    BulkDeleteFailureBase.ErrorNumber,
    BulkDeleteFailureBase.OrderedQueryIndex,
    BulkDeleteFailureBase.BulkDeleteOperationId,
    BulkDeleteFailureBase.RegardingObjectIdYomiName,
    BulkDeleteFailureBase.RegardingObjectTypeCode,
    BulkDeleteFailureBase.RegardingObjectIdDsc,
    BulkDeleteFailureBase.RegardingObjectIdName
from BulkDeleteFailureBase
    left join BulkDeleteOperationBase BulkDeleteOperation_BulkDeleteFailure on (BulkDeleteFailureBase.BulkDeleteOperationId = BulkDeleteOperation_BulkDeleteFailure.BulkDeleteOperationId)

/****** Object:  View [dbo].[BulkDeleteOperation]    Script Date: 04/11/2008 06:57:37 ******/




--
-- base view for BulkDeleteOperation
--
create view [dbo].[BulkDeleteOperation] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    Name, 
    NextRun, 
    StateCode, 
    StatusCode, 

    -- physical attributes
    OwningUser,
    ModifiedOn,
    BulkDeleteOperationId,
    IsRecurring,
    ProcessingQEIndex,
    AsyncOperationId,
    UTCConversionTimeZoneCode,
    OrderedQuerySetXml,
    FailureCount,
    ModifiedBy,
    DeletionStateCode,
    CreatedBy,
    OwningBusinessUnit,
    TimeZoneRuleVersionNumber,
    SuccessCount,
    CreatedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_bulkdeleteoperationbase_createdby.DeletionStateCode, 
    lk_bulkdeleteoperationbase_createdby.FullName, 
    lk_bulkdeleteoperationbase_createdby.YomiFullName, 
    lk_bulkdeleteoperationbase_modifiedby.DeletionStateCode, 
    lk_bulkdeleteoperationbase_modifiedby.FullName, 
    lk_bulkdeleteoperationbase_modifiedby.YomiFullName, 
    AsyncOperation_BulkDeleteOperation.Name, 
    AsyncOperation_BulkDeleteOperation.PostponeUntil, 
    AsyncOperation_BulkDeleteOperation.StateCode, 
    AsyncOperation_BulkDeleteOperation.StatusCode, 

    -- physical attributes
    BulkDeleteOperationBase.OwningUser,
    BulkDeleteOperationBase.ModifiedOn,
    BulkDeleteOperationBase.BulkDeleteOperationId,
    BulkDeleteOperationBase.IsRecurring,
    BulkDeleteOperationBase.ProcessingQEIndex,
    BulkDeleteOperationBase.AsyncOperationId,
    BulkDeleteOperationBase.UTCConversionTimeZoneCode,
    BulkDeleteOperationBase.OrderedQuerySetXml,
    BulkDeleteOperationBase.FailureCount,
    BulkDeleteOperationBase.ModifiedBy,
    BulkDeleteOperationBase.DeletionStateCode,
    BulkDeleteOperationBase.CreatedBy,
    BulkDeleteOperationBase.OwningBusinessUnit,
    BulkDeleteOperationBase.TimeZoneRuleVersionNumber,
    BulkDeleteOperationBase.SuccessCount,
    BulkDeleteOperationBase.CreatedOn
from BulkDeleteOperationBase
    left join AsyncOperationBase AsyncOperation_BulkDeleteOperation on (BulkDeleteOperationBase.AsyncOperationId = AsyncOperation_BulkDeleteOperation.AsyncOperationId)
    left join SystemUserBase lk_bulkdeleteoperationbase_createdby with(nolock) on (BulkDeleteOperationBase.CreatedBy = lk_bulkdeleteoperationbase_createdby.SystemUserId)
    left join SystemUserBase lk_bulkdeleteoperationbase_modifiedby with(nolock) on (BulkDeleteOperationBase.ModifiedBy = lk_bulkdeleteoperationbase_modifiedby.SystemUserId)

/****** Object:  StoredProcedure [dbo].[p_CanMakeReadOnlyUser]    Script Date: 04/11/2008 06:34:57 ******/
SET ANSI_NULLS OFF



CREATE procedure [dbo].[p_CanMakeReadOnlyUser](@UserId uniqueidentifier)
as
begin
-- this procedure can be called when checking if a user can be made a read only user.
-- to prevent locking ourselves out there must be at least one system administrator left
-- that is not the user and is not read only himself.


set nocount on
declare @canMakeReadOnlyUser as bit
select @canMakeReadOnlyUser = 1

-- constant, deployment-invariant identifier for sysadmin role template id
declare @SysAdminRoleTemplateId uniqueidentifier
select @SysAdminRoleTemplateId = N'{627090FF-40A3-4053-8790-584EDC5BE201}'

if not exists(
select su.SystemUserId from SystemUserBase as su
join SystemUserRoles as sur on (sur.SystemUserId = su.SystemUserId and su.SystemUserId <> @UserId)
join RoleBase as rb on (sur.RoleId = rb.RoleId and rb.RoleTemplateId = @SysAdminRoleTemplateId)
where su.IsDisabled = 0 and su.AccessMode <> 2

)
begin
	select @canMakeReadOnlyUser = 0
end


select @canMakeReadOnlyUser as 'CanMakeReadOnlyUser'
end

/****** Object:  StoredProcedure [dbo].[p_CanRemoveUserFromSysAdmin]    Script Date: 04/11/2008 06:34:57 ******/




CREATE procedure [dbo].[p_CanRemoveUserFromSysAdmin](@UserId uniqueidentifier)
as
begin
-- this procedure can be called when checking for
-- 1. deleting a user
-- 2. disabling a user
-- 3. removing a user from a SysAdmin role

set nocount on
declare @canRemove as bit
select @canRemove = 1

-- constant, deployment-invariant identifier for sysadmin role template id
declare @SysAdminRoleTemplateId uniqueidentifier
select @SysAdminRoleTemplateId = N'{627090FF-40A3-4053-8790-584EDC5BE201}'

-- first see if the specified user is a member of the sys admin role
if exists(
select
rb.RoleId from RoleBase as rb
join SystemUserRoles as sur on 
	(rb.RoleId = sur.RoleId and sur.SystemUserId = @UserId and
	rb.RoleTemplateId = @SysAdminRoleTemplateId)
)
begin
	-- the user is a member of sys admin
	-- make sure the user is not the last member who is:
	-- 1. not disabled
	-- 2. has a license

	if not exists(
	select su.SystemUserId from SystemUserBase as su
	join SystemUserRoles as sur on (sur.SystemUserId = su.SystemUserId and su.SystemUserId <> @UserId)
	join RoleBase as rb on (sur.RoleId = rb.RoleId and rb.RoleTemplateId = @SysAdminRoleTemplateId)
	where su.IsDisabled = 0
	)
	begin
		select @canRemove = 0
	end
end

select @canRemove as 'CanBeRemoved'
end

/****** Object:  StoredProcedure [dbo].[p_InheritRoles]    Script Date: 04/11/2008 06:35:21 ******/




--
-- this stored procedure will inherit the roles from parentBizId into bizId
--
create procedure [dbo].[p_InheritRoles](@bizId uniqueidentifier, @parentBizId uniqueidentifier, @userid uniqueidentifier, @addsupportuserrole bit) as
begin

SET NOCOUNT ON

create table #roles(roleid uniqueidentifier primary key)

if ( @addsupportuserrole = 0)
begin
insert into #roles(roleid) select RoleId from RoleBase where BusinessUnitId = @parentBizId and DeletionStateCode = 0
end
else
begin
insert into #roles(roleid) select RoleId from RoleBase 
	where BusinessUnitId = @parentBizId and DeletionStateCode = 0 and RoleTemplateId = '{2d101bb3-5ced-4122-83f1-94d5efde4e3b}' 
end

create table #roleprivileges(
	roleid uniqueidentifier not null,
	privilegeid uniqueidentifier not null, 
	privilegedepthmask int not null
 )

declare @roleid uniqueidentifier
declare RoleCursor cursor FORWARD_ONLY READ_ONLY for select roleid from #roles
open RoleCursor
fetch next from RoleCursor into @roleid
while (@@fetch_status = 0)
begin

declare @newRoleId uniqueidentifier
select @newRoleId = newid()

--
-- create the role record
-- 
insert into RoleBase(RoleId, RoleTemplateId, OrganizationId, DeletionStateCode, Name, BusinessUnitId, CreatedOn, ModifiedOn, CreatedBy, ModifiedBy, ParentRoleId)
select @newRoleId, RoleTemplateId, OrganizationId, 0, Name, @bizId, getutcdate(), null, @userid, null, @roleid
from RoleBase where RoleId = @roleid

--
-- insert the role privileges into temptable
--
insert into #roleprivileges(roleid, privilegeid, privilegedepthmask)
select @newRoleId, rp.PrivilegeId, rp.PrivilegeDepthMask
from RolePrivileges as rp where RoleId = @roleid

fetch next from RoleCursor into @roleid

end -- RoleCursor
close RoleCursor
deallocate RoleCursor

-- set mask, if it's different from parent (optimized version dbo.fn_GetPrivilegeDepthMask )
exec p_UpdateRolePrivilegeMaskInTempTable
	
-- Copy privileges from temptable in one statement
insert into RolePrivileges(RoleId, PrivilegeId, PrivilegeDepthMask)
	select roleid, privilegeid, privilegedepthmask from #roleprivileges

drop table #roleprivileges

drop table #roles

end -- p_InheritRoles

/****** Object:  View [dbo].[EntityRelationshipLogicalView]    Script Date: 04/11/2008 06:57:45 ******/




create View [dbo].[EntityRelationshipLogicalView] as
(select e1.* from EntityRelationship e1
left outer join EntityRelationship e2 on
(e1.EntityRelationshipId = e2.EntityRelationshipId and e1.EntityRelationshipRowId <> e2.EntityRelationshipRowId and e1.CustomizationLevel = 0)
where e2.CustomizationLevel is null)

/****** Object:  View [dbo].[Site]    Script Date: 04/11/2008 06:58:32 ******/




--
-- base view for Site
--
create view [dbo].[Site] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- linked address entities
    Address1_AddressId,
    Address1_AddressTypeCode,
    Address1_Name,
    Address1_Line1,
    Address1_Line2,
    Address1_Line3,
    Address1_City,
    Address1_StateOrProvince,
    Address1_County,
    Address1_Country,
    Address1_PostOfficeBox,
    Address1_PostalCode,
    Address1_UTCOffset,
    Address1_UPSZone,
    Address1_Latitude,
    Address1_Telephone1,
    Address1_Longitude,
    Address1_ShippingMethodCode,
    Address1_Telephone2,
    Address1_Telephone3,
    Address1_Fax,

    Address2_AddressId,
    Address2_AddressTypeCode,
    Address2_Name,
    Address2_Line1,
    Address2_Line2,
    Address2_Line3,
    Address2_City,
    Address2_StateOrProvince,
    Address2_County,
    Address2_Country,
    Address2_PostOfficeBox,
    Address2_PostalCode,
    Address2_UTCOffset,
    Address2_UPSZone,
    Address2_Latitude,
    Address2_Telephone1,
    Address2_Longitude,
    Address2_ShippingMethodCode,
    Address2_Telephone2,
    Address2_Telephone3,
    Address2_Fax,

    -- physical attributes
    VersionNumber,
    OrganizationId,
    EMailAddress,
    Name,
    ModifiedOn,
    SiteId,
    ModifiedBy,
    CreatedOn,
    DeletionStateCode,
    TimeZoneCode,
    CreatedBy,
    ImportSequenceNumber,
    OverriddenCreatedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_sitebase_createdby.DeletionStateCode, 
    lk_sitebase_createdby.FullName, 
    lk_sitebase_createdby.YomiFullName, 
    lk_sitebase_modifiedby.DeletionStateCode, 
    lk_sitebase_modifiedby.FullName, 
    lk_sitebase_modifiedby.YomiFullName, 

    -- linked address entities
    XXaddress1.InternalAddressId,
    XXaddress1.AddressTypeCode,
    XXaddress1.Name,
    XXaddress1.Line1,
    XXaddress1.Line2,
    XXaddress1.Line3,
    XXaddress1.City,
    XXaddress1.StateOrProvince,
    XXaddress1.County,
    XXaddress1.Country,
    XXaddress1.PostOfficeBox,
    XXaddress1.PostalCode,
    XXaddress1.UTCOffset,
    XXaddress1.UPSZone,
    XXaddress1.Latitude,
    XXaddress1.Telephone1,
    XXaddress1.Longitude,
    XXaddress1.ShippingMethodCode,
    XXaddress1.Telephone2,
    XXaddress1.Telephone3,
    XXaddress1.Fax,

    XXaddress2.InternalAddressId,
    XXaddress2.AddressTypeCode,
    XXaddress2.Name,
    XXaddress2.Line1,
    XXaddress2.Line2,
    XXaddress2.Line3,
    XXaddress2.City,
    XXaddress2.StateOrProvince,
    XXaddress2.County,
    XXaddress2.Country,
    XXaddress2.PostOfficeBox,
    XXaddress2.PostalCode,
    XXaddress2.UTCOffset,
    XXaddress2.UPSZone,
    XXaddress2.Latitude,
    XXaddress2.Telephone1,
    XXaddress2.Longitude,
    XXaddress2.ShippingMethodCode,
    XXaddress2.Telephone2,
    XXaddress2.Telephone3,
    XXaddress2.Fax,

    -- physical attributes
    SiteBase.VersionNumber,
    SiteBase.OrganizationId,
    SiteBase.EMailAddress,
    SiteBase.Name,
    SiteBase.ModifiedOn,
    SiteBase.SiteId,
    SiteBase.ModifiedBy,
    SiteBase.CreatedOn,
    SiteBase.DeletionStateCode,
    SiteBase.TimeZoneCode,
    SiteBase.CreatedBy,
    SiteBase.ImportSequenceNumber,
    SiteBase.OverriddenCreatedOn
from SiteBase

    left join InternalAddressBase XXaddress1 on (SiteBase.SiteId = XXaddress1.ParentId and XXaddress1.AddressNumber = 1)
    left join InternalAddressBase XXaddress2 on (SiteBase.SiteId = XXaddress2.ParentId and XXaddress2.AddressNumber = 2)
    left join SystemUserBase lk_sitebase_createdby with(nolock) on (SiteBase.CreatedBy = lk_sitebase_createdby.SystemUserId)
    left join SystemUserBase lk_sitebase_modifiedby with(nolock) on (SiteBase.ModifiedBy = lk_sitebase_modifiedby.SystemUserId)

/****** Object:  StoredProcedure [dbo].[p_CleanSyncTables]    Script Date: 04/11/2008 06:34:59 ******/
SET ANSI_NULLS OFF



CREATE PROCEDURE [dbo].[p_CleanSyncTables] AS
begin
 
	declare @name nvarchar(128)
	declare @sql nvarchar(2000)
	
	declare SyncEntryCursor cursor for
	select SyncEntryTableName from Subscription where SubscriptionType = 0
	
	open SyncEntryCursor
	fetch SyncEntryCursor into @name
	
	while @@fetch_status = 0
	begin
		set @sql = 'delete from ' + @name + ' where ObjectTypeCode not in (select ObjectTypeCode from EntityView)' 
		--print @sql
		execute (@sql)
	    fetch SyncEntryCursor into @name
	end
	
	close SyncEntryCursor
	deallocate SyncEntryCursor
	
end

/****** Object:  View [dbo].[OrganizationStatistic]    Script Date: 04/11/2008 06:58:22 ******/




--
-- base view for OrganizationStatistic
--
create view [dbo].[OrganizationStatistic] (
    -- physical attributes
    Hour,
    StatisticType,
    OrganizationStatisticId,
    ServerName,
    StatisticValue
) with view_metadata as 
select 
    -- physical attributes
    OrganizationStatisticBase.Hour,
    OrganizationStatisticBase.StatisticType,
    OrganizationStatisticBase.OrganizationStatisticId,
    OrganizationStatisticBase.ServerName,
    OrganizationStatisticBase.StatisticValue
from OrganizationStatisticBase

/****** Object:  UserDefinedFunction [dbo].[fn_GetBusinessUnitFromInnerEntityOfResource]    Script Date: 04/11/2008 06:57:27 ******/
SET ANSI_NULLS OFF



create function [dbo].[fn_GetBusinessUnitFromInnerEntityOfResource]( 
	@objecttypecode int, 
	@objectid uniqueidentifier ) 
returns uniqueidentifier 
begin 
	declare @businessunitid uniqueidentifier 
	set @businessunitid = null 
	-- user 
	if ( @objecttypecode = 8 ) 
	begin 
		select @businessunitid = BusinessUnitId 
		from SystemUserBase 
		where SystemUserId = @objectid 
	end 
	if ( @objecttypecode = 4000 ) 
	begin 
		select @businessunitid = BusinessUnitId 
		from EquipmentBase 
		where EquipmentId = @objectid 
	end 
	return @businessunitid 
end

/****** Object:  UserDefinedFunction [dbo].[fn_GetMaxUserPrivilege]    Script Date: 04/11/2008 06:57:29 ******/
SET ANSI_NULLS OFF



create function [dbo].[fn_GetMaxUserPrivilege](
	@userid uniqueidentifier,
	@privilegeid 	uniqueidentifier )
returns int
begin
	declare @PrivilegeDepthMask int
	-- using ~134217728 so we remove inherited mask
	select 
	       @PrivilegeDepthMask = Max( PrivilegeDepthMask & ~134217728 )
	from 
	       RolePrivileges 
	where
	       PrivilegeId = @privilegeid
	       and
	       RoleId in
	              (select 
	                     RoleId 
	              from 
	                     SystemUserRoles 
	              where 
	                     SystemUserId=@userid)

	return @PrivilegeDepthMask
end

/****** Object:  StoredProcedure [dbo].[p_InheritParentBusinessRolePrivileges]    Script Date: 04/11/2008 06:35:21 ******/




create procedure [dbo].[p_InheritParentBusinessRolePrivileges]
	@roleid uniqueidentifier,
	@parentbizroleid uniqueidentifier
as
	set nocount on
	insert into RolePrivileges (RoleId, PrivilegeId, PrivilegeDepthMask)
	select @roleid, PrivilegeId, PrivilegeDepthMask
	from RolePrivileges
	where RoleId = @parentbizroleid

/****** Object:  StoredProcedure [dbo].[p_CopyRoleTemplatePrivileges]    Script Date: 04/11/2008 06:35:00 ******/




create procedure [dbo].[p_CopyRoleTemplatePrivileges](@roleid uniqueidentifier, @roletemplateid uniqueidentifier) as
set nocount on

insert RolePrivileges (RoleId, PrivilegeId)
select @roleid, PrivilegeId 
from RoleTemplatePrivileges
where RoleTemplateId = @roletemplateid

/****** Object:  View [dbo].[TimeZoneRule]    Script Date: 04/11/2008 06:58:34 ******/




--
-- base view for TimeZoneRule
--
create view [dbo].[TimeZoneRule] (
    -- physical attributes
    ModifiedBy,
    StandardDay,
    ModifiedOn,
    StandardMinute,
    StandardBias,
    StandardYear,
    DaylightMonth,
    StandardDayOfWeek,
    DaylightSecond,
    Bias,
    TimeZoneRuleVersionNumber,
    DaylightBias,
    StandardMonth,
    EffectiveDateTime,
    CreatedBy,
    DaylightHour,
    StandardHour,
    CreatedOn,
    DaylightYear,
    StandardSecond,
    DaylightMinute,
    TimeZoneDefinitionId,
    DaylightDayOfWeek,
    TimeZoneRuleId,
    DaylightDay,
    OrganizationId,
    DeletionStateCode,
    VersionNumber
) with view_metadata as 
select 
    -- physical attributes
    TimeZoneRuleBase.ModifiedBy,
    TimeZoneRuleBase.StandardDay,
    TimeZoneRuleBase.ModifiedOn,
    TimeZoneRuleBase.StandardMinute,
    TimeZoneRuleBase.StandardBias,
    TimeZoneRuleBase.StandardYear,
    TimeZoneRuleBase.DaylightMonth,
    TimeZoneRuleBase.StandardDayOfWeek,
    TimeZoneRuleBase.DaylightSecond,
    TimeZoneRuleBase.Bias,
    TimeZoneRuleBase.TimeZoneRuleVersionNumber,
    TimeZoneRuleBase.DaylightBias,
    TimeZoneRuleBase.StandardMonth,
    TimeZoneRuleBase.EffectiveDateTime,
    TimeZoneRuleBase.CreatedBy,
    TimeZoneRuleBase.DaylightHour,
    TimeZoneRuleBase.StandardHour,
    TimeZoneRuleBase.CreatedOn,
    TimeZoneRuleBase.DaylightYear,
    TimeZoneRuleBase.StandardSecond,
    TimeZoneRuleBase.DaylightMinute,
    TimeZoneRuleBase.TimeZoneDefinitionId,
    TimeZoneRuleBase.DaylightDayOfWeek,
    TimeZoneRuleBase.TimeZoneRuleId,
    TimeZoneRuleBase.DaylightDay,
    TimeZoneRuleBase.OrganizationId,
    TimeZoneRuleBase.DeletionStateCode,
    TimeZoneRuleBase.VersionNumber
from TimeZoneRuleBase

/****** Object:  View [dbo].[InterProcessLock]    Script Date: 04/11/2008 06:58:18 ******/




--
-- base view for InterProcessLock
--
create view [dbo].[InterProcessLock] (
    -- physical attributes
    InterProcessLockId,
    Token,
    ModifiedOn
) with view_metadata as 
select 
    -- physical attributes
    InterProcessLockBase.InterProcessLockId,
    InterProcessLockBase.Token,
    InterProcessLockBase.ModifiedOn
from InterProcessLockBase

/****** Object:  View [dbo].[SdkMessageResponse]    Script Date: 04/11/2008 06:58:31 ******/




--
-- base view for SdkMessageResponse
--
create view [dbo].[SdkMessageResponse] (
    -- physical attributes
    VersionNumber,
    SdkMessageResponseIdUnique,
    ModifiedBy,
    DeletionStateCode,
    CustomizationLevel,
    SdkMessageRequestId,
    CreatedBy,
    ModifiedOn,
    CreatedOn,
    OrganizationId,
    SdkMessageResponseId
) with view_metadata as 
select 
    -- physical attributes
     T1.VersionNumber,
     T1.SdkMessageResponseIdUnique,
     T1.ModifiedBy,
     T1.DeletionStateCode,
     T1.CustomizationLevel,
     T1.SdkMessageRequestId,
     T1.CreatedBy,
     T1.ModifiedOn,
     T1.CreatedOn,
     T1.OrganizationId,
     T1.SdkMessageResponseId
from SdkMessageResponseBase T1
         left outer join SdkMessageResponseBase T2 on (T1.SdkMessageResponseId=T2.SdkMessageResponseId
              AND T1.SdkMessageResponseIdUnique<>T2.SdkMessageResponseIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  StoredProcedure [dbo].[p_RetrieveTopArticlesByProduct]    Script Date: 04/11/2008 06:35:27 ******/
SET ANSI_NULLS OFF



CREATE PROC [dbo].[p_RetrieveTopArticlesByProduct]

            @ProductId UNIQUEIDENTIFIER

AS

BEGIN

            SET NOCOUNT ON

                SELECT TOP 10 KbArticleBase.KbArticleId as kbarticleid, KbArticleBase.Title as title, T.NumCases
                FROM KbArticleBase (NOLOCK) join
                        (SELECT KbArticleId as KbArticleId, count(*) as NumCases
                     FROM IncidentBase (NOLOCK) 
                         WHERE IncidentBase.ProductId = @ProductId and IncidentBase.KbArticleId IS NOT NULL
                         GROUP BY KbArticleId) T ON KbArticleBase.KbArticleId = T.KbArticleId
                ORDER BY NumCases DESC

END

/****** Object:  StoredProcedure [dbo].[p_RetrieveTopArticlesBySubject]    Script Date: 04/11/2008 06:35:28 ******/
SET ANSI_NULLS OFF



CREATE PROC [dbo].[p_RetrieveTopArticlesBySubject] 

            @SubjectId UNIQUEIDENTIFIER

AS

BEGIN

            SET NOCOUNT ON

                SELECT TOP 10 KbArticleBase.KbArticleId as kbarticleid, KbArticleBase.Title as title, T.NumCases
                FROM KbArticleBase (NOLOCK) join
                        (SELECT KbArticleId as KbArticleId, count(*) as NumCases
                     FROM IncidentBase (NOLOCK) 
                         WHERE IncidentBase.SubjectId = @SubjectId and IncidentBase.KbArticleId IS NOT NULL
                         GROUP BY KbArticleId) T ON KbArticleBase.KbArticleId = T.KbArticleId
                ORDER BY NumCases DESC

END

/****** Object:  View [dbo].[RoleTemplate]    Script Date: 04/11/2008 06:58:28 ******/




--
-- base view for RoleTemplate
--
create view [dbo].[RoleTemplate] (
    -- physical attributes
    RoleTemplateId,
    Name,
    Upgrading
) with view_metadata as 
select 
    -- physical attributes
    RoleTemplateBase.RoleTemplateId,
    RoleTemplateBase.Name,
    RoleTemplateBase.Upgrading
from RoleTemplateBase

/****** Object:  UserDefinedFunction [dbo].[fn_GetCutoverTime]    Script Date: 04/11/2008 06:57:28 ******/




---calculate the cutovertime of current year
create function [dbo].[fn_GetCutoverTime](
	@CurrentTime datetime, 
	@Year int, 
	@Month int,
	@Day int,
	@Hour int,
	@Minute int,
	@Second int,
	@Milliseconds int,
	@Weekday int)
returns datetime
as
begin
	declare @DateCutover datetime
	if (@Year <> 0)
		return NULL ---raiseerror here
	
	declare @WorkingTime datetime
	declare @ScratchTime datetime
	declare @BestWeekdayDate int
	declare @WorkingWeekdayNumber int
	declare @TargetWeekdayNumber int
	declare @TargetYear int
	declare @TargetMonth int
	declare @TargetWeekday int     -- range [0..6] == [Sunday..Saturday]
	
	
-- The time is an day in the month style time
--
--   the convention is the Day is 1-5 specifying 1st, 2nd... Last
--   day within the month. The day is WeekDay.
--

--        
--        Compute the target month and year
--        

        set @TargetWeekdayNumber = @Day;
        if ( @TargetWeekdayNumber > 5 or @TargetWeekdayNumber = 0 ) 
	begin
            return null ---raise error here
	end

        set @TargetWeekday = @Weekday
        set @TargetMonth = @Month
        set @TargetYear = DATEPART(yy, @CurrentTime)

        set @BestWeekdayDate = 0

	set @WorkingTime = dbo.fn_FirstDayOfMonth(@CurrentTime, @TargetMonth)
	set @WorkingTime = DATEADD(hh, @Hour, @WorkingTime)
	set @WorkingTime = DATEADD(mi, @Minute, @WorkingTime)
	set @WorkingTime = DATEADD(ss, @Second, @WorkingTime)
	set @WorkingTime = DATEADD(ms, @Milliseconds, @WorkingTime)

	set @ScratchTime = @WorkingTime
	
---	return @WorkingTime

--        
--        Compute bias to target weekday
--        
        if ( dbo.fn_NTDayOfWeek( @ScratchTime) > @TargetWeekday ) 
	begin
            set @WorkingTime = DATEADD(dd, (7-(dbo.fn_NTDayOfWeek(@ScratchTime) - @TargetWeekday)), @WorkingTime)
        end
        else if ( dbo.fn_NTDayOfWeek(@ScratchTime) < @TargetWeekday ) 
	begin
            set @WorkingTime = DATEADD(dd, @TargetWeekday - dbo.fn_NTDayOfWeek(@ScratchTime), @WorkingTime)
        end
	
---	return @WorkingTime

--        
--         We are now at the first weekday that matches our target weekday
--        

        set @BestWeekdayDate = DATEPART(dd, @WorkingTime)
        set @WorkingWeekdayNumber = 1

--        
--         Keep going one week at a time until we either pass the
--         target weekday, or we match exactly
--        
	set @ScratchTime = @WorkingTime
---	return @ScratchTime

        while ( @WorkingWeekdayNumber < @TargetWeekdayNumber ) 
	begin
            set @WorkingTime = DATEADD(dd, 7, @WorkingTime)
	    if (DATEPART(mm, @WorkingTime) <> DATEPART(mm, @ScratchTime))
		break;
	    set @ScratchTime = @WorkingTime
            set @WorkingWeekdayNumber = @WorkingWeekdayNumber + 1
        end

        return @ScratchTime  
end

/****** Object:  View [dbo].[EntityRelationshipRelationshipsLogicalView]    Script Date: 04/11/2008 06:57:45 ******/




create View [dbo].[EntityRelationshipRelationshipsLogicalView] as
(select e1.* from EntityRelationshipRelationships e1
left outer join EntityRelationshipRelationships e2 on
(e1.EntityRelationshipRelationshipsId = e2.EntityRelationshipRelationshipsId and e1.EntityRelationshipRelationshipsRowId <> e2.EntityRelationshipRelationshipsRowId and e1.CustomizationLevel = 0)
where e2.CustomizationLevel is null)

/****** Object:  View [dbo].[TransformationParameterMapping]    Script Date: 04/11/2008 06:58:35 ******/




--
-- base view for TransformationParameterMapping
--
create view [dbo].[TransformationParameterMapping] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    TransformationMappingIdDsc, 
    TransformationMappingIdName, 

    -- physical attributes
    ParameterArrayIndex,
    ParameterTypeCode,
    TransformationParameterMappingId,
    TransformationMappingId,
    CreatedOn,
    CreatedBy,
    DeletionStateCode,
    DataTypeCode,
    Data,
    ModifiedOn,
    ModifiedBy,
    ParameterSequence
) with view_metadata as 
select 
    -- logical attributes
    lk_transformationparametermapping_createdby.DeletionStateCode, 
    lk_transformationparametermapping_createdby.FullName, 
    lk_transformationparametermapping_createdby.YomiFullName, 
    lk_transformationparametermapping_modifiedby.DeletionStateCode, 
    lk_transformationparametermapping_modifiedby.FullName, 
    lk_transformationparametermapping_modifiedby.YomiFullName, 
    TransformationParameterMapping_TransformationMapping.DeletionStateCode, 
    TransformationParameterMapping_TransformationMapping.TransformationTypeName, 

    -- physical attributes
    TransformationParameterMappingBase.ParameterArrayIndex,
    TransformationParameterMappingBase.ParameterTypeCode,
    TransformationParameterMappingBase.TransformationParameterMappingId,
    TransformationParameterMappingBase.TransformationMappingId,
    TransformationParameterMappingBase.CreatedOn,
    TransformationParameterMappingBase.CreatedBy,
    TransformationParameterMappingBase.DeletionStateCode,
    TransformationParameterMappingBase.DataTypeCode,
    TransformationParameterMappingBase.Data,
    TransformationParameterMappingBase.ModifiedOn,
    TransformationParameterMappingBase.ModifiedBy,
    TransformationParameterMappingBase.ParameterSequence
from TransformationParameterMappingBase
    left join SystemUserBase lk_transformationparametermapping_createdby with(nolock) on (TransformationParameterMappingBase.CreatedBy = lk_transformationparametermapping_createdby.SystemUserId)
    left join SystemUserBase lk_transformationparametermapping_modifiedby with(nolock) on (TransformationParameterMappingBase.ModifiedBy = lk_transformationparametermapping_modifiedby.SystemUserId)
    left join TransformationMappingBase TransformationParameterMapping_TransformationMapping on (TransformationParameterMappingBase.TransformationMappingId = TransformationParameterMapping_TransformationMapping.TransformationMappingId)

/****** Object:  View [dbo].[SdkMessageFilter]    Script Date: 04/11/2008 06:58:30 ******/




--
-- base view for SdkMessageFilter
--
create view [dbo].[SdkMessageFilter] (
    -- physical attributes
    CreatedBy,
    SdkMessageFilterId,
    OrganizationId,
    PrimaryObjectTypeCode,
    VersionNumber,
    ModifiedBy,
    CustomizationLevel,
    SecondaryObjectTypeCode,
    SdkMessageFilterIdUnique,
    ModifiedOn,
    IsCustomProcessingStepAllowed,
    DeletionStateCode,
    CreatedOn,
    Availability,
    SdkMessageId
) with view_metadata as 
select 
    -- physical attributes
     T1.CreatedBy,
     T1.SdkMessageFilterId,
     T1.OrganizationId,
     T1.PrimaryObjectTypeCode,
     T1.VersionNumber,
     T1.ModifiedBy,
     T1.CustomizationLevel,
     T1.SecondaryObjectTypeCode,
     T1.SdkMessageFilterIdUnique,
     T1.ModifiedOn,
     T1.IsCustomProcessingStepAllowed,
     T1.DeletionStateCode,
     T1.CreatedOn,
     T1.Availability,
     T1.SdkMessageId
from SdkMessageFilterBase T1
         left outer join SdkMessageFilterBase T2 on (T1.SdkMessageFilterId=T2.SdkMessageFilterId
              AND T1.SdkMessageFilterIdUnique<>T2.SdkMessageFilterIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  View [dbo].[InternalAddress]    Script Date: 04/11/2008 06:58:17 ******/




--
-- base view for InternalAddress
--
create view [dbo].[InternalAddress] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- physical attributes
    ParentId,
    InternalAddressId,
    DeletionStateCode,
    AddressNumber,
    ObjectTypeCode,
    AddressTypeCode,
    Name,
    Line1,
    Line2,
    Line3,
    City,
    StateOrProvince,
    County,
    Country,
    PostOfficeBox,
    PostalCode,
    UTCOffset,
    UPSZone,
    Latitude,
    Telephone1,
    Longitude,
    ShippingMethodCode,
    Telephone2,
    Telephone3,
    VersionNumber,
    Fax,
    CreatedBy,
    CreatedOn,
    ModifiedBy,
    ModifiedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_internaladdressbase_createdby.DeletionStateCode, 
    lk_internaladdressbase_createdby.FullName, 
    lk_internaladdressbase_createdby.YomiFullName, 
    lk_internaladdressbase_modifiedby.DeletionStateCode, 
    lk_internaladdressbase_modifiedby.FullName, 
    lk_internaladdressbase_modifiedby.YomiFullName, 

    -- physical attributes
    InternalAddressBase.ParentId,
    InternalAddressBase.InternalAddressId,
    InternalAddressBase.DeletionStateCode,
    InternalAddressBase.AddressNumber,
    InternalAddressBase.ObjectTypeCode,
    InternalAddressBase.AddressTypeCode,
    InternalAddressBase.Name,
    InternalAddressBase.Line1,
    InternalAddressBase.Line2,
    InternalAddressBase.Line3,
    InternalAddressBase.City,
    InternalAddressBase.StateOrProvince,
    InternalAddressBase.County,
    InternalAddressBase.Country,
    InternalAddressBase.PostOfficeBox,
    InternalAddressBase.PostalCode,
    InternalAddressBase.UTCOffset,
    InternalAddressBase.UPSZone,
    InternalAddressBase.Latitude,
    InternalAddressBase.Telephone1,
    InternalAddressBase.Longitude,
    InternalAddressBase.ShippingMethodCode,
    InternalAddressBase.Telephone2,
    InternalAddressBase.Telephone3,
    InternalAddressBase.VersionNumber,
    InternalAddressBase.Fax,
    InternalAddressBase.CreatedBy,
    InternalAddressBase.CreatedOn,
    InternalAddressBase.ModifiedBy,
    InternalAddressBase.ModifiedOn
from InternalAddressBase
    left join SystemUserBase lk_internaladdressbase_createdby with(nolock) on (InternalAddressBase.CreatedBy = lk_internaladdressbase_createdby.SystemUserId)
    left join SystemUserBase lk_internaladdressbase_modifiedby with(nolock) on (InternalAddressBase.ModifiedBy = lk_internaladdressbase_modifiedby.SystemUserId)

/****** Object:  View [dbo].[SalesLiteratureItem]    Script Date: 04/11/2008 06:58:29 ******/




--
-- base view for SalesLiteratureItem
--
create view [dbo].[SalesLiteratureItem] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationId, 

    -- physical attributes
    SalesLiteratureItemId,
    SalesLiteratureId,
    DeletionStateCode,
    IsCustomerViewable,
    AttachedDocumentUrl,
    Title,
    MimeType,
    AuthorName,
    Abstract,
    DocumentBody,
    CreatedOn,
    KeyWords,
    FileName,
    FileTypeCode,
    FileSize,
    CreatedBy,
    ModifiedBy,
    ModifiedOn,
    VersionNumber,
    OverriddenCreatedOn,
    ImportSequenceNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_salesliteratureitembase_createdby.DeletionStateCode, 
    lk_salesliteratureitembase_createdby.FullName, 
    lk_salesliteratureitembase_createdby.YomiFullName, 
    lk_salesliteratureitembase_modifiedby.DeletionStateCode, 
    lk_salesliteratureitembase_modifiedby.FullName, 
    lk_salesliteratureitembase_modifiedby.YomiFullName, 
    sales_literature_items.OrganizationId, 

    -- physical attributes
    SalesLiteratureItemBase.SalesLiteratureItemId,
    SalesLiteratureItemBase.SalesLiteratureId,
    SalesLiteratureItemBase.DeletionStateCode,
    SalesLiteratureItemBase.IsCustomerViewable,
    SalesLiteratureItemBase.AttachedDocumentUrl,
    SalesLiteratureItemBase.Title,
    SalesLiteratureItemBase.MimeType,
    SalesLiteratureItemBase.AuthorName,
    SalesLiteratureItemBase.Abstract,
    SalesLiteratureItemBase.DocumentBody,
    SalesLiteratureItemBase.CreatedOn,
    SalesLiteratureItemBase.KeyWords,
    SalesLiteratureItemBase.FileName,
    SalesLiteratureItemBase.FileTypeCode,
    SalesLiteratureItemBase.FileSize,
    SalesLiteratureItemBase.CreatedBy,
    SalesLiteratureItemBase.ModifiedBy,
    SalesLiteratureItemBase.ModifiedOn,
    SalesLiteratureItemBase.VersionNumber,
    SalesLiteratureItemBase.OverriddenCreatedOn,
    SalesLiteratureItemBase.ImportSequenceNumber
from SalesLiteratureItemBase
    left join SystemUserBase lk_salesliteratureitembase_createdby with(nolock) on (SalesLiteratureItemBase.CreatedBy = lk_salesliteratureitembase_createdby.SystemUserId)
    left join SystemUserBase lk_salesliteratureitembase_modifiedby with(nolock) on (SalesLiteratureItemBase.ModifiedBy = lk_salesliteratureitembase_modifiedby.SystemUserId)
    left join SalesLiteratureBase sales_literature_items on (SalesLiteratureItemBase.SalesLiteratureId = sales_literature_items.SalesLiteratureId)

/****** Object:  View [dbo].[EntityRelationshipRoleLogicalView]    Script Date: 04/11/2008 06:57:45 ******/




create View [dbo].[EntityRelationshipRoleLogicalView] as
(select e1.* from EntityRelationshipRole e1
left outer join EntityRelationshipRole e2 on
(e1.EntityRelationshipRoleId = e2.EntityRelationshipRoleId and e1.EntityRelationshipRoleRowId <> e2.EntityRelationshipRoleRowId and e1.CustomizationLevel = 0)
where e2.CustomizationLevel is null)

/****** Object:  View [dbo].[SdkMessagePair]    Script Date: 04/11/2008 06:58:30 ******/




--
-- base view for SdkMessagePair
--
create view [dbo].[SdkMessagePair] (
    -- physical attributes
    ModifiedBy,
    DeletionStateCode,
    SdkMessagePairId,
    CustomizationLevel,
    CreatedOn,
    SdkMessagePairIdUnique,
    Endpoint,
    OrganizationId,
    CreatedBy,
    ModifiedOn,
    VersionNumber,
    Namespace,
    SdkMessageId
) with view_metadata as 
select 
    -- physical attributes
     T1.ModifiedBy,
     T1.DeletionStateCode,
     T1.SdkMessagePairId,
     T1.CustomizationLevel,
     T1.CreatedOn,
     T1.SdkMessagePairIdUnique,
     T1.Endpoint,
     T1.OrganizationId,
     T1.CreatedBy,
     T1.ModifiedOn,
     T1.VersionNumber,
     T1.Namespace,
     T1.SdkMessageId
from SdkMessagePairBase T1
         left outer join SdkMessagePairBase T2 on (T1.SdkMessagePairId=T2.SdkMessagePairId
              AND T1.SdkMessagePairIdUnique<>T2.SdkMessagePairIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  View [dbo].[KbArticleComment]    Script Date: 04/11/2008 06:58:19 ******/




--
-- base view for KbArticleComment
--
create view [dbo].[KbArticleComment] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    OrganizationId, 

    -- physical attributes
    KbArticleCommentId,
    KbArticleId,
    Title,
    CommentText,
    CreatedOn,
    CreatedBy,
    ModifiedOn,
    ModifiedBy,
    VersionNumber
) with view_metadata as 
select 
    -- logical attributes
    lk_kbarticlecommentbase_createdby.DeletionStateCode, 
    lk_kbarticlecommentbase_createdby.FullName, 
    lk_kbarticlecommentbase_createdby.YomiFullName, 
    lk_kbarticlecommentbase_modifiedby.DeletionStateCode, 
    lk_kbarticlecommentbase_modifiedby.FullName, 
    lk_kbarticlecommentbase_modifiedby.YomiFullName, 
    kbarticle_comments.OrganizationId, 

    -- physical attributes
    KbArticleCommentBase.KbArticleCommentId,
    KbArticleCommentBase.KbArticleId,
    KbArticleCommentBase.Title,
    KbArticleCommentBase.CommentText,
    KbArticleCommentBase.CreatedOn,
    KbArticleCommentBase.CreatedBy,
    KbArticleCommentBase.ModifiedOn,
    KbArticleCommentBase.ModifiedBy,
    KbArticleCommentBase.VersionNumber
from KbArticleCommentBase
    left join KbArticleBase kbarticle_comments on (KbArticleCommentBase.KbArticleId = kbarticle_comments.KbArticleId)
    left join SystemUserBase lk_kbarticlecommentbase_createdby with(nolock) on (KbArticleCommentBase.CreatedBy = lk_kbarticlecommentbase_createdby.SystemUserId)
    left join SystemUserBase lk_kbarticlecommentbase_modifiedby with(nolock) on (KbArticleCommentBase.ModifiedBy = lk_kbarticlecommentbase_modifiedby.SystemUserId)

/****** Object:  UserDefinedFunction [dbo].[fn_AppendAccessCheck]    Script Date: 04/11/2008 06:57:17 ******/




create function [dbo].[fn_AppendAccessCheck](
	@ObjectTypeCode int, 
	@EntityName nvarchar(300), 
	@OwnershipTypeMask int, 
	@PKAttributeName nvarchar(100), 
	@bFirstWhereCondition bit) 
returns nvarchar(4000)
as
begin
	declare @result nvarchar(4000)
	set @result = ''
	
	if (@bFirstWhereCondition = 1)
			set @result = '    where' + CHAR(13) + CHAR(10)
	else
			set @result = '    and' + CHAR(13) + CHAR(10)
			
	set @result = @result + '    ('  + CHAR(13) + CHAR(10)

	if ( @OwnershipTypeMask = 1) -- user owned
	begin
		set @result = @result + '    -- privilege check' + CHAR(13) + CHAR(10)
		set @result = @result + '    pdm.PrivilegeDepthMask is not null and' + CHAR(13) + CHAR(10)
		set @result = @result + '    (' + CHAR(13) + CHAR(10)
	
		set @result = @result + '    -- object owned by the user' + CHAR(13) + CHAR(10)
		set @result = @result + '    --'+ CHAR(13) + CHAR(10)
		set @result = @result + '    ' + @EntityName + '.OwningUser = u.SystemUserId' + CHAR(13) + CHAR(10) 
		
		set @result = @result + '    -- role based access' + CHAR(13) + CHAR(10)
		set @result = @result + '    or ' + CHAR(13) + CHAR(10)
		set @result = @result + '    ' + dbo.fn_AppendRoleBasedAccessCheck(@ObjectTypeCode, @EntityName, @OwnershipTypeMask) + CHAR(13) + CHAR(10)
	
		set @result = @result + '    -- object shared to the user' + CHAR(13) + CHAR(10) 
		set @result = @result + '    or ' + CHAR(13) + CHAR(10)
		set @result = @result + '    ' + @EntityName + '.' + @PKAttributeName + ' in ' + CHAR(13) + CHAR(10)
		set @result = @result + '    (' + CHAR(13) + CHAR(10)
		set @result = @result + '        select  POA.ObjectId from PrincipalObjectAccess POA '+ CHAR(13) + CHAR(10)
		set @result = @result + '        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId' + CHAR(13) + CHAR(10)
		set @result = @result + '            where sup.SystemUserId = u.SystemUserId and' + + CHAR(13) + CHAR(10)

		if (@ObjectTypeCode = 1071)
			set @result = @result + '                (POA.ObjectTypeCode = 1 or POA.ObjectTypeCode = 2) AND ' + CHAR(13) + CHAR(10)
		else
			set @result = @result + '                POA.ObjectTypeCode = ' + cast(@ObjectTypeCode as nvarchar) + ' AND ' + CHAR(13) + CHAR(10)

		set @result = @result + '                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1' + CHAR(13) + CHAR(10)
		set @result = @result + '    )' + CHAR(13) + CHAR(10)
		set @result = @result + '    )' + CHAR(13) + CHAR(10)
	end
	
	else if (@OwnershipTypeMask = 4) -- business owned
	begin
		-- privilege check happens implicitly here, no need to add the clause explicitly
		set @result = @result + '    ' + dbo.fn_AppendRoleBasedAccessCheck(@ObjectTypeCode, @EntityName, @OwnershipTypeMask) + CHAR(13) + CHAR(10)
	end
	
	else if(@OwnershipTypeMask = 8) -- organization owned
	begin
		set @result = @result + '    -- privilege check' + CHAR(13) + CHAR(10)
		set @result = @result + '    pdm.PrivilegeDepthMask is not null and' + CHAR(13) + CHAR(10)
		set @result = @result + '    ' + @EntityName + '.OrganizationId = u.OrganizationId' + CHAR(13) + CHAR(10)
	end
	
	set @result = @result + '    )'  + CHAR(13) + CHAR(10)

	return @result
end

/****** Object:  View [dbo].[SdkMessageProcessingStep]    Script Date: 04/11/2008 06:58:30 ******/




--
-- base view for SdkMessageProcessingStep
--
create view [dbo].[SdkMessageProcessingStep] (
    -- physical attributes
    CreatedOn,
    Configuration,
    SupportedDeployment,
    PluginTypeId,
    Rank,
    SdkMessageId,
    ModifiedOn,
    SdkMessageProcessingStepId,
    Stage,
    CreatedBy,
    OrganizationId,
    SdkMessageProcessingStepIdUnique,
    FilteringAttributes,
    CustomizationLevel,
    ModifiedBy,
    StateCode,
    DeletionStateCode,
    SdkMessageProcessingStepSecureConfigId,
    Description,
    VersionNumber,
    Mode,
    SdkMessageFilterId,
    StatusCode,
    ImpersonatingUserId,
    InvocationSource
) with view_metadata as 
select 
    -- physical attributes
     T1.CreatedOn,
     T1.Configuration,
     T1.SupportedDeployment,
     T1.PluginTypeId,
     T1.Rank,
     T1.SdkMessageId,
     T1.ModifiedOn,
     T1.SdkMessageProcessingStepId,
     T1.Stage,
     T1.CreatedBy,
     T1.OrganizationId,
     T1.SdkMessageProcessingStepIdUnique,
     T1.FilteringAttributes,
     T1.CustomizationLevel,
     T1.ModifiedBy,
     T1.StateCode,
     T1.DeletionStateCode,
     T1.SdkMessageProcessingStepSecureConfigId,
     T1.Description,
     T1.VersionNumber,
     T1.Mode,
     T1.SdkMessageFilterId,
     T1.StatusCode,
     T1.ImpersonatingUserId,
     T1.InvocationSource
from SdkMessageProcessingStepBase T1
         left outer join SdkMessageProcessingStepBase T2 on (T1.SdkMessageProcessingStepId=T2.SdkMessageProcessingStepId
              AND T1.SdkMessageProcessingStepIdUnique<>T2.SdkMessageProcessingStepIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  StoredProcedure [dbo].[p_CreateBusinessClosureCalendar]    Script Date: 04/11/2008 06:35:00 ******/




CREATE PROCEDURE [dbo].[p_CreateBusinessClosureCalendar](@calendarId uniqueidentifier, @organizationId uniqueidentifier, @rootBusinessUnitId uniqueidentifier, @systemUserId uniqueidentifier) as
BEGIN

	set nocount on

	INSERT INTO CalendarBase(CalendarId, BusinessUnitId, DeletionStateCode, CreatedBy, ModifiedBy, Description, Name, OrganizationId, IsShared)
	VALUES(@calendarId, @rootBusinessUnitId, 0, @systemUserId, @systemUserId, 'Calendar for Business Closure', 'Business Closure Calendar', @organizationId, 1)

	SELECT @calendarId

END

/****** Object:  View [dbo].[SdkMessage]    Script Date: 04/11/2008 06:58:30 ******/




--
-- base view for SdkMessage
--
create view [dbo].[SdkMessage] (
    -- physical attributes
    OrganizationId,
    IsPrivate,
    SdkMessageId,
    CreatedBy,
    CategoryName,
    CustomizationLevel,
    ModifiedOn,
    ModifiedBy,
    SdkMessageIdUnique,
    Expand,
    AutoTransact,
    VersionNumber,
    CreatedOn,
    Availability,
    Name,
    DeletionStateCode,
    Template
) with view_metadata as 
select 
    -- physical attributes
     T1.OrganizationId,
     T1.IsPrivate,
     T1.SdkMessageId,
     T1.CreatedBy,
     T1.CategoryName,
     T1.CustomizationLevel,
     T1.ModifiedOn,
     T1.ModifiedBy,
     T1.SdkMessageIdUnique,
     T1.Expand,
     T1.AutoTransact,
     T1.VersionNumber,
     T1.CreatedOn,
     T1.Availability,
     T1.Name,
     T1.DeletionStateCode,
     T1.Template
from SdkMessageBase T1
         left outer join SdkMessageBase T2 on (T1.SdkMessageId=T2.SdkMessageId
              AND T1.SdkMessageIdUnique<>T2.SdkMessageIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  View [dbo].[LeadAddress]    Script Date: 04/11/2008 06:58:19 ******/




--
-- base view for LeadAddress
--
create view [dbo].[LeadAddress] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    ParentIdDsc, 
    ParentIdName, 
    ParentIdYomiName, 

    -- physical attributes
    ParentId,
    LeadAddressId,
    AddressNumber,
    AddressTypeCode,
    Name,
    Line1,
    Line2,
    Line3,
    City,
    StateOrProvince,
    County,
    Country,
    PostOfficeBox,
    PostalCode,
    UTCOffset,
    UPSZone,
    Latitude,
    Telephone1,
    Longitude,
    ShippingMethodCode,
    Telephone2,
    Telephone3,
    Fax,
    VersionNumber,
    CreatedBy,
    CreatedOn,
    ModifiedBy,
    ModifiedOn
) with view_metadata as 
select 
    -- logical attributes
    lk_leadaddressbase_createdby.DeletionStateCode, 
    lk_leadaddressbase_createdby.FullName, 
    lk_leadaddressbase_createdby.YomiFullName, 
    lk_leadaddressbase_modifiedby.DeletionStateCode, 
    lk_leadaddressbase_modifiedby.FullName, 
    lk_leadaddressbase_modifiedby.YomiFullName, 
    lead_addresses.DeletionStateCode, 
    lead_addresses.FullName, 
    lead_addresses.YomiFullName, 

    -- physical attributes
    LeadAddressBase.ParentId,
    LeadAddressBase.LeadAddressId,
    LeadAddressBase.AddressNumber,
    LeadAddressBase.AddressTypeCode,
    LeadAddressBase.Name,
    LeadAddressBase.Line1,
    LeadAddressBase.Line2,
    LeadAddressBase.Line3,
    LeadAddressBase.City,
    LeadAddressBase.StateOrProvince,
    LeadAddressBase.County,
    LeadAddressBase.Country,
    LeadAddressBase.PostOfficeBox,
    LeadAddressBase.PostalCode,
    LeadAddressBase.UTCOffset,
    LeadAddressBase.UPSZone,
    LeadAddressBase.Latitude,
    LeadAddressBase.Telephone1,
    LeadAddressBase.Longitude,
    LeadAddressBase.ShippingMethodCode,
    LeadAddressBase.Telephone2,
    LeadAddressBase.Telephone3,
    LeadAddressBase.Fax,
    LeadAddressBase.VersionNumber,
    LeadAddressBase.CreatedBy,
    LeadAddressBase.CreatedOn,
    LeadAddressBase.ModifiedBy,
    LeadAddressBase.ModifiedOn
from LeadAddressBase
    left join LeadBase lead_addresses on (LeadAddressBase.ParentId = lead_addresses.LeadId)
    left join SystemUserBase lk_leadaddressbase_createdby with(nolock) on (LeadAddressBase.CreatedBy = lk_leadaddressbase_createdby.SystemUserId)
    left join SystemUserBase lk_leadaddressbase_modifiedby with(nolock) on (LeadAddressBase.ModifiedBy = lk_leadaddressbase_modifiedby.SystemUserId)

/****** Object:  View [dbo].[DuplicateRecord]    Script Date: 04/11/2008 06:57:43 ******/




--
-- base view for DuplicateRecord
--
create view [dbo].[DuplicateRecord] (
    -- logical attributes
    OwningBusinessUnit, 
    OwningUser, 

    -- physical attributes
    DuplicateRuleId,
    BaseRecordId,
    CreatedOn,
    DeletionStateCode,
    DuplicateId,
    AsyncOperationId,
    DuplicateRecordId,
    BaseRecordIdDsc,
    BaseRecordIdTypeCode,
    BaseRecordIdName,
    DuplicateRecordIdName,
    DuplicateRecordIdYomiName,
    BaseRecordIdYomiName,
    DuplicateRecordIdDsc,
    DuplicateRecordIdTypeCode
) with view_metadata as 
select 
    -- logical attributes
    AsyncOperation_DuplicateBaseRecord.OwningBusinessUnit, 
    AsyncOperation_DuplicateBaseRecord.OwningUser, 

    -- physical attributes
    DuplicateRecordBase.DuplicateRuleId,
    DuplicateRecordBase.BaseRecordId,
    DuplicateRecordBase.CreatedOn,
    DuplicateRecordBase.DeletionStateCode,
    DuplicateRecordBase.DuplicateId,
    DuplicateRecordBase.AsyncOperationId,
    DuplicateRecordBase.DuplicateRecordId,
    DuplicateRecordBase.BaseRecordIdDsc,
    DuplicateRecordBase.BaseRecordIdTypeCode,
    DuplicateRecordBase.BaseRecordIdName,
    DuplicateRecordBase.DuplicateRecordIdName,
    DuplicateRecordBase.DuplicateRecordIdYomiName,
    DuplicateRecordBase.BaseRecordIdYomiName,
    DuplicateRecordBase.DuplicateRecordIdDsc,
    DuplicateRecordBase.DuplicateRecordIdTypeCode
from DuplicateRecordBase
    left join AsyncOperationBase AsyncOperation_DuplicateBaseRecord on (DuplicateRecordBase.AsyncOperationId = AsyncOperation_DuplicateBaseRecord.AsyncOperationId)

/****** Object:  View [dbo].[FilteredLeadCompetitors]    Script Date: 04/11/2008 06:57:59 ******/




--
-- report view for leadcompetitors
--
create view [dbo].[FilteredLeadCompetitors] (
    competitorid,
    leadcompetitorid,
    leadid
) with view_metadata as 
select 
    LeadCompetitors.CompetitorId,
    LeadCompetitors.LeadCompetitorId,
    LeadCompetitors.LeadId
from LeadCompetitors

/****** Object:  View [dbo].[List]    Script Date: 04/11/2008 06:58:20 ******/




--
-- base view for List
--
create view [dbo].[List] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 
    TransactionCurrencyIdDsc, 
    TransactionCurrencyIdName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    CreatedOn,
    ModifiedOn,
    MemberCount,
    ListName,
    LastUsedOn,
    ListId,
    StateCode,
    StatusCode,
    OwningBusinessUnit,
    ModifiedBy,
    DeletionStateCode,
    DoNotSendOnOptOut,
    Description,
    Purpose,
    Cost,
    IgnoreInactiveListMembers,
    MemberType,
    Source,
    CreatedFromCode,
    VersionNumber,
    LockStatus,
    CreatedBy,
    OwningUser,
    TransactionCurrencyId,
    ImportSequenceNumber,
    TimeZoneRuleVersionNumber,
    UTCConversionTimeZoneCode,
    ExchangeRate,
    OverriddenCreatedOn,
    Cost_Base
) with view_metadata as 
select 
    -- logical attributes
    lk_list_createdby.DeletionStateCode, 
    lk_list_createdby.FullName, 
    lk_list_createdby.YomiFullName, 
    lk_list_modifiedby.DeletionStateCode, 
    lk_list_modifiedby.FullName, 
    lk_list_modifiedby.YomiFullName, 
    transactioncurrency_list.DeletionStateCode, 
    transactioncurrency_list.CurrencyName, 

    -- ownership entries
    OwnerId   = ListBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when ListBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    ListBase.CreatedOn,
    ListBase.ModifiedOn,
    ListBase.MemberCount,
    ListBase.ListName,
    ListBase.LastUsedOn,
    ListBase.ListId,
    ListBase.StateCode,
    ListBase.StatusCode,
    ListBase.OwningBusinessUnit,
    ListBase.ModifiedBy,
    ListBase.DeletionStateCode,
    ListBase.DoNotSendOnOptOut,
    ListBase.Description,
    ListBase.Purpose,
    ListBase.Cost,
    ListBase.IgnoreInactiveListMembers,
    ListBase.MemberType,
    ListBase.Source,
    ListBase.CreatedFromCode,
    ListBase.VersionNumber,
    ListBase.LockStatus,
    ListBase.CreatedBy,
    ListBase.OwningUser,
    ListBase.TransactionCurrencyId,
    ListBase.ImportSequenceNumber,
    ListBase.TimeZoneRuleVersionNumber,
    ListBase.UTCConversionTimeZoneCode,
    ListBase.ExchangeRate,
    ListBase.OverriddenCreatedOn,
    ListBase.Cost_Base
from ListBase
    left join SystemUserBase lk_list_createdby with(nolock) on (ListBase.CreatedBy = lk_list_createdby.SystemUserId)
    left join SystemUserBase lk_list_modifiedby with(nolock) on (ListBase.ModifiedBy = lk_list_modifiedby.SystemUserId)
    left join TransactionCurrencyBase transactioncurrency_list on (ListBase.TransactionCurrencyId = transactioncurrency_list.TransactionCurrencyId)
    left join SystemUserBase XXowninguser with(nolock) on (ListBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  StoredProcedure [dbo].[p_ma_incmembercount]    Script Date: 04/11/2008 06:35:23 ******/




create procedure 
[dbo].[p_ma_incmembercount]
(
     @guid_list as uniqueidentifier
    ,@i_count as int 
    ,@guid_caller as uniqueidentifier
)
as
begin 
    declare @message nvarchar(2000)
    set nocount on

    update ListBase
    set MemberCount = MemberCount + @i_count, ModifiedBy = @guid_caller, ModifiedOn = GETUTCDATE()
    where ListId = @guid_list

    if (@@rowcount != 1)
    begin
        set @message = N'ERROR: ListEntity ' + convert(varchar(50),@guid_list) + N' was not found'
        RAISERROR ( 1074008074, 16, 1, @message ) WITH NOWAIT, SETERROR
        return 
    end

    return
end

/****** Object:  StoredProcedure [dbo].[p_ma_updatelastusedon]    Script Date: 04/11/2008 06:35:24 ******/




create procedure 
[dbo].[p_ma_updatelastusedon]
(
     @guid_list as uniqueidentifier,
     @guid_caller as uniqueidentifier
)
as
begin 
    declare @message nvarchar(2000)
    set nocount on

    update ListBase
    set LastUsedOn = GETUTCDATE(), ModifiedOn=GETUTCDATE(), ModifiedBy=@guid_caller

    where ListId = @guid_list

    if (@@rowcount != 1)
    begin
        set @message = N'ERROR: ListEntity ' + convert(varchar(50),@guid_list) + N' was not found'
        RAISERROR ( 1074008074, 16, 1, @message ) WITH NOWAIT, SETERROR
        return 
    end

    return
end

/****** Object:  View [dbo].[SdkMessageRequestInput]    Script Date: 04/11/2008 06:58:31 ******/




--
-- base view for SdkMessageRequestInput
--
create view [dbo].[SdkMessageRequestInput] (
    -- physical attributes
    Name,
    CreatedOn,
    SdkMessageRequestInputIdUnique,
    VersionNumber,
    DeletionStateCode,
    OrganizationId,
    ModifiedOn,
    SdkMessageRequestId,
    CustomizationLevel,
    SdkMessageRequestInputId,
    CreatedBy,
    ModifiedBy
) with view_metadata as 
select 
    -- physical attributes
     T1.Name,
     T1.CreatedOn,
     T1.SdkMessageRequestInputIdUnique,
     T1.VersionNumber,
     T1.DeletionStateCode,
     T1.OrganizationId,
     T1.ModifiedOn,
     T1.SdkMessageRequestId,
     T1.CustomizationLevel,
     T1.SdkMessageRequestInputId,
     T1.CreatedBy,
     T1.ModifiedBy
from SdkMessageRequestInputBase T1
         left outer join SdkMessageRequestInputBase T2 on (T1.SdkMessageRequestInputId=T2.SdkMessageRequestInputId
              AND T1.SdkMessageRequestInputIdUnique<>T2.SdkMessageRequestInputIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  View [dbo].[FilteredServiceContractContacts]    Script Date: 04/11/2008 06:58:11 ******/




--
-- report view for servicecontractcontacts
--
create view [dbo].[FilteredServiceContractContacts] (
    contactid,
    contractid,
    servicecontractcontactid,
    servicelevel
) with view_metadata as 
select 
    ServiceContractContacts.ContactId,
    ServiceContractContacts.ContractId,
    ServiceContractContacts.ServiceContractContactId,
    ServiceContractContacts.ServiceLevel
from ServiceContractContacts

/****** Object:  View [dbo].[FilteredLeadProduct]    Script Date: 04/11/2008 06:57:59 ******/




--
-- report view for leadproduct
--
create view [dbo].[FilteredLeadProduct] (
    leadid,
    leadproductid,
    productid
) with view_metadata as 
select 
    LeadProduct.LeadId,
    LeadProduct.LeadProductId,
    LeadProduct.ProductId
from LeadProduct

/****** Object:  StoredProcedure [dbo].[p_GetStatusValues]    Script Date: 04/11/2008 06:35:17 ******/




create procedure [dbo].[p_GetStatusValues](
	@otype int, 
	@state int, 
	@langid int,
	@orgid uniqueidentifier 
) 
as 
begin

set nocount on

select  1 as tag, 
        null as parent, 
        StatusMap.Status as [statusmap!1!statuscode!element], 
        StringMap.Value as [statusmap!1!statuscodename!element], 
        StatusMap.IsDefault as [statusmap!1!isdefault!element] 
from StringMap, StatusMap 
where StatusMap.ObjectTypeCode = @otype 
  and StatusMap.OrganizationId = @orgid 
  and StatusMap.State = @state 
  and StatusMap.Status = StringMap.AttributeValue 
  and StringMap.ObjectTypeCode = @otype 
  and StringMap.OrganizationId = @orgid 
  and StringMap.LangId = @langid 
  and StringMap.AttributeName = 'statuscode' 
order by StringMap.DisplayOrder
for xml explicit 

end

/****** Object:  View [dbo].[PluginAssembly]    Script Date: 04/11/2008 06:58:23 ******/




--
-- base view for PluginAssembly
--
create view [dbo].[PluginAssembly] (
    -- physical attributes
    SourceHash,
    CustomizationLevel,
    Content,
    OrganizationId,
    ModifiedOn,
    Path,
    Name,
    DeletionStateCode,
    CreatedBy,
    Version,
    VersionNumber,
    ModifiedBy,
    CreatedOn,
    PluginAssemblyId,
    Culture,
    SourceType,
    PluginAssemblyIdUnique,
    PublicKeyToken
) with view_metadata as 
select 
    -- physical attributes
     T1.SourceHash,
     T1.CustomizationLevel,
     T1.Content,
     T1.OrganizationId,
     T1.ModifiedOn,
     T1.Path,
     T1.Name,
     T1.DeletionStateCode,
     T1.CreatedBy,
     T1.Version,
     T1.VersionNumber,
     T1.ModifiedBy,
     T1.CreatedOn,
     T1.PluginAssemblyId,
     T1.Culture,
     T1.SourceType,
     T1.PluginAssemblyIdUnique,
     T1.PublicKeyToken
from PluginAssemblyBase T1
         left outer join PluginAssemblyBase T2 on (T1.PluginAssemblyId=T2.PluginAssemblyId
              AND T1.PluginAssemblyIdUnique<>T2.PluginAssemblyIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  StoredProcedure [dbo].[p_GetPicklist]    Script Date: 04/11/2008 06:35:15 ******/




CREATE procedure [dbo].[p_GetPicklist](
	@ObjectTypeCode int,
	@AttributeName nvarchar(100),
	@LangId int,
	@OrganizationId uniqueidentifier
) 
as
begin

set nocount on

select
	AttributeValue as Code,
	Value
from
	StringMap as Entry
where
	ObjectTypeCode = @ObjectTypeCode and
	AttributeName = @AttributeName and
	LangId = @LangId and
	OrganizationId = @OrganizationId
for
	xml auto, elements

end

/****** Object:  StoredProcedure [dbo].[p_GetEntityPicklists]    Script Date: 04/11/2008 06:35:12 ******/




create procedure [dbo].[p_GetEntityPicklists](@otCode int, @langId int) as

set nocount on 

select
	AttributeName,
	AttributeValue,
	Value 
from 
	StringMap
where
	ObjectTypeCode = @otCode and
	LangId = @langId
order by
	AttributeName,
	AttributeValue

/****** Object:  View [dbo].[New_entity1]    Script Date: 04/11/2008 06:58:21 ******/




--
-- base view for New_entity1
--
create view [dbo].[New_entity1] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    ModifiedByDsc, 
    ModifiedByName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    New_entity1Id,
    CreatedOn,
    CreatedBy,
    ModifiedOn,
    ModifiedBy,
    OwningUser,
    OwningBusinessUnit,
    statecode,
    statuscode,
    DeletionStateCode,
    VersionNumber,
    ImportSequenceNumber,
    OverriddenCreatedOn,
    TimeZoneRuleVersionNumber,
    UTCConversionTimeZoneCode,
    New_name,
    New_Atributo1,
    New_Atribute2,
    New_ETexto,
    New_EDAte,
    New_ENumero
) with view_metadata as 
select 
    -- logical attributes
    lk_new_entity1_createdby.DeletionStateCode, 
    lk_new_entity1_createdby.FullName, 
    lk_new_entity1_modifiedby.DeletionStateCode, 
    lk_new_entity1_modifiedby.FullName, 

    -- ownership entries
    OwnerId   = New_entity1Base.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when New_entity1Base.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    New_entity1Base.New_entity1Id,
    New_entity1Base.CreatedOn,
    New_entity1Base.CreatedBy,
    New_entity1Base.ModifiedOn,
    New_entity1Base.ModifiedBy,
    New_entity1Base.OwningUser,
    New_entity1Base.OwningBusinessUnit,
    New_entity1Base.statecode,
    New_entity1Base.statuscode,
    New_entity1Base.DeletionStateCode,
    New_entity1Base.VersionNumber,
    New_entity1Base.ImportSequenceNumber,
    New_entity1Base.OverriddenCreatedOn,
    New_entity1Base.TimeZoneRuleVersionNumber,
    New_entity1Base.UTCConversionTimeZoneCode,
        New_entity1ExtensionBase.New_name,
        New_entity1ExtensionBase.New_Atributo1,
        New_entity1ExtensionBase.New_Atribute2,
        New_entity1ExtensionBase.New_ETexto,
        New_entity1ExtensionBase.New_EDAte,
        New_entity1ExtensionBase.New_ENumero
from New_entity1Base
    left join New_entity1ExtensionBase on (New_entity1Base.New_entity1Id = New_entity1ExtensionBase.New_entity1Id)
    left join SystemUserBase lk_new_entity1_createdby with(nolock) on (New_entity1Base.CreatedBy = lk_new_entity1_createdby.SystemUserId)
    left join SystemUserBase lk_new_entity1_modifiedby with(nolock) on (New_entity1Base.ModifiedBy = lk_new_entity1_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (New_entity1Base.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[MailMergeTemplate]    Script Date: 04/11/2008 06:58:21 ******/




--
-- base view for MailMergeTemplate
--
create view [dbo].[MailMergeTemplate] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdYomiName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    ModifiedBy,
    Body,
    TemplateTypeCode,
    CreatedBy,
    Description,
    UTCConversionTimeZoneCode,
    FileSize,
    ParameterXml,
    DeletionStateCode,
    MailMergeType,
    CreatedOn,
    DefaultFilter,
    MimeType,
    TimeZoneRuleVersionNumber,
    StateCode,
    FileName,
    LanguageCode,
    OwningBusinessUnit,
    ModifiedOn,
    DocumentFormat,
    VersionNumber,
    Name,
    MailMergeTemplateId,
    IsPersonal,
    StatusCode,
    OwningUser
) with view_metadata as 
select 
    -- logical attributes
    lk_mailmergetemplatebase_createdby.DeletionStateCode, 
    lk_mailmergetemplatebase_createdby.FullName, 
    lk_mailmergetemplatebase_createdby.YomiFullName, 
    lk_mailmergetemplatebase_modifiedby.DeletionStateCode, 
    lk_mailmergetemplatebase_modifiedby.FullName, 
    lk_mailmergetemplatebase_modifiedby.YomiFullName, 

    -- ownership entries
    OwnerId   = MailMergeTemplateBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerYomiName = XXowninguser.YomiFullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when MailMergeTemplateBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    MailMergeTemplateBase.ModifiedBy,
    MailMergeTemplateBase.Body,
    MailMergeTemplateBase.TemplateTypeCode,
    MailMergeTemplateBase.CreatedBy,
    MailMergeTemplateBase.Description,
    MailMergeTemplateBase.UTCConversionTimeZoneCode,
    MailMergeTemplateBase.FileSize,
    MailMergeTemplateBase.ParameterXml,
    MailMergeTemplateBase.DeletionStateCode,
    MailMergeTemplateBase.MailMergeType,
    MailMergeTemplateBase.CreatedOn,
    MailMergeTemplateBase.DefaultFilter,
    MailMergeTemplateBase.MimeType,
    MailMergeTemplateBase.TimeZoneRuleVersionNumber,
    MailMergeTemplateBase.StateCode,
    MailMergeTemplateBase.FileName,
    MailMergeTemplateBase.LanguageCode,
    MailMergeTemplateBase.OwningBusinessUnit,
    MailMergeTemplateBase.ModifiedOn,
    MailMergeTemplateBase.DocumentFormat,
    MailMergeTemplateBase.VersionNumber,
    MailMergeTemplateBase.Name,
    MailMergeTemplateBase.MailMergeTemplateId,
    MailMergeTemplateBase.IsPersonal,
    MailMergeTemplateBase.StatusCode,
    MailMergeTemplateBase.OwningUser
from MailMergeTemplateBase
    left join SystemUserBase lk_mailmergetemplatebase_createdby with(nolock) on (MailMergeTemplateBase.CreatedBy = lk_mailmergetemplatebase_createdby.SystemUserId)
    left join SystemUserBase lk_mailmergetemplatebase_modifiedby with(nolock) on (MailMergeTemplateBase.ModifiedBy = lk_mailmergetemplatebase_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (MailMergeTemplateBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfLastXHour]    Script Date: 04/11/2008 06:57:19 ******/




create function [dbo].[fn_BeginOfLastXHour] ( 
  @TodayUTC     datetime,
  @X		int
)
returns datetime
as
begin
  return dbo.fn_BeginOfHour(dateadd(hh, -@X, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfNextXHour]    Script Date: 04/11/2008 06:57:25 ******/




create function [dbo].[fn_EndOfNextXHour] ( 
  @TodayUTC     datetime,
  @X		int
)
returns datetime
as
begin
  return dbo.fn_BeginOfHour(dateadd(hh, @X+1, @TodayUTC))
end

/****** Object:  StoredProcedure [dbo].[p_DetectSubjectLoop]    Script Date: 04/11/2008 06:35:06 ******/




CREATE procedure [dbo].[p_DetectSubjectLoop](
 @ParentId uniqueidentifier, 
 @ChildId uniqueidentifier) 
as
/*
	This proc is to be used to determine if parenting one subject to another would create a loop inside the subject hierarchy.
It also detects if a loop already exists somewhere at or above the parent subject.

Return Values : 
ErrorCode ErrorMessage
  '4'  'The ParentId passed in is not valid' as ErrorMessage.'
  '3'  'The ChildId passed in is not valid' as ErrorMessage.'
  '2'  'This association would create a loop in the database.'
  '1'  'There is already a loop existing in the database.'
*/
set nocount on
Declare @TempParentId uniqueidentifier

	

   -- make sure that the @ParentId is a valid subject id.
   IF not exists(select SubjectId from SubjectBase where SubjectId = @ParentId)
     BEGIN 
      select '4' as ErrorCode,  'The ParentId passed in is not valid.' as ErrorMessage
      return 
     END

   -- make sure that the @ChildId is a valid subject id.
   IF not exists(select SubjectId from SubjectBase where SubjectId = @ChildId)
     BEGIN 
      select '3' as ErrorCode, 'The ChildId passed in is not valid.' as ErrorMessage
      return 
     END


select @TempParentId = @ParentId 

create table #Ids ( IdVisited uniqueidentifier primary key)
WHILE ( 1 = 1 )

 BEGIN
   if (@TempParentId = @ChildId)
     -- while chasing the parent of the parent (of the parent...) you bumped into the child.  this would create a loop	
     BEGIN
	select '2' as ErrorCode, 'This association would create a loop in the database.' as ErrorMessage
	BREAK
     END

   select @TempParentId = ParentSubject from SubjectBase  where SubjectId = @TempParentId	

   IF (@TempParentId is null)
     BEGIN 
      -- This implies that there is a dead end to the parent->grand parent-> chain and hence no fear of looping.	
      select '0' as ErrorCode, 'This association is valid and would create no loop in the database.' as ErrorMessage
      BREAK
     END
   ELSE
     BEGIN 
	if exists (select * from #Ids where @TempParentId = IdVisited)
	  BEGIN
	      -- This should never happen.  if it does, that means some one has been mucking with the DB from the backend.	
	      select '1' as ErrorCode, 'There is already a loop existing in the database.' as ErrorMessage             
      	      BREAK
	  END
	else
	  BEGIN
		Insert into #Ids(IdVisited) values (@TempParentId)
		CONTINUE
	  END
     END
   BREAK 	
 END

/****** Object:  View [dbo].[TransactionCurrency]    Script Date: 04/11/2008 06:58:34 ******/




--
-- base view for TransactionCurrency
--
create view [dbo].[TransactionCurrency] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    CreatedByYomiName, 
    ModifiedByDsc, 
    ModifiedByName, 
    ModifiedByYomiName, 

    -- physical attributes
    StatusCode,
    ModifiedOn,
    StateCode,
    VersionNumber,
    ModifiedBy,
    ImportSequenceNumber,
    OverriddenCreatedOn,
    CreatedOn,
    TransactionCurrencyId,
    ExchangeRate,
    DeletionStateCode,
    CurrencySymbol,
    UniqueDscId,
    CurrencyName,
    CreatedBy,
    ISOCurrencyCode,
    OrganizationId
) with view_metadata as 
select 
    -- logical attributes
    lk_transactioncurrencybase_createdby.DeletionStateCode, 
    lk_transactioncurrencybase_createdby.FullName, 
    lk_transactioncurrencybase_createdby.YomiFullName, 
    lk_transactioncurrencybase_modifiedby.DeletionStateCode, 
    lk_transactioncurrencybase_modifiedby.FullName, 
    lk_transactioncurrencybase_modifiedby.YomiFullName, 

    -- physical attributes
    TransactionCurrencyBase.StatusCode,
    TransactionCurrencyBase.ModifiedOn,
    TransactionCurrencyBase.StateCode,
    TransactionCurrencyBase.VersionNumber,
    TransactionCurrencyBase.ModifiedBy,
    TransactionCurrencyBase.ImportSequenceNumber,
    TransactionCurrencyBase.OverriddenCreatedOn,
    TransactionCurrencyBase.CreatedOn,
    TransactionCurrencyBase.TransactionCurrencyId,
    TransactionCurrencyBase.ExchangeRate,
    TransactionCurrencyBase.DeletionStateCode,
    TransactionCurrencyBase.CurrencySymbol,
    TransactionCurrencyBase.UniqueDscId,
    TransactionCurrencyBase.CurrencyName,
    TransactionCurrencyBase.CreatedBy,
    TransactionCurrencyBase.ISOCurrencyCode,
    TransactionCurrencyBase.OrganizationId
from TransactionCurrencyBase
    left join SystemUserBase lk_transactioncurrencybase_createdby with(nolock) on (TransactionCurrencyBase.CreatedBy = lk_transactioncurrencybase_createdby.SystemUserId)
    left join SystemUserBase lk_transactioncurrencybase_modifiedby with(nolock) on (TransactionCurrencyBase.ModifiedBy = lk_transactioncurrencybase_modifiedby.SystemUserId)

/****** Object:  View [dbo].[SdkMessageResponseField]    Script Date: 04/11/2008 06:58:32 ******/




--
-- base view for SdkMessageResponseField
--
create view [dbo].[SdkMessageResponseField] (
    -- physical attributes
    PublicName,
    ModifiedOn,
    ModifiedBy,
    CreatedOn,
    SdkMessageResponseFieldIdUnique,
    Value,
    OrganizationId,
    Formatter,
    ClrFormatter,
    CustomizationLevel,
    Name,
    CreatedBy,
    Position,
    DeletionStateCode,
    VersionNumber,
    SdkMessageResponseFieldId,
    SdkMessageResponseId
) with view_metadata as 
select 
    -- physical attributes
     T1.PublicName,
     T1.ModifiedOn,
     T1.ModifiedBy,
     T1.CreatedOn,
     T1.SdkMessageResponseFieldIdUnique,
     T1.Value,
     T1.OrganizationId,
     T1.Formatter,
     T1.ClrFormatter,
     T1.CustomizationLevel,
     T1.Name,
     T1.CreatedBy,
     T1.Position,
     T1.DeletionStateCode,
     T1.VersionNumber,
     T1.SdkMessageResponseFieldId,
     T1.SdkMessageResponseId
from SdkMessageResponseFieldBase T1
         left outer join SdkMessageResponseFieldBase T2 on (T1.SdkMessageResponseFieldId=T2.SdkMessageResponseFieldId
              AND T1.SdkMessageResponseFieldIdUnique<>T2.SdkMessageResponseFieldIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  UserDefinedFunction [dbo].[fn_FindBusinessGuid]    Script Date: 04/11/2008 06:57:27 ******/




create function [dbo].[fn_FindBusinessGuid] ()
returns uniqueidentifier
as
begin

	declare @userGuid uniqueidentifier
	declare @businessguid uniqueidentifier

	--- test whether the query is runing by priviledged user with user role of CRMReaderRole
	--- if it is dbo, we trust it as well. 
	--- There is an issue in SQL. If the user is a dbo, if it not member of any role
	if (is_member('CRMReaderRole') | is_member('db_owner')) = 1
	begin
		select @userGuid = cast(context_info() as uniqueidentifier)

		if @userGuid is not null
		begin		
			select @businessguid = s.BusinessUnitId
				from SystemUserBase s
					where s.SystemUserId = @userGuid
			return @businessguid
		end
	end

	select @businessguid = s.BusinessUnitId
	from SystemUserBase s
	where s.DomainName = SUSER_SNAME()
	return @businessguid
end

/****** Object:  View [dbo].[BulkImport]    Script Date: 04/11/2008 06:57:38 ******/




--
-- base view for BulkImport
--
create view [dbo].[BulkImport] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    ModifiedByDsc, 
    ModifiedByName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    DeletionStateCode,
    StateCode,
    CreatedOn,
    BulkOperationId,
    ModifiedBy,
    BulkImportId,
    BulkImportName,
    ImportConfigId,
    StatusCode,
    OwningBusinessUnit,
    CurrentOffset,
    ModifiedOn,
    AttachmentId,
    CreatedBy,
    OwningUser
) with view_metadata as 
select 
    -- logical attributes
    lk_bulkimport_createdby.DeletionStateCode, 
    lk_bulkimport_createdby.FullName, 
    lk_bulkimport_modifiedby.DeletionStateCode, 
    lk_bulkimport_modifiedby.FullName, 

    -- ownership entries
    OwnerId   = BulkImportBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when BulkImportBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    BulkImportBase.DeletionStateCode,
    BulkImportBase.StateCode,
    BulkImportBase.CreatedOn,
    BulkImportBase.BulkOperationId,
    BulkImportBase.ModifiedBy,
    BulkImportBase.BulkImportId,
    BulkImportBase.BulkImportName,
    BulkImportBase.ImportConfigId,
    BulkImportBase.StatusCode,
    BulkImportBase.OwningBusinessUnit,
    BulkImportBase.CurrentOffset,
    BulkImportBase.ModifiedOn,
    BulkImportBase.AttachmentId,
    BulkImportBase.CreatedBy,
    BulkImportBase.OwningUser
from BulkImportBase
    left join SystemUserBase lk_bulkimport_createdby with(nolock) on (BulkImportBase.CreatedBy = lk_bulkimport_createdby.SystemUserId)
    left join SystemUserBase lk_bulkimport_modifiedby with(nolock) on (BulkImportBase.ModifiedBy = lk_bulkimport_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (BulkImportBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  UserDefinedFunction [dbo].[fn_FindUserGuid]    Script Date: 04/11/2008 06:57:27 ******/




create function [dbo].[fn_FindUserGuid] ()
returns uniqueidentifier
as
begin
	declare @userGuid uniqueidentifier

	--- test whether the query is runing by priviledged user with user role of CRMReaderRole
	--- if it is dbo, we trust it as well. 
	--- There is an issue in SQL. If the user is a dbo, if it not member of any role
	if (is_member('CRMReaderRole') | is_member('db_owner')) = 1
	begin
		select @userGuid = cast(context_info() as uniqueidentifier)
	end

	if @userGuid is null
	begin
		select @userGuid = s.SystemUserId
			from SystemUserBase s
			where s.DomainName = SUSER_SNAME()	
	end
	return @userGuid
end

/****** Object:  StoredProcedure [dbo].[p_DetectUserLoop]    Script Date: 04/11/2008 06:35:06 ******/




CREATE procedure [dbo].[p_DetectUserLoop](
 @ParentId uniqueidentifier, 
 @ChildId uniqueidentifier) 
as
/*
	This proc is to be used to determine if parenting one user to another would create a loop inside the user hierarchy.
It also detects if a loop already exists somewhere at or above the parent user.

Return Values : 
ErrorCode ErrorMessage
  '4'  'The ParentId passed in is not valid'
  '3'  'The ChildId passed in is not valid'
  '2'  'This association would create a loop in the database.'
  '1'  'There is already a loop existing in the database.'
*/
set nocount on
Declare @TempParentId uniqueidentifier

	

   -- make sure that the @ParentId is a valid user id.
   IF not exists(select SystemUserId from SystemUserBase where SystemUserId = @ParentId)
     BEGIN 
      select '4' as ErrorCode,  'The ParentId passed in is not valid.' as ErrorMessage
      return 
     END

   -- make sure that the @ChildId is a valid user id.
   IF not exists(select SystemUserId from SystemUserBase where SystemUserId = @ChildId)
     BEGIN 
      select '3' as ErrorCode, 'The ChildId passed in is not valid.' as ErrorMessage
      return 
     END


select @TempParentId = @ParentId 

create table #Ids ( IdVisited uniqueidentifier primary key)
WHILE ( 1 = 1 )

 BEGIN
   if (@TempParentId = @ChildId)
     -- while chasing the parent of the parent (of the parent...) you bumped into the child.  this would create a loop	
     BEGIN
	select '2' as ErrorCode, 'This association would create a loop in the database.' as ErrorMessage
	BREAK
     END

   select @TempParentId = ParentSystemUserId from SystemUserBase where SystemUserId = @TempParentId	

   IF (@TempParentId is null)
     BEGIN 
      -- This implies that there is a dead end to the parent->grand parent-> chain and hence no fear of looping.	
      select '0' as ErrorCode, 'This association is valid and would create no loop in the database.' as ErrorMessage
      BREAK
     END
   ELSE
     BEGIN 
	if exists (select * from #Ids where @TempParentId = IdVisited)
	  BEGIN
	      -- This should never happen.  if it does, that means some one has been mucking with the DB from the backend.	
	      select '1' as ErrorCode, 'There is already a loop existing in the database.' as ErrorMessage             
      	      BREAK
	  END
	else
	  BEGIN
		Insert into #Ids(IdVisited) values (@TempParentId)
		CONTINUE
	  END
     END
   BREAK 	
 END

/****** Object:  View [dbo].[ImportConfig]    Script Date: 04/11/2008 06:58:16 ******/




--
-- base view for ImportConfig
--
create view [dbo].[ImportConfig] (
    -- logical attributes
    CreatedByDsc, 
    CreatedByName, 
    ModifiedByDsc, 
    ModifiedByName, 

    -- ownership entries
    OwnerId,
    OwnerIdName,
    OwnerIdDsc,
    OwnerIdType,

    -- physical attributes
    FileType,
    DeletionStateCode,
    ObjectId,
    ModifiedOn,
    FieldSeparator,
    Additional2,
    StatusCode,
    ColumnHeaderPresent,
    StateCode,
    ModifiedBy,
    DataDelimiter,
    CreatedOn,
    ObjectTypeCode,
    ConfigName,
    Description,
    CreatedBy,
    Additional1,
    ConfigXSLT,
    OwningBusinessUnit,
    ImportConfigId,
    OwningUser
) with view_metadata as 
select 
    -- logical attributes
    lk_importconfig_createdby.DeletionStateCode, 
    lk_importconfig_createdby.FullName, 
    lk_importconfig_modifiedby.DeletionStateCode, 
    lk_importconfig_modifiedby.FullName, 

    -- ownership entries
    OwnerId   = ImportConfigBase.OwningUser, 
    OwnerName = XXowninguser.FullName, 
    OwnerDsc  = XXowninguser.DeletionStateCode, 
    OwnerIdType = case 
              when ImportConfigBase.OwningUser IS NOT NULL then 8
              else NULL
              end,

    -- physical attributes
    ImportConfigBase.FileType,
    ImportConfigBase.DeletionStateCode,
    ImportConfigBase.ObjectId,
    ImportConfigBase.ModifiedOn,
    ImportConfigBase.FieldSeparator,
    ImportConfigBase.Additional2,
    ImportConfigBase.StatusCode,
    ImportConfigBase.ColumnHeaderPresent,
    ImportConfigBase.StateCode,
    ImportConfigBase.ModifiedBy,
    ImportConfigBase.DataDelimiter,
    ImportConfigBase.CreatedOn,
    ImportConfigBase.ObjectTypeCode,
    ImportConfigBase.ConfigName,
    ImportConfigBase.Description,
    ImportConfigBase.CreatedBy,
    ImportConfigBase.Additional1,
    ImportConfigBase.ConfigXSLT,
    ImportConfigBase.OwningBusinessUnit,
    ImportConfigBase.ImportConfigId,
    ImportConfigBase.OwningUser
from ImportConfigBase
    left join SystemUserBase lk_importconfig_createdby with(nolock) on (ImportConfigBase.CreatedBy = lk_importconfig_createdby.SystemUserId)
    left join SystemUserBase lk_importconfig_modifiedby with(nolock) on (ImportConfigBase.ModifiedBy = lk_importconfig_modifiedby.SystemUserId)
    left join SystemUserBase XXowninguser with(nolock) on (ImportConfigBase.OwningUser = XXowninguser.SystemUserId)

/****** Object:  View [dbo].[EntityMap]    Script Date: 04/11/2008 06:57:44 ******/




--
-- base view for EntityMap
--
create view [dbo].[EntityMap] (
    -- physical attributes
    TargetEntityName,
    EntityMapId,
    DeletionStateCode,
    CreatedOn,
    SourceEntityName,
    CreatedBy,
    OrganizationId,
    ModifiedBy,
    VersionNumber,
    ModifiedOn
) with view_metadata as 
select 
    -- physical attributes
    EntityMapBase.TargetEntityName,
    EntityMapBase.EntityMapId,
    EntityMapBase.DeletionStateCode,
    EntityMapBase.CreatedOn,
    EntityMapBase.SourceEntityName,
    EntityMapBase.CreatedBy,
    EntityMapBase.OrganizationId,
    EntityMapBase.ModifiedBy,
    EntityMapBase.VersionNumber,
    EntityMapBase.ModifiedOn
from EntityMapBase

/****** Object:  View [dbo].[AttributeLogicalView]    Script Date: 04/11/2008 06:57:36 ******/




create view [dbo].[AttributeLogicalView] as
(select a1.* from Attribute a1
left outer join Attribute a2 on
(a1.AttributeId = a2.AttributeId and a1.AttributeRowId <> a2.AttributeRowId and a1.CustomizationLevel = 0
and a2.InProduction = 1)
where a2.CustomizationLevel is null)

/****** Object:  StoredProcedure [dbo].[p_GetReferencedByAttributes]    Script Date: 04/11/2008 06:35:16 ******/




create procedure [dbo].[p_GetReferencedByAttributes] (@keyid uniqueidentifier) as
set nocount on

select a.*, 'typename' = at.Description, 'isquoted' = at.Quoted
from Relationship rel
                 join Attribute a on (rel.ReferencedAttributeId = a.AttributeId)
                 join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)
where rel.RelationshipId = @keyid
order by rel.ReferencingAttributeId

/****** Object:  StoredProcedure [dbo].[p_GetTablesForDeletion]    Script Date: 04/11/2008 06:35:19 ******/




create procedure [dbo].[p_GetTablesForDeletion] as
set nocount on

  select e.PhysicalName as PhysicalName,
	e.BaseTableName as BaseTableName,
	coalesce(e.ExtensionTableName, '') as ExtensionTableName,
	e.ObjectTypeCode as ObjectTypeCode,
	e.OwnershipTypeMask as OwnershipTypeMask,
	a.PhysicalName as PrimaryKey,
	e.EntityId as EntityId,
	e.IsShareableAcrossOrgs as IsShareableAcrossOrgs
from Entity e join Attribute a on (e.EntityId = a.EntityId)
where a.IsPKAttribute = 1 and
  e.IsLogicalEntity = 0 and
  exists (select AttributeId from Attribute 
		where EntityId = e.EntityId and e.HasDeletionStateCode=1 and IsLogical = 0
		and IsActivity = 0)
order by e.PhysicalName

/****** Object:  StoredProcedure [dbo].[p_GetReferencedAttributes]    Script Date: 04/11/2008 06:35:16 ******/




create procedure [dbo].[p_GetReferencedAttributes] (@keyid uniqueidentifier) as
set nocount on

select a.*, 'typename' = at.Description, 'isquoted' = at.Quoted
from Relationship rel
              join Attribute a on (rel.ReferencingAttributeId = a.AttributeId)
              join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)
where rel.RelationshipId = @keyid
order by rel.ReferencingAttributeId

/****** Object:  StoredProcedure [dbo].[p_GetEntityByAttributeId]    Script Date: 04/11/2008 06:35:11 ******/




CREATE procedure [dbo].[p_GetEntityByAttributeId]( @attributeid uniqueidentifier ) as
 
set nocount on
 
select Entity.*
from Entity join Attribute on Entity.EntityId = Attribute.EntityId
where Attribute.AttributeId = @attributeid

/****** Object:  StoredProcedure [dbo].[p_GetEntityAttributes]    Script Date: 04/11/2008 06:35:10 ******/




create procedure [dbo].[p_GetEntityAttributes] (@tablename nvarchar(255)) as
set nocount on

select a.*, 'typename' = at.Description, 'isquoted' = at.Quoted
from Entity e join Attribute a on (e.EntityId = a.EntityId)
	            join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)
where e.Name = @tablename
  and a.VisibleToPlatform = 1
order by a.ColumnNumber

/****** Object:  StoredProcedure [dbo].[p_GetEntityRelationshipsByGuid]    Script Date: 04/11/2008 06:35:13 ******/




create procedure [dbo].[p_GetEntityRelationshipsByGuid](@guid uniqueidentifier, @flag int) as
begin
	set nocount on
	
	declare @errmsg as varchar(255)

	if @flag = 0
    select r.* 
    from Relationship r, Attribute ring, Attribute red
    where r.RelationshipId = @guid
      and r.ReferencingAttributeId = ring.AttributeId
      and r.ReferencedAttributeId = red.AttributeId
      and ring.VisibleToPlatform = 1
      and red.VisibleToPlatform = 1

	else if @flag = 1 
    select r.* 
    from Relationship r, Entity e, Attribute ring, Attribute red
    where r.ReferencingEntityId = e.EntityId
      and e.EntityId = @guid
      and r.ReferencingAttributeId = ring.AttributeId
      and r.ReferencedAttributeId = red.AttributeId
      and ring.VisibleToPlatform = 1
      and red.VisibleToPlatform = 1

	else if @flag = 2
    select r.* 
    from Relationship r, Entity e, Attribute ring, Attribute red
    where r.ReferencedEntityId = e.EntityId
      and e.EntityId = @guid
      and r.ReferencingAttributeId = ring.AttributeId
      and r.ReferencedAttributeId = red.AttributeId
      and ring.VisibleToPlatform = 1
      and red.VisibleToPlatform = 1

	else
		begin
			set @errmsg = N'ERROR: invalid flag: '+cast(@flag as varchar)
		    RAISERROR ( 1074008074, 16, 1, @errmsg ) WITH NOWAIT, SETERROR
		end	
end

/****** Object:  StoredProcedure [dbo].[p_GetEntityRelationshipsByOTC]    Script Date: 04/11/2008 06:35:13 ******/




create procedure [dbo].[p_GetEntityRelationshipsByOTC](@otc int, @flag int) as
begin
	set nocount on

	declare @errmsg as varchar(255)

	if @flag = 5 
    select r.* 
    from Relationship r, Entity e, Attribute ring, Attribute red
    where r.ReferencingEntityId = e.EntityId
      and e.ObjectTypeCode = @otc
      and r.ReferencingAttributeId = ring.AttributeId
      and r.ReferencedAttributeId = red.AttributeId
      and ring.VisibleToPlatform = 1
      and red.VisibleToPlatform = 1

	else if @flag = 6
    select r.* 
    from Relationship r, Entity e, Attribute ring, Attribute red
    where r.ReferencedEntityId = e.EntityId
      and e.ObjectTypeCode = @otc
      and r.ReferencingAttributeId = ring.AttributeId
      and r.ReferencedAttributeId = red.AttributeId
      and ring.VisibleToPlatform = 1
      and red.VisibleToPlatform = 1

	else
		begin
			set @errmsg = N'ERROR: invalid flag: '+cast(@flag as varchar)
		    RAISERROR ( 1074008074, 16, 1, @errmsg ) WITH NOWAIT, SETERROR
		end
end

/****** Object:  StoredProcedure [dbo].[p_GetEntityRelationships]    Script Date: 04/11/2008 06:35:13 ******/




create procedure [dbo].[p_GetEntityRelationships](@relid uniqueidentifier) as
begin
	set nocount on
    select r.* 
    from Relationship r, Attribute ring, Attribute red
    where r.RelationshipId = @relid
      and r.ReferencingAttributeId = ring.AttributeId
      and r.ReferencedAttributeId = red.AttributeId
      and ring.VisibleToPlatform = 1
      and red.VisibleToPlatform = 1	
end

/****** Object:  StoredProcedure [dbo].[p_GetEntityPKAttributes]    Script Date: 04/11/2008 06:35:12 ******/




create procedure [dbo].[p_GetEntityPKAttributes] (@tablename nvarchar(255)) as
set nocount on

select a.*, 'typename' = at.Description, 'isquoted' = at.Quoted
from Entity e join Attribute a on (e.EntityId = a.EntityId)
              join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)
where e.Name = @tablename
  and a.IsPKAttribute = 1

/****** Object:  StoredProcedure [dbo].[p_GetEntity]    Script Date: 04/11/2008 06:35:10 ******/




CREATE procedure [dbo].[p_GetEntity]( @name nvarchar(255),  @name_map int ) as
set nocount on
 
-- CACHE_MAP_NAME
if @name_map = 0 
begin
	select Entity.*
	from Entity 
	where Name = @name
 
-- CACHE_MAP_LOGICAL
end else if @name_map  = 1  
begin
	select Entity.*
	from Entity 
	where LogicalName = @name
 
-- CACHE_MAP_PHYSICAL 
end else if @name_map = 2  
begin
	select Entity.*
	from Entity 
	where PhysicalName = @name
 
end else 
begin
   RAISERROR ( 1074008072, 16, 127, @name_map ) WITH NOWAIT, SETERROR
   return
end

/****** Object:  StoredProcedure [dbo].[p_GetEntityByEntityId]    Script Date: 04/11/2008 06:35:11 ******/




CREATE procedure [dbo].[p_GetEntityByEntityId]( @entityid uniqueidentifier ) as
 
set nocount on
 
select Entity.*
from Entity 
where EntityId = @entityid

/****** Object:  StoredProcedure [dbo].[p_GetEntityByObjectType]    Script Date: 04/11/2008 06:35:11 ******/




CREATE procedure [dbo].[p_GetEntityByObjectType]( @objecttypecode int ) as
set nocount on

select Entity.*
from Entity 
where ObjectTypeCode = @objecttypecode

/****** Object:  StoredProcedure [dbo].[p_GetEntityNameFromLogicalName]    Script Date: 04/11/2008 06:35:11 ******/




create procedure [dbo].[p_GetEntityNameFromLogicalName](@logicalname nvarchar(255)) as
set nocount on

select Name 
from Entity 
Where LogicalName = @logicalname

/****** Object:  StoredProcedure [dbo].[p_GetEntityNameFromPhysicalName]    Script Date: 04/11/2008 06:35:12 ******/




create procedure [dbo].[p_GetEntityNameFromPhysicalName](@physicalname nvarchar(255)) as
set nocount on

select Name 
from Entity 
Where PhysicalName = @physicalname

/****** Object:  View [dbo].[EntityLogicalView]    Script Date: 04/11/2008 06:57:44 ******/




create View [dbo].[EntityLogicalView] as
(select e1.* from Entity e1
left outer join Entity e2 on
(e1.EntityId = e2.EntityId and e1.EntityRowId <> e2.EntityRowId and e1.CustomizationLevel = 0)
where e2.CustomizationLevel is null)

/****** Object:  StoredProcedure [dbo].[p_GetReferencedByEntities]    Script Date: 04/11/2008 06:35:16 ******/




create procedure [dbo].[p_GetReferencedByEntities] (@tablename nvarchar(255)) as
set nocount on

select 
	LocalEntity.Name as LocalName, 
	RemoteEntity.Name as RemoteName,
	rel.RelationshipId as KeyId
From Entity LocalEntity, Entity RemoteEntity, Relationship rel
Where
	rel.ReferencingEntityId =  RemoteEntity.EntityId and
	rel.ReferencedEntityId = LocalEntity.EntityId and
	LocalEntity.Name = @tablename

/****** Object:  StoredProcedure [dbo].[p_GetRelationships]    Script Date: 04/11/2008 06:35:17 ******/




create procedure [dbo].[p_GetRelationships] (@tablename nvarchar(255)) as
set nocount on

Select 
	LocalEntity.Name as LocalName,
	LocalKey.RelationshipId as LocalKeyId,
	IntersectEntity.Name as IntersectName,
	IntersectEntity.LogicalName as IntersectLogicalName,
	IntersectEntity.PhysicalName as IntersectPhysicalName,
	RemoteKey.RelationshipId as RemoteKeyId,
	RemoteEntity.Name as RemoteName,
	IntersectEntity.IsIntersect as IsIntersect,
	IntersectEntity.IsSecurityIntersect as IsSecurityIntersect,
	LocalKey.Name as RelationName
From 
	Entity LocalEntity,
	Relationship LocalKey,
	Entity IntersectEntity,
	Relationship RemoteKey,
	Entity RemoteEntity
Where
	LocalEntity.Name = @tablename and
	LocalKey.ReferencedEntityId = LocalEntity.EntityId and
	LocalKey.ReferencingEntityId = IntersectEntity.EntityId and
	RemoteKey.ReferencingEntityId = IntersectEntity.EntityId and
	RemoteKey.ReferencedEntityId = RemoteEntity.EntityId and
	RemoteEntity.EntityId != LocalEntity.EntityId

/****** Object:  StoredProcedure [dbo].[p_GetReferencedEntities]    Script Date: 04/11/2008 06:35:16 ******/




create procedure [dbo].[p_GetReferencedEntities] (@tablename nvarchar(255)) as
set nocount on

select 
	LocalEntity.Name as LocalName, 
	RemoteEntity.Name as RemoteName,
	Relationship.RelationshipId as KeyId
From Entity LocalEntity, Entity RemoteEntity, Relationship
Where
	Relationship.ReferencingEntityId = LocalEntity.EntityId and
	Relationship.ReferencedEntityId = RemoteEntity.EntityId and
	LocalEntity.Name = @tablename

/****** Object:  StoredProcedure [dbo].[p_LoadEntity]    Script Date: 04/11/2008 06:35:23 ******/




create procedure [dbo].[p_LoadEntity](@fixedname nvarchar(255) = null, 
                              @physicalname nvarchar(255) = null, 
                              @logicalname nvarchar(255) = null) as
set nocount on

-- make sure that one of the values has been supplied, otherwise we have a problem
if @fixedname is null and @physicalname is null and @logicalname is null
begin
   RAISERROR ( 1074008073, 16, 127 ) WITH NOWAIT, SETERROR
   return
end 

declare @name nvarchar(255)         -- the value we found in the database
declare @searchname nvarchar(255)   -- the name we're looking for

-- figure out which one of the names we're using to search for the entity
if @fixedname is not null
	select @name = Name, @searchname = @fixedname
	from Entity 
	where Name = @fixedname
else if @physicalname is not null
	select @name = PhysicalName, @searchname = @physicalname
	from Entity 
	where PhysicalName = @physicalname 
else if @logicalname is not null
	select @name = LogicalName, @searchname = @logicalname
	from Entity 
	where LogicalName = @logicalname 
	
-- handle the result, either we throw an error or we return the data
if cast(@name as binary) != cast(@searchname as binary)
begin
	RAISERROR ( 1074008074, 16, 127, 'The entity does not exist by that name, perhaps the case is incorrect' ) WITH NOWAIT, SETERROR
	return
end
else
begin
    if @fixedname is not null
	    select *
	    from Entity 
	    where Name = @fixedname
    else if @physicalname is not null
	    select *
	    from Entity 
	    where PhysicalName = @physicalname 
    else if @logicalname is not null
	    select *
	    from Entity 
	    where LogicalName = @logicalname 
end

/****** Object:  View [dbo].[DisplayStringMap]    Script Date: 04/11/2008 06:57:43 ******/




--
-- base view for DisplayStringMap
--
create view [dbo].[DisplayStringMap] (
    -- physical attributes
    ObjectTypeCode,
    DisplayStringMapId,
    DisplayStringId
) with view_metadata as 
select 
    -- physical attributes
    DisplayStringMapBase.ObjectTypeCode,
    DisplayStringMapBase.DisplayStringMapId,
    DisplayStringMapBase.DisplayStringId
from DisplayStringMapBase

/****** Object:  View [dbo].[TimeZoneDefinition]    Script Date: 04/11/2008 06:58:34 ******/




--
-- base view for TimeZoneDefinition
--
create view [dbo].[TimeZoneDefinition] (
    -- physical attributes
    ModifiedOn,
    TimeZoneCode,
    OrganizationId,
    VersionNumber,
    TimeZoneDefinitionId,
    CreatedOn,
    Bias,
    DaylightName,
    CreatedBy,
    UserInterfaceName,
    StandardName,
    RetiredOrder,
    ModifiedBy,
    DeletionStateCode
) with view_metadata as 
select 
    -- physical attributes
    TimeZoneDefinitionBase.ModifiedOn,
    TimeZoneDefinitionBase.TimeZoneCode,
    TimeZoneDefinitionBase.OrganizationId,
    TimeZoneDefinitionBase.VersionNumber,
    TimeZoneDefinitionBase.TimeZoneDefinitionId,
    TimeZoneDefinitionBase.CreatedOn,
    TimeZoneDefinitionBase.Bias,
    TimeZoneDefinitionBase.DaylightName,
    TimeZoneDefinitionBase.CreatedBy,
    TimeZoneDefinitionBase.UserInterfaceName,
    TimeZoneDefinitionBase.StandardName,
    TimeZoneDefinitionBase.RetiredOrder,
    TimeZoneDefinitionBase.ModifiedBy,
    TimeZoneDefinitionBase.DeletionStateCode
from TimeZoneDefinitionBase

/****** Object:  View [dbo].[ImportJob]    Script Date: 04/11/2008 06:58:16 ******/




--
-- base view for ImportJob
--
create view [dbo].[ImportJob] (
    -- physical attributes
    CompletedOn,
    StartedOn,
    ImportJobId,
    ModifiedOn,
    Data,
    TimeZoneRuleVersionNumber,
    UTCConversionTimeZoneCode,
    CreatedOn,
    Name
) with view_metadata as 
select 
    -- physical attributes
    ImportJobBase.CompletedOn,
    ImportJobBase.StartedOn,
    ImportJobBase.ImportJobId,
    ImportJobBase.ModifiedOn,
    ImportJobBase.Data,
    ImportJobBase.TimeZoneRuleVersionNumber,
    ImportJobBase.UTCConversionTimeZoneCode,
    ImportJobBase.CreatedOn,
    ImportJobBase.Name
from ImportJobBase

/****** Object:  View [dbo].[RelationshipLogicalView]    Script Date: 04/11/2008 06:58:26 ******/




create View [dbo].[RelationshipLogicalView] as
	(select r1.* from Relationship r1
	left outer join Relationship r2 on
	(r1.RelationshipId = r2.RelationshipId and r1.RelationshipRowId <> r2.RelationshipRowId and r1.CustomizationLevel = 0)
	where r2.CustomizationLevel is null)

/****** Object:  StoredProcedure [dbo].[p_GetRelationshipExtraConditions]    Script Date: 04/11/2008 06:35:17 ******/




create procedure [dbo].[p_GetRelationshipExtraConditions](@relid uniqueidentifier)
as
begin
	select rxc.*
		from Relationship as rel join RelationshipExtraCondition as rxc
		on rel.RelationshipId = rxc.RelationshipId
		where rel.RelationshipId = @relid
end

/****** Object:  StoredProcedure [dbo].[p_DetectAccountLoop]    Script Date: 04/11/2008 06:35:04 ******/




CREATE procedure [dbo].[p_DetectAccountLoop](
 @ParentId uniqueidentifier, 
 @ChildId uniqueidentifier) 
as
/*
	This proc is to be used to determine if parenting one account to another would create a loop inside the account hierarchy.
It also detects if a loop already exists somewhere at or above the parent account.

Return Values : 
ErrorCode ErrorMessage
  '4'  'The ParentId passed in is not valid' as ErrorMessage.'
  '3'  'The ChildId passed in is not valid' as ErrorMessage.'
  '2'  'This association would create a loop in the database.'
  '1'  'There is already a loop existing in the database.'
*/
set nocount on
Declare @TempParentId uniqueidentifier

	

   -- make sure that the @ParentId is a valid account id.
   IF not exists(select AccountId from AccountBase where AccountId = @ParentId)
     BEGIN 
      select '4' as ErrorCode,  'The ParentId passed in is not valid.' as ErrorMessage
      return 
     END

   -- make sure that the @ChildId is a valid account id.
   IF not exists(select AccountId from AccountBase where AccountId = @ChildId)
     BEGIN 
      select '3' as ErrorCode, 'The ChildId passed in is not valid.' as ErrorMessage
      return 
     END


select @TempParentId = @ParentId 

create table #Ids ( IdVisited uniqueidentifier primary key)
WHILE ( 1 = 1 )

 BEGIN
   if (@TempParentId = @ChildId)
     -- while chasing the parent of the parent (of the parent...) you bumped into the child.  this would create a loop	
     BEGIN
	select '2' as ErrorCode, 'This association would create a loop in the database.' as ErrorMessage
	BREAK
     END

   select @TempParentId = ParentAccountId from AccountBase  where AccountId = @TempParentId	

   IF (@TempParentId is null)
     BEGIN 
      -- This implies that there is a dead end to the parent->grand parent-> chain and hence no fear of looping.	
      select '0' as ErrorCode, 'This association is valid and would create no loop in the database.' as ErrorMessage
      BREAK
     END
   ELSE
     BEGIN 
	if exists (select * from #Ids where @TempParentId = IdVisited)
	  BEGIN
	      -- This should never happen.  if it does, that means some one has been mucking with the DB from the backend.	
	      select '1' as ErrorCode, 'There is already a loop existing in the database.' as ErrorMessage             
      	      BREAK
	  END
	else
	  BEGIN
		Insert into #Ids(IdVisited) values (@TempParentId)
		CONTINUE
	  END
     END
   BREAK 	
 END

/****** Object:  View [dbo].[RelationshipExtraConditionLogicalView]    Script Date: 04/11/2008 06:58:25 ******/




create View [dbo].[RelationshipExtraConditionLogicalView] as
(select r1.* from RelationshipExtraCondition r1
left outer join RelationshipExtraCondition r2 on
(r1.ConditionId = r2.ConditionId and r1.RelationshipExtraConditionRowId <> r2.RelationshipExtraConditionRowId and r1.CustomizationLevel = 0)
where r2.CustomizationLevel is null)

/****** Object:  View [dbo].[SdkMessageProcessingStepImage]    Script Date: 04/11/2008 06:58:31 ******/




--
-- base view for SdkMessageProcessingStepImage
--
create view [dbo].[SdkMessageProcessingStepImage] (
    -- physical attributes
    ModifiedBy,
    SdkMessageProcessingStepId,
    ModifiedOn,
    VersionNumber,
    OrganizationId,
    SdkMessageProcessingStepImageId,
    CreatedOn,
    EntityAlias,
    CustomizationLevel,
    CreatedBy,
    SdkMessageProcessingStepImageIdUnique,
    ImageType,
    DeletionStateCode,
    RelatedAttributeName,
    MessagePropertyName,
    Attributes
) with view_metadata as 
select 
    -- physical attributes
     T1.ModifiedBy,
     T1.SdkMessageProcessingStepId,
     T1.ModifiedOn,
     T1.VersionNumber,
     T1.OrganizationId,
     T1.SdkMessageProcessingStepImageId,
     T1.CreatedOn,
     T1.EntityAlias,
     T1.CustomizationLevel,
     T1.CreatedBy,
     T1.SdkMessageProcessingStepImageIdUnique,
     T1.ImageType,
     T1.DeletionStateCode,
     T1.RelatedAttributeName,
     T1.MessagePropertyName,
     T1.Attributes
from SdkMessageProcessingStepImageBase T1
         left outer join SdkMessageProcessingStepImageBase T2 on (T1.SdkMessageProcessingStepImageId=T2.SdkMessageProcessingStepImageId
              AND T1.SdkMessageProcessingStepImageIdUnique<>T2.SdkMessageProcessingStepImageIdUnique
              AND T1.CustomizationLevel = 0)
         where T2.CustomizationLevel is null

/****** Object:  View [dbo].[FilteredSystemUserRoles]    Script Date: 04/11/2008 06:58:12 ******/




--
-- report view for systemuserroles
--
create view [dbo].[FilteredSystemUserRoles] (
    roleid,
    systemuserid,
    systemuserroleid
) with view_metadata as 
select 
    SystemUserRoles.RoleId,
    SystemUserRoles.SystemUserId,
    SystemUserRoles.SystemUserRoleId
from SystemUserRoles

/****** Object:  View [dbo].[ViewAttributeLogicalView]    Script Date: 04/11/2008 06:58:36 ******/




create View [dbo].[ViewAttributeLogicalView] as
(select v1.* from ViewAttribute v1
left outer join ViewAttribute v2 on
(v1.ViewAttributeId = v2.ViewAttributeId and v1.ViewAttributeRowId <> v2.ViewAttributeRowId and v1.CustomizationLevel = 0)
where v2.CustomizationLevel is null)

/****** Object:  View [dbo].[FilteredAccountLeads]    Script Date: 04/11/2008 06:57:47 ******/




--
-- report view for accountleads
--
create view [dbo].[FilteredAccountLeads] (
    accountid,
    accountleadid,
    leadid
) with view_metadata as 
select 
    AccountLeads.AccountId,
    AccountLeads.AccountLeadId,
    AccountLeads.LeadId
from AccountLeads

/****** Object:  UserDefinedFunction [dbo].[fn_CollectForCascadeDelete]    Script Date: 04/11/2008 06:57:22 ******/




CREATE function [dbo].[fn_CollectForCascadeDelete]
(
    @root_id uniqueidentifier, 
    @root_otc int,
    @isoffline int 
)
returns @t table
( 	
     o uniqueidentifier,
     t int,
     r bit default 0,
     p int default 0
) 
as
begin
 declare @null_guid as uniqueidentifier
 set @null_guid = N'00000000-0000-0000-0000-000000000000'
 insert into @t values(@root_id, @root_otc, 1, 0)
if(exists(select * from @t where t=9100))insert into @t(o,t)select o.ReportLinkId,9104 from ReportLink o, @t c where c.o=o.ReportId and c.t=9100
if(exists(select * from @t where t=9100))insert into @t(o,t)select o.ReportVisibilityId,9103 from ReportVisibility o, @t c where c.o=o.ReportId and c.t=9100
if(exists(select * from @t where t=9100))insert into @t(o,t)select o.ReportCategoryId,9102 from ReportCategory o, @t c where c.o=o.ReportId and c.t=9100
if(exists(select * from @t where t=9100))insert into @t(o,t)select o.ReportEntityId,9101 from ReportEntity o, @t c where c.o=o.ReportId and c.t=9100
if(exists(select * from @t where t=4810))insert into @t(o,t)select o.TimeZoneLocalizedNameId,4812 from TimeZoneLocalizedName o, @t c where c.o=o.TimeZoneDefinitionId and c.t=4810 and o.DeletionStateCode=0
if(exists(select * from @t where t=4810))insert into @t(o,t)select o.TimeZoneRuleId,4811 from TimeZoneRule o, @t c where c.o=o.TimeZoneDefinitionId and c.t=4810 and o.DeletionStateCode=0
if(exists(select * from @t where t=4800))insert into @t(o,t)select o.WizardAccessPrivilegeId,4803 from WizardAccessPrivilege o, @t c where c.o=o.WebWizardId and c.t=4800 and o.DeletionStateCode=0
if(exists(select * from @t where t=4800))insert into @t(o,t)select o.WizardPageId,4802 from WizardPage o, @t c where c.o=o.WebWizardId and c.t=4800 and o.DeletionStateCode=0
if(exists(select * from @t where t=4600))insert into @t(o,t)select o.AttributeMapId,4601 from AttributeMap o, @t c where c.o=o.EntityMapId and c.t=4600 and o.DeletionStateCode=0
if(exists(select * from @t where t=4601)) begin insert into @t(o,t)select o.AttributeMapId,4601 from AttributeMap o, @t c where c.o=o.ParentAttributeMapId and c.t=4601 and o.DeletionStateCode=0
while(@@rowcount <> 0)insert into @t(o,t) select o.AttributeMapId,4601 from AttributeMap o,@t c where o.ParentAttributeMapId=c.o and c.t=4601  and o.DeletionStateCode=0 and o.AttributeMapId not in(select o from @t where o=o.AttributeMapId and t=4601) end
if(exists(select * from @t where t=4500))insert into @t(o,t)select o.RelationshipRoleMapId,4501 from RelationshipRoleMap o, @t c where c.o=o.RelationshipRoleId and c.t=4500
if(@isoffline=0)begin if(exists(select * from @t where t=4411))insert into @t(o,t)select o.TransformationMappingId,4426 from TransformationMapping o, @t c where c.o=o.ImportMapId and c.t=4411 and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select * from @t where t=4426))insert into @t(o,t)select o.TransformationParameterMappingId,4427 from TransformationParameterMapping o, @t c where c.o=o.TransformationMappingId and c.t=4426 and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select * from @t where t=4411))insert into @t(o,t)select o.OwnerMappingId,4420 from OwnerMapping o, @t c where c.o=o.ImportMapId and c.t=4411 and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select * from @t where t=4411))insert into @t(o,t)select o.ColumnMappingId,4417 from ColumnMapping o, @t c where c.o=o.ImportMapId and c.t=4411 and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select * from @t where t=4427))insert into @t(o,t)select o.LookUpMappingId,4419 from LookUpMapping o, @t c where c.o=o.TransformationParameterMappingId and c.t=4427 and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select * from @t where t=4417))insert into @t(o,t)select o.LookUpMappingId,4419 from LookUpMapping o, @t c where c.o=o.ColumnMappingId and c.t=4417 and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select * from @t where t=4417))insert into @t(o,t)select o.PickListMappingId,4418 from PickListMapping o, @t c where c.o=o.ColumnMappingId and c.t=4417 and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select * from @t where t=4410))insert into @t(o,t)select o.ImportFileId,4412 from ImportFile o, @t c where c.o=o.ImportId and c.t=4410 and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select * from @t where t=4412))insert into @t(o,t)select o.ImportLogId,4423 from ImportLog o, @t c where c.o=o.ImportFileId and c.t=4412 and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select * from @t where t=4412))insert into @t(o,t)select o.ImportDataId,4413 from ImportData o, @t c where c.o=o.ImportFileId and c.t=4412 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1055)) begin insert into @t(o,t)select o.UoMId,1055 from UoM o, @t c where c.o=o.BaseUoM and c.t=1055 and o.DeletionStateCode=0
while(@@rowcount <> 0)insert into @t(o,t) select o.UoMId,1055 from UoM o,@t c where o.BaseUoM=c.o and c.t=1055  and o.DeletionStateCode=0 and o.UoMId not in(select o from @t where o=o.UoMId and t=1055) end
if(exists(select * from @t where t=1056))insert into @t(o,t)select o.UoMId,1055 from UoM o, @t c where c.o=o.UoMScheduleId and c.t=1056 and o.DeletionStateCode=0
if(exists(select * from @t where t=4200))insert into @t(o,t)select o.EmailHashId,4023 from EmailHash o, @t c where c.o=o.ActivityId and c.t=4200
if(exists(select o.KbArticleId from KbArticle o, @t c where(((o.KbArticleTemplateId=c.o and c.t=1016)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.KbArticleId from KbArticle o, @t c where(((o.SubjectId=c.o and c.t=129)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=127))insert into @t(o,t)select o.KbArticleCommentId,1082 from KbArticleComment o, @t c where c.o=o.KbArticleId and c.t=127
if(exists(select o.DocumentIndexId from DocumentIndex o, @t c where(((o.SubjectId=c.o and c.t=129)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=127))insert into @t(o,t)select o.DocumentIndexId,126 from DocumentIndex o, @t c where c.o=o.DocumentId and c.t=127 and o.DeletionStateCode=0
if(exists(select * from @t where t=1038))insert into @t(o,t)select o.SalesLiteratureItemId,1070 from SalesLiteratureItem o, @t c where c.o=o.SalesLiteratureId and c.t=1038 and o.DeletionStateCode=0
if(@isoffline=0)begin if(exists(select * from @t where t=1023))insert into @t(o,t)select o.RoleTemplatePrivilegeId,28 from RoleTemplatePrivileges o, @t c where c.o=o.PrivilegeId and c.t=1023 end
if(@isoffline=0)begin if(exists(select * from @t where t=1037))insert into @t(o,t)select o.RoleTemplatePrivilegeId,28 from RoleTemplatePrivileges o, @t c where c.o=o.RoleTemplateId and c.t=1037 end
if(exists(select * from @t where t=1023))insert into @t(o,t)select o.RolePrivilegeId,12 from RolePrivileges o, @t c where c.o=o.PrivilegeId and c.t=1023
if(exists(select * from @t where t=1036))insert into @t(o,t)select o.RolePrivilegeId,12 from RolePrivileges o, @t c where c.o=o.RoleId and c.t=1036
if(@isoffline=0)begin if(exists(select * from @t where t=4414))insert into @t(o,t)select o.DuplicateRuleConditionId,4416 from DuplicateRuleCondition o, @t c where c.o=o.RegardingObjectId and c.t=4414 and o.DeletionStateCode=0 end
if(exists(select o.CampaignId from Campaign o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from CampaignActivity o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=4400))insert into @t(o,t)select o.ActivityId,4402 from CampaignActivity o, @t c where c.o=o.RegardingObjectId and c.t=4400 and o.DeletionStateCode=0
if(exists(select o.ListId from List o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t in(4300,4402)))insert into @t(o,t)select o.ActivityId,4406 from BulkOperation o, @t c where c.o=o.RegardingObjectId and c.t in(4300,4402) and o.DeletionStateCode=0
if(exists(select * from @t where t in(1038,4300)))insert into @t(o,t)select o.CampaignActivityItemId,4404 from CampaignActivityItem o, @t c where c.o=o.ItemId and c.t in(1038,4300)
if(exists(select * from @t where t in(4200,4402)))insert into @t(o,t)select o.CampaignActivityItemId,4404 from CampaignActivityItem o, @t c where c.o=o.CampaignActivityId and c.t in(4200,4402)
if(exists(select o.DiscountTypeId from DiscountType o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.PriceLevelId from PriceLevel o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ProductId from Product o, @t c where(((o.PriceLevelId=c.o and c.t=1022)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ProductId from Product o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ProductId from Product o, @t c where(((o.SubjectId=c.o and c.t=129)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ProductId from Product o, @t c where(((o.DefaultUoMScheduleId=c.o and c.t=1056)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ProductId from Product o, @t c where(((o.DefaultUoMId=c.o and c.t=1055)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t in(1038,4400,4300,1024)))insert into @t(o,t)select o.CampaignItemId,4403 from CampaignItem o, @t c where c.o=o.EntityId and c.t in(1038,4400,4300,1024)
if(exists(select * from @t where t=4400))insert into @t(o,t)select o.CampaignItemId,4403 from CampaignItem o, @t c where c.o=o.CampaignId and c.t=4400
if(exists(select * from @t where t=1024))insert into @t(o,t)select o.ProductSubstituteId,1028 from ProductSubstitute o, @t c where c.o=o.ProductId and c.t=1024
if(exists(select * from @t where t=1024))insert into @t(o,t)select o.ProductSubstituteId,1028 from ProductSubstitute o, @t c where c.o=o.SubstitutedProductId and c.t=1024
if(exists(select o.ProductPriceLevelId from ProductPriceLevel o, @t c where(((o.UoMId=c.o and c.t=1055)))))goto rl
if(exists(select o.ProductPriceLevelId from ProductPriceLevel o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)))))goto rl
if(exists(select o.ProductPriceLevelId from ProductPriceLevel o, @t c where(((o.DiscountTypeId=c.o and c.t=1080)))))goto rl
if(exists(select o.ProductPriceLevelId from ProductPriceLevel o, @t c where(((o.PriceLevelId=c.o and c.t=1022)))))goto rl
if(exists(select * from @t where t=1024))insert into @t(o,t)select o.ProductPriceLevelId,1026 from ProductPriceLevel o, @t c where c.o=o.ProductId and c.t=1024
if(exists(select * from @t where t=1024))insert into @t(o,t)select o.ProductAssociationId,1025 from ProductAssociation o, @t c where c.o=o.AssociatedProduct and c.t=1024
if(exists(select * from @t where t=1024))insert into @t(o,t)select o.ProductAssociationId,1025 from ProductAssociation o, @t c where c.o=o.ProductId and c.t=1024
if(exists(select * from @t where t=1038))insert into @t(o,t)select o.ProductSalesLiteratureId,21 from ProductSalesLiterature o, @t c where c.o=o.SalesLiteratureId and c.t=1038
if(exists(select * from @t where t=1024))insert into @t(o,t)select o.ProductSalesLiteratureId,21 from ProductSalesLiterature o, @t c where c.o=o.ProductId and c.t=1024
if(exists(select o.OrganizationId from Organization o, @t c where(((o.BaseCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(@isoffline=0)begin if(exists(select o.philipri_customizationversionId from philipri_customizationversion o, @t c where(((o.OrganizationId=c.o and c.t=1019)) and o.DeletionStateCode=0 )))goto rl end
if(@isoffline=0)begin if(exists(select * from @t where t in(10001,10000)))insert into @t(o,t)select o.AsyncOperationId,4700 from AsyncOperation o, @t c where c.o=o.RegardingObjectId and c.t in(10001,10000) and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select * from @t where t=4700))insert into @t(o,t)select o.WorkflowLogId,4706 from WorkflowLog o, @t c where c.o=o.AsyncOperationId and c.t=4700 end
if(@isoffline=0)begin if(exists(select * from @t where t=4700))insert into @t(o,t)select o.WorkflowWaitSubscriptionId,4702 from WorkflowWaitSubscription o, @t c where c.o=o.AsyncOperationId and c.t=4700 end
if(@isoffline=0)begin if(exists(select * from @t where t=4700))insert into @t(o,t)select o.WorkflowCompletedScopeId,4701 from WorkflowCompletedScope o, @t c where c.o=o.AsyncOperationId and c.t=4700 end
if(@isoffline=0)begin if(exists(select * from @t where t=4700))insert into @t(o,t)select o.BulkDeleteOperationId,4424 from BulkDeleteOperation o, @t c where c.o=o.AsyncOperationId and c.t=4700 and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select o.BusinessTaskId from BusinessTask o, @t c where(((o.OrganizationId=c.o and c.t=1019)) and o.DeletionStateCode=0 )))goto rl end
if(@isoffline=0)begin if(exists(select o.FileId from ApplicationFile o, @t c where(((o.OrganizationId=c.o and c.t=1019)) and o.DeletionStateCode=0 )))goto rl end
if(@isoffline=0)begin if(exists(select * from @t where t=1019))insert into @t(o,t)select o.SdkMessageProcessingStepSecureConfigId,4616 from SdkMessageProcessingStepSecureConfig o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.SdkMessageId,4606 from SdkMessage o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(exists(select * from @t where t=4606))insert into @t(o,t)select o.SdkMessagePairId,4613 from SdkMessagePair o, @t c where c.o=o.SdkMessageId and c.t=4606 and o.DeletionStateCode=0
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.SdkMessagePairId,4613 from SdkMessagePair o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.SdkMessageRequestId,4609 from SdkMessageRequest o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(exists(select * from @t where t=4613))insert into @t(o,t)select o.SdkMessageRequestId,4609 from SdkMessageRequest o, @t c where c.o=o.SdkMessagePairId and c.t=4613 and o.DeletionStateCode=0
if(exists(select * from @t where t=4609))insert into @t(o,t)select o.SdkMessageRequestFieldId,4614 from SdkMessageRequestField o, @t c where c.o=o.SdkMessageRequestId and c.t=4609 and o.DeletionStateCode=0
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.SdkMessageRequestFieldId,4614 from SdkMessageRequestField o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(exists(select * from @t where t=4609))insert into @t(o,t)select o.SdkMessageRequestInputId,4612 from SdkMessageRequestInput o, @t c where c.o=o.SdkMessageRequestId and c.t=4609 and o.DeletionStateCode=0
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.SdkMessageRequestInputId,4612 from SdkMessageRequestInput o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(exists(select * from @t where t=4609))insert into @t(o,t)select o.SdkMessageResponseId,4610 from SdkMessageResponse o, @t c where c.o=o.SdkMessageRequestId and c.t=4609 and o.DeletionStateCode=0
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.SdkMessageResponseId,4610 from SdkMessageResponse o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(exists(select * from @t where t=4610))insert into @t(o,t)select o.SdkMessageResponseFieldId,4611 from SdkMessageResponseField o, @t c where c.o=o.SdkMessageResponseId and c.t=4610 and o.DeletionStateCode=0
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.SdkMessageResponseFieldId,4611 from SdkMessageResponseField o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(exists(select o.SdkMessageFilterId from SdkMessageFilter o, @t c where(((o.SdkMessageId=c.o and c.t=4606)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.SdkMessageFilterId,4607 from SdkMessageFilter o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.PluginAssemblyId,4605 from PluginAssembly o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(exists(select o.PluginTypeId from PluginType o, @t c where(((o.PluginAssemblyId=c.o and c.t=4605)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.PluginTypeId,4602 from PluginType o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(@isoffline=0)begin if(exists(select o.WorkflowId from Workflow o, @t c where(((o.ActiveWorkflowId=c.o and c.t=4703)) and o.DeletionStateCode=0 )))goto rl end
if(@isoffline=0)begin if(exists(select o.WorkflowId from Workflow o, @t c where(((o.PluginTypeId=c.o and c.t=4602)) and o.DeletionStateCode=0 )))goto rl end
if(@isoffline=0)begin if(exists(select o.WorkflowDependencyId from WorkflowDependency o, @t c where(((o.SdkMessageId=c.o and c.t=4606)) and o.DeletionStateCode=0 )))goto rl end
if(@isoffline=0)begin if(exists(select * from @t where t=4703))insert into @t(o,t)select o.WorkflowDependencyId,4704 from WorkflowDependency o, @t c where c.o=o.WorkflowId and c.t=4703 and o.DeletionStateCode=0 end
if(exists(select o.CalendarId from Calendar o, @t c where(((o.OrganizationId=c.o and c.t=1019)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.CalendarId from Calendar o, @t c where(((o.BusinessUnitId=c.o and c.t=10)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.DiscountId from Discount o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1080))insert into @t(o,t)select o.DiscountId,1013 from Discount o, @t c where c.o=o.DiscountTypeId and c.t=1080 and o.DeletionStateCode=0
if(exists(select o.SystemUserId from UserSettings o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)))))goto rl
if(exists(select o.CompetitorId from Competitor o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1024))insert into @t(o,t)select o.CompetitorProductId,1006 from CompetitorProduct o, @t c where c.o=o.ProductId and c.t=1024
if(exists(select * from @t where t=123))insert into @t(o,t)select o.CompetitorProductId,1006 from CompetitorProduct o, @t c where c.o=o.CompetitorId and c.t=123
if(exists(select * from @t where t=123))insert into @t(o,t)select o.CompetitorAddressId,1004 from CompetitorAddress o, @t c where c.o=o.ParentId and c.t=123
if(exists(select * from @t where t=1038))insert into @t(o,t)select o.CompetitorSalesLiteratureId,26 from CompetitorSalesLiterature o, @t c where c.o=o.SalesLiteratureId and c.t=1038
if(exists(select * from @t where t=123))insert into @t(o,t)select o.CompetitorSalesLiteratureId,26 from CompetitorSalesLiterature o, @t c where c.o=o.CompetitorId and c.t=123
if(exists(select o.SystemUserId from SystemUser o, @t c where(((o.CalendarId=c.o and c.t=4003)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SystemUserId from SystemUser o, @t c where(((o.SiteId=c.o and c.t=4009)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SystemUserId from SystemUser o, @t c where(((o.TerritoryId=c.o and c.t=2013)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SdkMessageProcessingStepId from SdkMessageProcessingStep o, @t c where(((o.SdkMessageProcessingStepSecureConfigId=c.o and c.t=4616)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SdkMessageProcessingStepId from SdkMessageProcessingStep o, @t c where(((o.SdkMessageId=c.o and c.t=4606)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SdkMessageProcessingStepId from SdkMessageProcessingStep o, @t c where(((o.SdkMessageFilterId=c.o and c.t=4607)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SdkMessageProcessingStepId from SdkMessageProcessingStep o, @t c where(((o.ImpersonatingUserId=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SdkMessageProcessingStepId from SdkMessageProcessingStep o, @t c where(((o.PluginTypeId=c.o and c.t=4602)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.SdkMessageProcessingStepId,4608 from SdkMessageProcessingStep o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(exists(select * from @t where t=4608))insert into @t(o,t)select o.SdkMessageProcessingStepImageId,4615 from SdkMessageProcessingStepImage o, @t c where c.o=o.SdkMessageProcessingStepId and c.t=4608 and o.DeletionStateCode=0
if(exists(select * from @t where t=1019))insert into @t(o,t)select o.SdkMessageProcessingStepImageId,4615 from SdkMessageProcessingStepImage o, @t c where c.o=o.OrganizationId and c.t=1019 and o.DeletionStateCode=0
if(exists(select o.ConstraintBasedGroupId from ConstraintBasedGroup o, @t c where(((o.BusinessUnitId=c.o and c.t in(8,10))) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ConstraintBasedGroupId from ConstraintBasedGroup o, @t c where(((o.OrganizationId=c.o and c.t=1019)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ConstraintBasedGroupId from ConstraintBasedGroup o, @t c where(((o.ModifiedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ConstraintBasedGroupId from ConstraintBasedGroup o, @t c where(((o.CreatedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t in(4007,9)))insert into @t(o,t)select o.ResourceGroupId,4005 from ResourceGroup o, @t c where c.o=o.ResourceGroupId and c.t in(4007,9) and o.DeletionStateCode=0
if(exists(select o.ResourceSpecId from ResourceSpec o, @t c where(((o.BusinessUnitId=c.o and c.t=10)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ResourceSpecId from ResourceSpec o, @t c where(((o.OrganizationId=c.o and c.t=1019)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ResourceSpecId from ResourceSpec o, @t c where(((o.CreatedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ResourceSpecId from ResourceSpec o, @t c where(((o.ModifiedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ResourceSpecId from ResourceSpec o, @t c where(((o.GroupObjectId=c.o and c.t in(9,4007))) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ServiceId from Service o, @t c where(((o.StrategyId=c.o and c.t=4602)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ServiceId from Service o, @t c where(((o.OrganizationId=c.o and c.t=1019)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ServiceId from Service o, @t c where(((o.ResourceSpecId=c.o and c.t=4006)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from ServiceAppointment o, @t c where(((o.ModifiedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from ServiceAppointment o, @t c where(((o.OwningBusinessUnit=c.o and c.t=10)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from ServiceAppointment o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from ServiceAppointment o, @t c where(((o.SiteId=c.o and c.t=4009)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from ServiceAppointment o, @t c where(((o.CreatedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from ServiceAppointment o, @t c where(((o.OwningUser=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=10000))insert into @t(o,t)select o.ActivityId,4214 from ServiceAppointment o, @t c where c.o=o.RegardingObjectId and c.t=10000 and o.DeletionStateCode=0
if(exists(select o.CalendarRuleId from CalendarRule o, @t c where(((o.ModifiedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.CalendarRuleId from CalendarRule o, @t c where(((o.CreatedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.CalendarRuleId from CalendarRule o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=4003))insert into @t(o,t)select o.CalendarRuleId,4004 from CalendarRule o, @t c where c.o=o.CalendarId and c.t=4003 and o.DeletionStateCode=0
if(exists(select o.EquipmentId from Equipment o, @t c where(((o.ModifiedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.EquipmentId from Equipment o, @t c where(((o.CalendarId=c.o and c.t=4003)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.EquipmentId from Equipment o, @t c where(((o.CreatedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.EquipmentId from Equipment o, @t c where(((o.OrganizationId=c.o and c.t=1019)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.EquipmentId from Equipment o, @t c where(((o.BusinessUnitId=c.o and c.t in(8,10))) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.EquipmentId from Equipment o, @t c where(((o.SiteId=c.o and c.t=4009)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t in(4000,8,4006)))insert into @t(o,t)select o.ResourceId,4002 from Resource o, @t c where c.o=o.ResourceId and c.t in(4000,8,4006) and o.DeletionStateCode=0
if(@isoffline=0)begin if(exists(select o.UserFiscalCalendarId from UserFiscalCalendar o, @t c where(((o.TransactionCurrencyId=c.o and c.t in(9105,9105,9105,9105,9105,9105))))))goto rl end
if(@isoffline=0)begin insert into @t(o,t)select o.UserFiscalCalendarId,1086 from UserFiscalCalendar o, @t c where c.o=o.SalesPersonId and c.t in(8,8,8,8,8,8) end
if(exists(select * from @t where t in(10,8,4009)))insert into @t(o,t)select o.InternalAddressId,1003 from InternalAddress o, @t c where c.o=o.ParentId and c.t in(10,8,4009) and o.DeletionStateCode=0
if(exists(select o.ActivityPartyId from ActivityParty o, @t c where(((o.PartyId=c.o and c.t in(4000,8))))))goto rl
if(exists(select * from @t where t=4200))insert into @t(o,t)select o.ActivityPartyId,135 from ActivityParty o, @t c where c.o=o.ActivityId and c.t=4200
if(exists(select * from @t where t=9))insert into @t(o,t)select o.TeamMembershipId,23 from TeamMembership o, @t c where c.o=o.TeamId and c.t=9
if(exists(select * from @t where t=8))insert into @t(o,t)select o.TeamMembershipId,23 from TeamMembership o, @t c where c.o=o.SystemUserId and c.t=8
if(exists(select * from @t where t=8))insert into @t(o,t)select o.SystemUserRoleId,15 from SystemUserRoles o, @t c where c.o=o.SystemUserId and c.t=8
if(exists(select * from @t where t=1036))insert into @t(o,t)select o.SystemUserRoleId,15 from SystemUserRoles o, @t c where c.o=o.RoleId and c.t=1036
if(@isoffline=0)begin if(exists(select * from @t where t=8))insert into @t(o,t)select o.SystemUserLicenseId,13 from SystemUserLicenses o, @t c where c.o=o.SystemUserId and c.t=8 end
if(exists(select o.BusinessUnitMapId from BusinessUnitMap o, @t c where(((o.SubBusinessId=c.o and c.t in(4000,4007))))))goto rl
if(exists(select o.BusinessUnitMapId from BusinessUnitMap o, @t c where(((o.BusinessId=c.o and c.t=8)))))goto rl
if(exists(select o.AccountId from Account o, @t c where(((o.TerritoryId=c.o and c.t=2013)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.AccountId from Account o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.AccountId from Account o, @t c where(((o.DefaultPriceLevelId=c.o and c.t=1022)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ContactId from Contact o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ContactId from Contact o, @t c where(((o.DefaultPriceLevelId=c.o and c.t=1022)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1))insert into @t(o,t)select o.ContactId,2 from Contact o, @t c where c.o=o.AccountId and c.t=1 and o.DeletionStateCode=0
if(exists(select o.CustomerRelationshipId from CustomerRelationship o, @t c where(((o.CustomerRoleId=c.o and c.t=4500)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.CustomerRelationshipId from CustomerRelationship o, @t c where(((o.PartnerRoleId=c.o and c.t=4500)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t in(2,1)))insert into @t(o,t)select o.CustomerRelationshipId,4502 from CustomerRelationship o, @t c where c.o=o.PartnerId and c.t in(2,1) and o.DeletionStateCode=0
if(exists(select * from @t where t in(1,2)))insert into @t(o,t)select o.CustomerRelationshipId,4502 from CustomerRelationship o, @t c where c.o=o.CustomerId and c.t in(1,2) and o.DeletionStateCode=0
if(exists(select * from @t where t in(1,2)))insert into @t(o,t)select o.CustomerAddressId,1071 from CustomerAddress o, @t c where c.o=o.ParentId and c.t in(1,2) and o.DeletionStateCode=0
if(exists(select o.ContractId from Contract o, @t c where(((o.BillingContactId=c.o and c.t=2)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ContractId from Contract o, @t c where(((o.OriginatingContract=c.o and c.t=1010)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ContractId from Contract o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ContractId from Contract o, @t c where(((o.BillingAccountId=c.o and c.t=1)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ContractId from Contract o, @t c where(((o.BillToAddress=c.o and c.t=1071)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ContractId from Contract o, @t c where(((o.ServiceAddress=c.o and c.t=1071)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ContractId from Contract o, @t c where(((o.ContractTemplateId=c.o and c.t=2011)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=2))insert into @t(o,t)select o.ContractId,1010 from Contract o, @t c where c.o=o.ContactId and c.t=2 and o.DeletionStateCode=0
if(exists(select * from @t where t=1))insert into @t(o,t)select o.ContractId,1010 from Contract o, @t c where c.o=o.AccountId and c.t=1 and o.DeletionStateCode=0
if(exists(select o.ContractDetailId from ContractDetail o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ContractDetailId from ContractDetail o, @t c where(((o.ServiceAddress=c.o and c.t=1071)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ContractDetailId from ContractDetail o, @t c where(((o.ProductId=c.o and c.t=1024)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ContractDetailId from ContractDetail o, @t c where(((o.UoMId=c.o and c.t=1055)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=2))insert into @t(o,t)select o.ContractDetailId,1011 from ContractDetail o, @t c where c.o=o.ContactId and c.t=2 and o.DeletionStateCode=0
if(exists(select * from @t where t=1010))insert into @t(o,t)select o.ContractDetailId,1011 from ContractDetail o, @t c where c.o=o.ContractId and c.t=1010 and o.DeletionStateCode=0
if(exists(select * from @t where t=1))insert into @t(o,t)select o.ContractDetailId,1011 from ContractDetail o, @t c where c.o=o.AccountId and c.t=1 and o.DeletionStateCode=0
if(exists(select o.IncidentId from Incident o, @t c where(((o.SubjectId=c.o and c.t=129)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.IncidentId from Incident o, @t c where(((o.ProductId=c.o and c.t=1024)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.IncidentId from Incident o, @t c where(((o.KbArticleId=c.o and c.t=127)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=2))insert into @t(o,t)select o.IncidentId,112 from Incident o, @t c where c.o=o.ContactId and c.t=2 and o.DeletionStateCode=0
if(exists(select * from @t where t=1011))insert into @t(o,t)select o.IncidentId,112 from Incident o, @t c where c.o=o.ContractDetailId and c.t=1011 and o.DeletionStateCode=0
if(exists(select * from @t where t=1010))insert into @t(o,t)select o.IncidentId,112 from Incident o, @t c where c.o=o.ContractId and c.t=1010 and o.DeletionStateCode=0
if(exists(select * from @t where t=1))insert into @t(o,t)select o.IncidentId,112 from Incident o, @t c where c.o=o.AccountId and c.t=1 and o.DeletionStateCode=0
if(exists(select o.ActivityId from IncidentResolution o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=112))insert into @t(o,t)select o.ActivityId,4206 from IncidentResolution o, @t c where c.o=o.IncidentId and c.t=112 and o.DeletionStateCode=0
if(exists(select * from @t where t=1010))insert into @t(o,t)select o.ServiceContractContactId,20 from ServiceContractContacts o, @t c where c.o=o.ContractId and c.t=1010
if(exists(select * from @t where t=2))insert into @t(o,t)select o.ServiceContractContactId,20 from ServiceContractContacts o, @t c where c.o=o.ContactId and c.t=2
if(exists(select o.LeadId from Lead o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1))insert into @t(o,t)select o.LeadId,4 from Lead o, @t c where c.o=o.AccountId and c.t=1 and o.DeletionStateCode=0
if(exists(select * from @t where t=2))insert into @t(o,t)select o.LeadId,4 from Lead o, @t c where c.o=o.ContactId and c.t=2 and o.DeletionStateCode=0
if(exists(select * from @t where t in(4,2,1)))insert into @t(o,t)select o.ListMemberId,4301 from ListMember o, @t c where c.o=o.EntityId and c.t in(4,2,1)
if(exists(select * from @t where t=4300))insert into @t(o,t)select o.ListMemberId,4301 from ListMember o, @t c where c.o=o.ListId and c.t=4300
if(exists(select * from @t where t=4))insert into @t(o,t)select o.LeadAddressId,1017 from LeadAddress o, @t c where c.o=o.ParentId and c.t=4
if(exists(select * from @t where t=4))insert into @t(o,t)select o.LeadProductId,27 from LeadProduct o, @t c where c.o=o.LeadId and c.t=4
if(exists(select * from @t where t=1024))insert into @t(o,t)select o.LeadProductId,27 from LeadProduct o, @t c where c.o=o.ProductId and c.t=1024
if(exists(select * from @t where t=4))insert into @t(o,t)select o.LeadCompetitorId,24 from LeadCompetitors o, @t c where c.o=o.LeadId and c.t=4
if(exists(select * from @t where t=123))insert into @t(o,t)select o.LeadCompetitorId,24 from LeadCompetitors o, @t c where c.o=o.CompetitorId and c.t=123
if(exists(select * from @t where t=2))insert into @t(o,t)select o.ContactLeadId,22 from ContactLeads o, @t c where c.o=o.ContactId and c.t=2
if(exists(select * from @t where t=4))insert into @t(o,t)select o.ContactLeadId,22 from ContactLeads o, @t c where c.o=o.LeadId and c.t=4
if(exists(select * from @t where t=1))insert into @t(o,t)select o.AccountLeadId,16 from AccountLeads o, @t c where c.o=o.AccountId and c.t=1
if(exists(select * from @t where t=4))insert into @t(o,t)select o.AccountLeadId,16 from AccountLeads o, @t c where c.o=o.LeadId and c.t=4
if(exists(select o.OpportunityId from Opportunity o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=2))insert into @t(o,t)select o.OpportunityId,3 from Opportunity o, @t c where c.o=o.ContactId and c.t=2 and o.DeletionStateCode=0
if(exists(select * from @t where t=1))insert into @t(o,t)select o.OpportunityId,3 from Opportunity o, @t c where c.o=o.AccountId and c.t=1 and o.DeletionStateCode=0
if(exists(select * from @t where t in(2,1)))insert into @t(o,t)select o.CustomerOpportunityRoleId,4503 from CustomerOpportunityRole o, @t c where c.o=o.CustomerId and c.t in(2,1) and o.DeletionStateCode=0
if(exists(select * from @t where t=3))insert into @t(o,t)select o.CustomerOpportunityRoleId,4503 from CustomerOpportunityRole o, @t c where c.o=o.OpportunityId and c.t=3 and o.DeletionStateCode=0
if(@isoffline=0)begin if(exists(select * from @t where t in(1,2,4)))insert into @t(o,t)select o.BulkOperationLogId,4405 from BulkOperationLog o, @t c where c.o=o.RegardingObjectId and c.t in(1,2,4) end
if(@isoffline=0)begin if(exists(select * from @t where t=4406))insert into @t(o,t)select o.BulkOperationLogId,4405 from BulkOperationLog o, @t c where c.o=o.BulkOperationId and c.t=4406 end
if(@isoffline=0)begin insert into @t(o,t)select o.BulkOperationLogId,4405 from BulkOperationLog o, @t c where c.o=o.CreatedObjectId and c.t in(4200,1,3,4,2) end
if(exists(select o.ActivityId from OpportunityClose o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from OpportunityClose o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=3))insert into @t(o,t)select o.ActivityId,4208 from OpportunityClose o, @t c where c.o=o.OpportunityId and c.t=3 and o.DeletionStateCode=0
if(exists(select o.QuoteId from Quote o, @t c where(((o.PriceLevelId=c.o and c.t=1022)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.QuoteId from Quote o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1))insert into @t(o,t)select o.QuoteId,1084 from Quote o, @t c where c.o=o.AccountId and c.t=1 and o.DeletionStateCode=0
if(exists(select * from @t where t=3))insert into @t(o,t)select o.QuoteId,1084 from Quote o, @t c where c.o=o.OpportunityId and c.t=3 and o.DeletionStateCode=0
if(exists(select * from @t where t=2))insert into @t(o,t)select o.QuoteId,1084 from Quote o, @t c where c.o=o.ContactId and c.t=2 and o.DeletionStateCode=0
if(exists(select o.ActivityId from QuoteClose o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1084))insert into @t(o,t)select o.ActivityId,4211 from QuoteClose o, @t c where c.o=o.QuoteId and c.t=1084 and o.DeletionStateCode=0
if(exists(select o.SalesOrderId from SalesOrder o, @t c where(((o.ContactId=c.o and c.t=2)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SalesOrderId from SalesOrder o, @t c where(((o.QuoteId=c.o and c.t=1084)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SalesOrderId from SalesOrder o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SalesOrderId from SalesOrder o, @t c where(((o.AccountId=c.o and c.t=1)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SalesOrderId from SalesOrder o, @t c where(((o.OpportunityId=c.o and c.t=3)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SalesOrderId from SalesOrder o, @t c where(((o.PriceLevelId=c.o and c.t=1022)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from OrderClose o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1088))insert into @t(o,t)select o.ActivityId,4209 from OrderClose o, @t c where c.o=o.SalesOrderId and c.t=1088 and o.DeletionStateCode=0
if(exists(select o.InvoiceId from Invoice o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.InvoiceId from Invoice o, @t c where(((o.OpportunityId=c.o and c.t=3)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.InvoiceId from Invoice o, @t c where(((o.PriceLevelId=c.o and c.t=1022)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.InvoiceId from Invoice o, @t c where(((o.AccountId=c.o and c.t=1)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.InvoiceId from Invoice o, @t c where(((o.SalesOrderId=c.o and c.t=1088)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.InvoiceId from Invoice o, @t c where(((o.ContactId=c.o and c.t=2)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from Task o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
insert into @t(o,t)select o.ActivityId,4212 from Task o, @t c where c.o=o.RegardingObjectId and c.t in(112,1090,3,1010,10000,1088,1,1084,2,4,4400) and o.DeletionStateCode=0
if(exists(select o.ActivityId from PhoneCall o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
insert into @t(o,t)select o.ActivityId,4210 from PhoneCall o, @t c where c.o=o.RegardingObjectId and c.t in(4402,4406,112,10000,1010,2,4,1,1090,1088,3,1084) and o.DeletionStateCode=0
if(exists(select o.ActivityId from Letter o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
insert into @t(o,t)select o.ActivityId,4207 from Letter o, @t c where c.o=o.RegardingObjectId and c.t in(10000,1010,4406,1088,4402,4,3,112,1,2,1084,1090) and o.DeletionStateCode=0
if(exists(select o.ActivityId from Fax o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
insert into @t(o,t)select o.ActivityId,4204 from Fax o, @t c where c.o=o.RegardingObjectId and c.t in(1084,2,1090,10000,1010,4406,3,1,112,4,1088,4402) and o.DeletionStateCode=0
if(exists(select o.ActivityId from Email o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
insert into @t(o,t)select o.ActivityId,4202 from Email o, @t c where c.o=o.RegardingObjectId and c.t in(4,4402,112,1,4700,10000,3,1084,2,1090,1010,4406,1088) and o.DeletionStateCode=0
if(exists(select * from @t where t in(4202,4200)))insert into @t(o,t)select o.ActivityMimeAttachmentId,1001 from ActivityAttachment o, @t c where c.o=o.ActivityId and c.t in(4202,4200)
if(exists(select o.ActivityId from Appointment o, @t c where(((o.ServiceId=c.o and c.t=4001)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from Appointment o, @t c where(((o.CreatedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from Appointment o, @t c where(((o.ModifiedBy=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from Appointment o, @t c where(((o.OwningUser=c.o and c.t=8)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.ActivityId from Appointment o, @t c where(((o.OwningBusinessUnit=c.o and c.t=10)) and o.DeletionStateCode=0 )))goto rl
insert into @t(o,t)select o.ActivityId,4201 from Appointment o, @t c where c.o=o.RegardingObjectId and c.t in(1084,4,4406,1090,1010,1088,4402,2,3,1,112,10000) and o.DeletionStateCode=0
insert into @t(o,t)select o.ActivityId,4401 from CampaignResponse o, @t c where c.o=o.OriginatingActivityId and c.t in(4204,4207,4210,4202,4201) and o.DeletionStateCode=0
if(exists(select * from @t where t in(4400,4406)))insert into @t(o,t)select o.ActivityId,4401 from CampaignResponse o, @t c where c.o=o.RegardingObjectId and c.t in(4400,4406) and o.DeletionStateCode=0
if(@isoffline=0)begin if(exists(select * from @t where t=4700))insert into @t(o,t)select o.DuplicateId,4415 from DuplicateRecord o, @t c where c.o=o.AsyncOperationId and c.t=4700 and o.DeletionStateCode=0 end
if(@isoffline=0)begin insert into @t(o,t)select o.DuplicateId,4415 from DuplicateRecord o, @t c where c.o=o.BaseRecordId and c.t in(10000,9,4401,2,1,2020,2013,1010,4005,3,4207,4210,127,4212,8,4201,123,4,1084,112,4400,4000,4202,4901,4204,4300,4001) and o.DeletionStateCode=0 end
if(@isoffline=0)begin insert into @t(o,t)select o.DuplicateId,4415 from DuplicateRecord o, @t c where c.o=o.DuplicateRecordId and c.t in(4201,4300,10000,4204,123,2013,4,4400,9,2020,4401,1,3,2,127,1084,4001,4207,1010,4005,4000,4212,4901,112,4202,8,4210) and o.DeletionStateCode=0 end
if(@isoffline=0)begin if(exists(select * from @t where t=4414))insert into @t(o,t)select o.DuplicateId,4415 from DuplicateRecord o, @t c where c.o=o.DuplicateRuleId and c.t=4414 and o.DeletionStateCode=0 end
if(exists(select o.QueueItemId from QueueItem o, @t c where(((o.QueueId=c.o and c.t=2020)) and o.DeletionStateCode=0 )))goto rl
insert into @t(o,t)select o.QueueItemId,2029 from QueueItem o, @t c where c.o=o.ObjectId and c.t in(4204,4201,4214,4406,4401,4207,4210,4212,4202,112,4402) and o.DeletionStateCode=0
if(exists(select o.InvoiceDetailId from InvoiceDetail o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.InvoiceDetailId from InvoiceDetail o, @t c where(((o.UoMId=c.o and c.t=1055)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.InvoiceDetailId from InvoiceDetail o, @t c where(((o.ProductId=c.o and c.t=1024)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1090))insert into @t(o,t)select o.InvoiceDetailId,1091 from InvoiceDetail o, @t c where c.o=o.InvoiceId and c.t=1090 and o.DeletionStateCode=0
if(exists(select * from @t where t=1090))insert into @t(o,t)select o.ContactInvoiceId,17 from ContactInvoices o, @t c where c.o=o.InvoiceId and c.t=1090
if(exists(select * from @t where t=2))insert into @t(o,t)select o.ContactInvoiceId,17 from ContactInvoices o, @t c where c.o=o.ContactId and c.t=2
if(exists(select o.SalesOrderDetailId from SalesOrderDetail o, @t c where(((o.ProductId=c.o and c.t=1024)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SalesOrderDetailId from SalesOrderDetail o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.SalesOrderDetailId from SalesOrderDetail o, @t c where(((o.UoMId=c.o and c.t=1055)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1088))insert into @t(o,t)select o.SalesOrderDetailId,1089 from SalesOrderDetail o, @t c where c.o=o.SalesOrderId and c.t=1088 and o.DeletionStateCode=0
if(exists(select * from @t where t=2))insert into @t(o,t)select o.ContactOrderId,19 from ContactOrders o, @t c where c.o=o.ContactId and c.t=2
if(exists(select * from @t where t=1088))insert into @t(o,t)select o.ContactOrderId,19 from ContactOrders o, @t c where c.o=o.SalesOrderId and c.t=1088
if(exists(select o.QuoteDetailId from QuoteDetail o, @t c where(((o.UoMId=c.o and c.t=1055)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.QuoteDetailId from QuoteDetail o, @t c where(((o.ProductId=c.o and c.t=1024)) and o.DeletionStateCode=0 )))goto rl
if(exists(select o.QuoteDetailId from QuoteDetail o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)) and o.DeletionStateCode=0 )))goto rl
if(exists(select * from @t where t=1084))insert into @t(o,t)select o.QuoteDetailId,1085 from QuoteDetail o, @t c where c.o=o.QuoteId and c.t=1084 and o.DeletionStateCode=0
if(exists(select * from @t where t=1084))insert into @t(o,t)select o.ContactQuoteId,18 from ContactQuotes o, @t c where c.o=o.QuoteId and c.t=1084
if(exists(select * from @t where t=2))insert into @t(o,t)select o.ContactQuoteId,18 from ContactQuotes o, @t c where c.o=o.ContactId and c.t=2
if(exists(select o.OpportunityProductId from OpportunityProduct o, @t c where(((o.ProductId=c.o and c.t=1024)))))goto rl
if(exists(select o.OpportunityProductId from OpportunityProduct o, @t c where(((o.UoMId=c.o and c.t=1055)))))goto rl
if(exists(select o.OpportunityProductId from OpportunityProduct o, @t c where(((o.TransactionCurrencyId=c.o and c.t=9105)))))goto rl
if(exists(select * from @t where t=3))insert into @t(o,t)select o.OpportunityProductId,1083 from OpportunityProduct o, @t c where c.o=o.OpportunityId and c.t=3
if(exists(select * from @t where t=3))insert into @t(o,t)select o.OpportunityCompetitorId,25 from OpportunityCompetitors o, @t c where c.o=o.OpportunityId and c.t=3
if(exists(select * from @t where t=123))insert into @t(o,t)select o.OpportunityCompetitorId,25 from OpportunityCompetitors o, @t c where c.o=o.CompetitorId and c.t=123
insert into @t(o,t)select o.AnnotationId,5 from Annotation o, @t c where c.o=o.ObjectId and c.t in(10000,4204,112,4207,4006,3,1010,4202,4703,4,123,4000,4210,1011,4201,1088,4209,4300,4001,4401,4215,10001,1024,4402,4206,1,4211,1084,4414,1090,4208,4214,4212,4400,2) and o.DeletionStateCode=0
if(@isoffline=0)begin insert into @t(o,t)select o.BulkDeleteFailureId,4425 from BulkDeleteFailure o, @t c where c.o=o.RegardingObjectId and c.t in(1086,2029,4300,127,4202,4,4406,2013,4000,4500,1010,1013,1070,4208,4201,1091,4210,4412,4005,1,4206,2010,1011,5,8,1089,1086,4402,2,1071,4211,3,1039,1055,4003,1083,1086,132,1088,4230,1082,1024,1023,1036,1085,10001,1026,1019,4705,1084,4006,123,1090,4009,4002,4503,4501,4204,1016,4001,2011,4413,4600,112,1086,10000,1086,4209,4405,1038,1001,4423,4411,4901,4401,4601,9,4200,4400,4410,2020,1056,4214,10,4102,4207,1080,4007,129,1022,1021,4212,4502) end
if(@isoffline=0)begin if(exists(select * from @t where t=4424))insert into @t(o,t)select o.BulkDeleteFailureId,4425 from BulkDeleteFailure o, @t c where c.o=o.BulkDeleteOperationId and c.t=4424 end
return
rl: insert into @t values(@null_guid, 0, 0, 0) return
end

/****** Object:  View [dbo].[FilteredListMember]    Script Date: 04/11/2008 06:57:59 ******/




--
-- report view for listmember
--
create view [dbo].[FilteredListMember] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    entityid,
    entitytype,
    listid,
    listmemberid,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    owningbusinessunit,
    owninguser
) with view_metadata as 
select 
    ListMember.CreatedBy,
    ListMember.CreatedByDsc,
    ListMember.CreatedByName,
    ListMember.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ListMember.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ListMember.CreatedOn,
    ListMember.EntityId,
    ListMember.EntityType,
    ListMember.ListId,
    ListMember.ListMemberId,
    ListMember.ModifiedBy,
    ListMember.ModifiedByDsc,
    ListMember.ModifiedByName,
    ListMember.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ListMember.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ListMember.ModifiedOn,
    ListMember.OwningBusinessUnit,
    ListMember.OwningUser
from ListMember
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId

/****** Object:  View [dbo].[SalesProcessInstance]    Script Date: 04/11/2008 06:58:29 ******/




create view [dbo].[SalesProcessInstance] (
    SalesProcessInstanceId,
    SalesProcessName,
    OpportunityId,
    OpportunityIdDsc,
    OpportunityIdName,
    SalesStageName,
    BusinessUnitId,
    BusinessUnitIdDsc,
    BusinessUnitIdName
) as
select
    a.AsyncOperationId,
    a.Name,
    o.OpportunityId,
    o.DeletionStateCode,
    o.Name,
    a.WorkflowStageName,
    a.OwningBusinessUnit,
    bu.DeletionStateCode,
    bu.Name
from
    AsyncOperation a
    join OpportunityBase o on (o.OpportunityId = a.RegardingObjectId)
    join BusinessUnitBase bu on (bu.BusinessUnitId = a.OwningBusinessUnit)
where
    a.OperationType = 10 and
    a.RegardingObjectTypeCode = 3 and
    a.WorkflowStageName is not null

/****** Object:  View [dbo].[FilteredCampaignActivityItem]    Script Date: 04/11/2008 06:57:51 ******/




--
-- report view for campaignactivityitem
--
create view [dbo].[FilteredCampaignActivityItem] (
    campaignactivityid,
    campaignactivityitemid,
    itemid,
    itemobjecttypecode,
    itemobjecttypecodename,
    owningbusinessunit,
    owninguser
) with view_metadata as 
select 
    CampaignActivityItem.CampaignActivityId,
    CampaignActivityItem.CampaignActivityItemId,
    CampaignActivityItem.ItemId,
    CampaignActivityItem.ItemObjectTypeCode,
    ItemObjectTypeCodePLTable.Value,
    CampaignActivityItem.OwningBusinessUnit,
    CampaignActivityItem.OwningUser
from CampaignActivityItem
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap ItemObjectTypeCodePLTable on 
        (ItemObjectTypeCodePLTable.AttributeName = 'itemobjecttypecode'
        and ItemObjectTypeCodePLTable.ObjectTypeCode = 4404
        and ItemObjectTypeCodePLTable.AttributeValue = CampaignActivityItem.ItemObjectTypeCode
        and ItemObjectTypeCodePLTable.LangId = us.UILanguageId )

/****** Object:  UserDefinedFunction [dbo].[fn_CollectForCascadeReparent]    Script Date: 04/11/2008 06:57:23 ******/




CREATE function [dbo].[fn_CollectForCascadeReparent]
(
  @root_id uniqueidentifier,
  @root_otc int,
  @isoffline int,
  @old_owner uniqueidentifier
)
returns @t table
( 	
   o uniqueidentifier,
   t int,
   p int default 0,
   u uniqueidentifier
) 
as
begin
insert into @t values(@root_id,@root_otc,0,@old_owner)
if(exists(select * from @t where t=9100))begin insert into @t(o,t,p,u) select o.ReportId,9100,0,o.OwningUser from Report o,@t c where o.ParentReportId=c.o and c.t=9100 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=9100))insert into @t(o,t,p,u) select o.ReportId,9100,0,o.OwningUser from Report o,@t c where o.ParentReportId=c.o and c.t=9100 and o.DeletionStateCode=0 and o.ReportId not in(select o from @t where o=o.ReportId and t=9100) end
if(exists(select * from @t where t=4400))begin insert into @t(o,t,p,u) select o.ActivityId,4402,0,o.OwningUser from CampaignActivity o,@t c where o.RegardingObjectId=c.o and c.t=4400 and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4400,4406)))begin insert into @t(o,t,p,u) select o.ActivityId,4401,0,o.OwningUser from CampaignResponse o,@t c where o.RegardingObjectId=c.o and c.t in(4400,4406) and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.AccountId,1,0,o.OwningUser from Account o,@t c where o.ParentAccountId=c.o and c.t=1 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=1))insert into @t(o,t,p,u) select o.AccountId,1,0,o.OwningUser from Account o,@t c where o.ParentAccountId=c.o and c.t=1 and o.DeletionStateCode=0 and o.AccountId not in(select o from @t where o=o.AccountId and t=1) end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.ParentContactId=c.o and c.t=2 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=2))insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.ParentContactId=c.o and c.t=2 and o.DeletionStateCode=0 and o.ContactId not in(select o from @t where o=o.ContactId and t=2) end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.InvoiceId,1090,0,o.OwningUser from Invoice o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.InvoiceId,1090,0,o.OwningUser from Invoice o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.SalesOrderId,1088,0,o.OwningUser from SalesOrder o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.SalesOrderId,1088,0,o.OwningUser from SalesOrder o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1088))begin insert into @t(o,t,p,u) select o.ActivityId,4209,0,o.OwningUser from OrderClose o,@t c where o.SalesOrderId=c.o and c.t=1088 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.QuoteId,1084,0,o.OwningUser from Quote o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.QuoteId,1084,0,o.OwningUser from Quote o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1084))begin insert into @t(o,t,p,u) select o.ActivityId,4211,0,o.OwningUser from QuoteClose o,@t c where o.QuoteId=c.o and c.t=1084 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.ContractId,1010,0,o.OwningUser from Contract o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.ContractId,1010,0,o.OwningUser from Contract o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.IncidentId,112,0,o.OwningUser from Incident o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.IncidentId,112,0,o.OwningUser from Incident o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=112))begin insert into @t(o,t,p,u) select o.ActivityId,4206,0,o.OwningUser from IncidentResolution o,@t c where o.IncidentId=c.o and c.t=112 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.LeadId,4,0,o.OwningUser from Lead o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.LeadId,4,0,o.OwningUser from Lead o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.OpportunityId,3,0,o.OwningUser from Opportunity o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.OpportunityId,3,0,o.OwningUser from Opportunity o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=3))begin insert into @t(o,t,p,u) select o.CustomerOpportunityRoleId,4503,0,o.OwningUser from CustomerOpportunityRole o,@t c where o.OpportunityId=c.o and c.t=3 and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(1084,1090,1010,1,3,2,1088,4,10000,112)))begin insert into @t(o,t,p,u) select o.ActivityId,4214,0,o.OwningUser from ServiceAppointment o,@t c where o.RegardingObjectId=c.o and c.t in(1084,1090,1010,1,3,2,1088,4,10000,112) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4400,1,2,4,112,1090,3,10000,1010,1084,1088)))begin insert into @t(o,t,p,u) select o.ActivityId,4212,0,o.OwningUser from Task o,@t c where o.RegardingObjectId=c.o and c.t in(4400,1,2,4,112,1090,3,10000,1010,1084,1088) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4,1010,112,10000,4402,4406,3,1084,1088,2,1,1090)))begin insert into @t(o,t,p,u) select o.ActivityId,4210,0,o.OwningUser from PhoneCall o,@t c where o.RegardingObjectId=c.o and c.t in(4,1010,112,10000,4402,4406,3,1084,1088,2,1,1090) and o.DeletionStateCode=0 end
if(exists(select * from @t where t=3))begin insert into @t(o,t,p,u) select o.ActivityId,4208,0,o.OwningUser from OpportunityClose o,@t c where o.OpportunityId=c.o and c.t=3 and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(1010,10000,1088,4402,4406,112,4,2,1,1084,1090,3)))begin insert into @t(o,t,p,u) select o.ActivityId,4207,0,o.OwningUser from Letter o,@t c where o.RegardingObjectId=c.o and c.t in(1010,10000,1088,4402,4406,112,4,2,1,1084,1090,3) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4402,3,4,1088,1,112,4406,1084,2,1090,10000,1010)))begin insert into @t(o,t,p,u) select o.ActivityId,4204,0,o.OwningUser from Fax o,@t c where o.RegardingObjectId=c.o and c.t in(4402,3,4,1088,1,112,4406,1084,2,1090,10000,1010) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4700,10000,4402,112,1,4,2,1090,1010,4406,3,1088,1084)))begin insert into @t(o,t,p,u) select o.ActivityId,4202,0,o.OwningUser from Email o,@t c where o.RegardingObjectId=c.o and c.t in(4700,10000,4402,112,1,4,2,1090,1010,4406,3,1088,1084) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(10000,4402,112,1,3,2,1010,1088,1090,4406,4,1084)))begin insert into @t(o,t,p,u) select o.ActivityId,4201,0,o.OwningUser from Appointment o,@t c where o.RegardingObjectId=c.o and c.t in(10000,4402,112,1,3,2,1010,1088,1090,4406,4,1084) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4210,4201,1088,4209,1010,4202,4703,4,4206,1,4211,1084,4414,4300,4401,10000,4204,112,4207,3,1090,4208,4214,4212,4400,2,4402)))begin insert into @t(o,t,p,u) select o.AnnotationId,5,0,o.OwningUser from Annotation o,@t c where o.ObjectId=c.o and c.t in(4210,4201,1088,4209,1010,4202,4703,4,4206,1,4211,1084,4414,4300,4401,10000,4204,112,4207,3,1090,4208,4214,4212,4400,2,4402) and o.DeletionStateCode=0 end
return
end

/****** Object:  UserDefinedFunction [dbo].[fn_CollectForCascadeShare]    Script Date: 04/11/2008 06:57:23 ******/




CREATE function [dbo].[fn_CollectForCascadeShare]
(
  @root_id uniqueidentifier,
  @root_otc int,
  @isoffline int,
  @old_owner uniqueidentifier
)
returns @t table
( 	
   o uniqueidentifier,
   t int,
   p int default 0,
   u uniqueidentifier
) 
as
begin
insert into @t values(@root_id,@root_otc,0,@old_owner)
if(exists(select * from @t where t=9100))begin insert into @t(o,t,p,u) select o.ReportId,9100,0,o.OwningUser from Report o,@t c where o.ParentReportId=c.o and c.t=9100 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=9100))insert into @t(o,t,p,u) select o.ReportId,9100,0,o.OwningUser from Report o,@t c where o.ParentReportId=c.o and c.t=9100 and o.DeletionStateCode=0 and o.ReportId not in(select o from @t where o=o.ReportId and t=9100) end
if(exists(select * from @t where t=4400))begin insert into @t(o,t,p,u) select o.ActivityId,4402,0,o.OwningUser from CampaignActivity o,@t c where o.RegardingObjectId=c.o and c.t=4400 and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4400,4406)))begin insert into @t(o,t,p,u) select o.ActivityId,4401,0,o.OwningUser from CampaignResponse o,@t c where o.RegardingObjectId=c.o and c.t in(4400,4406) and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.AccountId,1,0,o.OwningUser from Account o,@t c where o.ParentAccountId=c.o and c.t=1 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=1))insert into @t(o,t,p,u) select o.AccountId,1,0,o.OwningUser from Account o,@t c where o.ParentAccountId=c.o and c.t=1 and o.DeletionStateCode=0 and o.AccountId not in(select o from @t where o=o.AccountId and t=1) end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.ParentContactId=c.o and c.t=2 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=2))insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.ParentContactId=c.o and c.t=2 and o.DeletionStateCode=0 and o.ContactId not in(select o from @t where o=o.ContactId and t=2) end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.InvoiceId,1090,0,o.OwningUser from Invoice o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.InvoiceId,1090,0,o.OwningUser from Invoice o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.SalesOrderId,1088,0,o.OwningUser from SalesOrder o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.SalesOrderId,1088,0,o.OwningUser from SalesOrder o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1088))begin insert into @t(o,t,p,u) select o.ActivityId,4209,0,o.OwningUser from OrderClose o,@t c where o.SalesOrderId=c.o and c.t=1088 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.QuoteId,1084,0,o.OwningUser from Quote o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.QuoteId,1084,0,o.OwningUser from Quote o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1084))begin insert into @t(o,t,p,u) select o.ActivityId,4211,0,o.OwningUser from QuoteClose o,@t c where o.QuoteId=c.o and c.t=1084 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.ContractId,1010,0,o.OwningUser from Contract o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.ContractId,1010,0,o.OwningUser from Contract o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.IncidentId,112,0,o.OwningUser from Incident o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.IncidentId,112,0,o.OwningUser from Incident o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=112))begin insert into @t(o,t,p,u) select o.ActivityId,4206,0,o.OwningUser from IncidentResolution o,@t c where o.IncidentId=c.o and c.t=112 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.LeadId,4,0,o.OwningUser from Lead o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.LeadId,4,0,o.OwningUser from Lead o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.OpportunityId,3,0,o.OwningUser from Opportunity o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.OpportunityId,3,0,o.OwningUser from Opportunity o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=3))begin insert into @t(o,t,p,u) select o.CustomerOpportunityRoleId,4503,0,o.OwningUser from CustomerOpportunityRole o,@t c where o.OpportunityId=c.o and c.t=3 and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(1084,1090,1010,1,3,2,1088,4,10000,112)))begin insert into @t(o,t,p,u) select o.ActivityId,4214,0,o.OwningUser from ServiceAppointment o,@t c where o.RegardingObjectId=c.o and c.t in(1084,1090,1010,1,3,2,1088,4,10000,112) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4400,1,2,4,112,1090,3,10000,1010,1084,1088)))begin insert into @t(o,t,p,u) select o.ActivityId,4212,0,o.OwningUser from Task o,@t c where o.RegardingObjectId=c.o and c.t in(4400,1,2,4,112,1090,3,10000,1010,1084,1088) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4,1010,112,10000,4402,4406,3,1084,1088,2,1,1090)))begin insert into @t(o,t,p,u) select o.ActivityId,4210,0,o.OwningUser from PhoneCall o,@t c where o.RegardingObjectId=c.o and c.t in(4,1010,112,10000,4402,4406,3,1084,1088,2,1,1090) and o.DeletionStateCode=0 end
if(exists(select * from @t where t=3))begin insert into @t(o,t,p,u) select o.ActivityId,4208,0,o.OwningUser from OpportunityClose o,@t c where o.OpportunityId=c.o and c.t=3 and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(1010,10000,1088,4402,4406,112,4,2,1,1084,1090,3)))begin insert into @t(o,t,p,u) select o.ActivityId,4207,0,o.OwningUser from Letter o,@t c where o.RegardingObjectId=c.o and c.t in(1010,10000,1088,4402,4406,112,4,2,1,1084,1090,3) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4402,3,4,1088,1,112,4406,1084,2,1090,10000,1010)))begin insert into @t(o,t,p,u) select o.ActivityId,4204,0,o.OwningUser from Fax o,@t c where o.RegardingObjectId=c.o and c.t in(4402,3,4,1088,1,112,4406,1084,2,1090,10000,1010) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4700,10000,4402,112,1,4,2,1090,1010,4406,3,1088,1084)))begin insert into @t(o,t,p,u) select o.ActivityId,4202,0,o.OwningUser from Email o,@t c where o.RegardingObjectId=c.o and c.t in(4700,10000,4402,112,1,4,2,1090,1010,4406,3,1088,1084) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(10000,4402,112,1,3,2,1010,1088,1090,4406,4,1084)))begin insert into @t(o,t,p,u) select o.ActivityId,4201,0,o.OwningUser from Appointment o,@t c where o.RegardingObjectId=c.o and c.t in(10000,4402,112,1,3,2,1010,1088,1090,4406,4,1084) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4210,4201,1088,4209,1010,4202,4703,4,4206,1,4211,1084,4414,4300,4401,10000,4204,112,4207,3,1090,4208,4214,4212,4400,2,4402)))begin insert into @t(o,t,p,u) select o.AnnotationId,5,0,o.OwningUser from Annotation o,@t c where o.ObjectId=c.o and c.t in(4210,4201,1088,4209,1010,4202,4703,4,4206,1,4211,1084,4414,4300,4401,10000,4204,112,4207,3,1090,4208,4214,4212,4400,2,4402) and o.DeletionStateCode=0 end
return
end

/****** Object:  UserDefinedFunction [dbo].[fn_CollectForCascadeAssign]    Script Date: 04/11/2008 06:57:22 ******/




CREATE function [dbo].[fn_CollectForCascadeAssign]
(
  @root_id uniqueidentifier,
  @root_otc int,
  @isoffline int,
  @old_owner uniqueidentifier
)
returns @t table
( 	
   o uniqueidentifier,
   t int,
   p int default 0,
   u uniqueidentifier
) 
as
begin
insert into @t values(@root_id,@root_otc,0,@old_owner)
if(exists(select * from @t where t=9100))begin insert into @t(o,t,p,u) select o.ReportId,9100,0,o.OwningUser from Report o,@t c where o.ParentReportId=c.o and c.t=9100 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=9100))insert into @t(o,t,p,u) select o.ReportId,9100,0,o.OwningUser from Report o,@t c where o.ParentReportId=c.o and c.t=9100 and o.DeletionStateCode=0 and o.ReportId not in(select o from @t where o=o.ReportId and t=9100) end
if(exists(select * from @t where t in(4400,4406)))begin insert into @t(o,t,p,u) select o.ActivityId,4401,0,o.OwningUser from CampaignResponse o,@t c where o.RegardingObjectId=c.o and c.t in(4400,4406) and o.DeletionStateCode=0 end
if(exists(select * from @t where t=4400))begin insert into @t(o,t,p,u) select o.ActivityId,4402,0,o.OwningUser from CampaignActivity o,@t c where o.RegardingObjectId=c.o and c.t=4400 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.AccountId,1,0,o.OwningUser from Account o,@t c where o.ParentAccountId=c.o and c.t=1 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=1))insert into @t(o,t,p,u) select o.AccountId,1,0,o.OwningUser from Account o,@t c where o.ParentAccountId=c.o and c.t=1 and o.DeletionStateCode=0 and o.AccountId not in(select o from @t where o=o.AccountId and t=1) end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.ParentContactId=c.o and c.t=2 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=2))insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.ParentContactId=c.o and c.t=2 and o.DeletionStateCode=0 and o.ContactId not in(select o from @t where o=o.ContactId and t=2) end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.InvoiceId,1090,0,o.OwningUser from Invoice o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.InvoiceId,1090,0,o.OwningUser from Invoice o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.SalesOrderId,1088,0,o.OwningUser from SalesOrder o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.SalesOrderId,1088,0,o.OwningUser from SalesOrder o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1088))begin insert into @t(o,t,p,u) select o.ActivityId,4209,0,o.OwningUser from OrderClose o,@t c where o.SalesOrderId=c.o and c.t=1088 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.QuoteId,1084,0,o.OwningUser from Quote o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.QuoteId,1084,0,o.OwningUser from Quote o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1084))begin insert into @t(o,t,p,u) select o.ActivityId,4211,0,o.OwningUser from QuoteClose o,@t c where o.QuoteId=c.o and c.t=1084 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.ContractId,1010,0,o.OwningUser from Contract o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.ContractId,1010,0,o.OwningUser from Contract o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.IncidentId,112,0,o.OwningUser from Incident o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.IncidentId,112,0,o.OwningUser from Incident o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=112))begin insert into @t(o,t,p,u) select o.ActivityId,4206,0,o.OwningUser from IncidentResolution o,@t c where o.IncidentId=c.o and c.t=112 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.LeadId,4,0,o.OwningUser from Lead o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.LeadId,4,0,o.OwningUser from Lead o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.OpportunityId,3,0,o.OwningUser from Opportunity o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.OpportunityId,3,0,o.OwningUser from Opportunity o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=3))begin insert into @t(o,t,p,u) select o.CustomerOpportunityRoleId,4503,0,o.OwningUser from CustomerOpportunityRole o,@t c where o.OpportunityId=c.o and c.t=3 and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(1010,1,1090,1084,2,3,4,1088,112,10000)))begin insert into @t(o,t,p,u) select o.ActivityId,4214,0,o.OwningUser from ServiceAppointment o,@t c where o.RegardingObjectId=c.o and c.t in(1010,1,1090,1084,2,3,4,1088,112,10000) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(2,4,4400,112,1090,3,1010,10000,1088,1,1084)))begin insert into @t(o,t,p,u) select o.ActivityId,4212,0,o.OwningUser from Task o,@t c where o.RegardingObjectId=c.o and c.t in(2,4,4400,112,1090,3,1010,10000,1088,1,1084) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4,1,10000,112,1010,3,1084,1088,2,1090,4402,4406)))begin insert into @t(o,t,p,u) select o.ActivityId,4210,0,o.OwningUser from PhoneCall o,@t c where o.RegardingObjectId=c.o and c.t in(4,1,10000,112,1010,3,1084,1088,2,1090,4402,4406) and o.DeletionStateCode=0 end
if(exists(select * from @t where t=3))begin insert into @t(o,t,p,u) select o.ActivityId,4208,0,o.OwningUser from OpportunityClose o,@t c where o.OpportunityId=c.o and c.t=3 and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(1010,4406,1,2,1084,1090,3,1088,4402,4,112,10000)))begin insert into @t(o,t,p,u) select o.ActivityId,4207,0,o.OwningUser from Letter o,@t c where o.RegardingObjectId=c.o and c.t in(1010,4406,1,2,1084,1090,3,1088,4402,4,112,10000) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4402,3,4,1088,1,112,10000,4406,1010,2,1084,1090)))begin insert into @t(o,t,p,u) select o.ActivityId,4204,0,o.OwningUser from Fax o,@t c where o.RegardingObjectId=c.o and c.t in(4402,3,4,1088,1,112,10000,4406,1010,2,1084,1090) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(1,112,4402,4,4700,2,10000,1090,1010,4406,3,1088,1084)))begin insert into @t(o,t,p,u) select o.ActivityId,4202,0,o.OwningUser from Email o,@t c where o.RegardingObjectId=c.o and c.t in(1,112,4402,4,4700,2,10000,1090,1010,4406,3,1088,1084) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(10000,4402,1084,3,2,112,1,4,4406,1090,1088,1010)))begin insert into @t(o,t,p,u) select o.ActivityId,4201,0,o.OwningUser from Appointment o,@t c where o.RegardingObjectId=c.o and c.t in(10000,4402,1084,3,2,112,1,4,4406,1090,1088,1010) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4206,4402,2,4400,4212,4214,4208,1090,3,4210,4401,1084,1,10000,4414,4211,4300,4207,112,4204,4201,1088,4209,1010,4202,4703,4)))begin insert into @t(o,t,p,u) select o.AnnotationId,5,0,o.OwningUser from Annotation o,@t c where o.ObjectId=c.o and c.t in(4206,4402,2,4400,4212,4214,4208,1090,3,4210,4401,1084,1,10000,4414,4211,4300,4207,112,4204,4201,1088,4209,1010,4202,4703,4) and o.DeletionStateCode=0 end
return
end

/****** Object:  UserDefinedFunction [dbo].[fn_CollectForCascadeUnShare]    Script Date: 04/11/2008 06:57:24 ******/




CREATE function [dbo].[fn_CollectForCascadeUnShare]
(
  @root_id uniqueidentifier,
  @root_otc int,
  @isoffline int,
  @old_owner uniqueidentifier
)
returns @t table
( 	
   o uniqueidentifier,
   t int,
   p int default 0,
   u uniqueidentifier
) 
as
begin
insert into @t values(@root_id,@root_otc,0,@old_owner)
if(exists(select * from @t where t=9100))begin insert into @t(o,t,p,u) select o.ReportId,9100,0,o.OwningUser from Report o,@t c where o.ParentReportId=c.o and c.t=9100 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=9100))insert into @t(o,t,p,u) select o.ReportId,9100,0,o.OwningUser from Report o,@t c where o.ParentReportId=c.o and c.t=9100 and o.DeletionStateCode=0 and o.ReportId not in(select o from @t where o=o.ReportId and t=9100) end
if(exists(select * from @t where t=4400))begin insert into @t(o,t,p,u) select o.ActivityId,4402,0,o.OwningUser from CampaignActivity o,@t c where o.RegardingObjectId=c.o and c.t=4400 and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4400,4406)))begin insert into @t(o,t,p,u) select o.ActivityId,4401,0,o.OwningUser from CampaignResponse o,@t c where o.RegardingObjectId=c.o and c.t in(4400,4406) and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.AccountId,1,0,o.OwningUser from Account o,@t c where o.ParentAccountId=c.o and c.t=1 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=1))insert into @t(o,t,p,u) select o.AccountId,1,0,o.OwningUser from Account o,@t c where o.ParentAccountId=c.o and c.t=1 and o.DeletionStateCode=0 and o.AccountId not in(select o from @t where o=o.AccountId and t=1) end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.ParentContactId=c.o and c.t=2 and o.DeletionStateCode=0
while(@@rowcount <> 0)if(exists(select * from @t where t=2))insert into @t(o,t,p,u) select o.ContactId,2,0,o.OwningUser from Contact o,@t c where o.ParentContactId=c.o and c.t=2 and o.DeletionStateCode=0 and o.ContactId not in(select o from @t where o=o.ContactId and t=2) end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.InvoiceId,1090,0,o.OwningUser from Invoice o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.InvoiceId,1090,0,o.OwningUser from Invoice o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.SalesOrderId,1088,0,o.OwningUser from SalesOrder o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.SalesOrderId,1088,0,o.OwningUser from SalesOrder o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1088))begin insert into @t(o,t,p,u) select o.ActivityId,4209,0,o.OwningUser from OrderClose o,@t c where o.SalesOrderId=c.o and c.t=1088 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.QuoteId,1084,0,o.OwningUser from Quote o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.QuoteId,1084,0,o.OwningUser from Quote o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1084))begin insert into @t(o,t,p,u) select o.ActivityId,4211,0,o.OwningUser from QuoteClose o,@t c where o.QuoteId=c.o and c.t=1084 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.ContractId,1010,0,o.OwningUser from Contract o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.ContractId,1010,0,o.OwningUser from Contract o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.IncidentId,112,0,o.OwningUser from Incident o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.IncidentId,112,0,o.OwningUser from Incident o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=112))begin insert into @t(o,t,p,u) select o.ActivityId,4206,0,o.OwningUser from IncidentResolution o,@t c where o.IncidentId=c.o and c.t=112 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.LeadId,4,0,o.OwningUser from Lead o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.LeadId,4,0,o.OwningUser from Lead o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=2))begin insert into @t(o,t,p,u) select o.OpportunityId,3,0,o.OwningUser from Opportunity o,@t c where o.ContactId=c.o and c.t=2 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=1))begin insert into @t(o,t,p,u) select o.OpportunityId,3,0,o.OwningUser from Opportunity o,@t c where o.AccountId=c.o and c.t=1 and o.DeletionStateCode=0 end
if(exists(select * from @t where t=3))begin insert into @t(o,t,p,u) select o.CustomerOpportunityRoleId,4503,0,o.OwningUser from CustomerOpportunityRole o,@t c where o.OpportunityId=c.o and c.t=3 and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(1084,1090,1010,1,3,2,1088,4,10000,112)))begin insert into @t(o,t,p,u) select o.ActivityId,4214,0,o.OwningUser from ServiceAppointment o,@t c where o.RegardingObjectId=c.o and c.t in(1084,1090,1010,1,3,2,1088,4,10000,112) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4400,1,2,4,112,1090,3,10000,1010,1084,1088)))begin insert into @t(o,t,p,u) select o.ActivityId,4212,0,o.OwningUser from Task o,@t c where o.RegardingObjectId=c.o and c.t in(4400,1,2,4,112,1090,3,10000,1010,1084,1088) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4,1010,112,10000,4402,4406,3,1084,1088,2,1,1090)))begin insert into @t(o,t,p,u) select o.ActivityId,4210,0,o.OwningUser from PhoneCall o,@t c where o.RegardingObjectId=c.o and c.t in(4,1010,112,10000,4402,4406,3,1084,1088,2,1,1090) and o.DeletionStateCode=0 end
if(exists(select * from @t where t=3))begin insert into @t(o,t,p,u) select o.ActivityId,4208,0,o.OwningUser from OpportunityClose o,@t c where o.OpportunityId=c.o and c.t=3 and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(1010,10000,1088,4402,4406,112,4,2,1,1084,1090,3)))begin insert into @t(o,t,p,u) select o.ActivityId,4207,0,o.OwningUser from Letter o,@t c where o.RegardingObjectId=c.o and c.t in(1010,10000,1088,4402,4406,112,4,2,1,1084,1090,3) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4402,3,4,1088,1,112,4406,1084,2,1090,10000,1010)))begin insert into @t(o,t,p,u) select o.ActivityId,4204,0,o.OwningUser from Fax o,@t c where o.RegardingObjectId=c.o and c.t in(4402,3,4,1088,1,112,4406,1084,2,1090,10000,1010) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4700,10000,4402,112,1,4,2,1090,1010,4406,3,1088,1084)))begin insert into @t(o,t,p,u) select o.ActivityId,4202,0,o.OwningUser from Email o,@t c where o.RegardingObjectId=c.o and c.t in(4700,10000,4402,112,1,4,2,1090,1010,4406,3,1088,1084) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(10000,4402,112,1,3,2,1010,1088,1090,4406,4,1084)))begin insert into @t(o,t,p,u) select o.ActivityId,4201,0,o.OwningUser from Appointment o,@t c where o.RegardingObjectId=c.o and c.t in(10000,4402,112,1,3,2,1010,1088,1090,4406,4,1084) and o.DeletionStateCode=0 end
if(exists(select * from @t where t in(4210,4201,1088,4209,1010,4202,4703,4,4206,1,4211,1084,4414,4300,4401,10000,4204,112,4207,3,1090,4208,4214,4212,4400,2,4402)))begin insert into @t(o,t,p,u) select o.AnnotationId,5,0,o.OwningUser from Annotation o,@t c where o.ObjectId=c.o and c.t in(4210,4201,1088,4209,1010,4202,4703,4,4206,1,4211,1084,4414,4300,4401,10000,4204,112,4207,3,1090,4208,4214,4212,4400,2,4402) and o.DeletionStateCode=0 end
return
end

/****** Object:  UserDefinedFunction [dbo].[fn_CheckAccessForResource]    Script Date: 04/11/2008 06:57:22 ******/
SET ANSI_NULLS OFF



create function [dbo].[fn_CheckAccessForResource]( 
	@userid uniqueidentifier, 
	@userbusinessunitid uniqueidentifier, 
	@objecttypecode int, 
	@objectid uniqueidentifier ) 
	 
returns int 
as 
begin 
	if @objecttypecode not in ( 8, 9, 4000, 4002 ) 
	begin
		return 1
	end
	if ( @userbusinessunitid is null ) 
	begin 
		select @userbusinessunitid = BusinessUnitId from SystemUserBase where SystemUserId = @userid 
	end 
	if @objecttypecode = 4002 
	begin 
		declare @resourceotc int 
 
		select  
			@resourceotc = 	ObjectTypeCode 
		from Resource 
		where ResourceId = @objectid 
 
		return dbo.fn_CheckAccessForResource(  
			@userid, 
			@userbusinessunitid, 
			@resourceotc, 
			@objectid ) 
	end 
	if @objecttypecode in ( 8, 9, 4000 ) 
	begin 
		declare @privguid uniqueidentifier 
		declare @PrivilegeDepthMask int 
		declare @sql nvarchar(4000) 
 
		select @privguid =  
			case @objecttypecode  
				when 8 then '76FAAD15-BC44-4F4D-84DC-DD1E1DDA74D9'  
				when 9 then '663d1920-56e1-4166-89f0-47f3330923a8'
				when 4000 then 'B41900AB-96E1-45D5-86F5-7B10DFC9E366' 
			end 
 
		select @PrivilegeDepthMask = dbo.fn_GetMaxUserPrivilege( @userid, @privguid ) 
 
		-- user has no privilege whatsoever		 
		if ( (@PrivilegeDepthMask = 0) or @PrivilegeDepthMask is null) return 0 
 
		-- user has only user privilege, should NEVER be user privilege 
		-- for user, team, equipment 
		if ( (@PrivilegeDepthMask & 0x11) != 0 ) 
		begin 
			return 0 
		end 
		
		-- user has global privilege 
 		if ( (@PrivilegeDepthMask & 0x88) != 0 ) 
		begin 
			return 1 
		end	 
 
		declare @objectbusinessunitid uniqueidentifier 
 
		select @objectbusinessunitid = dbo.fn_GetBusinessUnitFromInnerEntityOfResource( 
				@objecttypecode, 
				@objectid ) 
 
		-- user has business unit privilege 
		if ( (@PrivilegeDepthMask & 0x22) != 0 ) 
		begin 
			if ( @objectbusinessunitid = @userbusinessunitid ) 
				return 1 
			else 
				return 0 
		end 
		-- user has deep business unit privilege 
		if ( (@PrivilegeDepthMask & 0x44) != 0 ) 
		begin 
 
			if ( @objectbusinessunitid  
				in  
				( 
					select  
						SubBusinessId  
					from  
						BusinessUnitMap  
					where BusinessId=@userbusinessunitid )) 
				return 1 
			else 
				return 0 
		end 
	end 
	 
	return 1 
end

/****** Object:  View [dbo].[FilteredPrivilege]    Script Date: 04/11/2008 06:58:03 ******/




--
-- report view for privilege
--
create view [dbo].[FilteredPrivilege] (
    accessright,
    canbebasic,
    canbebasicname,
    canbedeep,
    canbedeepname,
    canbeglobal,
    canbeglobalname,
    canbelocal,
    canbelocalname,
    name,
    privilegeid
) with view_metadata as 
select 
    Privilege.AccessRight,
    Privilege.CanBeBasic,
    CanBeBasicPLTable.Value,
    Privilege.CanBeDeep,
    CanBeDeepPLTable.Value,
    Privilege.CanBeGlobal,
    CanBeGlobalPLTable.Value,
    Privilege.CanBeLocal,
    CanBeLocalPLTable.Value,
    Privilege.Name,
    Privilege.PrivilegeId
from Privilege
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap CanBeBasicPLTable on 
        (CanBeBasicPLTable.AttributeName = 'canbebasic'
        and CanBeBasicPLTable.ObjectTypeCode = 1023
        and CanBeBasicPLTable.AttributeValue = Privilege.CanBeBasic
        and CanBeBasicPLTable.LangId = us.UILanguageId )
    left outer join StringMap CanBeDeepPLTable on 
        (CanBeDeepPLTable.AttributeName = 'canbedeep'
        and CanBeDeepPLTable.ObjectTypeCode = 1023
        and CanBeDeepPLTable.AttributeValue = Privilege.CanBeDeep
        and CanBeDeepPLTable.LangId = us.UILanguageId )
    left outer join StringMap CanBeGlobalPLTable on 
        (CanBeGlobalPLTable.AttributeName = 'canbeglobal'
        and CanBeGlobalPLTable.ObjectTypeCode = 1023
        and CanBeGlobalPLTable.AttributeValue = Privilege.CanBeGlobal
        and CanBeGlobalPLTable.LangId = us.UILanguageId )
    left outer join StringMap CanBeLocalPLTable on 
        (CanBeLocalPLTable.AttributeName = 'canbelocal'
        and CanBeLocalPLTable.ObjectTypeCode = 1023
        and CanBeLocalPLTable.AttributeValue = Privilege.CanBeLocal
        and CanBeLocalPLTable.LangId = us.UILanguageId )

/****** Object:  View [dbo].[FilteredCompetitorAddress]    Script Date: 04/11/2008 06:57:51 ******/




--
-- report view for competitoraddress
--
create view [dbo].[FilteredCompetitorAddress] (
    addressnumber,
    addresstypecode,
    addresstypecodename,
    city,
    competitoraddressid,
    country,
    county,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    fax,
    latitude,
    line1,
    line2,
    line3,
    longitude,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    parentid,
    parentiddsc,
    parentidname,
    parentidyominame,
    postalcode,
    postofficebox,
    shippingmethodcode,
    shippingmethodcodename,
    stateorprovince,
    telephone1,
    telephone2,
    telephone3,
    upszone,
    utcoffset
) with view_metadata as 
select 
    CompetitorAddress.AddressNumber,
    CompetitorAddress.AddressTypeCode,
    AddressTypeCodePLTable.Value,
    CompetitorAddress.City,
    CompetitorAddress.CompetitorAddressId,
    CompetitorAddress.Country,
    CompetitorAddress.County,
    CompetitorAddress.CreatedBy,
    CompetitorAddress.CreatedByDsc,
    CompetitorAddress.CreatedByName,
    CompetitorAddress.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CompetitorAddress.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CompetitorAddress.CreatedOn,
    CompetitorAddress.Fax,
    CompetitorAddress.Latitude,
    CompetitorAddress.Line1,
    CompetitorAddress.Line2,
    CompetitorAddress.Line3,
    CompetitorAddress.Longitude,
    CompetitorAddress.ModifiedBy,
    CompetitorAddress.ModifiedByDsc,
    CompetitorAddress.ModifiedByName,
    CompetitorAddress.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CompetitorAddress.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CompetitorAddress.ModifiedOn,
    CompetitorAddress.Name,
    CompetitorAddress.ParentId,
    CompetitorAddress.ParentIdDsc,
    CompetitorAddress.ParentIdName,
    CompetitorAddress.ParentIdYomiName,
    CompetitorAddress.PostalCode,
    CompetitorAddress.PostOfficeBox,
    CompetitorAddress.ShippingMethodCode,
    ShippingMethodCodePLTable.Value,
    CompetitorAddress.StateOrProvince,
    CompetitorAddress.Telephone1,
    CompetitorAddress.Telephone2,
    CompetitorAddress.Telephone3,
    CompetitorAddress.UPSZone,
    CompetitorAddress.UTCOffset
from CompetitorAddress
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap AddressTypeCodePLTable on 
        (AddressTypeCodePLTable.AttributeName = 'addresstypecode'
        and AddressTypeCodePLTable.ObjectTypeCode = 1004
        and AddressTypeCodePLTable.AttributeValue = CompetitorAddress.AddressTypeCode
        and AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShippingMethodCodePLTable on 
        (ShippingMethodCodePLTable.AttributeName = 'shippingmethodcode'
        and ShippingMethodCodePLTable.ObjectTypeCode = 1004
        and ShippingMethodCodePLTable.AttributeValue = CompetitorAddress.ShippingMethodCode
        and ShippingMethodCodePLTable.LangId = us.UILanguageId )

/****** Object:  View [dbo].[FilteredImportConfig]    Script Date: 04/11/2008 06:57:56 ******/




--
-- report view for importconfig
--
create view [dbo].[FilteredImportConfig] (
    additional1,
    additional2,
    columnheaderpresent,
    columnheaderpresentname,
    configname,
    configxslt,
    createdby,
    createdbydsc,
    createdbyname,
    createdon, 
    createdonutc,
    datadelimiter,
    datadelimitername,
    description,
    fieldseparator,
    fieldseparatorname,
    filetype,
    filetypename,
    importconfigid,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedon, 
    modifiedonutc,
    objectid,
    objecttypecode,
    objecttypecodename,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owningbusinessunit,
    owninguser,
    statecode,
    statecodename,
    statuscode,
    statuscodename
) with view_metadata as 
select 
    ImportConfig.Additional1,
    ImportConfig.Additional2,
    ImportConfig.ColumnHeaderPresent,
    ColumnHeaderPresentPLTable.Value,
    ImportConfig.ConfigName,
    ImportConfig.ConfigXSLT,
    ImportConfig.CreatedBy,
    ImportConfig.CreatedByDsc,
    ImportConfig.CreatedByName,
    dbo.fn_UTCToTzSpecificLocalTime(ImportConfig.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ImportConfig.CreatedOn,
    ImportConfig.DataDelimiter,
    DataDelimiterPLTable.Value,
    ImportConfig.Description,
    ImportConfig.FieldSeparator,
    FieldSeparatorPLTable.Value,
    ImportConfig.FileType,
    FileTypePLTable.Value,
    ImportConfig.ImportConfigId,
    ImportConfig.ModifiedBy,
    ImportConfig.ModifiedByDsc,
    ImportConfig.ModifiedByName,
    dbo.fn_UTCToTzSpecificLocalTime(ImportConfig.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ImportConfig.ModifiedOn,
    ImportConfig.ObjectId,
    ImportConfig.ObjectTypeCode,
    ObjectTypeCodePLTable.Value,
    ImportConfig.OwnerId,
    ImportConfig.OwnerIdDsc,
    ImportConfig.OwnerIdName,
    ImportConfig.OwnerIdType,
    ImportConfig.OwningBusinessUnit,
    ImportConfig.OwningUser,
    ImportConfig.StateCode,
    StateCodePLTable.Value,
    ImportConfig.StatusCode,
    StatusCodePLTable.Value
from ImportConfig
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMapBit ColumnHeaderPresentPLTable on 
        (ColumnHeaderPresentPLTable.AttributeName = 'columnheaderpresent'
        and ColumnHeaderPresentPLTable.ObjectTypeCode = 4408
        and ColumnHeaderPresentPLTable.AttributeValue = ImportConfig.ColumnHeaderPresent
        and ColumnHeaderPresentPLTable.OrganizationId = o.OrganizationId
        and ColumnHeaderPresentPLTable.LangId = o.LanguageCode )
    left outer join StringMap DataDelimiterPLTable on 
        (DataDelimiterPLTable.AttributeName = 'datadelimiter'
        and DataDelimiterPLTable.ObjectTypeCode = 4408
        and DataDelimiterPLTable.AttributeValue = ImportConfig.DataDelimiter
        and DataDelimiterPLTable.OrganizationId = o.OrganizationId
        and DataDelimiterPLTable.LangId = o.LanguageCode )
    left outer join StringMap FieldSeparatorPLTable on 
        (FieldSeparatorPLTable.AttributeName = 'fieldseparator'
        and FieldSeparatorPLTable.ObjectTypeCode = 4408
        and FieldSeparatorPLTable.AttributeValue = ImportConfig.FieldSeparator
        and FieldSeparatorPLTable.OrganizationId = o.OrganizationId
        and FieldSeparatorPLTable.LangId = o.LanguageCode )
    left outer join StringMap FileTypePLTable on 
        (FileTypePLTable.AttributeName = 'filetype'
        and FileTypePLTable.ObjectTypeCode = 4408
        and FileTypePLTable.AttributeValue = ImportConfig.FileType
        and FileTypePLTable.OrganizationId = o.OrganizationId
        and FileTypePLTable.LangId = o.LanguageCode )
    left outer join StringMap ObjectTypeCodePLTable on 
        (ObjectTypeCodePLTable.AttributeName = 'objecttypecode'
        and ObjectTypeCodePLTable.ObjectTypeCode = 4408
        and ObjectTypeCodePLTable.AttributeValue = ImportConfig.ObjectTypeCode
        and ObjectTypeCodePLTable.OrganizationId = o.OrganizationId
        and ObjectTypeCodePLTable.LangId = o.LanguageCode )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4408
        and StateCodePLTable.AttributeValue = ImportConfig.StateCode
        and StateCodePLTable.OrganizationId = o.OrganizationId
        and StateCodePLTable.LangId = o.LanguageCode )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4408
        and StatusCodePLTable.AttributeValue = ImportConfig.StatusCode
        and StatusCodePLTable.OrganizationId = o.OrganizationId
        and StatusCodePLTable.LangId = o.LanguageCode )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4408) pdm
where ImportConfig.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ImportConfig.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ImportConfig.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ImportConfig.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ImportConfig.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ImportConfig.ImportConfigId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4408 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredBulkImport]    Script Date: 04/11/2008 06:57:49 ******/




--
-- report view for bulkimport
--
create view [dbo].[FilteredBulkImport] (
    attachmentid,
    bulkimportid,
    bulkimportname,
    bulkoperationid,
    createdby,
    createdbydsc,
    createdbyname,
    createdon, 
    createdonutc,
    currentoffset,
    importconfigid,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedon, 
    modifiedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owningbusinessunit,
    owninguser,
    statecode,
    statecodename,
    statuscode,
    statuscodename
) with view_metadata as 
select 
    BulkImport.AttachmentId,
    BulkImport.BulkImportId,
    BulkImport.BulkImportName,
    BulkImport.BulkOperationId,
    BulkImport.CreatedBy,
    BulkImport.CreatedByDsc,
    BulkImport.CreatedByName,
    dbo.fn_UTCToTzSpecificLocalTime(BulkImport.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BulkImport.CreatedOn,
    BulkImport.CurrentOffset,
    BulkImport.ImportConfigId,
    BulkImport.ModifiedBy,
    BulkImport.ModifiedByDsc,
    BulkImport.ModifiedByName,
    dbo.fn_UTCToTzSpecificLocalTime(BulkImport.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BulkImport.ModifiedOn,
    BulkImport.OwnerId,
    BulkImport.OwnerIdDsc,
    BulkImport.OwnerIdName,
    BulkImport.OwnerIdType,
    BulkImport.OwningBusinessUnit,
    BulkImport.OwningUser,
    BulkImport.StateCode,
    StateCodePLTable.Value,
    BulkImport.StatusCode,
    StatusCodePLTable.Value
from BulkImport
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4407
        and StateCodePLTable.AttributeValue = BulkImport.StateCode
        and StateCodePLTable.OrganizationId = o.OrganizationId
        and StateCodePLTable.LangId = o.LanguageCode )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4407
        and StatusCodePLTable.AttributeValue = BulkImport.StatusCode
        and StatusCodePLTable.OrganizationId = o.OrganizationId
        and StatusCodePLTable.LangId = o.LanguageCode )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4407) pdm
where BulkImport.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    BulkImport.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		BulkImport.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		BulkImport.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		BulkImport.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    BulkImport.BulkImportId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4407 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredLeadAddress]    Script Date: 04/11/2008 06:57:58 ******/




--
-- report view for leadaddress
--
create view [dbo].[FilteredLeadAddress] (
    addressnumber,
    addresstypecode,
    addresstypecodename,
    city,
    country,
    county,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    fax,
    latitude,
    leadaddressid,
    line1,
    line2,
    line3,
    longitude,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    parentid,
    parentiddsc,
    parentidname,
    parentidyominame,
    postalcode,
    postofficebox,
    shippingmethodcode,
    shippingmethodcodename,
    stateorprovince,
    telephone1,
    telephone2,
    telephone3,
    upszone,
    utcoffset
) with view_metadata as 
select 
    LeadAddress.AddressNumber,
    LeadAddress.AddressTypeCode,
    AddressTypeCodePLTable.Value,
    LeadAddress.City,
    LeadAddress.Country,
    LeadAddress.County,
    LeadAddress.CreatedBy,
    LeadAddress.CreatedByDsc,
    LeadAddress.CreatedByName,
    LeadAddress.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(LeadAddress.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    LeadAddress.CreatedOn,
    LeadAddress.Fax,
    LeadAddress.Latitude,
    LeadAddress.LeadAddressId,
    LeadAddress.Line1,
    LeadAddress.Line2,
    LeadAddress.Line3,
    LeadAddress.Longitude,
    LeadAddress.ModifiedBy,
    LeadAddress.ModifiedByDsc,
    LeadAddress.ModifiedByName,
    LeadAddress.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(LeadAddress.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    LeadAddress.ModifiedOn,
    LeadAddress.Name,
    LeadAddress.ParentId,
    LeadAddress.ParentIdDsc,
    LeadAddress.ParentIdName,
    LeadAddress.ParentIdYomiName,
    LeadAddress.PostalCode,
    LeadAddress.PostOfficeBox,
    LeadAddress.ShippingMethodCode,
    ShippingMethodCodePLTable.Value,
    LeadAddress.StateOrProvince,
    LeadAddress.Telephone1,
    LeadAddress.Telephone2,
    LeadAddress.Telephone3,
    LeadAddress.UPSZone,
    LeadAddress.UTCOffset
from LeadAddress
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap AddressTypeCodePLTable on 
        (AddressTypeCodePLTable.AttributeName = 'addresstypecode'
        and AddressTypeCodePLTable.ObjectTypeCode = 1017
        and AddressTypeCodePLTable.AttributeValue = LeadAddress.AddressTypeCode
        and AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShippingMethodCodePLTable on 
        (ShippingMethodCodePLTable.AttributeName = 'shippingmethodcode'
        and ShippingMethodCodePLTable.ObjectTypeCode = 1017
        and ShippingMethodCodePLTable.AttributeValue = LeadAddress.ShippingMethodCode
        and ShippingMethodCodePLTable.LangId = us.UILanguageId )

/****** Object:  View [dbo].[FilteredInternalAddress]    Script Date: 04/11/2008 06:57:57 ******/




--
-- report view for internaladdress
--
create view [dbo].[FilteredInternalAddress] (
    addressnumber,
    addresstypecode,
    addresstypecodename,
    city,
    country,
    county,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    fax,
    internaladdressid,
    latitude,
    line1,
    line2,
    line3,
    longitude,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    objecttypecode,
    objecttypecodename,
    parentid,
    postalcode,
    postofficebox,
    shippingmethodcode,
    shippingmethodcodename,
    stateorprovince,
    telephone1,
    telephone2,
    telephone3,
    upszone,
    utcoffset
) with view_metadata as 
select 
    InternalAddress.AddressNumber,
    InternalAddress.AddressTypeCode,
    AddressTypeCodePLTable.Value,
    InternalAddress.City,
    InternalAddress.Country,
    InternalAddress.County,
    InternalAddress.CreatedBy,
    InternalAddress.CreatedByDsc,
    InternalAddress.CreatedByName,
    InternalAddress.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(InternalAddress.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    InternalAddress.CreatedOn,
    InternalAddress.Fax,
    InternalAddress.InternalAddressId,
    InternalAddress.Latitude,
    InternalAddress.Line1,
    InternalAddress.Line2,
    InternalAddress.Line3,
    InternalAddress.Longitude,
    InternalAddress.ModifiedBy,
    InternalAddress.ModifiedByDsc,
    InternalAddress.ModifiedByName,
    InternalAddress.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(InternalAddress.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    InternalAddress.ModifiedOn,
    InternalAddress.Name,
    InternalAddress.ObjectTypeCode,
    ObjectTypeCodePLTable.Value,
    InternalAddress.ParentId,
    InternalAddress.PostalCode,
    InternalAddress.PostOfficeBox,
    InternalAddress.ShippingMethodCode,
    ShippingMethodCodePLTable.Value,
    InternalAddress.StateOrProvince,
    InternalAddress.Telephone1,
    InternalAddress.Telephone2,
    InternalAddress.Telephone3,
    InternalAddress.UPSZone,
    InternalAddress.UTCOffset
from InternalAddress
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap AddressTypeCodePLTable on 
        (AddressTypeCodePLTable.AttributeName = 'addresstypecode'
        and AddressTypeCodePLTable.ObjectTypeCode = 1003
        and AddressTypeCodePLTable.AttributeValue = InternalAddress.AddressTypeCode
        and AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ObjectTypeCodePLTable on 
        (ObjectTypeCodePLTable.AttributeName = 'objecttypecode'
        and ObjectTypeCodePLTable.ObjectTypeCode = 1003
        and ObjectTypeCodePLTable.AttributeValue = InternalAddress.ObjectTypeCode
        and ObjectTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShippingMethodCodePLTable on 
        (ShippingMethodCodePLTable.AttributeName = 'shippingmethodcode'
        and ShippingMethodCodePLTable.ObjectTypeCode = 1003
        and ShippingMethodCodePLTable.AttributeValue = InternalAddress.ShippingMethodCode
        and ShippingMethodCodePLTable.LangId = us.UILanguageId )
where InternalAddress.DeletionStateCode in (0)

/****** Object:  StoredProcedure [dbo].[p_CopyRole]    Script Date: 04/11/2008 06:34:59 ******/




--
-- this stored procedure handles copying one role with cascading
--
create procedure [dbo].[p_CopyRole](@parentRoleid uniqueidentifier, @userid uniqueidentifier) as
begin

SET NOCOUNT ON

declare @parentBizId uniqueidentifier
select @parentBizId = BusinessUnitId from RoleBase where RoleId = @parentRoleid
declare @rootId uniqueidentifier

create table #parents(parentroleid uniqueidentifier primary key clustered)
insert into #parents(parentroleid) values(@parentRoleid)

create table #roleprivileges(
	roleid uniqueidentifier not null,
	privilegeid uniqueidentifier not null, 
	privilegedepthmask int not null
 )


declare c cursor FORWARD_ONLY READ_ONLY for select businessunitid from dbo.GetSubsidiaryBusinesses(@parentBizId) where (depth > 0) order by depth
open c
fetch next from c into @rootId
while (@@fetch_status = 0)
begin
	declare @currParentBiz uniqueidentifier
	select @currParentBiz = null
	select @currParentBiz = ParentBusinessUnitId from BusinessUnitBase where BusinessUnitId = @rootId

	declare @currParentRoleId uniqueidentifier
	select @currParentRoleId = null
	select @currParentRoleId = RoleId from RoleBase 
		where BusinessUnitId = @currParentBiz and RoleId in (select parentroleid from #parents)

	declare @newRoleId uniqueidentifier
	select @newRoleId = newid()

	--
	-- create the role record
	-- 
	insert into RoleBase(RoleId, RoleTemplateId, OrganizationId, DeletionStateCode, Name, BusinessUnitId, CreatedOn, ModifiedOn, CreatedBy, ModifiedBy, ParentRoleId)
	select @newRoleId, RoleTemplateId, OrganizationId, 0, Name, @rootId, getutcdate(), null, @userid, null, @currParentRoleId
	from RoleBase where RoleId = @currParentRoleId
	
	--
	-- insert the role privileges
	--
	insert into #roleprivileges(roleid, privilegeid, privilegedepthmask)
	select @newRoleId, rp.PrivilegeId, rp.PrivilegeDepthMask
	from RolePrivileges as rp where RoleId = @currParentRoleId

	insert into #parents(parentroleid) values(@newRoleId)

	fetch next from c into @rootId

end -- c cursor
close c
deallocate c

-- update the privilegedepthmasks
	exec p_UpdateRolePrivilegeMaskInTempTable

-- Copy privileges from temptable in one statement
insert into RolePrivileges(RoleId, PrivilegeId, PrivilegeDepthMask)
	select roleid, privilegeid, privilegedepthmask from #roleprivileges

drop table #roleprivileges
drop table #parents

end -- p_CopyRole

/****** Object:  StoredProcedure [dbo].[p_CopyCustomRolesFromParent]    Script Date: 04/11/2008 06:34:59 ******/




--
-- this stored procedure copies custom roles from the new parent
-- NOTE: this sproc assumes the parent business id for BizId has already been
-- changed (in the transaction).
--
create procedure [dbo].[p_CopyCustomRolesFromParent](@bizId uniqueidentifier, @userid uniqueidentifier) as
begin

SET NOCOUNT ON

declare @parentBizId uniqueidentifier
select @parentBizId = ParentBusinessUnitId from BusinessUnitBase where BusinessUnitId = @bizId

declare @parentRoleId uniqueidentifier
select @parentRoleId = null

declare @roleid uniqueidentifier
select @roleid = null

declare @rootId uniqueidentifier
declare @depth int

create table #roles(id uniqueidentifier)
insert into #roles select RoleId from RoleBase where BusinessUnitId = @parentBizId and RoleTemplateId is null

create table #roleprivileges(
	roleid uniqueidentifier not null,
	privilegeid uniqueidentifier not null, 
	privilegedepthmask int not null
 )

declare c cursor FORWARD_ONLY READ_ONLY for select businessunitid, depth from dbo.GetSubsidiaryBusinesses(@bizId) order by depth
open c
fetch next from c into @rootId, @depth
while (@@fetch_status = 0)
begin
	select @parentBizId = ParentBusinessUnitId from BusinessUnitBase where BusinessUnitId = @rootId
	declare RoleCursor cursor for
		select RoleId from RoleBase where BusinessUnitId = @parentBizId and RoleTemplateId is null
		and RoleId in (select id from #roles)
		
	open RoleCursor
	fetch RoleCursor into @roleid
	while @@fetch_status = 0
	begin

		declare @newRoleId uniqueidentifier
		select @newRoleId = newid()

		--
		-- create the role record
		-- 
		insert into RoleBase(RoleId, RoleTemplateId, OrganizationId, DeletionStateCode, Name, BusinessUnitId, CreatedOn, ModifiedOn, CreatedBy, ModifiedBy, ParentRoleId)
		select @newRoleId, RoleTemplateId, OrganizationId, 0, Name, @rootId, getutcdate(), null, @userid, null, @roleid
		from RoleBase where RoleId = @roleid
		
		--
		-- insert the role privileges
		--
		insert into #roleprivileges(roleid, privilegeid, privilegedepthmask)
		select @newRoleId, rp.PrivilegeId, rp.PrivilegeDepthMask
		from RolePrivileges as rp where RoleId = @roleid
		
		-- this insert handles the case when there are business units deeper than 1 level since the newly added roleprivilege 
		-- are in #roleprivileges table and not RolePrivileges table
		if (@@rowcount = 0)
		begin
		insert into #roleprivileges(roleid, privilegeid, privilegedepthmask)
		select @newRoleId, rp.privilegeid, rp.privilegedepthmask
		from #roleprivileges as rp where roleid = @roleid
		end

		
		fetch next from RoleCursor into @roleid
	end -- RoleCursor

	insert into #roles select RoleId from RoleBase where BusinessUnitId = @rootId and RoleTemplateId is null
		and ParentRoleId in (select id from #roles)

	close RoleCursor
	deallocate RoleCursor
	fetch next from c into @rootId, @depth

end -- c cursor
close c
deallocate c

-- update the privilegedepthmasks
	exec p_UpdateRolePrivilegeMaskInTempTable

-- Copy privileges from temptable in one statement
insert into RolePrivileges(RoleId, PrivilegeId, PrivilegeDepthMask)
	select roleid, privilegeid, privilegedepthmask from #roleprivileges

drop table #roleprivileges
drop table #roles

end -- p_CopyCustomRolesFromParent

/****** Object:  StoredProcedure [dbo].[p_RecreateBusinessUnitMap]    Script Date: 04/11/2008 06:35:26 ******/




create procedure [dbo].[p_RecreateBusinessUnitMap] as
begin
	-- easiest and quickest to just recreate BusinessUnitMap

	delete from BusinessUnitMap

	declare @id uniqueidentifier
	declare c cursor READ_ONLY FORWARD_ONLY for select BusinessUnitId from BusinessUnitBase
	open c
	fetch next from c into @id
	while @@fetch_status = 0
	begin
		insert BusinessUnitMap (BusinessId, SubBusinessId) select @id, businessunitid from dbo.GetSubsidiaryBusinesses(@id)
		fetch next from c into @id
	end
	close c
	deallocate c
end

/****** Object:  StoredProcedure [dbo].[p_PopulateBusinessUnitMap]    Script Date: 04/11/2008 06:35:25 ******/




create procedure [dbo].[p_PopulateBusinessUnitMap](@id uniqueidentifier) as
begin
	insert BusinessUnitMap (BusinessId, SubBusinessId) select @id, businessunitid from dbo.GetSubsidiaryBusinesses(@id)
end

/****** Object:  StoredProcedure [dbo].[p_AddMarketingListMembers]    Script Date: 04/11/2008 06:34:56 ******/




CREATE   PROCEDURE [dbo].[p_AddMarketingListMembers](@doc ntext, @EntityType int, @ListId uniqueidentifier,@CreatedBy uniqueidentifier) as

BEGIN
DECLARE @idoc int
DECLARE @incr int

create table #tempMemberBase(EntityId uniqueidentifier,
EntityType int,
ListId uniqueidentifier,
ListMemberId uniqueidentifier,
CreatedOn datetime,
CreatedBy uniqueidentifier,
ModifiedOn datetime,
ModifiedBy uniqueidentifier,
dup int
)

EXEC sp_xml_preparedocument @idoc OUTPUT, @doc

insert into #tempMemberBase(EntityId, EntityType, ListId, ListMemberId, CreatedOn, CreatedBy, ModifiedOn, ModifiedBy, dup)
select entityid, @EntityType, @ListId, NEWID(), GetDate(), @CreatedBy, GetDate(), @CreatedBy, 0 FROM 
OPENXML(@idoc, '/VALUES/VALUE',1)
WITH (entityid uniqueidentifier)

Create index idx_EntityId on #tempMemberBase(EntityId)

update #tempMemberBase
Set dup = 1
FROM #tempMemberBase, ListMemberBase
Where ListMemberBase.ListId = @ListId
AND ListMemberBase.EntityId = #tempMemberBase.EntityId

insert into ListMemberBase(EntityId, EntityType, ListId, ListMemberId, CreatedOn, CreatedBy, ModifiedOn, ModifiedBy) 
select EntityId, @EntityType, @ListId, NEWID(), GetDate(), @CreatedBy, GetDate(), @CreatedBy FROM 
#tempMemberBase
WHERE dup = 0

SET @incr = @@ROWCOUNT

EXEC p_ma_incmembercount @ListId, @incr, @CreatedBy

drop table #tempMemberBase

END

/****** Object:  StoredProcedure [dbo].[p_DeleteMarketingListMembers]    Script Date: 04/11/2008 06:35:04 ******/




CREATE   PROCEDURE [dbo].[p_DeleteMarketingListMembers](@doc ntext, @ListId uniqueidentifier,@CreatedBy uniqueidentifier) as

BEGIN
DECLARE @idoc int
DECLARE @incr int

create table #tempMemberBase(EntityId uniqueidentifier
)

EXEC sp_xml_preparedocument @idoc OUTPUT, @doc

insert into #tempMemberBase(EntityId)
select entityid FROM 
OPENXML(@idoc, '/VALUES/VALUE',1)
WITH (entityid uniqueidentifier)

Create index idx_EntityId on #tempMemberBase(EntityId)

delete ListMemberBase
from #tempMemberBase, ListMemberBase
Where ListMemberBase.EntityId = #tempMemberBase.EntityId
and ListId = @ListId

SET @incr = 0 - @@ROWCOUNT

EXEC p_ma_incmembercount @ListId, @incr, @CreatedBy

drop table #tempMemberBase

exec sp_xml_removedocument @idoc

END

/****** Object:  UserDefinedFunction [dbo].[fn_GetMaxPrivilegeDepthMask]    Script Date: 04/11/2008 06:57:29 ******/




create function [dbo].[fn_GetMaxPrivilegeDepthMask](@ObjectTypeCode int) 
returns table
as
	return
	select
		max(rp.PrivilegeDepthMask) as PrivilegeDepthMask
	from 
		PrivilegeBase priv
        join RolePrivileges rp on (rp.PrivilegeId = priv.PrivilegeId)
        join SystemUserRoles ur on (rp.RoleId = ur.RoleId and ur.SystemUserId = dbo.fn_FindUserGuid())
        join PrivilegeObjectTypeCodes potc on (potc.PrivilegeId = priv.PrivilegeId)
	where 
		potc.ObjectTypeCode = @ObjectTypeCode and 
		priv.AccessRight & 0x01 = 1

/****** Object:  StoredProcedure [dbo].[p_RetrievePrivileges]    Script Date: 04/11/2008 06:35:27 ******/
SET ANSI_NULLS OFF



-- Retrieve a set of privileges given a list of privileges ids
CREATE PROC [dbo].[p_RetrievePrivileges](
        @privilege_ids nvarchar(max)	-- concatened list of GUIDs passed in as a string
        ) AS
BEGIN
     
	SELECT  PrivilegeId as 'privilegeid', CanBeBasic as 'canbebasic', 
			CanBeLocal as 'canbelocal',  CanBeDeep as 'canbedeep', 
			CanBeGlobal as 'canbeglobal' 
	FROM Privilege 
	WHERE (PrivilegeId in (SELECT id FROM fn_GetGuidsFromString(@privilege_ids)) )
	
END

/****** Object:  UserDefinedFunction [dbo].[fn_LocalTimeToUTC]    Script Date: 04/11/2008 06:57:30 ******/




create function [dbo].[fn_LocalTimeToUTC](	@LocalTime  datetime )
returns datetime
as 
begin
	declare @Bias 	int
	declare @DaylightBias 	int
	declare @DaylightYear 	int
	declare @DaylightMonth 	int
	declare @DaylightDay 	int
	declare @DaylightHour	int
	declare @DaylightMinute	int
	declare	@DaylightSecond	int
	declare @DaylightMilliseconds int
	declare @DaylightWeekday 	int
	declare @StandardBias 	int
	declare @StandardYear 	int
	declare	@StandardMonth 	int
	declare @StandardDay 	int
	declare @StandardHour 	int
	declare @StandardMinute int
	declare @StandardSecond int
	declare @StandardMilliseconds int
	declare @StandardWeekday int 

	set @DaylightMilliseconds = 0
	set @StandardMilliseconds = 0
	
	if @LocalTime <= '1/2/1900'
	begin
		return @LocalTime
	end

	select top 1 @Bias = r.Bias, 
		@DaylightBias = r.DaylightBias,
		@DaylightYear = r.DaylightYear,
		@DaylightMonth = r.DaylightMonth,
		@DaylightDay = r.DaylightDay,
		@DaylightHour = r.DaylightHour,
		@DaylightMinute = r.DaylightMinute,
		@DaylightSecond = r.DaylightSecond,
		@DaylightWeekday = r.DaylightDayOfWeek,
		@StandardBias = r.StandardBias,
		@StandardYear = r.StandardYear,
		@StandardMonth = r.StandardMonth,
		@StandardDay = r.StandardDay,
		@StandardHour = r.StandardHour,
		@StandardMinute = r.StandardMinute,
		@StandardSecond = r.StandardSecond,
		@StandardWeekday = r.StandardDayOfWeek
	from TimeZoneRule as r
	join TimeZoneDefinition as d on d.TimeZoneDefinitionId = r.TimeZoneDefinitionId
	join UserSettingsBase as us on d.TimeZoneCode = us.TimeZoneCode
	where r.EffectiveDateTime <= @LocalTime and us.SystemUserId = dbo.fn_FindUserGuid()
	order by r.TimeZoneRuleVersionNumber desc, r.EffectiveDateTime desc

	return dbo.fn_TzSpecificLocalTimeToUTC(@LocalTime,
									@Bias,
									@DaylightBias,
									@DaylightYear, 
									@DaylightMonth,
									@DaylightDay,
									@DaylightHour,
									@DaylightMinute,
									@DaylightSecond,
									@DaylightMilliseconds,
									@DaylightWeekday,
									@StandardBias,
									@StandardYear, 
									@StandardMonth,
									@StandardDay,
									@StandardHour,
									@StandardMinute,
									@StandardSecond,
									@StandardMilliseconds,
									@StandardWeekday)


end

/****** Object:  UserDefinedFunction [dbo].[fn_UTCToLocalTime]    Script Date: 04/11/2008 06:57:33 ******/




create function [dbo].[fn_UTCToLocalTime](	@UTCTime  datetime )
returns datetime
as 
begin
	declare @Bias 	int
	declare @DaylightBias 	int
	declare @DaylightYear 	int
	declare @DaylightMonth 	int
	declare @DaylightDay 	int
	declare @DaylightHour	int
	declare @DaylightMinute	int
	declare	@DaylightSecond	int
	declare @DaylightMilliseconds int
	declare @DaylightWeekday 	int
	declare @StandardBias 	int
	declare @StandardYear 	int
	declare	@StandardMonth 	int
	declare @StandardDay 	int
	declare @StandardHour 	int
	declare @StandardMinute int
	declare @StandardSecond int
	declare @StandardMilliseconds int
	declare @StandardWeekday int 
	declare @EffectiveDateTime datetime
	declare @ResultDateTime datetime
	declare @FuzzySearchDateTime datetime

	set @DaylightMilliseconds = 0
	set @StandardMilliseconds = 0
	
	if @UTCTime <= '1/2/1900'
	begin
		return @UTCTime
	end
	
	select @FuzzySearchDateTime = DATEADD(day, 1, @UTCTime)

	select top 1 @Bias = r.Bias, 
		@DaylightBias = r.DaylightBias,
		@DaylightYear = r.DaylightYear,
		@DaylightMonth = r.DaylightMonth,
		@DaylightDay = r.DaylightDay,
		@DaylightHour = r.DaylightHour,
		@DaylightMinute = r.DaylightMinute,
		@DaylightSecond = r.DaylightSecond,
		@DaylightWeekday = r.DaylightDayOfWeek,
		@StandardBias = r.StandardBias,
		@StandardYear = r.StandardYear,
		@StandardMonth = r.StandardMonth,
		@StandardDay = r.StandardDay,
		@StandardHour = r.StandardHour,
		@StandardMinute = r.StandardMinute,
		@StandardSecond = r.StandardSecond,
		@StandardWeekday = r.StandardDayOfWeek,
		@EffectiveDateTime = r.EffectiveDateTime
	from TimeZoneRule as r
	join TimeZoneDefinition as d on d.TimeZoneDefinitionId = r.TimeZoneDefinitionId
	join UserSettingsBase as us on d.TimeZoneCode = us.TimeZoneCode
	where r.EffectiveDateTime <= @FuzzySearchDateTime and us.SystemUserId = dbo.fn_FindUserGuid()
	order by r.TimeZoneRuleVersionNumber desc, r.EffectiveDateTime desc

	select @ResultDateTime = dbo.fn_UTCToTzSpecificLocalTime(@UTCTime,
						@Bias,
						@DaylightBias,
						@DaylightYear, 
						@DaylightMonth,
						@DaylightDay,
						@DaylightHour,
						@DaylightMinute,
						@DaylightSecond,
						@DaylightMilliseconds,
						@DaylightWeekday,
						@StandardBias,
						@StandardYear, 
						@StandardMonth,
						@StandardDay,
						@StandardHour,
						@StandardMinute,
						@StandardSecond,
						@StandardMilliseconds,
						@StandardWeekday)

	if @ResultDateTime < @EffectiveDateTime
	begin
		select top 1 @Bias = r.Bias, 
			@DaylightBias = r.DaylightBias,
			@DaylightYear = r.DaylightYear,
			@DaylightMonth = r.DaylightMonth,
			@DaylightDay = r.DaylightDay,
			@DaylightHour = r.DaylightHour,
			@DaylightMinute = r.DaylightMinute,
			@DaylightSecond = r.DaylightSecond,
			@DaylightWeekday = r.DaylightDayOfWeek,
			@StandardBias = r.StandardBias,
			@StandardYear = r.StandardYear,
			@StandardMonth = r.StandardMonth,
			@StandardDay = r.StandardDay,
			@StandardHour = r.StandardHour,
			@StandardMinute = r.StandardMinute,
			@StandardSecond = r.StandardSecond,
			@StandardWeekday = r.StandardDayOfWeek,
			@EffectiveDateTime = r.EffectiveDateTime
		from TimeZoneRule as r
		join TimeZoneDefinition as d on d.TimeZoneDefinitionId = r.TimeZoneDefinitionId
		join UserSettingsBase as us on d.TimeZoneCode = us.TimeZoneCode
		where r.EffectiveDateTime <= @ResultDateTime and us.SystemUserId = dbo.fn_FindUserGuid()
		order by r.TimeZoneRuleVersionNumber desc, r.EffectiveDateTime desc

		select @ResultDateTime = dbo.fn_UTCToTzSpecificLocalTime(@UTCTime,
							@Bias,
							@DaylightBias,
							@DaylightYear, 
							@DaylightMonth,
							@DaylightDay,
							@DaylightHour,
							@DaylightMinute,
							@DaylightSecond,
							@DaylightMilliseconds,
							@DaylightWeekday,
							@StandardBias,
							@StandardYear, 
							@StandardMonth,
							@StandardDay,
							@StandardHour,
							@StandardMinute,
							@StandardSecond,
							@StandardMilliseconds,
							@StandardWeekday)
	end

	return @ResultDateTime

end

/****** Object:  StoredProcedure [dbo].[p_GetAddedRoleCount]    Script Date: 04/11/2008 06:35:09 ******/




CREATE PROCEDURE [dbo].[p_GetAddedRoleCount] as
BEGIN

	set nocount on
	
	SELECT COUNT(*) FROM RoleBase 
		WHERE RoleTemplateId IS NULL 
			OR RoleTemplateId NOT IN (SELECT RoleTemplateId From RoleTemplate)

END

/****** Object:  View [dbo].[EntityView]    Script Date: 04/11/2008 06:57:46 ******/




CREATE VIEW [dbo].[EntityView] AS
(select * from EntityLogicalView where CustomizationLevel <> 2)

/****** Object:  StoredProcedure [dbo].[p_PrimeCascadeWrapper]    Script Date: 04/11/2008 06:35:26 ******/
SET ANSI_NULLS OFF



create proc [dbo].[p_PrimeCascadeWrapper] as
begin

create table #CascadeCollect(id INT IDENTITY(1,1) PRIMARY KEY CLUSTERED, objectid UNIQUEIDENTIFIER NOT NULL, objecttype INT NOT NULL, processed INT DEFAULT 0 NOT NULL)
exec dbo.p_PrimeCascade 'CascadeAssign'
exec dbo.p_PrimeCascade 'CascadeDelete'
exec dbo.p_PrimeCascade 'CascadeReparent'
exec dbo.p_PrimeCascade 'CascadeShare'
exec dbo.p_PrimeCascade 'CascadeUnShare'
drop table #CascadeCollect

end

/****** Object:  StoredProcedure [dbo].[p_DeleteRole]    Script Date: 04/11/2008 06:35:04 ******/




--
-- this stored procedure handles cascading of role deletion
--
create procedure [dbo].[p_DeleteRole](@roleid uniqueidentifier) as
begin

declare @bizId uniqueidentifier
select @bizId = BusinessUnitId from RoleBase where RoleId = @roleid
declare @rootId uniqueidentifier

create table #parents(parentroleid uniqueidentifier primary key clustered)
insert into #parents(parentroleid) values(@roleid)

declare c cursor FORWARD_ONLY READ_ONLY for select businessunitid from dbo.GetSubsidiaryBusinesses(@bizId) where (depth > 0) order by depth
open c
fetch next from c into @rootId
while (@@fetch_status = 0)
begin
	declare @currRoleId uniqueidentifier
	select @currRoleId = RoleId from RoleBase 
		where BusinessUnitId = @rootId and ParentRoleId in (select parentroleid from #parents)

	if (@@rowcount <> 0)
	begin
		insert into #parents(parentroleid) values(@currRoleId)
	end

	fetch next from c into @rootId

end -- c cursor
close c
deallocate c

-- Reinitialize subscriptions for users with deleting roles
update Subscription Set ReInitialize = 1 
where SystemUserId in 
	(select SystemUserId from SystemUserRoles where RoleId in (select parentroleid from #parents))

--
-- delete SystemUserRoles, existing privileges, and then the roles
--

delete from SystemUserRoles where RoleId in (select parentroleid from #parents)
update RoleBase set ParentRoleId = null where RoleId in (select parentroleid from #parents)
delete from RolePrivileges where RoleId in (select parentroleid from #parents)
delete from RoleBase where RoleId in (select parentroleid from #parents)

drop table #parents

end -- p_DeleteRole

/****** Object:  View [dbo].[RelationshipView]    Script Date: 04/11/2008 06:58:26 ******/




create View [dbo].[RelationshipView] as
(select * from RelationshipLogicalView where CustomizationLevel <> 2)

/****** Object:  View [dbo].[RelationshipExtraConditionView]    Script Date: 04/11/2008 06:58:25 ******/




create View [dbo].[RelationshipExtraConditionView] as
(select * from RelationshipExtraConditionLogicalView where CustomizationLevel <> 2)

/****** Object:  View [dbo].[ViewAttributeView]    Script Date: 04/11/2008 06:58:36 ******/




create View [dbo].[ViewAttributeView] as
(select * from ViewAttributeLogicalView where CustomizationLevel <> 2)

/****** Object:  View [dbo].[AttributeView]    Script Date: 04/11/2008 06:57:37 ******/




create view [dbo].[AttributeView] as
(select * from AttributeLogicalView where InProduction = 1 and CustomizationLevel <> 2)

/****** Object:  View [dbo].[FilteredCampaignItem]    Script Date: 04/11/2008 06:57:51 ******/




--
-- report view for campaignitem
--
create view [dbo].[FilteredCampaignItem] (
    campaignid,
    campaignitemid,
    entityid,
    entitytype,
    owningbusinessunit,
    owninguser
) with view_metadata as 
select 
    CampaignItem.CampaignId,
    CampaignItem.CampaignItemId,
    CampaignItem.EntityId,
    CampaignItem.EntityType,
    CampaignItem.OwningBusinessUnit,
    CampaignItem.OwningUser
from CampaignItem

/****** Object:  View [dbo].[AttributePicklistValueView]    Script Date: 04/11/2008 06:57:37 ******/




create view [dbo].[AttributePicklistValueView] as
(select * from AttributePicklistValueLogicalView where InProduction = 1 and CustomizationLevel <> 2)

/****** Object:  StoredProcedure [dbo].[p_MatchSubjects]    Script Date: 04/11/2008 06:35:24 ******/




/*
This proc is to be used to match two subjects: whether subject2 is a high level subject of subject1.
*/
CREATE procedure [dbo].[p_MatchSubjects]( @SubjectId1 uniqueidentifier, @SubjectId2 uniqueidentifier) as
begin
	set nocount on

	declare @SubjectId uniqueidentifier
	select @SubjectId = @SubjectId1

	select @SubjectId = ParentSubject from Subject where SubjectId = @SubjectId
	while( @@ROWCOUNT > 0 and @SubjectId <> @SubjectId2 and not ( @SubjectId is null ) )
	begin
		select @SubjectId = ParentSubject from Subject where SubjectId = @SubjectId
	end
	select @SubjectId as 'subjectid'
end

/****** Object:  View [dbo].[AttributeLookupValueView]    Script Date: 04/11/2008 06:57:36 ******/




create view [dbo].[AttributeLookupValueView] as
(select * from AttributeLookupValueLogicalView where InProduction = 1 and CustomizationLevel <> 2)

/****** Object:  View [dbo].[LocalizedLabelView]    Script Date: 04/11/2008 06:58:20 ******/




create view [dbo].[LocalizedLabelView] as
(select * from LocalizedLabelLogicalView where InProduction = 1 and CustomizationLevel <> 2)

/****** Object:  UserDefinedFunction [dbo].[fn_CollectReports]    Script Date: 04/11/2008 06:57:24 ******/




create function [dbo].[fn_CollectReports]
(	
	@RootId uniqueidentifier,
	@IncludeDrillthrough bit
)
returns @CollectReports table (
	ReportId uniqueidentifier not null
)
as
begin
	-- Insert current report
	insert into @CollectReports values (@RootId)

	-- Insert children
	while (@@rowcount <> 0) 
		insert into @CollectReports (ReportId) 
		select
			l.LinkedReportId 
		from 
			ReportLink l, 
			@CollectReports c 
		where 
			l.ReportId = c.ReportId and 
			(l.LinkTypeCode <> 1 or @IncludeDrillthrough = 1) and -- LinkTypeCode 1 = Drillthrough
			l.LinkedReportId is not null and 
			l.LinkedReportId not in (
				select 
					ReportId 
				from 
					@CollectReports 
				where 
					ReportId = l.LinkedReportId)

	return
end

/****** Object:  View [dbo].[EntityRelationshipView]    Script Date: 04/11/2008 06:57:46 ******/




create View [dbo].[EntityRelationshipView] as
(select * from EntityRelationshipLogicalView where CustomizationLevel <> 2)

/****** Object:  View [dbo].[EntityRelationshipRelationshipsView]    Script Date: 04/11/2008 06:57:45 ******/




create View [dbo].[EntityRelationshipRelationshipsView] as
(select * from EntityRelationshipRelationshipsLogicalView where CustomizationLevel <> 2)

/****** Object:  View [dbo].[EntityRelationshipRoleView]    Script Date: 04/11/2008 06:57:45 ******/




create View [dbo].[EntityRelationshipRoleView] as
(select * from EntityRelationshipRoleLogicalView where CustomizationLevel <> 2)

/****** Object:  View [dbo].[FilteredUnresolvedAddress]    Script Date: 04/11/2008 06:58:14 ******/




--
-- report view for unresolvedaddress
--
create view [dbo].[FilteredUnresolvedAddress] (
    emailaddress,
    fullname,
    telephone,
    unresolvedaddressid
) with view_metadata as 
select 
    UnresolvedAddress.EMailAddress,
    UnresolvedAddress.FullName,
    UnresolvedAddress.Telephone,
    UnresolvedAddress.UnresolvedAddressId
from UnresolvedAddress
where UnresolvedAddress.DeletionStateCode in (0)

/****** Object:  View [dbo].[FilteredOrderClose]    Script Date: 04/11/2008 06:58:01 ******/




--
-- report view for orderclose
--
create view [dbo].[FilteredOrderClose] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    category,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    importsequencenumber,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    ordernumber,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    revision,
    salesorderid,
    salesorderiddsc,
    salesorderidname,
    salesorderidtype,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    OrderClose.ActivityId,
    OrderClose.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(OrderClose.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OrderClose.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(OrderClose.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OrderClose.ActualStart,
    OrderClose.Category,
    OrderClose.CreatedBy,
    OrderClose.CreatedByDsc,
    OrderClose.CreatedByName,
    OrderClose.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(OrderClose.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OrderClose.CreatedOn,
    OrderClose.Description,
    OrderClose.ImportSequenceNumber,
    OrderClose.IsBilled,
    IsBilledPLTable.Value,
    OrderClose.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    OrderClose.ModifiedBy,
    OrderClose.ModifiedByDsc,
    OrderClose.ModifiedByName,
    OrderClose.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(OrderClose.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OrderClose.ModifiedOn,
    OrderClose.OrderNumber,
    dbo.fn_UTCToTzSpecificLocalTime(OrderClose.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OrderClose.OverriddenCreatedOn,
    OrderClose.OwnerId,
    OrderClose.OwnerIdDsc,
    OrderClose.OwnerIdName,
    OrderClose.OwnerIdType,
    OrderClose.OwnerIdYomiName,
    OrderClose.OwningBusinessUnit,
    OrderClose.OwningUser,
    OrderClose.Revision,
    OrderClose.SalesOrderId,
    OrderClose.SalesOrderIdDsc,
    OrderClose.SalesOrderIdName,
    OrderClose.SalesOrderIdType,
    OrderClose.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(OrderClose.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OrderClose.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(OrderClose.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OrderClose.ScheduledStart,
    OrderClose.ServiceId,
    OrderClose.StateCode,
    StateCodePLTable.Value,
    OrderClose.StatusCode,
    StatusCodePLTable.Value,
    OrderClose.Subcategory,
    OrderClose.Subject,
    OrderClose.TimeZoneRuleVersionNumber,
    OrderClose.UTCConversionTimeZoneCode
from OrderClose
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4209
        and IsBilledPLTable.AttributeValue = OrderClose.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4209
        and IsWorkflowCreatedPLTable.AttributeValue = OrderClose.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4209
        and StateCodePLTable.AttributeValue = OrderClose.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4209
        and StatusCodePLTable.AttributeValue = OrderClose.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where OrderClose.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    OrderClose.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		OrderClose.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		OrderClose.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		OrderClose.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    OrderClose.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredCustomerAddress]    Script Date: 04/11/2008 06:57:54 ******/




--
-- report view for customeraddress
--
create view [dbo].[FilteredCustomerAddress] (
    addressnumber,
    addresstypecode,
    addresstypecodename,
    city,
    country,
    county,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customeraddressid,
    fax,
    freighttermscode,
    freighttermscodename,
    importsequencenumber,
    latitude,
    line1,
    line2,
    line3,
    longitude,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    objecttypecode,
    objecttypecodename,
    overriddencreatedon, 
    overriddencreatedonutc,
    owningbusinessunit,
    owninguser,
    parentid,
    postalcode,
    postofficebox,
    primarycontactname,
    shippingmethodcode,
    shippingmethodcodename,
    stateorprovince,
    telephone1,
    telephone2,
    telephone3,
    timezoneruleversionnumber,
    upszone,
    utcconversiontimezonecode,
    utcoffset
) with view_metadata as 
select 
    CustomerAddress.AddressNumber,
    CustomerAddress.AddressTypeCode,
    AddressTypeCodePLTable.Value,
    CustomerAddress.City,
    CustomerAddress.Country,
    CustomerAddress.County,
    CustomerAddress.CreatedBy,
    CustomerAddress.CreatedByDsc,
    CustomerAddress.CreatedByName,
    CustomerAddress.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CustomerAddress.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CustomerAddress.CreatedOn,
    CustomerAddress.CustomerAddressId,
    CustomerAddress.Fax,
    CustomerAddress.FreightTermsCode,
    FreightTermsCodePLTable.Value,
    CustomerAddress.ImportSequenceNumber,
    CustomerAddress.Latitude,
    CustomerAddress.Line1,
    CustomerAddress.Line2,
    CustomerAddress.Line3,
    CustomerAddress.Longitude,
    CustomerAddress.ModifiedBy,
    CustomerAddress.ModifiedByDsc,
    CustomerAddress.ModifiedByName,
    CustomerAddress.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CustomerAddress.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CustomerAddress.ModifiedOn,
    CustomerAddress.Name,
    CustomerAddress.ObjectTypeCode,
    ObjectTypeCodePLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(CustomerAddress.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CustomerAddress.OverriddenCreatedOn,
    CustomerAddress.OwningBusinessUnit,
    CustomerAddress.OwningUser,
    CustomerAddress.ParentId,
    CustomerAddress.PostalCode,
    CustomerAddress.PostOfficeBox,
    CustomerAddress.PrimaryContactName,
    CustomerAddress.ShippingMethodCode,
    ShippingMethodCodePLTable.Value,
    CustomerAddress.StateOrProvince,
    CustomerAddress.Telephone1,
    CustomerAddress.Telephone2,
    CustomerAddress.Telephone3,
    CustomerAddress.TimeZoneRuleVersionNumber,
    CustomerAddress.UPSZone,
    CustomerAddress.UTCConversionTimeZoneCode,
    CustomerAddress.UTCOffset
from CustomerAddress
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap AddressTypeCodePLTable on 
        (AddressTypeCodePLTable.AttributeName = 'addresstypecode'
        and AddressTypeCodePLTable.ObjectTypeCode = 1071
        and AddressTypeCodePLTable.AttributeValue = CustomerAddress.AddressTypeCode
        and AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap FreightTermsCodePLTable on 
        (FreightTermsCodePLTable.AttributeName = 'freighttermscode'
        and FreightTermsCodePLTable.ObjectTypeCode = 1071
        and FreightTermsCodePLTable.AttributeValue = CustomerAddress.FreightTermsCode
        and FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ObjectTypeCodePLTable on 
        (ObjectTypeCodePLTable.AttributeName = 'objecttypecode'
        and ObjectTypeCodePLTable.ObjectTypeCode = 1071
        and ObjectTypeCodePLTable.AttributeValue = CustomerAddress.ObjectTypeCode
        and ObjectTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShippingMethodCodePLTable on 
        (ShippingMethodCodePLTable.AttributeName = 'shippingmethodcode'
        and ShippingMethodCodePLTable.ObjectTypeCode = 1071
        and ShippingMethodCodePLTable.AttributeValue = CustomerAddress.ShippingMethodCode
        and ShippingMethodCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1071) pdm
where CustomerAddress.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    CustomerAddress.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		CustomerAddress.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		CustomerAddress.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		CustomerAddress.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    CustomerAddress.ParentId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                (POA.ObjectTypeCode = 1 or POA.ObjectTypeCode = 2) AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredLead]    Script Date: 04/11/2008 06:57:58 ******/




--
-- report view for lead
--
create view [dbo].[FilteredLead] (
    accountid,
    accountiddsc,
    accountidname,
    accountidyominame,
    address1_addressid,
    address1_addresstypecode,
    address1_addresstypecodename,
    address1_city,
    address1_country,
    address1_county,
    address1_fax,
    address1_latitude,
    address1_line1,
    address1_line2,
    address1_line3,
    address1_longitude,
    address1_name,
    address1_postalcode,
    address1_postofficebox,
    address1_shippingmethodcode,
    address1_shippingmethodcodename,
    address1_stateorprovince,
    address1_telephone1,
    address1_telephone2,
    address1_telephone3,
    address1_upszone,
    address1_utcoffset,
    address2_addressid,
    address2_addresstypecode,
    address2_addresstypecodename,
    address2_city,
    address2_country,
    address2_county,
    address2_fax,
    address2_latitude,
    address2_line1,
    address2_line2,
    address2_line3,
    address2_longitude,
    address2_name,
    address2_postalcode,
    address2_postofficebox,
    address2_shippingmethodcode,
    address2_shippingmethodcodename,
    address2_stateorprovince,
    address2_telephone1,
    address2_telephone2,
    address2_telephone3,
    address2_upszone,
    address2_utcoffset,
    campaignid,
    campaigniddsc,
    campaignidname,
    companyname,
    contactid,
    contactiddsc,
    contactidname,
    contactidyominame,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customerid,
    customeriddsc,
    customeridname,
    customeridtype,
    description,
    donotbulkemail,
    donotbulkemailname,
    donotemail,
    donotemailname,
    donotfax,
    donotfaxname,
    donotphone,
    donotphonename,
    donotpostalmail,
    donotpostalmailname,
    donotsendmarketingmaterialname,
    donotsendmm,
    emailaddress1,
    emailaddress2,
    emailaddress3,
    estimatedamount,
    estimatedamount_base,
    estimatedclosedate, 
    estimatedclosedateutc,
    estimatedvalue,
    exchangerate,
    fax,
    firstname,
    fullname,
    importsequencenumber,
    industrycode,
    industrycodename,
    isprivatename,
    jobtitle,
    lastname,
    lastusedincampaign, 
    lastusedincampaignutc,
    leadid,
    leadqualitycode,
    leadqualitycodename,
    leadsourcecode,
    leadsourcecodename,
    masterid,
    masterleadiddsc,
    masterleadidname,
    masterleadidyominame,
    merged,
    mergedname,
    middlename,
    mobilephone,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    numberofemployees,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owningteam,
    owninguser,
    pager,
    participatesinworkflow,
    participatesinworkflowname,
    preferredcontactmethodcode,
    preferredcontactmethodcodename,
    prioritycode,
    prioritycodename,
    revenue,
    revenue_base,
    salesstagecode,
    salesstagecodename,
    salutation,
    sic,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subject,
    telephone1,
    telephone2,
    telephone3,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode,
    websiteurl,
    yomicompanyname,
    yomifirstname,
    yomifullname,
    yomilastname,
    yomimiddlename,
crm_moneyformatstring
) with view_metadata as 
select 
    Lead.AccountId,
    Lead.AccountIdDsc,
    Lead.AccountIdName,
    Lead.AccountIdYomiName,
    Lead.Address1_AddressId,
    Lead.Address1_AddressTypeCode,
    Address1_AddressTypeCodePLTable.Value,
    Lead.Address1_City,
    Lead.Address1_Country,
    Lead.Address1_County,
    Lead.Address1_Fax,
    Lead.Address1_Latitude,
    Lead.Address1_Line1,
    Lead.Address1_Line2,
    Lead.Address1_Line3,
    Lead.Address1_Longitude,
    Lead.Address1_Name,
    Lead.Address1_PostalCode,
    Lead.Address1_PostOfficeBox,
    Lead.Address1_ShippingMethodCode,
    Address1_ShippingMethodCodePLTable.Value,
    Lead.Address1_StateOrProvince,
    Lead.Address1_Telephone1,
    Lead.Address1_Telephone2,
    Lead.Address1_Telephone3,
    Lead.Address1_UPSZone,
    Lead.Address1_UTCOffset,
    Lead.Address2_AddressId,
    Lead.Address2_AddressTypeCode,
    Address2_AddressTypeCodePLTable.Value,
    Lead.Address2_City,
    Lead.Address2_Country,
    Lead.Address2_County,
    Lead.Address2_Fax,
    Lead.Address2_Latitude,
    Lead.Address2_Line1,
    Lead.Address2_Line2,
    Lead.Address2_Line3,
    Lead.Address2_Longitude,
    Lead.Address2_Name,
    Lead.Address2_PostalCode,
    Lead.Address2_PostOfficeBox,
    Lead.Address2_ShippingMethodCode,
    Address2_ShippingMethodCodePLTable.Value,
    Lead.Address2_StateOrProvince,
    Lead.Address2_Telephone1,
    Lead.Address2_Telephone2,
    Lead.Address2_Telephone3,
    Lead.Address2_UPSZone,
    Lead.Address2_UTCOffset,
    Lead.CampaignId,
    Lead.CampaignIdDsc,
    Lead.CampaignIdName,
    Lead.CompanyName,
    Lead.ContactId,
    Lead.ContactIdDsc,
    Lead.ContactIdName,
    Lead.ContactIdYomiName,
    Lead.CreatedBy,
    Lead.CreatedByDsc,
    Lead.CreatedByName,
    Lead.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Lead.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Lead.CreatedOn,
    Lead.CustomerId,
    Lead.CustomerIdDsc,
    Lead.CustomerIdName,
    Lead.CustomerIdType,
    Lead.Description,
    Lead.DoNotBulkEMail,
    DoNotBulkEMailPLTable.Value,
    Lead.DoNotEMail,
    DoNotEMailPLTable.Value,
    Lead.DoNotFax,
    DoNotFaxPLTable.Value,
    Lead.DoNotPhone,
    DoNotPhonePLTable.Value,
    Lead.DoNotPostalMail,
    DoNotPostalMailPLTable.Value,
    DoNotSendMMPLTable.Value,
    Lead.DoNotSendMM,
    Lead.EMailAddress1,
    Lead.EMailAddress2,
    Lead.EMailAddress3,
    Lead.EstimatedAmount,
    Lead.EstimatedAmount_Base,
    dbo.fn_UTCToTzSpecificLocalTime(Lead.EstimatedCloseDate,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Lead.EstimatedCloseDate,
    Lead.EstimatedValue,
    Lead.ExchangeRate,
    Lead.Fax,
    Lead.FirstName,
    Lead.FullName,
    Lead.ImportSequenceNumber,
    Lead.IndustryCode,
    IndustryCodePLTable.Value,
    IsPrivatePLTable.Value,
    Lead.JobTitle,
    Lead.LastName,
    dbo.fn_UTCToTzSpecificLocalTime(Lead.LastUsedInCampaign,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Lead.LastUsedInCampaign,
    Lead.LeadId,
    Lead.LeadQualityCode,
    LeadQualityCodePLTable.Value,
    Lead.LeadSourceCode,
    LeadSourceCodePLTable.Value,
    Lead.MasterId,
    Lead.MasterLeadIdDsc,
    Lead.MasterLeadIdName,
    Lead.MasterLeadIdYomiName,
    Lead.Merged,
    MergedPLTable.Value,
    Lead.MiddleName,
    Lead.MobilePhone,
    Lead.ModifiedBy,
    Lead.ModifiedByDsc,
    Lead.ModifiedByName,
    Lead.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Lead.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Lead.ModifiedOn,
    Lead.NumberOfEmployees,
    dbo.fn_UTCToTzSpecificLocalTime(Lead.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Lead.OverriddenCreatedOn,
    Lead.OwnerId,
    Lead.OwnerIdDsc,
    Lead.OwnerIdName,
    Lead.OwnerIdType,
    Lead.OwnerIdYomiName,
    Lead.OwningBusinessUnit,
    Lead.OwningTeam,
    Lead.OwningUser,
    Lead.Pager,
    Lead.ParticipatesInWorkflow,
    ParticipatesInWorkflowPLTable.Value,
    Lead.PreferredContactMethodCode,
    PreferredContactMethodCodePLTable.Value,
    Lead.PriorityCode,
    PriorityCodePLTable.Value,
    Lead.Revenue,
    Lead.Revenue_Base,
    Lead.SalesStageCode,
    SalesStageCodePLTable.Value,
    Lead.Salutation,
    Lead.SIC,
    Lead.StateCode,
    StateCodePLTable.Value,
    Lead.StatusCode,
    StatusCodePLTable.Value,
    Lead.Subject,
    Lead.Telephone1,
    Lead.Telephone2,
    Lead.Telephone3,
    Lead.TimeZoneRuleVersionNumber,
    Lead.TransactionCurrencyId,
    Lead.TransactionCurrencyIdDsc,
    Lead.TransactionCurrencyIdName,
    Lead.UTCConversionTimeZoneCode,
    Lead.WebSiteUrl,
    Lead.YomiCompanyName,
    Lead.YomiFirstName,
    Lead.YomiFullName,
    Lead.YomiLastName,
    Lead.YomiMiddleName,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from Lead
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = Lead.TransactionCurrencyId
    left outer join StringMap Address1_AddressTypeCodePLTable on 
        (Address1_AddressTypeCodePLTable.AttributeName = 'address1_addresstypecode'
        and Address1_AddressTypeCodePLTable.ObjectTypeCode = 4
        and Address1_AddressTypeCodePLTable.AttributeValue = Lead.Address1_AddressTypeCode
        and Address1_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_ShippingMethodCodePLTable on 
        (Address1_ShippingMethodCodePLTable.AttributeName = 'address1_shippingmethodcode'
        and Address1_ShippingMethodCodePLTable.ObjectTypeCode = 4
        and Address1_ShippingMethodCodePLTable.AttributeValue = Lead.Address1_ShippingMethodCode
        and Address1_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_AddressTypeCodePLTable on 
        (Address2_AddressTypeCodePLTable.AttributeName = 'address2_addresstypecode'
        and Address2_AddressTypeCodePLTable.ObjectTypeCode = 4
        and Address2_AddressTypeCodePLTable.AttributeValue = Lead.Address2_AddressTypeCode
        and Address2_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_ShippingMethodCodePLTable on 
        (Address2_ShippingMethodCodePLTable.AttributeName = 'address2_shippingmethodcode'
        and Address2_ShippingMethodCodePLTable.ObjectTypeCode = 4
        and Address2_ShippingMethodCodePLTable.AttributeValue = Lead.Address2_ShippingMethodCode
        and Address2_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotBulkEMailPLTable on 
        (DoNotBulkEMailPLTable.AttributeName = 'donotbulkemail'
        and DoNotBulkEMailPLTable.ObjectTypeCode = 4
        and DoNotBulkEMailPLTable.AttributeValue = Lead.DoNotBulkEMail
        and DoNotBulkEMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotEMailPLTable on 
        (DoNotEMailPLTable.AttributeName = 'donotemail'
        and DoNotEMailPLTable.ObjectTypeCode = 4
        and DoNotEMailPLTable.AttributeValue = Lead.DoNotEMail
        and DoNotEMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotFaxPLTable on 
        (DoNotFaxPLTable.AttributeName = 'donotfax'
        and DoNotFaxPLTable.ObjectTypeCode = 4
        and DoNotFaxPLTable.AttributeValue = Lead.DoNotFax
        and DoNotFaxPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotPhonePLTable on 
        (DoNotPhonePLTable.AttributeName = 'donotphone'
        and DoNotPhonePLTable.ObjectTypeCode = 4
        and DoNotPhonePLTable.AttributeValue = Lead.DoNotPhone
        and DoNotPhonePLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotPostalMailPLTable on 
        (DoNotPostalMailPLTable.AttributeName = 'donotpostalmail'
        and DoNotPostalMailPLTable.ObjectTypeCode = 4
        and DoNotPostalMailPLTable.AttributeValue = Lead.DoNotPostalMail
        and DoNotPostalMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotSendMMPLTable on 
        (DoNotSendMMPLTable.AttributeName = 'donotsendmm'
        and DoNotSendMMPLTable.ObjectTypeCode = 4
        and DoNotSendMMPLTable.AttributeValue = Lead.DoNotSendMM
        and DoNotSendMMPLTable.LangId = us.UILanguageId )
    left outer join StringMap IndustryCodePLTable on 
        (IndustryCodePLTable.AttributeName = 'industrycode'
        and IndustryCodePLTable.ObjectTypeCode = 4
        and IndustryCodePLTable.AttributeValue = Lead.IndustryCode
        and IndustryCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsPrivatePLTable on 
        (IsPrivatePLTable.AttributeName = 'isprivate'
        and IsPrivatePLTable.ObjectTypeCode = 4
        and IsPrivatePLTable.AttributeValue = Lead.IsPrivate
        and IsPrivatePLTable.LangId = us.UILanguageId )
    left outer join StringMap LeadQualityCodePLTable on 
        (LeadQualityCodePLTable.AttributeName = 'leadqualitycode'
        and LeadQualityCodePLTable.ObjectTypeCode = 4
        and LeadQualityCodePLTable.AttributeValue = Lead.LeadQualityCode
        and LeadQualityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap LeadSourceCodePLTable on 
        (LeadSourceCodePLTable.AttributeName = 'leadsourcecode'
        and LeadSourceCodePLTable.ObjectTypeCode = 4
        and LeadSourceCodePLTable.AttributeValue = Lead.LeadSourceCode
        and LeadSourceCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap MergedPLTable on 
        (MergedPLTable.AttributeName = 'merged'
        and MergedPLTable.ObjectTypeCode = 4
        and MergedPLTable.AttributeValue = Lead.Merged
        and MergedPLTable.LangId = us.UILanguageId )
    left outer join StringMap ParticipatesInWorkflowPLTable on 
        (ParticipatesInWorkflowPLTable.AttributeName = 'participatesinworkflow'
        and ParticipatesInWorkflowPLTable.ObjectTypeCode = 4
        and ParticipatesInWorkflowPLTable.AttributeValue = Lead.ParticipatesInWorkflow
        and ParticipatesInWorkflowPLTable.LangId = us.UILanguageId )
    left outer join StringMap PreferredContactMethodCodePLTable on 
        (PreferredContactMethodCodePLTable.AttributeName = 'preferredcontactmethodcode'
        and PreferredContactMethodCodePLTable.ObjectTypeCode = 4
        and PreferredContactMethodCodePLTable.AttributeValue = Lead.PreferredContactMethodCode
        and PreferredContactMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 4
        and PriorityCodePLTable.AttributeValue = Lead.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap SalesStageCodePLTable on 
        (SalesStageCodePLTable.AttributeName = 'salesstagecode'
        and SalesStageCodePLTable.ObjectTypeCode = 4
        and SalesStageCodePLTable.AttributeValue = Lead.SalesStageCode
        and SalesStageCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4
        and StateCodePLTable.AttributeValue = Lead.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4
        and StatusCodePLTable.AttributeValue = Lead.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4) pdm
where Lead.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Lead.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Lead.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Lead.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Lead.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Lead.LeadId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredWorkflow]    Script Date: 04/11/2008 06:58:15 ******/




--
-- report view for workflow
--
create view [dbo].[FilteredWorkflow] (
    activeworkflowid,
    activeworkflowiddsc,
    activeworkflowidname,
    activities,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    iscrmuiworkflow,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    ondemand,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owningbusinessunitdsc,
    owningbusinessunitname,
    owninguser,
    parentworkflowid,
    parentworkflowiddsc,
    parentworkflowidname,
    plugintypeid,
    primaryentity,
    primaryentityname,
    rules,
    scope,
    scopename,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subprocess,
    type,
    typename,
    uidata,
    workflowid
) with view_metadata as 
select 
    Workflow.ActiveWorkflowId,
    Workflow.ActiveWorkflowIdDsc,
    Workflow.ActiveWorkflowIdName,
    Workflow.Activities,
    Workflow.CreatedBy,
    Workflow.CreatedByDsc,
    Workflow.CreatedByName,
    Workflow.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Workflow.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Workflow.CreatedOn,
    Workflow.Description,
    Workflow.IsCrmUIWorkflow,
    Workflow.ModifiedBy,
    Workflow.ModifiedByDsc,
    Workflow.ModifiedByName,
    Workflow.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Workflow.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Workflow.ModifiedOn,
    Workflow.Name,
    Workflow.OnDemand,
    Workflow.OwnerId,
    Workflow.OwnerIdDsc,
    Workflow.OwnerIdName,
    Workflow.OwnerIdType,
    Workflow.OwnerIdYomiName,
    Workflow.OwningBusinessUnit,
    Workflow.OwningBusinessUnitDsc,
    Workflow.OwningBusinessUnitName,
    Workflow.OwningUser,
    Workflow.ParentWorkflowId,
    Workflow.ParentWorkflowIdDsc,
    Workflow.ParentWorkflowIdName,
    Workflow.PluginTypeId,
    Workflow.PrimaryEntity,
    PrimaryEntityPLTable.Value,
    Workflow.Rules,
    Workflow.Scope,
    ScopePLTable.Value,
    Workflow.StateCode,
    StateCodePLTable.Value,
    Workflow.StatusCode,
    StatusCodePLTable.Value,
    Workflow.Subprocess,
    Workflow.Type,
    TypePLTable.Value,
    Workflow.UIData,
    Workflow.WorkflowId
from Workflow
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap PrimaryEntityPLTable on 
        (PrimaryEntityPLTable.AttributeName = 'primaryentity'
        and PrimaryEntityPLTable.ObjectTypeCode = 4703
        and PrimaryEntityPLTable.AttributeValue = Workflow.PrimaryEntity
        and PrimaryEntityPLTable.LangId = us.UILanguageId )
    left outer join StringMap ScopePLTable on 
        (ScopePLTable.AttributeName = 'scope'
        and ScopePLTable.ObjectTypeCode = 4703
        and ScopePLTable.AttributeValue = Workflow.Scope
        and ScopePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4703
        and StateCodePLTable.AttributeValue = Workflow.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4703
        and StatusCodePLTable.AttributeValue = Workflow.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap TypePLTable on 
        (TypePLTable.AttributeName = 'type'
        and TypePLTable.ObjectTypeCode = 4703
        and TypePLTable.AttributeValue = Workflow.Type
        and TypePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4703) pdm
where Workflow.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Workflow.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Workflow.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Workflow.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Workflow.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Workflow.WorkflowId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4703 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredResource]    Script Date: 04/11/2008 06:58:06 ******/




--
-- report view for resource
--
create view [dbo].[FilteredResource] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    calendarid,
    displayinserviceviews,
    displayinserviceviewsname,
    isdisabled,
    isdisabledname,
    name,
    objecttypecode,
    objecttypecodename,
    organizationid,
    organizationiddsc,
    organizationidname,
    resourceid,
    siteid,
    siteiddsc,
    siteidname
) with view_metadata as 
select 
    Resource.BusinessUnitId,
    Resource.BusinessUnitIdDsc,
    Resource.BusinessUnitIdName,
    Resource.CalendarId,
    Resource.DisplayInServiceViews,
    DisplayInServiceViewsPLTable.Value,
    Resource.IsDisabled,
    IsDisabledPLTable.Value,
    Resource.Name,
    Resource.ObjectTypeCode,
    ObjectTypeCodePLTable.Value,
    Resource.OrganizationId,
    Resource.OrganizationIdDsc,
    Resource.OrganizationIdName,
    Resource.ResourceId,
    Resource.SiteId,
    Resource.SiteIdDsc,
    Resource.SiteIdName
from Resource
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap DisplayInServiceViewsPLTable on 
        (DisplayInServiceViewsPLTable.AttributeName = 'displayinserviceviews'
        and DisplayInServiceViewsPLTable.ObjectTypeCode = 4002
        and DisplayInServiceViewsPLTable.AttributeValue = Resource.DisplayInServiceViews
        and DisplayInServiceViewsPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsDisabledPLTable on 
        (IsDisabledPLTable.AttributeName = 'isdisabled'
        and IsDisabledPLTable.ObjectTypeCode = 4002
        and IsDisabledPLTable.AttributeValue = Resource.IsDisabled
        and IsDisabledPLTable.LangId = us.UILanguageId )
    left outer join StringMap ObjectTypeCodePLTable on 
        (ObjectTypeCodePLTable.AttributeName = 'objecttypecode'
        and ObjectTypeCodePLTable.ObjectTypeCode = 4002
        and ObjectTypeCodePLTable.AttributeValue = Resource.ObjectTypeCode
        and ObjectTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4002) pdm
where Resource.DeletionStateCode in (0) 
    and
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Resource.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Resource.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Resource.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredSdkMessageRequestField]    Script Date: 04/11/2008 06:58:10 ******/




--
-- report view for sdkmessagerequestfield
--
create view [dbo].[FilteredSdkMessageRequestField] (
    clrparser,
    createdby,
    createdon, 
    createdonutc,
    customizationlevel,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    name,
    optional,
    organizationid,
    parser,
    position,
    publicname,
    sdkmessagerequestfieldid,
    sdkmessagerequestfieldidunique,
    sdkmessagerequestid
) with view_metadata as 
select 
    SdkMessageRequestField.ClrParser,
    SdkMessageRequestField.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageRequestField.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageRequestField.CreatedOn,
    SdkMessageRequestField.CustomizationLevel,
    SdkMessageRequestField.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageRequestField.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageRequestField.ModifiedOn,
    SdkMessageRequestField.Name,
    SdkMessageRequestField.Optional,
    SdkMessageRequestField.OrganizationId,
    SdkMessageRequestField.Parser,
    SdkMessageRequestField.Position,
    SdkMessageRequestField.PublicName,
    SdkMessageRequestField.SdkMessageRequestFieldId,
    SdkMessageRequestField.SdkMessageRequestFieldIdUnique,
    SdkMessageRequestField.SdkMessageRequestId
from SdkMessageRequestField
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4614) pdm
where SdkMessageRequestField.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SdkMessageRequestField.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredRelationshipRoleMap]    Script Date: 04/11/2008 06:58:05 ******/




--
-- report view for relationshiprolemap
--
create view [dbo].[FilteredRelationshipRoleMap] (
    associateobjecttypecode,
    associateobjecttypecodename,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    organizationid,
    primaryobjecttypecode,
    primaryobjecttypecodename,
    relationshiproleid,
    relationshiproleiddsc,
    relationshiproleidname,
    relationshiprolemapid
) with view_metadata as 
select 
    RelationshipRoleMap.AssociateObjectTypeCode,
    AssociateObjectTypeCodePLTable.Value,
    RelationshipRoleMap.CreatedBy,
    RelationshipRoleMap.CreatedByDsc,
    RelationshipRoleMap.CreatedByName,
    RelationshipRoleMap.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(RelationshipRoleMap.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    RelationshipRoleMap.CreatedOn,
    RelationshipRoleMap.ModifiedBy,
    RelationshipRoleMap.ModifiedByDsc,
    RelationshipRoleMap.ModifiedByName,
    RelationshipRoleMap.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(RelationshipRoleMap.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    RelationshipRoleMap.ModifiedOn,
    RelationshipRoleMap.OrganizationId,
    RelationshipRoleMap.PrimaryObjectTypeCode,
    PrimaryObjectTypeCodePLTable.Value,
    RelationshipRoleMap.RelationshipRoleId,
    RelationshipRoleMap.RelationshipRoleIdDsc,
    RelationshipRoleMap.RelationshipRoleIdName,
    RelationshipRoleMap.RelationshipRoleMapId
from RelationshipRoleMap
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap AssociateObjectTypeCodePLTable on 
        (AssociateObjectTypeCodePLTable.AttributeName = 'associateobjecttypecode'
        and AssociateObjectTypeCodePLTable.ObjectTypeCode = 4501
        and AssociateObjectTypeCodePLTable.AttributeValue = RelationshipRoleMap.AssociateObjectTypeCode
        and AssociateObjectTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PrimaryObjectTypeCodePLTable on 
        (PrimaryObjectTypeCodePLTable.AttributeName = 'primaryobjecttypecode'
        and PrimaryObjectTypeCodePLTable.ObjectTypeCode = 4501
        and PrimaryObjectTypeCodePLTable.AttributeValue = RelationshipRoleMap.PrimaryObjectTypeCode
        and PrimaryObjectTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4500) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    RelationshipRoleMap.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredReportVisibility]    Script Date: 04/11/2008 06:58:06 ******/




--
-- report view for reportvisibility
--
create view [dbo].[FilteredReportVisibility] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    owningbusinessunit,
    owninguser,
    reportid,
    reportiddsc,
    reportidname,
    reportvisibilityid,
    visibilitycode,
    visibilitycodename
) with view_metadata as 
select 
    ReportVisibility.CreatedBy,
    ReportVisibility.CreatedByDsc,
    ReportVisibility.CreatedByName,
    ReportVisibility.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ReportVisibility.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ReportVisibility.CreatedOn,
    ReportVisibility.ImportSequenceNumber,
    ReportVisibility.ModifiedBy,
    ReportVisibility.ModifiedByDsc,
    ReportVisibility.ModifiedByName,
    ReportVisibility.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ReportVisibility.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ReportVisibility.ModifiedOn,
    ReportVisibility.OwningBusinessUnit,
    ReportVisibility.OwningUser,
    ReportVisibility.ReportId,
    ReportVisibility.ReportIdDsc,
    ReportVisibility.ReportIdName,
    ReportVisibility.ReportVisibilityId,
    ReportVisibility.VisibilityCode,
    VisibilityCodePLTable.Value
from ReportVisibility
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap VisibilityCodePLTable on 
        (VisibilityCodePLTable.AttributeName = 'visibilitycode'
        and VisibilityCodePLTable.ObjectTypeCode = 9103
        and VisibilityCodePLTable.AttributeValue = ReportVisibility.VisibilityCode
        and VisibilityCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(9100) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ReportVisibility.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ReportVisibility.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ReportVisibility.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ReportVisibility.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ReportVisibility.ReportId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 9100 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredImportLog]    Script Date: 04/11/2008 06:57:56 ******/




--
-- report view for importlog
--
create view [dbo].[FilteredImportLog] (
    additionalinfo,
    columnvalue,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    errordescription,
    errornumber,
    headercolumn,
    importdataid,
    importdataiddsc,
    importdataidname,
    importfileid,
    importfileiddsc,
    importfileidname,
    importlogid,
    linenumber,
    logphasecode,
    logphasecodename,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    sequencenumber,
    statecode,
    statecodename,
    statuscode,
    statuscodename
) with view_metadata as 
select 
    ImportLog.AdditionalInfo,
    ImportLog.ColumnValue,
    ImportLog.CreatedBy,
    ImportLog.CreatedByDsc,
    ImportLog.CreatedByName,
    ImportLog.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ImportLog.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ImportLog.CreatedOn,
    ImportLog.ErrorDescription,
    ImportLog.ErrorNumber,
    ImportLog.HeaderColumn,
    ImportLog.ImportDataId,
    ImportLog.ImportDataIdDsc,
    ImportLog.ImportDataIdName,
    ImportLog.ImportFileId,
    ImportLog.ImportFileIdDsc,
    ImportLog.ImportFileIdName,
    ImportLog.ImportLogId,
    ImportLog.LineNumber,
    ImportLog.LogPhaseCode,
    LogPhaseCodePLTable.Value,
    ImportLog.ModifiedBy,
    ImportLog.ModifiedByDsc,
    ImportLog.ModifiedByName,
    ImportLog.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ImportLog.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ImportLog.ModifiedOn,
    ImportLog.OwnerId,
    ImportLog.OwnerIdDsc,
    ImportLog.OwnerIdName,
    ImportLog.OwnerIdType,
    ImportLog.OwnerIdYomiName,
    ImportLog.OwningBusinessUnit,
    ImportLog.OwningUser,
    ImportLog.SequenceNumber,
    ImportLog.StateCode,
    StateCodePLTable.Value,
    ImportLog.StatusCode,
    StatusCodePLTable.Value
from ImportLog
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap LogPhaseCodePLTable on 
        (LogPhaseCodePLTable.AttributeName = 'logphasecode'
        and LogPhaseCodePLTable.ObjectTypeCode = 4423
        and LogPhaseCodePLTable.AttributeValue = ImportLog.LogPhaseCode
        and LogPhaseCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4423
        and StateCodePLTable.AttributeValue = ImportLog.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4423
        and StatusCodePLTable.AttributeValue = ImportLog.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4423) pdm
where ImportLog.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ImportLog.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ImportLog.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ImportLog.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ImportLog.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ImportLog.ImportLogId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4423 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredTemplate]    Script Date: 04/11/2008 06:58:13 ******/




--
-- report view for template
--
create view [dbo].[FilteredTemplate] (
    body,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    generationtypecode,
    importsequencenumber,
    ispersonal,
    ispersonalname,
    languagecode,
    mimetype,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owningteam,
    owninguser,
    presentationxml,
    subject,
    subjectpresentationxml,
    templateid,
    templatetypecode,
    templatetypecodename,
    title
) with view_metadata as 
select 
    Template.Body,
    Template.CreatedBy,
    Template.CreatedByDsc,
    Template.CreatedByName,
    Template.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Template.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Template.CreatedOn,
    Template.Description,
    Template.GenerationTypeCode,
    Template.ImportSequenceNumber,
    Template.IsPersonal,
    IsPersonalPLTable.Value,
    Template.LanguageCode,
    Template.MimeType,
    Template.ModifiedBy,
    Template.ModifiedByDsc,
    Template.ModifiedByName,
    Template.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Template.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Template.ModifiedOn,
    Template.OwnerId,
    Template.OwnerIdDsc,
    Template.OwnerIdName,
    Template.OwnerIdType,
    Template.OwnerIdYomiName,
    Template.OwningBusinessUnit,
    Template.OwningTeam,
    Template.OwningUser,
    Template.PresentationXml,
    Template.Subject,
    Template.SubjectPresentationXml,
    Template.TemplateId,
    Template.TemplateTypeCode,
    TemplateTypeCodePLTable.Value,
    Template.Title
from Template
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsPersonalPLTable on 
        (IsPersonalPLTable.AttributeName = 'ispersonal'
        and IsPersonalPLTable.ObjectTypeCode = 2010
        and IsPersonalPLTable.AttributeValue = Template.IsPersonal
        and IsPersonalPLTable.LangId = us.UILanguageId )
    left outer join StringMap TemplateTypeCodePLTable on 
        (TemplateTypeCodePLTable.AttributeName = 'templatetypecode'
        and TemplateTypeCodePLTable.ObjectTypeCode = 2010
        and TemplateTypeCodePLTable.AttributeValue = Template.TemplateTypeCode
        and TemplateTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(2010) pdm
where Template.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Template.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Template.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Template.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Template.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Template.TemplateId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 2010 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredSdkMessage]    Script Date: 04/11/2008 06:58:08 ******/




--
-- report view for sdkmessage
--
create view [dbo].[FilteredSdkMessage] (
    autotransact,
    availability,
    categoryname,
    createdby,
    createdon, 
    createdonutc,
    customizationlevel,
    expand,
    isprivate,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    sdkmessageid,
    sdkmessageidunique,
    template
) with view_metadata as 
select 
    SdkMessage.AutoTransact,
    SdkMessage.Availability,
    SdkMessage.CategoryName,
    SdkMessage.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessage.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessage.CreatedOn,
    SdkMessage.CustomizationLevel,
    SdkMessage.Expand,
    SdkMessage.IsPrivate,
    SdkMessage.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessage.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessage.ModifiedOn,
    SdkMessage.Name,
    SdkMessage.OrganizationId,
    SdkMessage.SdkMessageId,
    SdkMessage.SdkMessageIdUnique,
    SdkMessage.Template
from SdkMessage
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4606) pdm
where SdkMessage.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SdkMessage.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredUserSettings]    Script Date: 04/11/2008 06:58:15 ******/




--
-- report view for usersettings
--
create view [dbo].[FilteredUserSettings] (
    addressbooksyncinterval,
    advancedfindstartupmode,
    allowemailcredentials,
    allowemailcredentialsname,
    amdesignator,
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    calendartype,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    currencydecimalprecision,
    currencyformatcode,
    currencysymbol,
    dateformatcode,
    dateformatstring,
    dateseparator,
    decimalsymbol,
    defaultcalendarview,
    emailpassword,
    emailusername,
    fullnameconventioncode,
    helplanguageid,
    homepagearea,
    homepagesubarea,
    ignoreunsolicitedemail,
    ignoreunsolicitedemailname,
    incomingemailfilteringmethod,
    incomingemailfilteringmethodname,
    isduplicatedetectionenabledwhengoingonline,
    localeid,
    longdateformatcode,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    negativecurrencyformatcode,
    negativeformatcode,
    nexttrackingnumber,
    numbergroupformat,
    numberseparator,
    offlinesyncinterval,
    outlooksyncinterval,
    paginglimit,
    pmdesignator,
    pricingdecimalprecision,
    reportscripterrors,
    reportscripterrorsname,
    showweeknumber,
    synccontactcompany,
    systemuserid,
    timeformatcode,
    timeformatstring,
    timeseparator,
    timezonebias,
    timezonecode,
    timezonedaylightbias,
    timezonedaylightday,
    timezonedaylightdayofweek,
    timezonedaylighthour,
    timezonedaylightminute,
    timezonedaylightmonth,
    timezonedaylightsecond,
    timezonedaylightyear,
    timezonestandardbias,
    timezonestandardday,
    timezonestandarddayofweek,
    timezonestandardhour,
    timezonestandardminute,
    timezonestandardmonth,
    timezonestandardsecond,
    timezonestandardyear,
    trackingtokenid,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    uilanguageid,
    usecrmformforappointment,
    usecrmformforcontact,
    usecrmformforemail,
    usecrmformfortask,
    useimagestrips,
    userprofile,
    workdaystarttime,
    workdaystoptime
) with view_metadata as 
select 
    UserSettings.AddressBookSyncInterval,
    UserSettings.AdvancedFindStartupMode,
    UserSettings.AllowEmailCredentials,
    AllowEmailCredentialsPLTable.Value,
    UserSettings.AMDesignator,
    UserSettings.BusinessUnitId,
    UserSettings.BusinessUnitIdDsc,
    UserSettings.BusinessUnitIdName,
    UserSettings.CalendarType,
    UserSettings.CreatedBy,
    UserSettings.CreatedByDsc,
    UserSettings.CreatedByName,
    UserSettings.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserSettings.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserSettings.CreatedOn,
    UserSettings.CurrencyDecimalPrecision,
    UserSettings.CurrencyFormatCode,
    UserSettings.CurrencySymbol,
    UserSettings.DateFormatCode,
    UserSettings.DateFormatString,
    UserSettings.DateSeparator,
    UserSettings.DecimalSymbol,
    UserSettings.DefaultCalendarView,
    UserSettings.EmailPassword,
    UserSettings.EmailUsername,
    UserSettings.FullNameConventionCode,
    UserSettings.HelpLanguageId,
    UserSettings.HomepageArea,
    UserSettings.HomepageSubarea,
    UserSettings.IgnoreUnsolicitedEmail,
    IgnoreUnsolicitedEmailPLTable.Value,
    UserSettings.IncomingEmailFilteringMethod,
    IncomingEmailFilteringMethodPLTable.Value,
    UserSettings.IsDuplicateDetectionEnabledWhenGoingOnline,
    UserSettings.LocaleId,
    UserSettings.LongDateFormatCode,
    UserSettings.ModifiedBy,
    UserSettings.ModifiedByDsc,
    UserSettings.ModifiedByName,
    UserSettings.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserSettings.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserSettings.ModifiedOn,
    UserSettings.NegativeCurrencyFormatCode,
    UserSettings.NegativeFormatCode,
    UserSettings.NextTrackingNumber,
    UserSettings.NumberGroupFormat,
    UserSettings.NumberSeparator,
    UserSettings.OfflineSyncInterval,
    UserSettings.OutlookSyncInterval,
    UserSettings.PagingLimit,
    UserSettings.PMDesignator,
    UserSettings.PricingDecimalPrecision,
    UserSettings.ReportScriptErrors,
    ReportScriptErrorsPLTable.Value,
    UserSettings.ShowWeekNumber,
    UserSettings.SyncContactCompany,
    UserSettings.SystemUserId,
    UserSettings.TimeFormatCode,
    UserSettings.TimeFormatString,
    UserSettings.TimeSeparator,
    UserSettings.TimeZoneBias,
    UserSettings.TimeZoneCode,
    UserSettings.TimeZoneDaylightBias,
    UserSettings.TimeZoneDaylightDay,
    UserSettings.TimeZoneDaylightDayOfWeek,
    UserSettings.TimeZoneDaylightHour,
    UserSettings.TimeZoneDaylightMinute,
    UserSettings.TimeZoneDaylightMonth,
    UserSettings.TimeZoneDaylightSecond,
    UserSettings.TimeZoneDaylightYear,
    UserSettings.TimeZoneStandardBias,
    UserSettings.TimeZoneStandardDay,
    UserSettings.TimeZoneStandardDayOfWeek,
    UserSettings.TimeZoneStandardHour,
    UserSettings.TimeZoneStandardMinute,
    UserSettings.TimeZoneStandardMonth,
    UserSettings.TimeZoneStandardSecond,
    UserSettings.TimeZoneStandardYear,
    UserSettings.TrackingTokenId,
    UserSettings.TransactionCurrencyId,
    UserSettings.TransactionCurrencyIdDsc,
    UserSettings.TransactionCurrencyIdName,
    UserSettings.UILanguageId,
    UserSettings.UseCrmFormForAppointment,
    UserSettings.UseCrmFormForContact,
    UserSettings.UseCrmFormForEmail,
    UserSettings.UseCrmFormForTask,
    UserSettings.UseImageStrips,
    UserSettings.UserProfile,
    UserSettings.WorkdayStartTime,
    UserSettings.WorkdayStopTime
from UserSettings
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap AllowEmailCredentialsPLTable on 
        (AllowEmailCredentialsPLTable.AttributeName = 'allowemailcredentials'
        and AllowEmailCredentialsPLTable.ObjectTypeCode = 150
        and AllowEmailCredentialsPLTable.AttributeValue = UserSettings.AllowEmailCredentials
        and AllowEmailCredentialsPLTable.LangId = us.UILanguageId )
    left outer join StringMap IgnoreUnsolicitedEmailPLTable on 
        (IgnoreUnsolicitedEmailPLTable.AttributeName = 'ignoreunsolicitedemail'
        and IgnoreUnsolicitedEmailPLTable.ObjectTypeCode = 150
        and IgnoreUnsolicitedEmailPLTable.AttributeValue = UserSettings.IgnoreUnsolicitedEmail
        and IgnoreUnsolicitedEmailPLTable.LangId = us.UILanguageId )
    left outer join StringMap IncomingEmailFilteringMethodPLTable on 
        (IncomingEmailFilteringMethodPLTable.AttributeName = 'incomingemailfilteringmethod'
        and IncomingEmailFilteringMethodPLTable.ObjectTypeCode = 150
        and IncomingEmailFilteringMethodPLTable.AttributeValue = UserSettings.IncomingEmailFilteringMethod
        and IncomingEmailFilteringMethodPLTable.LangId = us.UILanguageId )
    left outer join StringMap ReportScriptErrorsPLTable on 
        (ReportScriptErrorsPLTable.AttributeName = 'reportscripterrors'
        and ReportScriptErrorsPLTable.ObjectTypeCode = 150
        and ReportScriptErrorsPLTable.AttributeValue = UserSettings.ReportScriptErrors
        and ReportScriptErrorsPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(150) pdm
    where
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		UserSettings.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		UserSettings.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		UserSettings.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredRelationshipRole]    Script Date: 04/11/2008 06:58:05 ******/




--
-- report view for relationshiprole
--
create view [dbo].[FilteredRelationshipRole] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    relationshiproleid,
    statecode,
    statecodename,
    statuscode,
    statuscodename
) with view_metadata as 
select 
    RelationshipRole.CreatedBy,
    RelationshipRole.CreatedByDsc,
    RelationshipRole.CreatedByName,
    RelationshipRole.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(RelationshipRole.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    RelationshipRole.CreatedOn,
    RelationshipRole.Description,
    RelationshipRole.ImportSequenceNumber,
    RelationshipRole.ModifiedBy,
    RelationshipRole.ModifiedByDsc,
    RelationshipRole.ModifiedByName,
    RelationshipRole.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(RelationshipRole.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    RelationshipRole.ModifiedOn,
    RelationshipRole.Name,
    RelationshipRole.OrganizationId,
    RelationshipRole.OrganizationIdDsc,
    RelationshipRole.OrganizationIdName,
    RelationshipRole.RelationshipRoleId,
    RelationshipRole.StateCode,
    StateCodePLTable.Value,
    RelationshipRole.StatusCode,
    StatusCodePLTable.Value
from RelationshipRole
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4500
        and StateCodePLTable.AttributeValue = RelationshipRole.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4500
        and StatusCodePLTable.AttributeValue = RelationshipRole.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4500) pdm
where RelationshipRole.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    RelationshipRole.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredFax]    Script Date: 04/11/2008 06:57:55 ******/




--
-- report view for fax
--
create view [dbo].[FilteredFax] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    billingcode,
    category,
    coverpagename,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    directioncode,
    directioncodename,
    faxnumber,
    importsequencenumber,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    numberofpages,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    prioritycode,
    prioritycodename,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    timezoneruleversionnumber,
    tsid,
    utcconversiontimezonecode
) with view_metadata as 
select 
    Fax.ActivityId,
    Fax.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(Fax.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Fax.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Fax.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Fax.ActualStart,
    Fax.BillingCode,
    Fax.Category,
    Fax.CoverPageName,
    Fax.CreatedBy,
    Fax.CreatedByDsc,
    Fax.CreatedByName,
    Fax.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Fax.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Fax.CreatedOn,
    Fax.Description,
    Fax.DirectionCode,
    DirectionCodePLTable.Value,
    Fax.FaxNumber,
    Fax.ImportSequenceNumber,
    Fax.IsBilled,
    IsBilledPLTable.Value,
    Fax.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    Fax.ModifiedBy,
    Fax.ModifiedByDsc,
    Fax.ModifiedByName,
    Fax.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Fax.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Fax.ModifiedOn,
    Fax.NumberOfPages,
    dbo.fn_UTCToTzSpecificLocalTime(Fax.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Fax.OverriddenCreatedOn,
    Fax.OwnerId,
    Fax.OwnerIdDsc,
    Fax.OwnerIdName,
    Fax.OwnerIdType,
    Fax.OwnerIdYomiName,
    Fax.OwningBusinessUnit,
    Fax.OwningUser,
    Fax.PriorityCode,
    PriorityCodePLTable.Value,
    Fax.RegardingObjectId,
    Fax.RegardingObjectIdDsc,
    Fax.RegardingObjectIdName,
    Fax.RegardingObjectIdYomiName,
    Fax.RegardingObjectTypeCode,
    Fax.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(Fax.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Fax.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Fax.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Fax.ScheduledStart,
    Fax.ServiceId,
    Fax.StateCode,
    StateCodePLTable.Value,
    Fax.StatusCode,
    StatusCodePLTable.Value,
    Fax.Subcategory,
    Fax.Subject,
    Fax.TimeZoneRuleVersionNumber,
    Fax.Tsid,
    Fax.UTCConversionTimeZoneCode
from Fax
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap DirectionCodePLTable on 
        (DirectionCodePLTable.AttributeName = 'directioncode'
        and DirectionCodePLTable.ObjectTypeCode = 4204
        and DirectionCodePLTable.AttributeValue = Fax.DirectionCode
        and DirectionCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4204
        and IsBilledPLTable.AttributeValue = Fax.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4204
        and IsWorkflowCreatedPLTable.AttributeValue = Fax.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 4204
        and PriorityCodePLTable.AttributeValue = Fax.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4204
        and StateCodePLTable.AttributeValue = Fax.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4204
        and StatusCodePLTable.AttributeValue = Fax.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where Fax.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Fax.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Fax.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Fax.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Fax.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Fax.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredSdkMessageFilter]    Script Date: 04/11/2008 06:58:09 ******/




--
-- report view for sdkmessagefilter
--
create view [dbo].[FilteredSdkMessageFilter] (
    availability,
    createdby,
    createdon, 
    createdonutc,
    customizationlevel,
    iscustomprocessingstepallowed,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    organizationid,
    primaryobjecttypecode,
    primaryobjecttypecodename,
    sdkmessagefilterid,
    sdkmessagefilteridunique,
    sdkmessageid,
    secondaryobjecttypecode,
    secondaryobjecttypecodename
) with view_metadata as 
select 
    SdkMessageFilter.Availability,
    SdkMessageFilter.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageFilter.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageFilter.CreatedOn,
    SdkMessageFilter.CustomizationLevel,
    SdkMessageFilter.IsCustomProcessingStepAllowed,
    SdkMessageFilter.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageFilter.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageFilter.ModifiedOn,
    SdkMessageFilter.OrganizationId,
    SdkMessageFilter.PrimaryObjectTypeCode,
    PrimaryObjectTypeCodePLTable.Value,
    SdkMessageFilter.SdkMessageFilterId,
    SdkMessageFilter.SdkMessageFilterIdUnique,
    SdkMessageFilter.SdkMessageId,
    SdkMessageFilter.SecondaryObjectTypeCode,
    SecondaryObjectTypeCodePLTable.Value
from SdkMessageFilter
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap PrimaryObjectTypeCodePLTable on 
        (PrimaryObjectTypeCodePLTable.AttributeName = 'primaryobjecttypecode'
        and PrimaryObjectTypeCodePLTable.ObjectTypeCode = 4607
        and PrimaryObjectTypeCodePLTable.AttributeValue = SdkMessageFilter.PrimaryObjectTypeCode
        and PrimaryObjectTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap SecondaryObjectTypeCodePLTable on 
        (SecondaryObjectTypeCodePLTable.AttributeName = 'secondaryobjecttypecode'
        and SecondaryObjectTypeCodePLTable.ObjectTypeCode = 4607
        and SecondaryObjectTypeCodePLTable.AttributeValue = SdkMessageFilter.SecondaryObjectTypeCode
        and SecondaryObjectTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4607) pdm
where SdkMessageFilter.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SdkMessageFilter.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[Filteredphilipri_customizationversion]    Script Date: 04/11/2008 06:58:02 ******/




--
-- report view for philipri_customizationversion
--
create view [dbo].[Filteredphilipri_customizationversion] (
    createdby,
    createdbydsc,
    createdbyname,
    createdon, 
    createdonutc,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedon, 
    modifiedonutc,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    philipri_customizationversionid,
    philipri_name,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    philipri_customizationversion.CreatedBy,
    philipri_customizationversion.CreatedByDsc,
    philipri_customizationversion.CreatedByName,
    dbo.fn_UTCToTzSpecificLocalTime(philipri_customizationversion.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    philipri_customizationversion.CreatedOn,
    philipri_customizationversion.ImportSequenceNumber,
    philipri_customizationversion.ModifiedBy,
    philipri_customizationversion.ModifiedByDsc,
    philipri_customizationversion.ModifiedByName,
    dbo.fn_UTCToTzSpecificLocalTime(philipri_customizationversion.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    philipri_customizationversion.ModifiedOn,
    philipri_customizationversion.OrganizationId,
    philipri_customizationversion.OrganizationIdDsc,
    philipri_customizationversion.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(philipri_customizationversion.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    philipri_customizationversion.OverriddenCreatedOn,
    philipri_customizationversion.philipri_customizationversionId,
    philipri_customizationversion.philipri_name,
    philipri_customizationversion.statecode,
    statecodePLTable.Value,
    philipri_customizationversion.statuscode,
    statuscodePLTable.Value,
    philipri_customizationversion.TimeZoneRuleVersionNumber,
    philipri_customizationversion.UTCConversionTimeZoneCode
from philipri_customizationversion
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap statecodePLTable on 
        (statecodePLTable.AttributeName = 'statecode'
        and statecodePLTable.ObjectTypeCode = 10001
        and statecodePLTable.AttributeValue = philipri_customizationversion.statecode
        and statecodePLTable.LangId = us.UILanguageId )
    left outer join StringMap statuscodePLTable on 
        (statuscodePLTable.AttributeName = 'statuscode'
        and statuscodePLTable.ObjectTypeCode = 10001
        and statuscodePLTable.AttributeValue = philipri_customizationversion.statuscode
        and statuscodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(10001) pdm
where philipri_customizationversion.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    philipri_customizationversion.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredPhoneCall]    Script Date: 04/11/2008 06:58:02 ******/




--
-- report view for phonecall
--
create view [dbo].[FilteredPhoneCall] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    category,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    directioncode,
    directioncodename,
    importsequencenumber,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    new_month,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    phonenumber,
    prioritycode,
    prioritycodename,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    PhoneCall.ActivityId,
    PhoneCall.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(PhoneCall.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PhoneCall.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(PhoneCall.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PhoneCall.ActualStart,
    PhoneCall.Category,
    PhoneCall.CreatedBy,
    PhoneCall.CreatedByDsc,
    PhoneCall.CreatedByName,
    PhoneCall.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(PhoneCall.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PhoneCall.CreatedOn,
    PhoneCall.Description,
    PhoneCall.DirectionCode,
    DirectionCodePLTable.Value,
    PhoneCall.ImportSequenceNumber,
    PhoneCall.IsBilled,
    IsBilledPLTable.Value,
    PhoneCall.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    PhoneCall.ModifiedBy,
    PhoneCall.ModifiedByDsc,
    PhoneCall.ModifiedByName,
    PhoneCall.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(PhoneCall.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PhoneCall.ModifiedOn,
    PhoneCall.New_Month,
    dbo.fn_UTCToTzSpecificLocalTime(PhoneCall.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PhoneCall.OverriddenCreatedOn,
    PhoneCall.OwnerId,
    PhoneCall.OwnerIdDsc,
    PhoneCall.OwnerIdName,
    PhoneCall.OwnerIdType,
    PhoneCall.OwnerIdYomiName,
    PhoneCall.OwningBusinessUnit,
    PhoneCall.OwningUser,
    PhoneCall.PhoneNumber,
    PhoneCall.PriorityCode,
    PriorityCodePLTable.Value,
    PhoneCall.RegardingObjectId,
    PhoneCall.RegardingObjectIdDsc,
    PhoneCall.RegardingObjectIdName,
    PhoneCall.RegardingObjectIdYomiName,
    PhoneCall.RegardingObjectTypeCode,
    PhoneCall.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(PhoneCall.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PhoneCall.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(PhoneCall.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PhoneCall.ScheduledStart,
    PhoneCall.ServiceId,
    PhoneCall.StateCode,
    StateCodePLTable.Value,
    PhoneCall.StatusCode,
    StatusCodePLTable.Value,
    PhoneCall.Subcategory,
    PhoneCall.Subject,
    PhoneCall.TimeZoneRuleVersionNumber,
    PhoneCall.UTCConversionTimeZoneCode
from PhoneCall
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap DirectionCodePLTable on 
        (DirectionCodePLTable.AttributeName = 'directioncode'
        and DirectionCodePLTable.ObjectTypeCode = 4210
        and DirectionCodePLTable.AttributeValue = PhoneCall.DirectionCode
        and DirectionCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4210
        and IsBilledPLTable.AttributeValue = PhoneCall.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4210
        and IsWorkflowCreatedPLTable.AttributeValue = PhoneCall.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 4210
        and PriorityCodePLTable.AttributeValue = PhoneCall.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4210
        and StateCodePLTable.AttributeValue = PhoneCall.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4210
        and StatusCodePLTable.AttributeValue = PhoneCall.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where PhoneCall.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    PhoneCall.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		PhoneCall.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		PhoneCall.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		PhoneCall.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    PhoneCall.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredNew_entity1]    Script Date: 04/11/2008 06:58:00 ******/




--
-- report view for new_entity1
--
create view [dbo].[FilteredNew_entity1] (
    createdby,
    createdbydsc,
    createdbyname,
    createdon, 
    createdonutc,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedon, 
    modifiedonutc,
    new_atribute2,
    new_atributo1,
    new_edate, 
    new_edateutc,
    new_entity1id,
    new_enumero,
    new_etexto,
    new_name,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owningbusinessunit,
    owninguser,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    New_entity1.CreatedBy,
    New_entity1.CreatedByDsc,
    New_entity1.CreatedByName,
    dbo.fn_UTCToTzSpecificLocalTime(New_entity1.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    New_entity1.CreatedOn,
    New_entity1.ImportSequenceNumber,
    New_entity1.ModifiedBy,
    New_entity1.ModifiedByDsc,
    New_entity1.ModifiedByName,
    dbo.fn_UTCToTzSpecificLocalTime(New_entity1.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    New_entity1.ModifiedOn,
    New_entity1.New_Atribute2,
    New_entity1.New_Atributo1,
    dbo.fn_UTCToTzSpecificLocalTime(New_entity1.New_EDAte,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    New_entity1.New_EDAte,
    New_entity1.New_entity1Id,
    New_entity1.New_ENumero,
    New_entity1.New_ETexto,
    New_entity1.New_name,
    dbo.fn_UTCToTzSpecificLocalTime(New_entity1.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    New_entity1.OverriddenCreatedOn,
    New_entity1.OwnerId,
    New_entity1.OwnerIdDsc,
    New_entity1.OwnerIdName,
    New_entity1.OwnerIdType,
    New_entity1.OwningBusinessUnit,
    New_entity1.OwningUser,
    New_entity1.statecode,
    statecodePLTable.Value,
    New_entity1.statuscode,
    statuscodePLTable.Value,
    New_entity1.TimeZoneRuleVersionNumber,
    New_entity1.UTCConversionTimeZoneCode
from New_entity1
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap statecodePLTable on 
        (statecodePLTable.AttributeName = 'statecode'
        and statecodePLTable.ObjectTypeCode = 10000
        and statecodePLTable.AttributeValue = New_entity1.statecode
        and statecodePLTable.LangId = us.UILanguageId )
    left outer join StringMap statuscodePLTable on 
        (statuscodePLTable.AttributeName = 'statuscode'
        and statuscodePLTable.ObjectTypeCode = 10000
        and statuscodePLTable.AttributeValue = New_entity1.statuscode
        and statuscodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(10000) pdm
where New_entity1.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    New_entity1.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		New_entity1.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		New_entity1.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		New_entity1.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    New_entity1.New_entity1Id in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 10000 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredReportCategory]    Script Date: 04/11/2008 06:58:06 ******/




--
-- report view for reportcategory
--
create view [dbo].[FilteredReportCategory] (
    categorycode,
    categorycodename,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    owningbusinessunit,
    owninguser,
    reportcategoryid,
    reportid,
    reportiddsc,
    reportidname,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    ReportCategory.CategoryCode,
    CategoryCodePLTable.Value,
    ReportCategory.CreatedBy,
    ReportCategory.CreatedByDsc,
    ReportCategory.CreatedByName,
    ReportCategory.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ReportCategory.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ReportCategory.CreatedOn,
    ReportCategory.ImportSequenceNumber,
    ReportCategory.ModifiedBy,
    ReportCategory.ModifiedByDsc,
    ReportCategory.ModifiedByName,
    ReportCategory.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ReportCategory.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ReportCategory.ModifiedOn,
    ReportCategory.OwningBusinessUnit,
    ReportCategory.OwningUser,
    ReportCategory.ReportCategoryId,
    ReportCategory.ReportId,
    ReportCategory.ReportIdDsc,
    ReportCategory.ReportIdName,
    ReportCategory.TimeZoneRuleVersionNumber,
    ReportCategory.UTCConversionTimeZoneCode
from ReportCategory
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap CategoryCodePLTable on 
        (CategoryCodePLTable.AttributeName = 'categorycode'
        and CategoryCodePLTable.ObjectTypeCode = 9102
        and CategoryCodePLTable.AttributeValue = ReportCategory.CategoryCode
        and CategoryCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(9100) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ReportCategory.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ReportCategory.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ReportCategory.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ReportCategory.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ReportCategory.ReportId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 9100 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredLetter]    Script Date: 04/11/2008 06:57:59 ******/




--
-- report view for letter
--
create view [dbo].[FilteredLetter] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    address,
    category,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    directioncode,
    directioncodename,
    importsequencenumber,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    prioritycode,
    prioritycodename,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    Letter.ActivityId,
    Letter.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(Letter.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Letter.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Letter.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Letter.ActualStart,
    Letter.Address,
    Letter.Category,
    Letter.CreatedBy,
    Letter.CreatedByDsc,
    Letter.CreatedByName,
    Letter.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Letter.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Letter.CreatedOn,
    Letter.Description,
    Letter.DirectionCode,
    DirectionCodePLTable.Value,
    Letter.ImportSequenceNumber,
    Letter.IsBilled,
    IsBilledPLTable.Value,
    Letter.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    Letter.ModifiedBy,
    Letter.ModifiedByDsc,
    Letter.ModifiedByName,
    Letter.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Letter.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Letter.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(Letter.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Letter.OverriddenCreatedOn,
    Letter.OwnerId,
    Letter.OwnerIdDsc,
    Letter.OwnerIdName,
    Letter.OwnerIdType,
    Letter.OwnerIdYomiName,
    Letter.OwningBusinessUnit,
    Letter.OwningUser,
    Letter.PriorityCode,
    PriorityCodePLTable.Value,
    Letter.RegardingObjectId,
    Letter.RegardingObjectIdDsc,
    Letter.RegardingObjectIdName,
    Letter.RegardingObjectIdYomiName,
    Letter.RegardingObjectTypeCode,
    Letter.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(Letter.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Letter.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Letter.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Letter.ScheduledStart,
    Letter.ServiceId,
    Letter.StateCode,
    StateCodePLTable.Value,
    Letter.StatusCode,
    StatusCodePLTable.Value,
    Letter.Subcategory,
    Letter.Subject,
    Letter.TimeZoneRuleVersionNumber,
    Letter.UTCConversionTimeZoneCode
from Letter
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap DirectionCodePLTable on 
        (DirectionCodePLTable.AttributeName = 'directioncode'
        and DirectionCodePLTable.ObjectTypeCode = 4207
        and DirectionCodePLTable.AttributeValue = Letter.DirectionCode
        and DirectionCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4207
        and IsBilledPLTable.AttributeValue = Letter.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4207
        and IsWorkflowCreatedPLTable.AttributeValue = Letter.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 4207
        and PriorityCodePLTable.AttributeValue = Letter.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4207
        and StateCodePLTable.AttributeValue = Letter.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4207
        and StatusCodePLTable.AttributeValue = Letter.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where Letter.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Letter.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Letter.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Letter.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Letter.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Letter.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredQuote]    Script Date: 04/11/2008 06:58:04 ******/




--
-- report view for quote
--
create view [dbo].[FilteredQuote] (
    accountid,
    accountiddsc,
    accountidname,
    accountidyominame,
    billto_addressid,
    billto_city,
    billto_contactname,
    billto_country,
    billto_fax,
    billto_line1,
    billto_line2,
    billto_line3,
    billto_name,
    billto_postalcode,
    billto_stateorprovince,
    billto_telephone,
    campaignid,
    campaigniddsc,
    campaignidname,
    closedon, 
    closedonutc,
    contactid,
    contactiddsc,
    contactidname,
    contactidyominame,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customerid,
    customeriddsc,
    customeridname,
    customeridtype,
    description,
    discountamount,
    discountamount_base,
    discountpercentage,
    effectivefrom, 
    effectivefromutc,
    effectiveto, 
    effectivetoutc,
    exchangerate,
    expireson, 
    expiresonutc,
    freightamount,
    freightamount_base,
    freighttermscode,
    freighttermscodename,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    opportunityid,
    opportunityiddsc,
    opportunityidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owningteam,
    owninguser,
    paymenttermscode,
    paymenttermscodename,
    pricelevelid,
    priceleveliddsc,
    pricelevelidname,
    pricingerrorcode,
    pricingerrorcodename,
    quoteid,
    quotenumber,
    requestdeliveryby, 
    requestdeliverybyutc,
    revisionnumber,
    shippingmethodcode,
    shippingmethodcodename,
    shipto_addressid,
    shipto_city,
    shipto_contactname,
    shipto_country,
    shipto_fax,
    shipto_freighttermscode,
    shipto_freighttermscodename,
    shipto_line1,
    shipto_line2,
    shipto_line3,
    shipto_name,
    shipto_postalcode,
    shipto_stateorprovince,
    shipto_telephone,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    timezoneruleversionnumber,
    totalamount,
    totalamount_base,
    totalamountlessfreight,
    totalamountlessfreight_base,
    totaldiscountamount,
    totaldiscountamount_base,
    totallineitemamount,
    totallineitemamount_base,
    totallineitemdiscountamount,
    totallineitemdiscountamount_base,
    totaltax,
    totaltax_base,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode,
    willcall,
    willcallname,
crm_moneyformatstring
) with view_metadata as 
select 
    Quote.AccountId,
    Quote.AccountIdDsc,
    Quote.AccountIdName,
    Quote.AccountIdYomiName,
    Quote.BillTo_AddressId,
    Quote.BillTo_City,
    Quote.BillTo_ContactName,
    Quote.BillTo_Country,
    Quote.BillTo_Fax,
    Quote.BillTo_Line1,
    Quote.BillTo_Line2,
    Quote.BillTo_Line3,
    Quote.BillTo_Name,
    Quote.BillTo_PostalCode,
    Quote.BillTo_StateOrProvince,
    Quote.BillTo_Telephone,
    Quote.CampaignId,
    Quote.CampaignIdDsc,
    Quote.CampaignIdName,
    dbo.fn_UTCToTzSpecificLocalTime(Quote.ClosedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Quote.ClosedOn,
    Quote.ContactId,
    Quote.ContactIdDsc,
    Quote.ContactIdName,
    Quote.ContactIdYomiName,
    Quote.CreatedBy,
    Quote.CreatedByDsc,
    Quote.CreatedByName,
    Quote.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Quote.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Quote.CreatedOn,
    Quote.CustomerId,
    Quote.CustomerIdDsc,
    Quote.CustomerIdName,
    Quote.CustomerIdType,
    Quote.Description,
    Quote.DiscountAmount,
    Quote.DiscountAmount_Base,
    Quote.DiscountPercentage,
    dbo.fn_UTCToTzSpecificLocalTime(Quote.EffectiveFrom,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Quote.EffectiveFrom,
    dbo.fn_UTCToTzSpecificLocalTime(Quote.EffectiveTo,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Quote.EffectiveTo,
    Quote.ExchangeRate,
    dbo.fn_UTCToTzSpecificLocalTime(Quote.ExpiresOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Quote.ExpiresOn,
    Quote.FreightAmount,
    Quote.FreightAmount_Base,
    Quote.FreightTermsCode,
    FreightTermsCodePLTable.Value,
    Quote.ImportSequenceNumber,
    Quote.ModifiedBy,
    Quote.ModifiedByDsc,
    Quote.ModifiedByName,
    Quote.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Quote.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Quote.ModifiedOn,
    Quote.Name,
    Quote.OpportunityId,
    Quote.OpportunityIdDsc,
    Quote.OpportunityIdName,
    dbo.fn_UTCToTzSpecificLocalTime(Quote.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Quote.OverriddenCreatedOn,
    Quote.OwnerId,
    Quote.OwnerIdDsc,
    Quote.OwnerIdName,
    Quote.OwnerIdType,
    Quote.OwnerIdYomiName,
    Quote.OwningBusinessUnit,
    Quote.OwningTeam,
    Quote.OwningUser,
    Quote.PaymentTermsCode,
    PaymentTermsCodePLTable.Value,
    Quote.PriceLevelId,
    Quote.PriceLevelIdDsc,
    Quote.PriceLevelIdName,
    Quote.PricingErrorCode,
    PricingErrorCodePLTable.Value,
    Quote.QuoteId,
    Quote.QuoteNumber,
    dbo.fn_UTCToTzSpecificLocalTime(Quote.RequestDeliveryBy,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Quote.RequestDeliveryBy,
    Quote.RevisionNumber,
    Quote.ShippingMethodCode,
    ShippingMethodCodePLTable.Value,
    Quote.ShipTo_AddressId,
    Quote.ShipTo_City,
    Quote.ShipTo_ContactName,
    Quote.ShipTo_Country,
    Quote.ShipTo_Fax,
    Quote.ShipTo_FreightTermsCode,
    ShipTo_FreightTermsCodePLTable.Value,
    Quote.ShipTo_Line1,
    Quote.ShipTo_Line2,
    Quote.ShipTo_Line3,
    Quote.ShipTo_Name,
    Quote.ShipTo_PostalCode,
    Quote.ShipTo_StateOrProvince,
    Quote.ShipTo_Telephone,
    Quote.StateCode,
    StateCodePLTable.Value,
    Quote.StatusCode,
    StatusCodePLTable.Value,
    Quote.TimeZoneRuleVersionNumber,
    Quote.TotalAmount,
    Quote.TotalAmount_Base,
    Quote.TotalAmountLessFreight,
    Quote.TotalAmountLessFreight_Base,
    Quote.TotalDiscountAmount,
    Quote.TotalDiscountAmount_Base,
    Quote.TotalLineItemAmount,
    Quote.TotalLineItemAmount_Base,
    Quote.TotalLineItemDiscountAmount,
    Quote.TotalLineItemDiscountAmount_Base,
    Quote.TotalTax,
    Quote.TotalTax_Base,
    Quote.TransactionCurrencyId,
    Quote.TransactionCurrencyIdDsc,
    Quote.TransactionCurrencyIdName,
    Quote.UTCConversionTimeZoneCode,
    Quote.WillCall,
    WillCallPLTable.Value,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from Quote
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = Quote.TransactionCurrencyId
    left outer join StringMap FreightTermsCodePLTable on 
        (FreightTermsCodePLTable.AttributeName = 'freighttermscode'
        and FreightTermsCodePLTable.ObjectTypeCode = 1084
        and FreightTermsCodePLTable.AttributeValue = Quote.FreightTermsCode
        and FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PaymentTermsCodePLTable on 
        (PaymentTermsCodePLTable.AttributeName = 'paymenttermscode'
        and PaymentTermsCodePLTable.ObjectTypeCode = 1084
        and PaymentTermsCodePLTable.AttributeValue = Quote.PaymentTermsCode
        and PaymentTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PricingErrorCodePLTable on 
        (PricingErrorCodePLTable.AttributeName = 'pricingerrorcode'
        and PricingErrorCodePLTable.ObjectTypeCode = 1084
        and PricingErrorCodePLTable.AttributeValue = Quote.PricingErrorCode
        and PricingErrorCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShippingMethodCodePLTable on 
        (ShippingMethodCodePLTable.AttributeName = 'shippingmethodcode'
        and ShippingMethodCodePLTable.ObjectTypeCode = 1084
        and ShippingMethodCodePLTable.AttributeValue = Quote.ShippingMethodCode
        and ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShipTo_FreightTermsCodePLTable on 
        (ShipTo_FreightTermsCodePLTable.AttributeName = 'shipto_freighttermscode'
        and ShipTo_FreightTermsCodePLTable.ObjectTypeCode = 1084
        and ShipTo_FreightTermsCodePLTable.AttributeValue = Quote.ShipTo_FreightTermsCode
        and ShipTo_FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 1084
        and StateCodePLTable.AttributeValue = Quote.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 1084
        and StatusCodePLTable.AttributeValue = Quote.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap WillCallPLTable on 
        (WillCallPLTable.AttributeName = 'willcall'
        and WillCallPLTable.ObjectTypeCode = 1084
        and WillCallPLTable.AttributeValue = Quote.WillCall
        and WillCallPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1084) pdm
where Quote.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Quote.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Quote.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Quote.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Quote.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Quote.QuoteId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 1084 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredSystemUser]    Script Date: 04/11/2008 06:58:12 ******/




--
-- report view for systemuser
--
create view [dbo].[FilteredSystemUser] (
    accessmode,
    accessmodename,
    address1_addressid,
    address1_addresstypecode,
    address1_addresstypecodename,
    address1_city,
    address1_country,
    address1_county,
    address1_fax,
    address1_latitude,
    address1_line1,
    address1_line2,
    address1_line3,
    address1_longitude,
    address1_name,
    address1_postalcode,
    address1_postofficebox,
    address1_shippingmethodcode,
    address1_shippingmethodcodename,
    address1_stateorprovince,
    address1_telephone1,
    address1_telephone2,
    address1_telephone3,
    address1_upszone,
    address1_utcoffset,
    address2_addressid,
    address2_addresstypecode,
    address2_addresstypecodename,
    address2_city,
    address2_country,
    address2_county,
    address2_fax,
    address2_latitude,
    address2_line1,
    address2_line2,
    address2_line3,
    address2_longitude,
    address2_name,
    address2_postalcode,
    address2_postofficebox,
    address2_shippingmethodcode,
    address2_shippingmethodcodename,
    address2_stateorprovince,
    address2_telephone1,
    address2_telephone2,
    address2_telephone3,
    address2_upszone,
    address2_utcoffset,
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    calendarid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    disabledreason,
    displayinserviceviews,
    displayinserviceviewsname,
    domainname,
    employeeid,
    firstname,
    fullname,
    governmentid,
    homephone,
    importsequencenumber,
    incomingemaildeliverymethod,
    incomingemaildeliverymethodname,
    internalemailaddress,
    invitestatuscode,
    invitestatuscodename,
    isdisabled,
    isdisabledname,
    jobtitle,
    lastname,
    middlename,
    mobilealertemail,
    mobilephone,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    nickname,
    organizationid,
    organizationiddsc,
    organizationidname,
    outgoingemaildeliverymethod,
    outgoingemaildeliverymethodname,
    overriddencreatedon, 
    overriddencreatedonutc,
    parentsystemuserid,
    parentsystemuseriddsc,
    parentsystemuseridname,
    parentsystemuseridyominame,
    passporthi,
    passportlo,
    personalemailaddress,
    photourl,
    preferredaddresscode,
    preferredaddresscodename,
    preferredemailcode,
    preferredemailcodename,
    preferredphonecode,
    preferredphonecodename,
    salutation,
    setupuser,
    setupusername,
    siteid,
    siteiddsc,
    siteidname,
    skills,
    systemuserid,
    territoryid,
    territoryiddsc,
    territoryidname,
    timezoneruleversionnumber,
    title,
    utcconversiontimezonecode,
    windowsliveid,
    yomifirstname,
    yomifullname,
    yomilastname,
    yomimiddlename
) with view_metadata as 
select 
    SystemUser.AccessMode,
    AccessModePLTable.Value,
    SystemUser.Address1_AddressId,
    SystemUser.Address1_AddressTypeCode,
    Address1_AddressTypeCodePLTable.Value,
    SystemUser.Address1_City,
    SystemUser.Address1_Country,
    SystemUser.Address1_County,
    SystemUser.Address1_Fax,
    SystemUser.Address1_Latitude,
    SystemUser.Address1_Line1,
    SystemUser.Address1_Line2,
    SystemUser.Address1_Line3,
    SystemUser.Address1_Longitude,
    SystemUser.Address1_Name,
    SystemUser.Address1_PostalCode,
    SystemUser.Address1_PostOfficeBox,
    SystemUser.Address1_ShippingMethodCode,
    Address1_ShippingMethodCodePLTable.Value,
    SystemUser.Address1_StateOrProvince,
    SystemUser.Address1_Telephone1,
    SystemUser.Address1_Telephone2,
    SystemUser.Address1_Telephone3,
    SystemUser.Address1_UPSZone,
    SystemUser.Address1_UTCOffset,
    SystemUser.Address2_AddressId,
    SystemUser.Address2_AddressTypeCode,
    Address2_AddressTypeCodePLTable.Value,
    SystemUser.Address2_City,
    SystemUser.Address2_Country,
    SystemUser.Address2_County,
    SystemUser.Address2_Fax,
    SystemUser.Address2_Latitude,
    SystemUser.Address2_Line1,
    SystemUser.Address2_Line2,
    SystemUser.Address2_Line3,
    SystemUser.Address2_Longitude,
    SystemUser.Address2_Name,
    SystemUser.Address2_PostalCode,
    SystemUser.Address2_PostOfficeBox,
    SystemUser.Address2_ShippingMethodCode,
    Address2_ShippingMethodCodePLTable.Value,
    SystemUser.Address2_StateOrProvince,
    SystemUser.Address2_Telephone1,
    SystemUser.Address2_Telephone2,
    SystemUser.Address2_Telephone3,
    SystemUser.Address2_UPSZone,
    SystemUser.Address2_UTCOffset,
    SystemUser.BusinessUnitId,
    SystemUser.BusinessUnitIdDsc,
    SystemUser.BusinessUnitIdName,
    SystemUser.CalendarId,
    SystemUser.CreatedBy,
    SystemUser.CreatedByDsc,
    SystemUser.CreatedByName,
    SystemUser.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SystemUser.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SystemUser.CreatedOn,
    SystemUser.DisabledReason,
    SystemUser.DisplayInServiceViews,
    DisplayInServiceViewsPLTable.Value,
    SystemUser.DomainName,
    SystemUser.EmployeeId,
    SystemUser.FirstName,
    SystemUser.FullName,
    SystemUser.GovernmentId,
    SystemUser.HomePhone,
    SystemUser.ImportSequenceNumber,
    SystemUser.IncomingEmailDeliveryMethod,
    IncomingEmailDeliveryMethodPLTable.Value,
    SystemUser.InternalEMailAddress,
    SystemUser.InviteStatusCode,
    InviteStatusCodePLTable.Value,
    SystemUser.IsDisabled,
    IsDisabledPLTable.Value,
    SystemUser.JobTitle,
    SystemUser.LastName,
    SystemUser.MiddleName,
    SystemUser.MobileAlertEMail,
    SystemUser.MobilePhone,
    SystemUser.ModifiedBy,
    SystemUser.ModifiedByDsc,
    SystemUser.ModifiedByName,
    SystemUser.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SystemUser.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SystemUser.ModifiedOn,
    SystemUser.NickName,
    SystemUser.OrganizationId,
    SystemUser.OrganizationIdDsc,
    SystemUser.OrganizationIdName,
    SystemUser.OutgoingEmailDeliveryMethod,
    OutgoingEmailDeliveryMethodPLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(SystemUser.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SystemUser.OverriddenCreatedOn,
    SystemUser.ParentSystemUserId,
    SystemUser.ParentSystemUserIdDsc,
    SystemUser.ParentSystemUserIdName,
    SystemUser.ParentSystemUserIdYomiName,
    SystemUser.PassportHi,
    SystemUser.PassportLo,
    SystemUser.PersonalEMailAddress,
    SystemUser.PhotoUrl,
    SystemUser.PreferredAddressCode,
    PreferredAddressCodePLTable.Value,
    SystemUser.PreferredEmailCode,
    PreferredEmailCodePLTable.Value,
    SystemUser.PreferredPhoneCode,
    PreferredPhoneCodePLTable.Value,
    SystemUser.Salutation,
    SystemUser.SetupUser,
    SetupUserPLTable.Value,
    SystemUser.SiteId,
    SystemUser.SiteIdDsc,
    SystemUser.SiteIdName,
    SystemUser.Skills,
    SystemUser.SystemUserId,
    SystemUser.TerritoryId,
    SystemUser.TerritoryIdDsc,
    SystemUser.TerritoryIdName,
    SystemUser.TimeZoneRuleVersionNumber,
    SystemUser.Title,
    SystemUser.UTCConversionTimeZoneCode,
    SystemUser.WindowsLiveID,
    SystemUser.YomiFirstName,
    SystemUser.YomiFullName,
    SystemUser.YomiLastName,
    SystemUser.YomiMiddleName
from SystemUser
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap AccessModePLTable on 
        (AccessModePLTable.AttributeName = 'accessmode'
        and AccessModePLTable.ObjectTypeCode = 8
        and AccessModePLTable.AttributeValue = SystemUser.AccessMode
        and AccessModePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_AddressTypeCodePLTable on 
        (Address1_AddressTypeCodePLTable.AttributeName = 'address1_addresstypecode'
        and Address1_AddressTypeCodePLTable.ObjectTypeCode = 8
        and Address1_AddressTypeCodePLTable.AttributeValue = SystemUser.Address1_AddressTypeCode
        and Address1_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_ShippingMethodCodePLTable on 
        (Address1_ShippingMethodCodePLTable.AttributeName = 'address1_shippingmethodcode'
        and Address1_ShippingMethodCodePLTable.ObjectTypeCode = 8
        and Address1_ShippingMethodCodePLTable.AttributeValue = SystemUser.Address1_ShippingMethodCode
        and Address1_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_AddressTypeCodePLTable on 
        (Address2_AddressTypeCodePLTable.AttributeName = 'address2_addresstypecode'
        and Address2_AddressTypeCodePLTable.ObjectTypeCode = 8
        and Address2_AddressTypeCodePLTable.AttributeValue = SystemUser.Address2_AddressTypeCode
        and Address2_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_ShippingMethodCodePLTable on 
        (Address2_ShippingMethodCodePLTable.AttributeName = 'address2_shippingmethodcode'
        and Address2_ShippingMethodCodePLTable.ObjectTypeCode = 8
        and Address2_ShippingMethodCodePLTable.AttributeValue = SystemUser.Address2_ShippingMethodCode
        and Address2_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap DisplayInServiceViewsPLTable on 
        (DisplayInServiceViewsPLTable.AttributeName = 'displayinserviceviews'
        and DisplayInServiceViewsPLTable.ObjectTypeCode = 8
        and DisplayInServiceViewsPLTable.AttributeValue = SystemUser.DisplayInServiceViews
        and DisplayInServiceViewsPLTable.LangId = us.UILanguageId )
    left outer join StringMap IncomingEmailDeliveryMethodPLTable on 
        (IncomingEmailDeliveryMethodPLTable.AttributeName = 'incomingemaildeliverymethod'
        and IncomingEmailDeliveryMethodPLTable.ObjectTypeCode = 8
        and IncomingEmailDeliveryMethodPLTable.AttributeValue = SystemUser.IncomingEmailDeliveryMethod
        and IncomingEmailDeliveryMethodPLTable.LangId = us.UILanguageId )
    left outer join StringMap InviteStatusCodePLTable on 
        (InviteStatusCodePLTable.AttributeName = 'invitestatuscode'
        and InviteStatusCodePLTable.ObjectTypeCode = 8
        and InviteStatusCodePLTable.AttributeValue = SystemUser.InviteStatusCode
        and InviteStatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsDisabledPLTable on 
        (IsDisabledPLTable.AttributeName = 'isdisabled'
        and IsDisabledPLTable.ObjectTypeCode = 8
        and IsDisabledPLTable.AttributeValue = SystemUser.IsDisabled
        and IsDisabledPLTable.LangId = us.UILanguageId )
    left outer join StringMap OutgoingEmailDeliveryMethodPLTable on 
        (OutgoingEmailDeliveryMethodPLTable.AttributeName = 'outgoingemaildeliverymethod'
        and OutgoingEmailDeliveryMethodPLTable.ObjectTypeCode = 8
        and OutgoingEmailDeliveryMethodPLTable.AttributeValue = SystemUser.OutgoingEmailDeliveryMethod
        and OutgoingEmailDeliveryMethodPLTable.LangId = us.UILanguageId )
    left outer join StringMap PreferredAddressCodePLTable on 
        (PreferredAddressCodePLTable.AttributeName = 'preferredaddresscode'
        and PreferredAddressCodePLTable.ObjectTypeCode = 8
        and PreferredAddressCodePLTable.AttributeValue = SystemUser.PreferredAddressCode
        and PreferredAddressCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PreferredEmailCodePLTable on 
        (PreferredEmailCodePLTable.AttributeName = 'preferredemailcode'
        and PreferredEmailCodePLTable.ObjectTypeCode = 8
        and PreferredEmailCodePLTable.AttributeValue = SystemUser.PreferredEmailCode
        and PreferredEmailCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PreferredPhoneCodePLTable on 
        (PreferredPhoneCodePLTable.AttributeName = 'preferredphonecode'
        and PreferredPhoneCodePLTable.ObjectTypeCode = 8
        and PreferredPhoneCodePLTable.AttributeValue = SystemUser.PreferredPhoneCode
        and PreferredPhoneCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap SetupUserPLTable on 
        (SetupUserPLTable.AttributeName = 'setupuser'
        and SetupUserPLTable.ObjectTypeCode = 8
        and SetupUserPLTable.AttributeValue = SystemUser.SetupUser
        and SetupUserPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(8) pdm
where SystemUser.DeletionStateCode in (0) 
    and
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		SystemUser.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		SystemUser.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		SystemUser.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredTask]    Script Date: 04/11/2008 06:58:12 ******/




--
-- report view for task
--
create view [dbo].[FilteredTask] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    category,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    importsequencenumber,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    percentcomplete,
    prioritycode,
    prioritycodename,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    Task.ActivityId,
    Task.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(Task.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Task.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Task.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Task.ActualStart,
    Task.Category,
    Task.CreatedBy,
    Task.CreatedByDsc,
    Task.CreatedByName,
    Task.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Task.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Task.CreatedOn,
    Task.Description,
    Task.ImportSequenceNumber,
    Task.IsBilled,
    IsBilledPLTable.Value,
    Task.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    Task.ModifiedBy,
    Task.ModifiedByDsc,
    Task.ModifiedByName,
    Task.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Task.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Task.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(Task.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Task.OverriddenCreatedOn,
    Task.OwnerId,
    Task.OwnerIdDsc,
    Task.OwnerIdName,
    Task.OwnerIdType,
    Task.OwnerIdYomiName,
    Task.OwningBusinessUnit,
    Task.OwningUser,
    Task.PercentComplete,
    Task.PriorityCode,
    PriorityCodePLTable.Value,
    Task.RegardingObjectId,
    Task.RegardingObjectIdDsc,
    Task.RegardingObjectIdName,
    Task.RegardingObjectIdYomiName,
    Task.RegardingObjectTypeCode,
    Task.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(Task.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Task.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Task.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Task.ScheduledStart,
    Task.ServiceId,
    Task.StateCode,
    StateCodePLTable.Value,
    Task.StatusCode,
    StatusCodePLTable.Value,
    Task.Subcategory,
    Task.Subject,
    Task.TimeZoneRuleVersionNumber,
    Task.UTCConversionTimeZoneCode
from Task
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4212
        and IsBilledPLTable.AttributeValue = Task.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4212
        and IsWorkflowCreatedPLTable.AttributeValue = Task.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 4212
        and PriorityCodePLTable.AttributeValue = Task.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4212
        and StateCodePLTable.AttributeValue = Task.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4212
        and StatusCodePLTable.AttributeValue = Task.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where Task.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Task.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Task.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Task.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Task.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Task.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredActivityPointer]    Script Date: 04/11/2008 06:57:47 ******/




--
-- report view for activitypointer
--
create view [dbo].[FilteredActivityPointer] (
    activityid,
    activitytypecode,
    activitytypecodename,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    prioritycode,
    prioritycodename,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    serviceiddsc,
    serviceidname,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subject,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    ActivityPointer.ActivityId,
    ActivityPointer.ActivityTypeCode,
    ActivityTypeCodePLTable.Value,
    ActivityPointer.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(ActivityPointer.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ActivityPointer.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(ActivityPointer.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ActivityPointer.ActualStart,
    ActivityPointer.CreatedBy,
    ActivityPointer.CreatedByDsc,
    ActivityPointer.CreatedByName,
    ActivityPointer.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ActivityPointer.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ActivityPointer.CreatedOn,
    ActivityPointer.Description,
    ActivityPointer.IsBilled,
    IsBilledPLTable.Value,
    ActivityPointer.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    ActivityPointer.ModifiedBy,
    ActivityPointer.ModifiedByDsc,
    ActivityPointer.ModifiedByName,
    ActivityPointer.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ActivityPointer.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ActivityPointer.ModifiedOn,
    ActivityPointer.OwnerId,
    ActivityPointer.OwnerIdDsc,
    ActivityPointer.OwnerIdName,
    ActivityPointer.OwnerIdType,
    ActivityPointer.OwnerIdYomiName,
    ActivityPointer.OwningBusinessUnit,
    ActivityPointer.OwningUser,
    ActivityPointer.PriorityCode,
    PriorityCodePLTable.Value,
    ActivityPointer.RegardingObjectId,
    ActivityPointer.RegardingObjectIdDsc,
    ActivityPointer.RegardingObjectIdName,
    ActivityPointer.RegardingObjectIdYomiName,
    ActivityPointer.RegardingObjectTypeCode,
    ActivityPointer.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(ActivityPointer.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ActivityPointer.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(ActivityPointer.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ActivityPointer.ScheduledStart,
    ActivityPointer.ServiceId,
    ActivityPointer.ServiceIdDsc,
    ActivityPointer.ServiceIdName,
    ActivityPointer.StateCode,
    StateCodePLTable.Value,
    ActivityPointer.StatusCode,
    StatusCodePLTable.Value,
    ActivityPointer.Subject,
    ActivityPointer.TimeZoneRuleVersionNumber,
    ActivityPointer.UTCConversionTimeZoneCode
from ActivityPointer
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap ActivityTypeCodePLTable on 
        (ActivityTypeCodePLTable.AttributeName = 'activitytypecode'
        and ActivityTypeCodePLTable.ObjectTypeCode = 4200
        and ActivityTypeCodePLTable.AttributeValue = ActivityPointer.ActivityTypeCode
        and ActivityTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4200
        and IsBilledPLTable.AttributeValue = ActivityPointer.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4200
        and IsWorkflowCreatedPLTable.AttributeValue = ActivityPointer.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 4200
        and PriorityCodePLTable.AttributeValue = ActivityPointer.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4200
        and StateCodePLTable.AttributeValue = ActivityPointer.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4200
        and StatusCodePLTable.AttributeValue = ActivityPointer.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where ActivityPointer.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ActivityPointer.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ActivityPointer.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ActivityPointer.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ActivityPointer.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ActivityPointer.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredWorkflowDependency]    Script Date: 04/11/2008 06:58:15 ******/




--
-- report view for workflowdependency
--
create view [dbo].[FilteredWorkflowDependency] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customentityname,
    dependentattributename,
    dependententityname,
    entityattributes,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    owningbusinessunit,
    owninguser,
    parametername,
    parametertype,
    relatedattributename,
    relatedentityname,
    sdkmessageid,
    type,
    typename,
    workflowdependencyid,
    workflowid
) with view_metadata as 
select 
    WorkflowDependency.CreatedBy,
    WorkflowDependency.CreatedByDsc,
    WorkflowDependency.CreatedByName,
    WorkflowDependency.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(WorkflowDependency.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    WorkflowDependency.CreatedOn,
    WorkflowDependency.CustomEntityName,
    WorkflowDependency.DependentAttributeName,
    WorkflowDependency.DependentEntityName,
    WorkflowDependency.EntityAttributes,
    WorkflowDependency.ModifiedBy,
    WorkflowDependency.ModifiedByDsc,
    WorkflowDependency.ModifiedByName,
    WorkflowDependency.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(WorkflowDependency.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    WorkflowDependency.ModifiedOn,
    WorkflowDependency.OwningBusinessUnit,
    WorkflowDependency.OwningUser,
    WorkflowDependency.ParameterName,
    WorkflowDependency.ParameterType,
    WorkflowDependency.RelatedAttributeName,
    WorkflowDependency.RelatedEntityName,
    WorkflowDependency.SdkMessageId,
    WorkflowDependency.Type,
    TypePLTable.Value,
    WorkflowDependency.WorkflowDependencyId,
    WorkflowDependency.WorkflowId
from WorkflowDependency
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap TypePLTable on 
        (TypePLTable.AttributeName = 'type'
        and TypePLTable.ObjectTypeCode = 4704
        and TypePLTable.AttributeValue = WorkflowDependency.Type
        and TypePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4703) pdm
where WorkflowDependency.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    WorkflowDependency.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		WorkflowDependency.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		WorkflowDependency.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		WorkflowDependency.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    WorkflowDependency.WorkflowId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4703 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredPriceLevel]    Script Date: 04/11/2008 06:58:02 ******/




--
-- report view for pricelevel
--
create view [dbo].[FilteredPriceLevel] (
    begindate, 
    begindateutc,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    enddate, 
    enddateutc,
    freighttermscode,
    freighttermscodename,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    paymentmethodcode,
    paymentmethodcodename,
    pricelevelid,
    shippingmethodcode,
    shippingmethodcodename,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode
) with view_metadata as 
select 
    dbo.fn_UTCToTzSpecificLocalTime(PriceLevel.BeginDate,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PriceLevel.BeginDate,
    PriceLevel.CreatedBy,
    PriceLevel.CreatedByDsc,
    PriceLevel.CreatedByName,
    PriceLevel.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(PriceLevel.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PriceLevel.CreatedOn,
    PriceLevel.Description,
    dbo.fn_UTCToTzSpecificLocalTime(PriceLevel.EndDate,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PriceLevel.EndDate,
    PriceLevel.FreightTermsCode,
    FreightTermsCodePLTable.Value,
    PriceLevel.ImportSequenceNumber,
    PriceLevel.ModifiedBy,
    PriceLevel.ModifiedByDsc,
    PriceLevel.ModifiedByName,
    PriceLevel.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(PriceLevel.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PriceLevel.ModifiedOn,
    PriceLevel.Name,
    PriceLevel.OrganizationId,
    PriceLevel.OrganizationIdDsc,
    PriceLevel.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(PriceLevel.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PriceLevel.OverriddenCreatedOn,
    PriceLevel.PaymentMethodCode,
    PaymentMethodCodePLTable.Value,
    PriceLevel.PriceLevelId,
    PriceLevel.ShippingMethodCode,
    ShippingMethodCodePLTable.Value,
    PriceLevel.StateCode,
    StateCodePLTable.Value,
    PriceLevel.StatusCode,
    StatusCodePLTable.Value,
    PriceLevel.TimeZoneRuleVersionNumber,
    PriceLevel.TransactionCurrencyId,
    PriceLevel.TransactionCurrencyIdDsc,
    PriceLevel.TransactionCurrencyIdName,
    PriceLevel.UTCConversionTimeZoneCode
from PriceLevel
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap FreightTermsCodePLTable on 
        (FreightTermsCodePLTable.AttributeName = 'freighttermscode'
        and FreightTermsCodePLTable.ObjectTypeCode = 1022
        and FreightTermsCodePLTable.AttributeValue = PriceLevel.FreightTermsCode
        and FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PaymentMethodCodePLTable on 
        (PaymentMethodCodePLTable.AttributeName = 'paymentmethodcode'
        and PaymentMethodCodePLTable.ObjectTypeCode = 1022
        and PaymentMethodCodePLTable.AttributeValue = PriceLevel.PaymentMethodCode
        and PaymentMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShippingMethodCodePLTable on 
        (ShippingMethodCodePLTable.AttributeName = 'shippingmethodcode'
        and ShippingMethodCodePLTable.ObjectTypeCode = 1022
        and ShippingMethodCodePLTable.AttributeValue = PriceLevel.ShippingMethodCode
        and ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 1022
        and StateCodePLTable.AttributeValue = PriceLevel.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 1022
        and StatusCodePLTable.AttributeValue = PriceLevel.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1022) pdm
where PriceLevel.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    PriceLevel.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredResourceSpec]    Script Date: 04/11/2008 06:58:07 ******/




--
-- report view for resourcespec
--
create view [dbo].[FilteredResourceSpec] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    constraints,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    effortrequired,
    groupobjectid,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    objectiveexpression,
    objecttypecode,
    objecttypecodename,
    organizationid,
    organizationiddsc,
    organizationidname,
    requiredcount,
    resourcespecid,
    samesite,
    samesitename
) with view_metadata as 
select 
    ResourceSpec.BusinessUnitId,
    ResourceSpec.BusinessUnitIdDsc,
    ResourceSpec.BusinessUnitIdName,
    ResourceSpec.Constraints,
    ResourceSpec.CreatedBy,
    ResourceSpec.CreatedByDsc,
    ResourceSpec.CreatedByName,
    ResourceSpec.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ResourceSpec.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ResourceSpec.CreatedOn,
    ResourceSpec.Description,
    ResourceSpec.EffortRequired,
    ResourceSpec.GroupObjectId,
    ResourceSpec.ModifiedBy,
    ResourceSpec.ModifiedByDsc,
    ResourceSpec.ModifiedByName,
    ResourceSpec.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ResourceSpec.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ResourceSpec.ModifiedOn,
    ResourceSpec.Name,
    ResourceSpec.ObjectiveExpression,
    ResourceSpec.ObjectTypeCode,
    ObjectTypeCodePLTable.Value,
    ResourceSpec.OrganizationId,
    ResourceSpec.OrganizationIdDsc,
    ResourceSpec.OrganizationIdName,
    ResourceSpec.RequiredCount,
    ResourceSpec.ResourceSpecId,
    ResourceSpec.SameSite,
    SameSitePLTable.Value
from ResourceSpec
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap ObjectTypeCodePLTable on 
        (ObjectTypeCodePLTable.AttributeName = 'objecttypecode'
        and ObjectTypeCodePLTable.ObjectTypeCode = 4006
        and ObjectTypeCodePLTable.AttributeValue = ResourceSpec.ObjectTypeCode
        and ObjectTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap SameSitePLTable on 
        (SameSitePLTable.AttributeName = 'samesite'
        and SameSitePLTable.ObjectTypeCode = 4006
        and SameSitePLTable.AttributeValue = ResourceSpec.SameSite
        and SameSitePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4006) pdm
where ResourceSpec.DeletionStateCode in (0) 
    and
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ResourceSpec.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ResourceSpec.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ResourceSpec.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredContract]    Script Date: 04/11/2008 06:57:53 ******/




--
-- report view for contract
--
create view [dbo].[FilteredContract] (
    accountid,
    accountiddsc,
    accountidname,
    accountidyominame,
    activeon, 
    activeonutc,
    allotmenttypecode,
    allotmenttypecodename,
    billingaccountid,
    billingaccountiddsc,
    billingaccountidname,
    billingaccountidyominame,
    billingcontactid,
    billingcontactiddsc,
    billingcontactidname,
    billingcontactidyominame,
    billingcustomerid,
    billingcustomeriddsc,
    billingcustomeridname,
    billingcustomeridtype,
    billingcustomeridyominame,
    billingendon, 
    billingendonutc,
    billingfrequencycode,
    billingfrequencycodename,
    billingstarton, 
    billingstartonutc,
    billtoaddress,
    billtoaddressdsc,
    billtoaddressname,
    cancelon, 
    cancelonutc,
    contactid,
    contactiddsc,
    contactidname,
    contactidyominame,
    contractid,
    contractlanguage,
    contractnumber,
    contractservicelevelcode,
    contractservicelevelcodename,
    contracttemplateabbreviation,
    contracttemplateid,
    contracttemplateiddsc,
    contracttemplateidname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customerid,
    customeriddsc,
    customeridname,
    customeridtype,
    duration,
    effectivitycalendar,
    exchangerate,
    expireson, 
    expiresonutc,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    netprice,
    netprice_base,
    originatingcontract,
    originatingcontractdsc,
    originatingcontractname,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owningteam,
    owninguser,
    serviceaddress,
    serviceaddressdsc,
    serviceaddressname,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    timezoneruleversionnumber,
    title,
    totaldiscount,
    totaldiscount_base,
    totalprice,
    totalprice_base,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    usediscountaspercentage,
    usediscountaspercentagename,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    Contract.AccountId,
    Contract.AccountIdDsc,
    Contract.AccountIdName,
    Contract.AccountIdYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Contract.ActiveOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contract.ActiveOn,
    Contract.AllotmentTypeCode,
    AllotmentTypeCodePLTable.Value,
    Contract.BillingAccountId,
    Contract.BillingAccountIdDsc,
    Contract.BillingAccountIdName,
    Contract.BillingAccountIdYomiName,
    Contract.BillingContactId,
    Contract.BillingContactIdDsc,
    Contract.BillingContactIdName,
    Contract.BillingContactIdYomiName,
    Contract.BillingCustomerId,
    Contract.BillingCustomerIdDsc,
    Contract.BillingCustomerIdName,
    Contract.BillingCustomerIdType,
    Contract.BillingCustomerIdYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Contract.BillingEndOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contract.BillingEndOn,
    Contract.BillingFrequencyCode,
    BillingFrequencyCodePLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(Contract.BillingStartOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contract.BillingStartOn,
    Contract.BillToAddress,
    Contract.BillToAddressDsc,
    Contract.BillToAddressName,
    dbo.fn_UTCToTzSpecificLocalTime(Contract.CancelOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contract.CancelOn,
    Contract.ContactId,
    Contract.ContactIdDsc,
    Contract.ContactIdName,
    Contract.ContactIdYomiName,
    Contract.ContractId,
    Contract.ContractLanguage,
    Contract.ContractNumber,
    Contract.ContractServiceLevelCode,
    ContractServiceLevelCodePLTable.Value,
    Contract.ContractTemplateAbbreviation,
    Contract.ContractTemplateId,
    Contract.ContractTemplateIdDsc,
    Contract.ContractTemplateIdName,
    Contract.CreatedBy,
    Contract.CreatedByDsc,
    Contract.CreatedByName,
    Contract.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Contract.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contract.CreatedOn,
    Contract.CustomerId,
    Contract.CustomerIdDsc,
    Contract.CustomerIdName,
    Contract.CustomerIdType,
    Contract.Duration,
    Contract.EffectivityCalendar,
    Contract.ExchangeRate,
    dbo.fn_UTCToTzSpecificLocalTime(Contract.ExpiresOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contract.ExpiresOn,
    Contract.ImportSequenceNumber,
    Contract.ModifiedBy,
    Contract.ModifiedByDsc,
    Contract.ModifiedByName,
    Contract.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Contract.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contract.ModifiedOn,
    Contract.NetPrice,
    Contract.NetPrice_Base,
    Contract.OriginatingContract,
    Contract.OriginatingContractDsc,
    Contract.OriginatingContractName,
    dbo.fn_UTCToTzSpecificLocalTime(Contract.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contract.OverriddenCreatedOn,
    Contract.OwnerId,
    Contract.OwnerIdDsc,
    Contract.OwnerIdName,
    Contract.OwnerIdType,
    Contract.OwnerIdYomiName,
    Contract.OwningBusinessUnit,
    Contract.OwningTeam,
    Contract.OwningUser,
    Contract.ServiceAddress,
    Contract.ServiceAddressDsc,
    Contract.ServiceAddressName,
    Contract.StateCode,
    StateCodePLTable.Value,
    Contract.StatusCode,
    StatusCodePLTable.Value,
    Contract.TimeZoneRuleVersionNumber,
    Contract.Title,
    Contract.TotalDiscount,
    Contract.TotalDiscount_Base,
    Contract.TotalPrice,
    Contract.TotalPrice_Base,
    Contract.TransactionCurrencyId,
    Contract.TransactionCurrencyIdDsc,
    Contract.TransactionCurrencyIdName,
    Contract.UseDiscountAsPercentage,
    UseDiscountAsPercentagePLTable.Value,
    Contract.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from Contract
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = Contract.TransactionCurrencyId
    left outer join StringMap AllotmentTypeCodePLTable on 
        (AllotmentTypeCodePLTable.AttributeName = 'allotmenttypecode'
        and AllotmentTypeCodePLTable.ObjectTypeCode = 1010
        and AllotmentTypeCodePLTable.AttributeValue = Contract.AllotmentTypeCode
        and AllotmentTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap BillingFrequencyCodePLTable on 
        (BillingFrequencyCodePLTable.AttributeName = 'billingfrequencycode'
        and BillingFrequencyCodePLTable.ObjectTypeCode = 1010
        and BillingFrequencyCodePLTable.AttributeValue = Contract.BillingFrequencyCode
        and BillingFrequencyCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ContractServiceLevelCodePLTable on 
        (ContractServiceLevelCodePLTable.AttributeName = 'contractservicelevelcode'
        and ContractServiceLevelCodePLTable.ObjectTypeCode = 1010
        and ContractServiceLevelCodePLTable.AttributeValue = Contract.ContractServiceLevelCode
        and ContractServiceLevelCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 1010
        and StateCodePLTable.AttributeValue = Contract.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 1010
        and StatusCodePLTable.AttributeValue = Contract.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap UseDiscountAsPercentagePLTable on 
        (UseDiscountAsPercentagePLTable.AttributeName = 'usediscountaspercentage'
        and UseDiscountAsPercentagePLTable.ObjectTypeCode = 1010
        and UseDiscountAsPercentagePLTable.AttributeValue = Contract.UseDiscountAsPercentage
        and UseDiscountAsPercentagePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1010) pdm
where Contract.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Contract.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Contract.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Contract.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Contract.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Contract.ContractId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 1010 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredSdkMessageProcessingStepImages]    Script Date: 04/11/2008 06:58:09 ******/




--
-- report view for sdkmessageprocessingstepimage
--
create view [dbo].[FilteredSdkMessageProcessingStepImages] (
    attributes,
    createdby,
    createdon, 
    createdonutc,
    customizationlevel,
    entityalias,
    imagetype,
    imagetypename,
    messagepropertyname,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    organizationid,
    relatedattributename,
    sdkmessageprocessingstepid,
    sdkmessageprocessingstepimageid,
    sdkmessageprocessingstepimageidunique
) with view_metadata as 
select 
    SdkMessageProcessingStepImage.Attributes,
    SdkMessageProcessingStepImage.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageProcessingStepImage.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageProcessingStepImage.CreatedOn,
    SdkMessageProcessingStepImage.CustomizationLevel,
    SdkMessageProcessingStepImage.EntityAlias,
    SdkMessageProcessingStepImage.ImageType,
    ImageTypePLTable.Value,
    SdkMessageProcessingStepImage.MessagePropertyName,
    SdkMessageProcessingStepImage.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageProcessingStepImage.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageProcessingStepImage.ModifiedOn,
    SdkMessageProcessingStepImage.OrganizationId,
    SdkMessageProcessingStepImage.RelatedAttributeName,
    SdkMessageProcessingStepImage.SdkMessageProcessingStepId,
    SdkMessageProcessingStepImage.SdkMessageProcessingStepImageId,
    SdkMessageProcessingStepImage.SdkMessageProcessingStepImageIdUnique
from SdkMessageProcessingStepImage
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap ImageTypePLTable on 
        (ImageTypePLTable.AttributeName = 'imagetype'
        and ImageTypePLTable.ObjectTypeCode = 4615
        and ImageTypePLTable.AttributeValue = SdkMessageProcessingStepImage.ImageType
        and ImageTypePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4615) pdm
where SdkMessageProcessingStepImage.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SdkMessageProcessingStepImage.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredCalendarRule]    Script Date: 04/11/2008 06:57:50 ******/




--
-- report view for calendarrule
--
create view [dbo].[FilteredCalendarRule] (
    businessunitid,
    calendarid,
    calendarruleid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    duration,
    effectiveintervalend, 
    effectiveintervalendutc,
    effectiveintervalstart, 
    effectiveintervalstartutc,
    effort,
    endtime, 
    endtimeutc,
    extentcode,
    groupdesignator,
    innercalendarid,
    ismodified,
    ismodifiedname,
    isselected,
    isselectedname,
    issimple,
    issimplename,
    isvaried,
    isvariedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    offset,
    organizationid,
    pattern,
    rank,
    serviceid,
    serviceiddsc,
    serviceidname,
    starttime, 
    starttimeutc,
    subcode,
    timecode,
    timezonecode
) with view_metadata as 
select 
    CalendarRule.BusinessUnitId,
    CalendarRule.CalendarId,
    CalendarRule.CalendarRuleId,
    CalendarRule.CreatedBy,
    CalendarRule.CreatedByDsc,
    CalendarRule.CreatedByName,
    CalendarRule.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CalendarRule.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CalendarRule.CreatedOn,
    CalendarRule.Description,
    CalendarRule.Duration,
    dbo.fn_UTCToTzSpecificLocalTime(CalendarRule.EffectiveIntervalEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CalendarRule.EffectiveIntervalEnd,
    dbo.fn_UTCToTzSpecificLocalTime(CalendarRule.EffectiveIntervalStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CalendarRule.EffectiveIntervalStart,
    CalendarRule.Effort,
    dbo.fn_UTCToTzSpecificLocalTime(CalendarRule.EndTime,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CalendarRule.EndTime,
    CalendarRule.ExtentCode,
    CalendarRule.GroupDesignator,
    CalendarRule.InnerCalendarId,
    CalendarRule.IsModified,
    IsModifiedPLTable.Value,
    CalendarRule.IsSelected,
    IsSelectedPLTable.Value,
    CalendarRule.IsSimple,
    IsSimplePLTable.Value,
    CalendarRule.IsVaried,
    IsVariedPLTable.Value,
    CalendarRule.ModifiedBy,
    CalendarRule.ModifiedByDsc,
    CalendarRule.ModifiedByName,
    CalendarRule.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CalendarRule.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CalendarRule.ModifiedOn,
    CalendarRule.Name,
    CalendarRule.Offset,
    CalendarRule.OrganizationId,
    CalendarRule.Pattern,
    CalendarRule.Rank,
    CalendarRule.ServiceId,
    CalendarRule.ServiceIdDsc,
    CalendarRule.ServiceIdName,
    dbo.fn_UTCToTzSpecificLocalTime(CalendarRule.StartTime,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CalendarRule.StartTime,
    CalendarRule.SubCode,
    CalendarRule.TimeCode,
    CalendarRule.TimeZoneCode
from CalendarRule
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsModifiedPLTable on 
        (IsModifiedPLTable.AttributeName = 'ismodified'
        and IsModifiedPLTable.ObjectTypeCode = 4004
        and IsModifiedPLTable.AttributeValue = CalendarRule.IsModified
        and IsModifiedPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsSelectedPLTable on 
        (IsSelectedPLTable.AttributeName = 'isselected'
        and IsSelectedPLTable.ObjectTypeCode = 4004
        and IsSelectedPLTable.AttributeValue = CalendarRule.IsSelected
        and IsSelectedPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsSimplePLTable on 
        (IsSimplePLTable.AttributeName = 'issimple'
        and IsSimplePLTable.ObjectTypeCode = 4004
        and IsSimplePLTable.AttributeValue = CalendarRule.IsSimple
        and IsSimplePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsVariedPLTable on 
        (IsVariedPLTable.AttributeName = 'isvaried'
        and IsVariedPLTable.ObjectTypeCode = 4004
        and IsVariedPLTable.AttributeValue = CalendarRule.IsVaried
        and IsVariedPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4003) pdm
where CalendarRule.DeletionStateCode in (0) 
    and
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		CalendarRule.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		CalendarRule.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		CalendarRule.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredSdkMessageProcessingStep]    Script Date: 04/11/2008 06:58:09 ******/




--
-- report view for sdkmessageprocessingstep
--
create view [dbo].[FilteredSdkMessageProcessingStep] (
    configuration,
    createdby,
    createdon, 
    createdonutc,
    customizationlevel,
    description,
    filteringattributes,
    impersonatinguserid,
    invocationsource,
    invocationsourcename,
    mode,
    modename,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    organizationid,
    plugintypeid,
    rank,
    sdkmessagefilterid,
    sdkmessageid,
    sdkmessageprocessingstepid,
    sdkmessageprocessingstepidunique,
    sdkmessageprocessingstepsecureconfigid,
    stage,
    stagename,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    supporteddeployment,
    supporteddeploymentname
) with view_metadata as 
select 
    SdkMessageProcessingStep.Configuration,
    SdkMessageProcessingStep.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageProcessingStep.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageProcessingStep.CreatedOn,
    SdkMessageProcessingStep.CustomizationLevel,
    SdkMessageProcessingStep.Description,
    SdkMessageProcessingStep.FilteringAttributes,
    SdkMessageProcessingStep.ImpersonatingUserId,
    SdkMessageProcessingStep.InvocationSource,
    InvocationSourcePLTable.Value,
    SdkMessageProcessingStep.Mode,
    ModePLTable.Value,
    SdkMessageProcessingStep.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageProcessingStep.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageProcessingStep.ModifiedOn,
    SdkMessageProcessingStep.OrganizationId,
    SdkMessageProcessingStep.PluginTypeId,
    SdkMessageProcessingStep.Rank,
    SdkMessageProcessingStep.SdkMessageFilterId,
    SdkMessageProcessingStep.SdkMessageId,
    SdkMessageProcessingStep.SdkMessageProcessingStepId,
    SdkMessageProcessingStep.SdkMessageProcessingStepIdUnique,
    SdkMessageProcessingStep.SdkMessageProcessingStepSecureConfigId,
    SdkMessageProcessingStep.Stage,
    StagePLTable.Value,
    SdkMessageProcessingStep.StateCode,
    StateCodePLTable.Value,
    SdkMessageProcessingStep.StatusCode,
    StatusCodePLTable.Value,
    SdkMessageProcessingStep.SupportedDeployment,
    SupportedDeploymentPLTable.Value
from SdkMessageProcessingStep
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap InvocationSourcePLTable on 
        (InvocationSourcePLTable.AttributeName = 'invocationsource'
        and InvocationSourcePLTable.ObjectTypeCode = 4608
        and InvocationSourcePLTable.AttributeValue = SdkMessageProcessingStep.InvocationSource
        and InvocationSourcePLTable.LangId = us.UILanguageId )
    left outer join StringMap ModePLTable on 
        (ModePLTable.AttributeName = 'mode'
        and ModePLTable.ObjectTypeCode = 4608
        and ModePLTable.AttributeValue = SdkMessageProcessingStep.Mode
        and ModePLTable.LangId = us.UILanguageId )
    left outer join StringMap StagePLTable on 
        (StagePLTable.AttributeName = 'stage'
        and StagePLTable.ObjectTypeCode = 4608
        and StagePLTable.AttributeValue = SdkMessageProcessingStep.Stage
        and StagePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4608
        and StateCodePLTable.AttributeValue = SdkMessageProcessingStep.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4608
        and StatusCodePLTable.AttributeValue = SdkMessageProcessingStep.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap SupportedDeploymentPLTable on 
        (SupportedDeploymentPLTable.AttributeName = 'supporteddeployment'
        and SupportedDeploymentPLTable.ObjectTypeCode = 4608
        and SupportedDeploymentPLTable.AttributeValue = SdkMessageProcessingStep.SupportedDeployment
        and SupportedDeploymentPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4608) pdm
where SdkMessageProcessingStep.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SdkMessageProcessingStep.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredSite]    Script Date: 04/11/2008 06:58:11 ******/




--
-- report view for site
--
create view [dbo].[FilteredSite] (
    address1_addressid,
    address1_addresstypecode,
    address1_addresstypecodename,
    address1_city,
    address1_country,
    address1_county,
    address1_fax,
    address1_latitude,
    address1_line1,
    address1_line2,
    address1_line3,
    address1_longitude,
    address1_name,
    address1_postalcode,
    address1_postofficebox,
    address1_shippingmethodcode,
    address1_shippingmethodcodename,
    address1_stateorprovince,
    address1_telephone1,
    address1_telephone2,
    address1_telephone3,
    address1_upszone,
    address1_utcoffset,
    address2_addressid,
    address2_addresstypecode,
    address2_addresstypecodename,
    address2_city,
    address2_country,
    address2_county,
    address2_fax,
    address2_latitude,
    address2_line1,
    address2_line2,
    address2_line3,
    address2_longitude,
    address2_name,
    address2_postalcode,
    address2_postofficebox,
    address2_shippingmethodcode,
    address2_shippingmethodcodename,
    address2_stateorprovince,
    address2_telephone1,
    address2_telephone2,
    address2_telephone3,
    address2_upszone,
    address2_utcoffset,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    emailaddress,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    overriddencreatedon, 
    overriddencreatedonutc,
    siteid,
    timezonecode
) with view_metadata as 
select 
    Site.Address1_AddressId,
    Site.Address1_AddressTypeCode,
    Address1_AddressTypeCodePLTable.Value,
    Site.Address1_City,
    Site.Address1_Country,
    Site.Address1_County,
    Site.Address1_Fax,
    Site.Address1_Latitude,
    Site.Address1_Line1,
    Site.Address1_Line2,
    Site.Address1_Line3,
    Site.Address1_Longitude,
    Site.Address1_Name,
    Site.Address1_PostalCode,
    Site.Address1_PostOfficeBox,
    Site.Address1_ShippingMethodCode,
    Address1_ShippingMethodCodePLTable.Value,
    Site.Address1_StateOrProvince,
    Site.Address1_Telephone1,
    Site.Address1_Telephone2,
    Site.Address1_Telephone3,
    Site.Address1_UPSZone,
    Site.Address1_UTCOffset,
    Site.Address2_AddressId,
    Site.Address2_AddressTypeCode,
    Address2_AddressTypeCodePLTable.Value,
    Site.Address2_City,
    Site.Address2_Country,
    Site.Address2_County,
    Site.Address2_Fax,
    Site.Address2_Latitude,
    Site.Address2_Line1,
    Site.Address2_Line2,
    Site.Address2_Line3,
    Site.Address2_Longitude,
    Site.Address2_Name,
    Site.Address2_PostalCode,
    Site.Address2_PostOfficeBox,
    Site.Address2_ShippingMethodCode,
    Address2_ShippingMethodCodePLTable.Value,
    Site.Address2_StateOrProvince,
    Site.Address2_Telephone1,
    Site.Address2_Telephone2,
    Site.Address2_Telephone3,
    Site.Address2_UPSZone,
    Site.Address2_UTCOffset,
    Site.CreatedBy,
    Site.CreatedByDsc,
    Site.CreatedByName,
    Site.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Site.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Site.CreatedOn,
    Site.EMailAddress,
    Site.ImportSequenceNumber,
    Site.ModifiedBy,
    Site.ModifiedByDsc,
    Site.ModifiedByName,
    Site.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Site.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Site.ModifiedOn,
    Site.Name,
    Site.OrganizationId,
    dbo.fn_UTCToTzSpecificLocalTime(Site.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Site.OverriddenCreatedOn,
    Site.SiteId,
    Site.TimeZoneCode
from Site
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap Address1_AddressTypeCodePLTable on 
        (Address1_AddressTypeCodePLTable.AttributeName = 'address1_addresstypecode'
        and Address1_AddressTypeCodePLTable.ObjectTypeCode = 4009
        and Address1_AddressTypeCodePLTable.AttributeValue = Site.Address1_AddressTypeCode
        and Address1_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_ShippingMethodCodePLTable on 
        (Address1_ShippingMethodCodePLTable.AttributeName = 'address1_shippingmethodcode'
        and Address1_ShippingMethodCodePLTable.ObjectTypeCode = 4009
        and Address1_ShippingMethodCodePLTable.AttributeValue = Site.Address1_ShippingMethodCode
        and Address1_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_AddressTypeCodePLTable on 
        (Address2_AddressTypeCodePLTable.AttributeName = 'address2_addresstypecode'
        and Address2_AddressTypeCodePLTable.ObjectTypeCode = 4009
        and Address2_AddressTypeCodePLTable.AttributeValue = Site.Address2_AddressTypeCode
        and Address2_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_ShippingMethodCodePLTable on 
        (Address2_ShippingMethodCodePLTable.AttributeName = 'address2_shippingmethodcode'
        and Address2_ShippingMethodCodePLTable.ObjectTypeCode = 4009
        and Address2_ShippingMethodCodePLTable.AttributeValue = Site.Address2_ShippingMethodCode
        and Address2_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4009) pdm
where Site.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    Site.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredQuarterlyFiscalCalendar]    Script Date: 04/11/2008 06:58:04 ******/




--
-- report view for quarterlyfiscalcalendar
--
create view [dbo].[FilteredQuarterlyFiscalCalendar] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    effectiveon, 
    effectiveonutc,
    exchangerate,
    fiscalperiodtype,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    quarter1,
    quarter1_base,
    quarter2,
    quarter2_base,
    quarter3,
    quarter3_base,
    quarter4,
    quarter4_base,
    salespersonid,
    salespersoniddsc,
    salespersonidname,
    salespersonidyominame,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    userfiscalcalendarid,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    UserFiscalCalendar.BusinessUnitId,
    UserFiscalCalendar.BusinessUnitIdDsc,
    UserFiscalCalendar.BusinessUnitIdName,
    UserFiscalCalendar.CreatedBy,
    UserFiscalCalendar.CreatedByDsc,
    UserFiscalCalendar.CreatedByName,
    UserFiscalCalendar.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.CreatedOn,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.EffectiveOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.EffectiveOn,
    UserFiscalCalendar.ExchangeRate,
    UserFiscalCalendar.FiscalPeriodType,
    UserFiscalCalendar.ModifiedBy,
    UserFiscalCalendar.ModifiedByDsc,
    UserFiscalCalendar.ModifiedByName,
    UserFiscalCalendar.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.ModifiedOn,
    UserFiscalCalendar.Period1,
    UserFiscalCalendar.Period1_Base,
    UserFiscalCalendar.Period4,
    UserFiscalCalendar.Period4_Base,
    UserFiscalCalendar.Period7,
    UserFiscalCalendar.Period7_Base,
    UserFiscalCalendar.Period10,
    UserFiscalCalendar.Period10_Base,
    UserFiscalCalendar.SalesPersonId,
    UserFiscalCalendar.SalesPersonIdDsc,
    UserFiscalCalendar.SalesPersonIdName,
    UserFiscalCalendar.SalesPersonIdYomiName,
    UserFiscalCalendar.TimeZoneRuleVersionNumber,
    UserFiscalCalendar.TransactionCurrencyId,
    UserFiscalCalendar.TransactionCurrencyIdDsc,
    UserFiscalCalendar.TransactionCurrencyIdName,
    UserFiscalCalendar.UserFiscalCalendarId,
    UserFiscalCalendar.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from UserFiscalCalendar
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = UserFiscalCalendar.TransactionCurrencyId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(8) pdm
    where
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		UserFiscalCalendar.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		UserFiscalCalendar.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		UserFiscalCalendar.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredDuplicateRule]    Script Date: 04/11/2008 06:57:55 ******/




--
-- report view for duplicaterule
--
create view [dbo].[FilteredDuplicateRule] (
    baseentitymatchcodetable,
    baseentityname,
    baseentitytypecode,
    baseentitytypecodename,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    duplicateruleid,
    iscasesensitive,
    iscasesensitivename,
    matchingentitymatchcodetable,
    matchingentityname,
    matchingentitytypecode,
    matchingentitytypecodename,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    DuplicateRule.BaseEntityMatchCodeTable,
    DuplicateRule.BaseEntityName,
    DuplicateRule.BaseEntityTypeCode,
    BaseEntityTypeCodePLTable.Value,
    DuplicateRule.CreatedBy,
    DuplicateRule.CreatedByDsc,
    DuplicateRule.CreatedByName,
    DuplicateRule.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(DuplicateRule.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    DuplicateRule.CreatedOn,
    DuplicateRule.Description,
    DuplicateRule.DuplicateRuleId,
    DuplicateRule.IsCaseSensitive,
    IsCaseSensitivePLTable.Value,
    DuplicateRule.MatchingEntityMatchCodeTable,
    DuplicateRule.MatchingEntityName,
    DuplicateRule.MatchingEntityTypeCode,
    MatchingEntityTypeCodePLTable.Value,
    DuplicateRule.ModifiedBy,
    DuplicateRule.ModifiedByDsc,
    DuplicateRule.ModifiedByName,
    DuplicateRule.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(DuplicateRule.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    DuplicateRule.ModifiedOn,
    DuplicateRule.Name,
    DuplicateRule.OwnerId,
    DuplicateRule.OwnerIdDsc,
    DuplicateRule.OwnerIdName,
    DuplicateRule.OwnerIdType,
    DuplicateRule.OwnerIdYomiName,
    DuplicateRule.OwningBusinessUnit,
    DuplicateRule.OwningUser,
    DuplicateRule.StateCode,
    StateCodePLTable.Value,
    DuplicateRule.StatusCode,
    StatusCodePLTable.Value,
    DuplicateRule.TimeZoneRuleVersionNumber,
    DuplicateRule.UTCConversionTimeZoneCode
from DuplicateRule
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap BaseEntityTypeCodePLTable on 
        (BaseEntityTypeCodePLTable.AttributeName = 'baseentitytypecode'
        and BaseEntityTypeCodePLTable.ObjectTypeCode = 4414
        and BaseEntityTypeCodePLTable.AttributeValue = DuplicateRule.BaseEntityTypeCode
        and BaseEntityTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsCaseSensitivePLTable on 
        (IsCaseSensitivePLTable.AttributeName = 'iscasesensitive'
        and IsCaseSensitivePLTable.ObjectTypeCode = 4414
        and IsCaseSensitivePLTable.AttributeValue = DuplicateRule.IsCaseSensitive
        and IsCaseSensitivePLTable.LangId = us.UILanguageId )
    left outer join StringMap MatchingEntityTypeCodePLTable on 
        (MatchingEntityTypeCodePLTable.AttributeName = 'matchingentitytypecode'
        and MatchingEntityTypeCodePLTable.ObjectTypeCode = 4414
        and MatchingEntityTypeCodePLTable.AttributeValue = DuplicateRule.MatchingEntityTypeCode
        and MatchingEntityTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4414
        and StateCodePLTable.AttributeValue = DuplicateRule.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4414
        and StatusCodePLTable.AttributeValue = DuplicateRule.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4414) pdm
where DuplicateRule.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    DuplicateRule.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		DuplicateRule.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		DuplicateRule.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		DuplicateRule.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    DuplicateRule.DuplicateRuleId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4414 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredIncidentResolution]    Script Date: 04/11/2008 06:57:57 ******/




--
-- report view for incidentresolution
--
create view [dbo].[FilteredIncidentResolution] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    category,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    importsequencenumber,
    incidentid,
    incidentiddsc,
    incidentidname,
    incidentidtype,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    timespent,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    IncidentResolution.ActivityId,
    IncidentResolution.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(IncidentResolution.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    IncidentResolution.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(IncidentResolution.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    IncidentResolution.ActualStart,
    IncidentResolution.Category,
    IncidentResolution.CreatedBy,
    IncidentResolution.CreatedByDsc,
    IncidentResolution.CreatedByName,
    IncidentResolution.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(IncidentResolution.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    IncidentResolution.CreatedOn,
    IncidentResolution.Description,
    IncidentResolution.ImportSequenceNumber,
    IncidentResolution.IncidentId,
    IncidentResolution.IncidentIdDsc,
    IncidentResolution.IncidentIdName,
    IncidentResolution.IncidentIdType,
    IncidentResolution.IsBilled,
    IsBilledPLTable.Value,
    IncidentResolution.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    IncidentResolution.ModifiedBy,
    IncidentResolution.ModifiedByDsc,
    IncidentResolution.ModifiedByName,
    IncidentResolution.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(IncidentResolution.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    IncidentResolution.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(IncidentResolution.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    IncidentResolution.OverriddenCreatedOn,
    IncidentResolution.OwnerId,
    IncidentResolution.OwnerIdDsc,
    IncidentResolution.OwnerIdName,
    IncidentResolution.OwnerIdType,
    IncidentResolution.OwnerIdYomiName,
    IncidentResolution.OwningBusinessUnit,
    IncidentResolution.OwningUser,
    IncidentResolution.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(IncidentResolution.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    IncidentResolution.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(IncidentResolution.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    IncidentResolution.ScheduledStart,
    IncidentResolution.ServiceId,
    IncidentResolution.StateCode,
    StateCodePLTable.Value,
    IncidentResolution.StatusCode,
    StatusCodePLTable.Value,
    IncidentResolution.Subcategory,
    IncidentResolution.Subject,
    IncidentResolution.TimeSpent,
    IncidentResolution.TimeZoneRuleVersionNumber,
    IncidentResolution.UTCConversionTimeZoneCode
from IncidentResolution
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4206
        and IsBilledPLTable.AttributeValue = IncidentResolution.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4206
        and IsWorkflowCreatedPLTable.AttributeValue = IncidentResolution.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4206
        and StateCodePLTable.AttributeValue = IncidentResolution.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4206
        and StatusCodePLTable.AttributeValue = IncidentResolution.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where IncidentResolution.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    IncidentResolution.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		IncidentResolution.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		IncidentResolution.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		IncidentResolution.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    IncidentResolution.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredKbArticleTemplate]    Script Date: 04/11/2008 06:57:58 ******/




--
-- report view for kbarticletemplate
--
create view [dbo].[FilteredKbArticleTemplate] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    formatxml,
    importsequencenumber,
    isactive,
    isactivename,
    kbarticletemplateid,
    languagecode,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    structurexml,
    title
) with view_metadata as 
select 
    KbArticleTemplate.CreatedBy,
    KbArticleTemplate.CreatedByDsc,
    KbArticleTemplate.CreatedByName,
    KbArticleTemplate.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(KbArticleTemplate.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    KbArticleTemplate.CreatedOn,
    KbArticleTemplate.Description,
    KbArticleTemplate.FormatXml,
    KbArticleTemplate.ImportSequenceNumber,
    KbArticleTemplate.IsActive,
    IsActivePLTable.Value,
    KbArticleTemplate.KbArticleTemplateId,
    KbArticleTemplate.LanguageCode,
    KbArticleTemplate.ModifiedBy,
    KbArticleTemplate.ModifiedByDsc,
    KbArticleTemplate.ModifiedByName,
    KbArticleTemplate.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(KbArticleTemplate.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    KbArticleTemplate.ModifiedOn,
    KbArticleTemplate.OrganizationId,
    KbArticleTemplate.OrganizationIdDsc,
    KbArticleTemplate.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(KbArticleTemplate.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    KbArticleTemplate.OverriddenCreatedOn,
    KbArticleTemplate.StructureXml,
    KbArticleTemplate.Title
from KbArticleTemplate
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsActivePLTable on 
        (IsActivePLTable.AttributeName = 'isactive'
        and IsActivePLTable.ObjectTypeCode = 1016
        and IsActivePLTable.AttributeValue = KbArticleTemplate.IsActive
        and IsActivePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1016) pdm
where KbArticleTemplate.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    KbArticleTemplate.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredSemiAnnualFiscalCalendar]    Script Date: 04/11/2008 06:58:10 ******/




--
-- report view for semiannualfiscalcalendar
--
create view [dbo].[FilteredSemiAnnualFiscalCalendar] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    effectiveon, 
    effectiveonutc,
    exchangerate,
    firsthalf,
    firsthalf_base,
    fiscalperiodtype,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    salespersonid,
    salespersoniddsc,
    salespersonidname,
    salespersonidyominame,
    secondhalf,
    secondhalf_base,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    userfiscalcalendarid,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    UserFiscalCalendar.BusinessUnitId,
    UserFiscalCalendar.BusinessUnitIdDsc,
    UserFiscalCalendar.BusinessUnitIdName,
    UserFiscalCalendar.CreatedBy,
    UserFiscalCalendar.CreatedByDsc,
    UserFiscalCalendar.CreatedByName,
    UserFiscalCalendar.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.CreatedOn,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.EffectiveOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.EffectiveOn,
    UserFiscalCalendar.ExchangeRate,
    UserFiscalCalendar.Period1,
    UserFiscalCalendar.Period1_Base,
    UserFiscalCalendar.FiscalPeriodType,
    UserFiscalCalendar.ImportSequenceNumber,
    UserFiscalCalendar.ModifiedBy,
    UserFiscalCalendar.ModifiedByDsc,
    UserFiscalCalendar.ModifiedByName,
    UserFiscalCalendar.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.ModifiedOn,
    UserFiscalCalendar.SalesPersonId,
    UserFiscalCalendar.SalesPersonIdDsc,
    UserFiscalCalendar.SalesPersonIdName,
    UserFiscalCalendar.SalesPersonIdYomiName,
    UserFiscalCalendar.Period7,
    UserFiscalCalendar.Period7_Base,
    UserFiscalCalendar.TimeZoneRuleVersionNumber,
    UserFiscalCalendar.TransactionCurrencyId,
    UserFiscalCalendar.TransactionCurrencyIdDsc,
    UserFiscalCalendar.TransactionCurrencyIdName,
    UserFiscalCalendar.UserFiscalCalendarId,
    UserFiscalCalendar.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from UserFiscalCalendar
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = UserFiscalCalendar.TransactionCurrencyId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(8) pdm
    where
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		UserFiscalCalendar.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		UserFiscalCalendar.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		UserFiscalCalendar.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredQueue]    Script Date: 04/11/2008 06:58:04 ******/




--
-- report view for queue
--
create view [dbo].[FilteredQueue] (
    allowemailcredentials,
    allowemailcredentialsname,
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    emailaddress,
    emailpassword,
    emailusername,
    ignoreunsolicitedemail,
    ignoreunsolicitedemailname,
    incomingemaildeliverymethod,
    incomingemaildeliverymethodname,
    incomingemailfilteringmethod,
    incomingemailfilteringmethodname,
    isfaxqueue,
    isfaxqueuename,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    outgoingemaildeliverymethod,
    outgoingemaildeliverymethodname,
    primaryuserid,
    primaryuseriddsc,
    primaryuseridname,
    primaryuseridyominame,
    queueid,
    queuesemantics,
    queuetypecode,
    queuetypecodename
) with view_metadata as 
select 
    Queue.AllowEmailCredentials,
    AllowEmailCredentialsPLTable.Value,
    Queue.BusinessUnitId,
    Queue.BusinessUnitIdDsc,
    Queue.BusinessUnitIdName,
    Queue.CreatedBy,
    Queue.CreatedByDsc,
    Queue.CreatedByName,
    Queue.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Queue.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Queue.CreatedOn,
    Queue.Description,
    Queue.EMailAddress,
    Queue.EmailPassword,
    Queue.EmailUsername,
    Queue.IgnoreUnsolicitedEmail,
    IgnoreUnsolicitedEmailPLTable.Value,
    Queue.IncomingEmailDeliveryMethod,
    IncomingEmailDeliveryMethodPLTable.Value,
    Queue.IncomingEmailFilteringMethod,
    IncomingEmailFilteringMethodPLTable.Value,
    Queue.IsFaxQueue,
    IsFaxQueuePLTable.Value,
    Queue.ModifiedBy,
    Queue.ModifiedByDsc,
    Queue.ModifiedByName,
    Queue.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Queue.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Queue.ModifiedOn,
    Queue.Name,
    Queue.OrganizationId,
    Queue.OrganizationIdDsc,
    Queue.OrganizationIdName,
    Queue.OutgoingEmailDeliveryMethod,
    OutgoingEmailDeliveryMethodPLTable.Value,
    Queue.PrimaryUserId,
    Queue.PrimaryUserIdDsc,
    Queue.PrimaryUserIdName,
    Queue.PrimaryUserIdYomiName,
    Queue.QueueId,
    Queue.QueueSemantics,
    Queue.QueueTypeCode,
    QueueTypeCodePLTable.Value
from Queue
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap AllowEmailCredentialsPLTable on 
        (AllowEmailCredentialsPLTable.AttributeName = 'allowemailcredentials'
        and AllowEmailCredentialsPLTable.ObjectTypeCode = 2020
        and AllowEmailCredentialsPLTable.AttributeValue = Queue.AllowEmailCredentials
        and AllowEmailCredentialsPLTable.LangId = us.UILanguageId )
    left outer join StringMap IgnoreUnsolicitedEmailPLTable on 
        (IgnoreUnsolicitedEmailPLTable.AttributeName = 'ignoreunsolicitedemail'
        and IgnoreUnsolicitedEmailPLTable.ObjectTypeCode = 2020
        and IgnoreUnsolicitedEmailPLTable.AttributeValue = Queue.IgnoreUnsolicitedEmail
        and IgnoreUnsolicitedEmailPLTable.LangId = us.UILanguageId )
    left outer join StringMap IncomingEmailDeliveryMethodPLTable on 
        (IncomingEmailDeliveryMethodPLTable.AttributeName = 'incomingemaildeliverymethod'
        and IncomingEmailDeliveryMethodPLTable.ObjectTypeCode = 2020
        and IncomingEmailDeliveryMethodPLTable.AttributeValue = Queue.IncomingEmailDeliveryMethod
        and IncomingEmailDeliveryMethodPLTable.LangId = us.UILanguageId )
    left outer join StringMap IncomingEmailFilteringMethodPLTable on 
        (IncomingEmailFilteringMethodPLTable.AttributeName = 'incomingemailfilteringmethod'
        and IncomingEmailFilteringMethodPLTable.ObjectTypeCode = 2020
        and IncomingEmailFilteringMethodPLTable.AttributeValue = Queue.IncomingEmailFilteringMethod
        and IncomingEmailFilteringMethodPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsFaxQueuePLTable on 
        (IsFaxQueuePLTable.AttributeName = 'isfaxqueue'
        and IsFaxQueuePLTable.ObjectTypeCode = 2020
        and IsFaxQueuePLTable.AttributeValue = Queue.IsFaxQueue
        and IsFaxQueuePLTable.LangId = us.UILanguageId )
    left outer join StringMap OutgoingEmailDeliveryMethodPLTable on 
        (OutgoingEmailDeliveryMethodPLTable.AttributeName = 'outgoingemaildeliverymethod'
        and OutgoingEmailDeliveryMethodPLTable.ObjectTypeCode = 2020
        and OutgoingEmailDeliveryMethodPLTable.AttributeValue = Queue.OutgoingEmailDeliveryMethod
        and OutgoingEmailDeliveryMethodPLTable.LangId = us.UILanguageId )
    left outer join StringMap QueueTypeCodePLTable on 
        (QueueTypeCodePLTable.AttributeName = 'queuetypecode'
        and QueueTypeCodePLTable.ObjectTypeCode = 2020
        and QueueTypeCodePLTable.AttributeValue = Queue.QueueTypeCode
        and QueueTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(2020) pdm
where Queue.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    Queue.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredDiscountType]    Script Date: 04/11/2008 06:57:54 ******/




--
-- report view for discounttype
--
create view [dbo].[FilteredDiscountType] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    discounttypeid,
    importsequencenumber,
    isamounttype,
    isamounttypename,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname
) with view_metadata as 
select 
    DiscountType.CreatedBy,
    DiscountType.CreatedByDsc,
    DiscountType.CreatedByName,
    DiscountType.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(DiscountType.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    DiscountType.CreatedOn,
    DiscountType.Description,
    DiscountType.DiscountTypeId,
    DiscountType.ImportSequenceNumber,
    DiscountType.IsAmountType,
    IsAmountTypePLTable.Value,
    DiscountType.ModifiedBy,
    DiscountType.ModifiedByDsc,
    DiscountType.ModifiedByName,
    DiscountType.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(DiscountType.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    DiscountType.ModifiedOn,
    DiscountType.Name,
    DiscountType.OrganizationId,
    DiscountType.OrganizationIdDsc,
    DiscountType.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(DiscountType.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    DiscountType.OverriddenCreatedOn,
    DiscountType.StateCode,
    StateCodePLTable.Value,
    DiscountType.StatusCode,
    StatusCodePLTable.Value,
    DiscountType.TransactionCurrencyId,
    DiscountType.TransactionCurrencyIdDsc,
    DiscountType.TransactionCurrencyIdName
from DiscountType
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsAmountTypePLTable on 
        (IsAmountTypePLTable.AttributeName = 'isamounttype'
        and IsAmountTypePLTable.ObjectTypeCode = 1080
        and IsAmountTypePLTable.AttributeValue = DiscountType.IsAmountType
        and IsAmountTypePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 1080
        and StateCodePLTable.AttributeValue = DiscountType.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 1080
        and StatusCodePLTable.AttributeValue = DiscountType.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1080) pdm
where DiscountType.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    DiscountType.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredResourceGroup]    Script Date: 04/11/2008 06:58:07 ******/




--
-- report view for resourcegroup
--
create view [dbo].[FilteredResourceGroup] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    grouptypecode,
    grouptypecodename,
    name,
    objecttypecode,
    objecttypecodename,
    organizationid,
    organizationiddsc,
    organizationidname,
    resourcegroupid
) with view_metadata as 
select 
    ResourceGroup.BusinessUnitId,
    ResourceGroup.BusinessUnitIdDsc,
    ResourceGroup.BusinessUnitIdName,
    ResourceGroup.GroupTypeCode,
    GroupTypeCodePLTable.Value,
    ResourceGroup.Name,
    ResourceGroup.ObjectTypeCode,
    ObjectTypeCodePLTable.Value,
    ResourceGroup.OrganizationId,
    ResourceGroup.OrganizationIdDsc,
    ResourceGroup.OrganizationIdName,
    ResourceGroup.ResourceGroupId
from ResourceGroup
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap GroupTypeCodePLTable on 
        (GroupTypeCodePLTable.AttributeName = 'grouptypecode'
        and GroupTypeCodePLTable.ObjectTypeCode = 4005
        and GroupTypeCodePLTable.AttributeValue = ResourceGroup.GroupTypeCode
        and GroupTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ObjectTypeCodePLTable on 
        (ObjectTypeCodePLTable.AttributeName = 'objecttypecode'
        and ObjectTypeCodePLTable.ObjectTypeCode = 4005
        and ObjectTypeCodePLTable.AttributeValue = ResourceGroup.ObjectTypeCode
        and ObjectTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4005) pdm
where ResourceGroup.DeletionStateCode in (0) 
    and
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ResourceGroup.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ResourceGroup.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ResourceGroup.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredSalesOrder]    Script Date: 04/11/2008 06:58:08 ******/




--
-- report view for salesorder
--
create view [dbo].[FilteredSalesOrder] (
    accountid,
    accountiddsc,
    accountidname,
    accountidyominame,
    billto_addressid,
    billto_city,
    billto_contactname,
    billto_country,
    billto_fax,
    billto_line1,
    billto_line2,
    billto_line3,
    billto_name,
    billto_postalcode,
    billto_stateorprovince,
    billto_telephone,
    campaignid,
    campaigniddsc,
    campaignidname,
    contactid,
    contactiddsc,
    contactidname,
    contactidyominame,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customerid,
    customeriddsc,
    customeridname,
    customeridtype,
    datefulfilled, 
    datefulfilledutc,
    description,
    discountamount,
    discountamount_base,
    discountpercentage,
    exchangerate,
    freightamount,
    freightamount_base,
    freighttermscode,
    freighttermscodename,
    importsequencenumber,
    ispricelocked,
    ispricelockedname,
    lastbackofficesubmit, 
    lastbackofficesubmitutc,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    opportunityid,
    opportunityiddsc,
    opportunityidname,
    ordernumber,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owningteam,
    owninguser,
    paymenttermscode,
    paymenttermscodename,
    pricelevelid,
    priceleveliddsc,
    pricelevelidname,
    pricingerrorcode,
    pricingerrorcodename,
    prioritycode,
    prioritycodename,
    quoteid,
    quoteiddsc,
    quoteidname,
    requestdeliveryby, 
    requestdeliverybyutc,
    salesorderid,
    shippingmethodcode,
    shippingmethodcodename,
    shipto_addressid,
    shipto_city,
    shipto_contactname,
    shipto_country,
    shipto_fax,
    shipto_freighttermscode,
    shipto_freighttermscodename,
    shipto_line1,
    shipto_line2,
    shipto_line3,
    shipto_name,
    shipto_postalcode,
    shipto_stateorprovince,
    shipto_telephone,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    submitdate, 
    submitdateutc,
    submitstatus,
    submitstatusdescription,
    timezoneruleversionnumber,
    totalamount,
    totalamount_base,
    totalamountlessfreight,
    totalamountlessfreight_base,
    totaldiscountamount,
    totaldiscountamount_base,
    totallineitemamount,
    totallineitemamount_base,
    totallineitemdiscountamount,
    totallineitemdiscountamount_base,
    totaltax,
    totaltax_base,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode,
    willcall,
    willcallname,
crm_moneyformatstring
) with view_metadata as 
select 
    SalesOrder.AccountId,
    SalesOrder.AccountIdDsc,
    SalesOrder.AccountIdName,
    SalesOrder.AccountIdYomiName,
    SalesOrder.BillTo_AddressId,
    SalesOrder.BillTo_City,
    SalesOrder.BillTo_ContactName,
    SalesOrder.BillTo_Country,
    SalesOrder.BillTo_Fax,
    SalesOrder.BillTo_Line1,
    SalesOrder.BillTo_Line2,
    SalesOrder.BillTo_Line3,
    SalesOrder.BillTo_Name,
    SalesOrder.BillTo_PostalCode,
    SalesOrder.BillTo_StateOrProvince,
    SalesOrder.BillTo_Telephone,
    SalesOrder.CampaignId,
    SalesOrder.CampaignIdDsc,
    SalesOrder.CampaignIdName,
    SalesOrder.ContactId,
    SalesOrder.ContactIdDsc,
    SalesOrder.ContactIdName,
    SalesOrder.ContactIdYomiName,
    SalesOrder.CreatedBy,
    SalesOrder.CreatedByDsc,
    SalesOrder.CreatedByName,
    SalesOrder.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SalesOrder.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesOrder.CreatedOn,
    SalesOrder.CustomerId,
    SalesOrder.CustomerIdDsc,
    SalesOrder.CustomerIdName,
    SalesOrder.CustomerIdType,
    dbo.fn_UTCToTzSpecificLocalTime(SalesOrder.DateFulfilled,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesOrder.DateFulfilled,
    SalesOrder.Description,
    SalesOrder.DiscountAmount,
    SalesOrder.DiscountAmount_Base,
    SalesOrder.DiscountPercentage,
    SalesOrder.ExchangeRate,
    SalesOrder.FreightAmount,
    SalesOrder.FreightAmount_Base,
    SalesOrder.FreightTermsCode,
    FreightTermsCodePLTable.Value,
    SalesOrder.ImportSequenceNumber,
    SalesOrder.IsPriceLocked,
    IsPriceLockedPLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(SalesOrder.LastBackofficeSubmit,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesOrder.LastBackofficeSubmit,
    SalesOrder.ModifiedBy,
    SalesOrder.ModifiedByDsc,
    SalesOrder.ModifiedByName,
    SalesOrder.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SalesOrder.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesOrder.ModifiedOn,
    SalesOrder.Name,
    SalesOrder.OpportunityId,
    SalesOrder.OpportunityIdDsc,
    SalesOrder.OpportunityIdName,
    SalesOrder.OrderNumber,
    dbo.fn_UTCToTzSpecificLocalTime(SalesOrder.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesOrder.OverriddenCreatedOn,
    SalesOrder.OwnerId,
    SalesOrder.OwnerIdDsc,
    SalesOrder.OwnerIdName,
    SalesOrder.OwnerIdType,
    SalesOrder.OwnerIdYomiName,
    SalesOrder.OwningBusinessUnit,
    SalesOrder.OwningTeam,
    SalesOrder.OwningUser,
    SalesOrder.PaymentTermsCode,
    PaymentTermsCodePLTable.Value,
    SalesOrder.PriceLevelId,
    SalesOrder.PriceLevelIdDsc,
    SalesOrder.PriceLevelIdName,
    SalesOrder.PricingErrorCode,
    PricingErrorCodePLTable.Value,
    SalesOrder.PriorityCode,
    PriorityCodePLTable.Value,
    SalesOrder.QuoteId,
    SalesOrder.QuoteIdDsc,
    SalesOrder.QuoteIdName,
    dbo.fn_UTCToTzSpecificLocalTime(SalesOrder.RequestDeliveryBy,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesOrder.RequestDeliveryBy,
    SalesOrder.SalesOrderId,
    SalesOrder.ShippingMethodCode,
    ShippingMethodCodePLTable.Value,
    SalesOrder.ShipTo_AddressId,
    SalesOrder.ShipTo_City,
    SalesOrder.ShipTo_ContactName,
    SalesOrder.ShipTo_Country,
    SalesOrder.ShipTo_Fax,
    SalesOrder.ShipTo_FreightTermsCode,
    ShipTo_FreightTermsCodePLTable.Value,
    SalesOrder.ShipTo_Line1,
    SalesOrder.ShipTo_Line2,
    SalesOrder.ShipTo_Line3,
    SalesOrder.ShipTo_Name,
    SalesOrder.ShipTo_PostalCode,
    SalesOrder.ShipTo_StateOrProvince,
    SalesOrder.ShipTo_Telephone,
    SalesOrder.StateCode,
    StateCodePLTable.Value,
    SalesOrder.StatusCode,
    StatusCodePLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(SalesOrder.SubmitDate,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesOrder.SubmitDate,
    SalesOrder.SubmitStatus,
    SalesOrder.SubmitStatusDescription,
    SalesOrder.TimeZoneRuleVersionNumber,
    SalesOrder.TotalAmount,
    SalesOrder.TotalAmount_Base,
    SalesOrder.TotalAmountLessFreight,
    SalesOrder.TotalAmountLessFreight_Base,
    SalesOrder.TotalDiscountAmount,
    SalesOrder.TotalDiscountAmount_Base,
    SalesOrder.TotalLineItemAmount,
    SalesOrder.TotalLineItemAmount_Base,
    SalesOrder.TotalLineItemDiscountAmount,
    SalesOrder.TotalLineItemDiscountAmount_Base,
    SalesOrder.TotalTax,
    SalesOrder.TotalTax_Base,
    SalesOrder.TransactionCurrencyId,
    SalesOrder.TransactionCurrencyIdDsc,
    SalesOrder.TransactionCurrencyIdName,
    SalesOrder.UTCConversionTimeZoneCode,
    SalesOrder.WillCall,
    WillCallPLTable.Value,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from SalesOrder
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = SalesOrder.TransactionCurrencyId
    left outer join StringMap FreightTermsCodePLTable on 
        (FreightTermsCodePLTable.AttributeName = 'freighttermscode'
        and FreightTermsCodePLTable.ObjectTypeCode = 1088
        and FreightTermsCodePLTable.AttributeValue = SalesOrder.FreightTermsCode
        and FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsPriceLockedPLTable on 
        (IsPriceLockedPLTable.AttributeName = 'ispricelocked'
        and IsPriceLockedPLTable.ObjectTypeCode = 1088
        and IsPriceLockedPLTable.AttributeValue = SalesOrder.IsPriceLocked
        and IsPriceLockedPLTable.LangId = us.UILanguageId )
    left outer join StringMap PaymentTermsCodePLTable on 
        (PaymentTermsCodePLTable.AttributeName = 'paymenttermscode'
        and PaymentTermsCodePLTable.ObjectTypeCode = 1088
        and PaymentTermsCodePLTable.AttributeValue = SalesOrder.PaymentTermsCode
        and PaymentTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PricingErrorCodePLTable on 
        (PricingErrorCodePLTable.AttributeName = 'pricingerrorcode'
        and PricingErrorCodePLTable.ObjectTypeCode = 1088
        and PricingErrorCodePLTable.AttributeValue = SalesOrder.PricingErrorCode
        and PricingErrorCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 1088
        and PriorityCodePLTable.AttributeValue = SalesOrder.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShippingMethodCodePLTable on 
        (ShippingMethodCodePLTable.AttributeName = 'shippingmethodcode'
        and ShippingMethodCodePLTable.ObjectTypeCode = 1088
        and ShippingMethodCodePLTable.AttributeValue = SalesOrder.ShippingMethodCode
        and ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShipTo_FreightTermsCodePLTable on 
        (ShipTo_FreightTermsCodePLTable.AttributeName = 'shipto_freighttermscode'
        and ShipTo_FreightTermsCodePLTable.ObjectTypeCode = 1088
        and ShipTo_FreightTermsCodePLTable.AttributeValue = SalesOrder.ShipTo_FreightTermsCode
        and ShipTo_FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 1088
        and StateCodePLTable.AttributeValue = SalesOrder.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 1088
        and StatusCodePLTable.AttributeValue = SalesOrder.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap WillCallPLTable on 
        (WillCallPLTable.AttributeName = 'willcall'
        and WillCallPLTable.ObjectTypeCode = 1088
        and WillCallPLTable.AttributeValue = SalesOrder.WillCall
        and WillCallPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1088) pdm
where SalesOrder.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    SalesOrder.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		SalesOrder.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		SalesOrder.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		SalesOrder.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    SalesOrder.SalesOrderId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 1088 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredOrganizationUI]    Script Date: 04/11/2008 06:58:01 ******/




--
-- report view for organizationui
--
create view [dbo].[FilteredOrganizationUI] (
    customizationlevel,
    fieldxml,
    formid,
    formidunique,
    formxml,
    gridicon,
    inproduction,
    inproductionname,
    largeentityicon,
    objecttypecode,
    objecttypecodename,
    organizationid,
    organizationiddsc,
    organizationidname,
    outlookshortcuticon,
    previewcolumnsetxml,
    previewxml,
    version
) with view_metadata as 
select 
    OrganizationUI.CustomizationLevel,
    OrganizationUI.FieldXml,
    OrganizationUI.FormId,
    OrganizationUI.FormIdUnique,
    OrganizationUI.FormXml,
    OrganizationUI.GridIcon,
    OrganizationUI.InProduction,
    InProductionPLTable.Value,
    OrganizationUI.LargeEntityIcon,
    OrganizationUI.ObjectTypeCode,
    ObjectTypeCodePLTable.Value,
    OrganizationUI.OrganizationId,
    OrganizationUI.OrganizationIdDsc,
    OrganizationUI.OrganizationIdName,
    OrganizationUI.OutlookShortcutIcon,
    OrganizationUI.PreviewColumnsetXml,
    OrganizationUI.PreviewXml,
    OrganizationUI.Version
from OrganizationUI
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap InProductionPLTable on 
        (InProductionPLTable.AttributeName = 'inproduction'
        and InProductionPLTable.ObjectTypeCode = 1021
        and InProductionPLTable.AttributeValue = OrganizationUI.InProduction
        and InProductionPLTable.LangId = us.UILanguageId )
    left outer join StringMap ObjectTypeCodePLTable on 
        (ObjectTypeCodePLTable.AttributeName = 'objecttypecode'
        and ObjectTypeCodePLTable.ObjectTypeCode = 1021
        and ObjectTypeCodePLTable.AttributeValue = OrganizationUI.ObjectTypeCode
        and ObjectTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1021) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    OrganizationUI.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredAsyncOperation]    Script Date: 04/11/2008 06:57:48 ******/




--
-- report view for asyncoperation
--
create view [dbo].[FilteredAsyncOperation] (
    asyncoperationid,
    completedon, 
    completedonutc,
    correlationid,
    correlationupdatedtime, 
    correlationupdatedtimeutc,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    data,
    dependencytoken,
    depth,
    errorcode,
    hostid,
    iswaitingforevent,
    message,
    messagename,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    operationtype,
    operationtypename,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    postponeuntil, 
    postponeuntilutc,
    primaryentitytype,
    primaryentitytypename,
    recurrencepattern,
    recurrencestarttime, 
    recurrencestarttimeutc,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    requestid,
    retrycount,
    sequence,
    startedon, 
    startedonutc,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    timezoneruleversionnumber,
    utcconversiontimezonecode,
    workflowactivationid,
    workflowactivationiddsc,
    workflowactivationidname,
    workflowstagename
) with view_metadata as 
select 
    AsyncOperation.AsyncOperationId,
    dbo.fn_UTCToTzSpecificLocalTime(AsyncOperation.CompletedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    AsyncOperation.CompletedOn,
    AsyncOperation.CorrelationId,
    dbo.fn_UTCToTzSpecificLocalTime(AsyncOperation.CorrelationUpdatedTime,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    AsyncOperation.CorrelationUpdatedTime,
    AsyncOperation.CreatedBy,
    AsyncOperation.CreatedByDsc,
    AsyncOperation.CreatedByName,
    AsyncOperation.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(AsyncOperation.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    AsyncOperation.CreatedOn,
    AsyncOperation.Data,
    AsyncOperation.DependencyToken,
    AsyncOperation.Depth,
    AsyncOperation.ErrorCode,
    AsyncOperation.HostId,
    AsyncOperation.IsWaitingForEvent,
    AsyncOperation.Message,
    AsyncOperation.MessageName,
    AsyncOperation.ModifiedBy,
    AsyncOperation.ModifiedByDsc,
    AsyncOperation.ModifiedByName,
    AsyncOperation.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(AsyncOperation.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    AsyncOperation.ModifiedOn,
    AsyncOperation.Name,
    AsyncOperation.OperationType,
    OperationTypePLTable.Value,
    AsyncOperation.OwnerId,
    AsyncOperation.OwnerIdDsc,
    AsyncOperation.OwnerIdName,
    AsyncOperation.OwnerIdType,
    AsyncOperation.OwnerIdYomiName,
    AsyncOperation.OwningBusinessUnit,
    AsyncOperation.OwningUser,
    dbo.fn_UTCToTzSpecificLocalTime(AsyncOperation.PostponeUntil,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    AsyncOperation.PostponeUntil,
    AsyncOperation.PrimaryEntityType,
    PrimaryEntityTypePLTable.Value,
    AsyncOperation.RecurrencePattern,
    dbo.fn_UTCToTzSpecificLocalTime(AsyncOperation.RecurrenceStartTime,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    AsyncOperation.RecurrenceStartTime,
    AsyncOperation.RegardingObjectId,
    AsyncOperation.RegardingObjectIdDsc,
    AsyncOperation.RegardingObjectIdName,
    AsyncOperation.RegardingObjectIdYomiName,
    AsyncOperation.RegardingObjectTypeCode,
    AsyncOperation.RequestId,
    AsyncOperation.RetryCount,
    AsyncOperation.Sequence,
    dbo.fn_UTCToTzSpecificLocalTime(AsyncOperation.StartedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    AsyncOperation.StartedOn,
    AsyncOperation.StateCode,
    StateCodePLTable.Value,
    AsyncOperation.StatusCode,
    StatusCodePLTable.Value,
    AsyncOperation.TimeZoneRuleVersionNumber,
    AsyncOperation.UTCConversionTimeZoneCode,
    AsyncOperation.WorkflowActivationId,
    AsyncOperation.WorkflowActivationIdDsc,
    AsyncOperation.WorkflowActivationIdName,
    AsyncOperation.WorkflowStageName
from AsyncOperation
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap OperationTypePLTable on 
        (OperationTypePLTable.AttributeName = 'operationtype'
        and OperationTypePLTable.ObjectTypeCode = 4700
        and OperationTypePLTable.AttributeValue = AsyncOperation.OperationType
        and OperationTypePLTable.LangId = us.UILanguageId )
    left outer join StringMap PrimaryEntityTypePLTable on 
        (PrimaryEntityTypePLTable.AttributeName = 'primaryentitytype'
        and PrimaryEntityTypePLTable.ObjectTypeCode = 4700
        and PrimaryEntityTypePLTable.AttributeValue = AsyncOperation.PrimaryEntityType
        and PrimaryEntityTypePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4700
        and StateCodePLTable.AttributeValue = AsyncOperation.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4700
        and StatusCodePLTable.AttributeValue = AsyncOperation.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4700) pdm
where AsyncOperation.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    AsyncOperation.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		AsyncOperation.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		AsyncOperation.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		AsyncOperation.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    AsyncOperation.AsyncOperationId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4700 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredOpportunityClose]    Script Date: 04/11/2008 06:58:00 ******/




--
-- report view for opportunityclose
--
create view [dbo].[FilteredOpportunityClose] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualrevenue,
    actualrevenue_base,
    actualstart, 
    actualstartutc,
    category,
    competitorid,
    competitoriddsc,
    competitoridname,
    competitoridyominame,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    exchangerate,
    importsequencenumber,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    opportunityid,
    opportunityiddsc,
    opportunityidname,
    opportunityidtype,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    OpportunityClose.ActivityId,
    OpportunityClose.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(OpportunityClose.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OpportunityClose.ActualEnd,
    OpportunityClose.ActualRevenue,
    OpportunityClose.ActualRevenue_Base,
    dbo.fn_UTCToTzSpecificLocalTime(OpportunityClose.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OpportunityClose.ActualStart,
    OpportunityClose.Category,
    OpportunityClose.CompetitorId,
    OpportunityClose.CompetitorIdDsc,
    OpportunityClose.CompetitorIdName,
    OpportunityClose.CompetitorIdYomiName,
    OpportunityClose.CreatedBy,
    OpportunityClose.CreatedByDsc,
    OpportunityClose.CreatedByName,
    OpportunityClose.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(OpportunityClose.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OpportunityClose.CreatedOn,
    OpportunityClose.Description,
    OpportunityClose.ExchangeRate,
    OpportunityClose.ImportSequenceNumber,
    OpportunityClose.IsBilled,
    IsBilledPLTable.Value,
    OpportunityClose.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    OpportunityClose.ModifiedBy,
    OpportunityClose.ModifiedByDsc,
    OpportunityClose.ModifiedByName,
    OpportunityClose.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(OpportunityClose.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OpportunityClose.ModifiedOn,
    OpportunityClose.OpportunityId,
    OpportunityClose.OpportunityIdDsc,
    OpportunityClose.OpportunityIdName,
    OpportunityClose.OpportunityIdType,
    dbo.fn_UTCToTzSpecificLocalTime(OpportunityClose.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OpportunityClose.OverriddenCreatedOn,
    OpportunityClose.OwnerId,
    OpportunityClose.OwnerIdDsc,
    OpportunityClose.OwnerIdName,
    OpportunityClose.OwnerIdType,
    OpportunityClose.OwnerIdYomiName,
    OpportunityClose.OwningBusinessUnit,
    OpportunityClose.OwningUser,
    OpportunityClose.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(OpportunityClose.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OpportunityClose.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(OpportunityClose.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OpportunityClose.ScheduledStart,
    OpportunityClose.ServiceId,
    OpportunityClose.StateCode,
    StateCodePLTable.Value,
    OpportunityClose.StatusCode,
    StatusCodePLTable.Value,
    OpportunityClose.Subcategory,
    OpportunityClose.Subject,
    OpportunityClose.TimeZoneRuleVersionNumber,
    OpportunityClose.TransactionCurrencyId,
    OpportunityClose.TransactionCurrencyIdDsc,
    OpportunityClose.TransactionCurrencyIdName,
    OpportunityClose.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from OpportunityClose
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = OpportunityClose.TransactionCurrencyId
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4208
        and IsBilledPLTable.AttributeValue = OpportunityClose.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4208
        and IsWorkflowCreatedPLTable.AttributeValue = OpportunityClose.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4208
        and StateCodePLTable.AttributeValue = OpportunityClose.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4208
        and StatusCodePLTable.AttributeValue = OpportunityClose.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where OpportunityClose.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    OpportunityClose.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		OpportunityClose.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		OpportunityClose.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		OpportunityClose.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    OpportunityClose.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredIntegrationStatus]    Script Date: 04/11/2008 06:57:57 ******/




--
-- report view for integrationstatus
--
create view [dbo].[FilteredIntegrationStatus] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    integrationentryid,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    objectid,
    objecttypecode,
    objecttypecodename,
    organizationid,
    organizationiddsc,
    organizationidname,
    statecode,
    statecodename,
    statedescription,
    statuscode,
    statuscodename,
    statusdescription,
    systemname
) with view_metadata as 
select 
    IntegrationStatus.CreatedBy,
    IntegrationStatus.CreatedByDsc,
    IntegrationStatus.CreatedByName,
    IntegrationStatus.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(IntegrationStatus.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    IntegrationStatus.CreatedOn,
    IntegrationStatus.IntegrationEntryId,
    IntegrationStatus.ModifiedBy,
    IntegrationStatus.ModifiedByDsc,
    IntegrationStatus.ModifiedByName,
    IntegrationStatus.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(IntegrationStatus.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    IntegrationStatus.ModifiedOn,
    IntegrationStatus.ObjectId,
    IntegrationStatus.ObjectTypeCode,
    ObjectTypeCodePLTable.Value,
    IntegrationStatus.OrganizationId,
    IntegrationStatus.OrganizationIdDsc,
    IntegrationStatus.OrganizationIdName,
    IntegrationStatus.StateCode,
    StateCodePLTable.Value,
    IntegrationStatus.StateDescription,
    IntegrationStatus.StatusCode,
    StatusCodePLTable.Value,
    IntegrationStatus.StatusDescription,
    IntegrationStatus.SystemName
from IntegrationStatus
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap ObjectTypeCodePLTable on 
        (ObjectTypeCodePLTable.AttributeName = 'objecttypecode'
        and ObjectTypeCodePLTable.ObjectTypeCode = 3000
        and ObjectTypeCodePLTable.AttributeValue = IntegrationStatus.ObjectTypeCode
        and ObjectTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 3000
        and StateCodePLTable.AttributeValue = IntegrationStatus.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 3000
        and StatusCodePLTable.AttributeValue = IntegrationStatus.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(3000) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    IntegrationStatus.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredImport]    Script Date: 04/11/2008 06:57:56 ******/




--
-- report view for import
--
create view [dbo].[FilteredImport] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    emailaddress,
    importid,
    isimport,
    isimportname,
    modecode,
    modecodename,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    sendnotification,
    sendnotificationname,
    sequence,
    statecode,
    statecodename,
    statuscode,
    statuscodename
) with view_metadata as 
select 
    Import.CreatedBy,
    Import.CreatedByDsc,
    Import.CreatedByName,
    Import.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Import.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Import.CreatedOn,
    Import.EMailAddress,
    Import.ImportId,
    Import.IsImport,
    IsImportPLTable.Value,
    Import.ModeCode,
    ModeCodePLTable.Value,
    Import.ModifiedBy,
    Import.ModifiedByDsc,
    Import.ModifiedByName,
    Import.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Import.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Import.ModifiedOn,
    Import.Name,
    Import.OwnerId,
    Import.OwnerIdDsc,
    Import.OwnerIdName,
    Import.OwnerIdType,
    Import.OwnerIdYomiName,
    Import.OwningBusinessUnit,
    Import.OwningUser,
    Import.SendNotification,
    SendNotificationPLTable.Value,
    Import.Sequence,
    Import.StateCode,
    StateCodePLTable.Value,
    Import.StatusCode,
    StatusCodePLTable.Value
from Import
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsImportPLTable on 
        (IsImportPLTable.AttributeName = 'isimport'
        and IsImportPLTable.ObjectTypeCode = 4410
        and IsImportPLTable.AttributeValue = Import.IsImport
        and IsImportPLTable.LangId = us.UILanguageId )
    left outer join StringMap ModeCodePLTable on 
        (ModeCodePLTable.AttributeName = 'modecode'
        and ModeCodePLTable.ObjectTypeCode = 4410
        and ModeCodePLTable.AttributeValue = Import.ModeCode
        and ModeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap SendNotificationPLTable on 
        (SendNotificationPLTable.AttributeName = 'sendnotification'
        and SendNotificationPLTable.ObjectTypeCode = 4410
        and SendNotificationPLTable.AttributeValue = Import.SendNotification
        and SendNotificationPLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4410
        and StateCodePLTable.AttributeValue = Import.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4410
        and StatusCodePLTable.AttributeValue = Import.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4410) pdm
where Import.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Import.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Import.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Import.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Import.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Import.ImportId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4410 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredSavedQuery]    Script Date: 04/11/2008 06:58:08 ******/




--
-- report view for savedquery
--
create view [dbo].[FilteredSavedQuery] (
    columnsetxml,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customizationlevel,
    description,
    fetchxml,
    inproduction,
    iscustomizable,
    iscustomizablename,
    isdefault,
    isdefaultname,
    isprivate,
    isquickfindquery,
    isquickfindqueryname,
    isuserdefined,
    isuserdefinedname,
    latestcolumnsetxml,
    latestdescription,
    latestfetchxml,
    latestlayoutxml,
    latestname,
    layoutxml,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    queryapi,
    queryappusage,
    querytype,
    returnedtypecode,
    savedqueryid,
    savedqueryidunique
) with view_metadata as 
select 
    SavedQuery.ColumnSetXml,
    SavedQuery.CreatedBy,
    SavedQuery.CreatedByDsc,
    SavedQuery.CreatedByName,
    SavedQuery.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SavedQuery.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SavedQuery.CreatedOn,
    SavedQuery.CustomizationLevel,
    coalesce(dbo.fn_GetLocalizedLabel(SavedQuery.SavedQueryId,'Description',us.UILanguageId),SavedQuery.Description),
    SavedQuery.FetchXml,
    SavedQuery.InProduction,
    SavedQuery.IsCustomizable,
    IsCustomizablePLTable.Value,
    SavedQuery.IsDefault,
    IsDefaultPLTable.Value,
    SavedQuery.IsPrivate,
    SavedQuery.IsQuickFindQuery,
    IsQuickFindQueryPLTable.Value,
    SavedQuery.IsUserDefined,
    IsUserDefinedPLTable.Value,
    SavedQuery.LatestColumnSetXml,
    SavedQuery.LatestDescription,
    SavedQuery.LatestFetchXml,
    SavedQuery.LatestLayoutXml,
    SavedQuery.LatestName,
    SavedQuery.LayoutXml,
    SavedQuery.ModifiedBy,
    SavedQuery.ModifiedByDsc,
    SavedQuery.ModifiedByName,
    SavedQuery.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SavedQuery.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SavedQuery.ModifiedOn,
    coalesce(dbo.fn_GetLocalizedLabel(SavedQuery.SavedQueryId,'Name',us.UILanguageId),SavedQuery.Name),
    SavedQuery.OrganizationId,
    SavedQuery.OrganizationIdDsc,
    SavedQuery.OrganizationIdName,
    SavedQuery.QueryAPI,
    SavedQuery.QueryAppUsage,
    SavedQuery.QueryType,
    SavedQuery.ReturnedTypeCode,
    SavedQuery.SavedQueryId,
    SavedQuery.SavedQueryIdUnique
from SavedQuery
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsCustomizablePLTable on 
        (IsCustomizablePLTable.AttributeName = 'iscustomizable'
        and IsCustomizablePLTable.ObjectTypeCode = 1039
        and IsCustomizablePLTable.AttributeValue = SavedQuery.IsCustomizable
        and IsCustomizablePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsDefaultPLTable on 
        (IsDefaultPLTable.AttributeName = 'isdefault'
        and IsDefaultPLTable.ObjectTypeCode = 1039
        and IsDefaultPLTable.AttributeValue = SavedQuery.IsDefault
        and IsDefaultPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsQuickFindQueryPLTable on 
        (IsQuickFindQueryPLTable.AttributeName = 'isquickfindquery'
        and IsQuickFindQueryPLTable.ObjectTypeCode = 1039
        and IsQuickFindQueryPLTable.AttributeValue = SavedQuery.IsQuickFindQuery
        and IsQuickFindQueryPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsUserDefinedPLTable on 
        (IsUserDefinedPLTable.AttributeName = 'isuserdefined'
        and IsUserDefinedPLTable.ObjectTypeCode = 1039
        and IsUserDefinedPLTable.AttributeValue = SavedQuery.IsUserDefined
        and IsUserDefinedPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1039) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SavedQuery.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredIncident]    Script Date: 04/11/2008 06:57:56 ******/




--
-- report view for incident
--
create view [dbo].[FilteredIncident] (
    accountid,
    accountiddsc,
    accountidname,
    accountidyominame,
    actualserviceunits,
    billedserviceunits,
    caseorigincode,
    caseorigincodename,
    casetypecode,
    casetypecodename,
    contactid,
    contactiddsc,
    contactidname,
    contactidyominame,
    contractdetailid,
    contractdetailiddsc,
    contractdetailidname,
    contractid,
    contractiddsc,
    contractidname,
    contractservicelevelcode,
    contractservicelevelcodename,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customerid,
    customeriddsc,
    customeridname,
    customeridtype,
    customersatisfactioncode,
    customersatisfactioncodename,
    description,
    followupby, 
    followupbyutc,
    importsequencenumber,
    incidentid,
    incidentstagecode,
    incidentstagecodename,
    isdecrementing,
    isdecrementingname,
    kbarticleid,
    kbarticleiddsc,
    kbarticleidname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    prioritycode,
    prioritycodename,
    productid,
    productiddsc,
    productidname,
    productserialnumber,
    responsiblecontactid,
    responsiblecontactiddsc,
    responsiblecontactidname,
    responsiblecontactidyominame,
    severitycode,
    severitycodename,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subjectid,
    subjectiddsc,
    subjectidname,
    ticketnumber,
    timezoneruleversionnumber,
    title,
    utcconversiontimezonecode
) with view_metadata as 
select 
    Incident.AccountId,
    Incident.AccountIdDsc,
    Incident.AccountIdName,
    Incident.AccountIdYomiName,
    Incident.ActualServiceUnits,
    Incident.BilledServiceUnits,
    Incident.CaseOriginCode,
    CaseOriginCodePLTable.Value,
    Incident.CaseTypeCode,
    CaseTypeCodePLTable.Value,
    Incident.ContactId,
    Incident.ContactIdDsc,
    Incident.ContactIdName,
    Incident.ContactIdYomiName,
    Incident.ContractDetailId,
    Incident.ContractDetailIdDsc,
    Incident.ContractDetailIdName,
    Incident.ContractId,
    Incident.ContractIdDsc,
    Incident.ContractIdName,
    Incident.ContractServiceLevelCode,
    ContractServiceLevelCodePLTable.Value,
    Incident.CreatedBy,
    Incident.CreatedByDsc,
    Incident.CreatedByName,
    Incident.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Incident.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Incident.CreatedOn,
    Incident.CustomerId,
    Incident.CustomerIdDsc,
    Incident.CustomerIdName,
    Incident.CustomerIdType,
    Incident.CustomerSatisfactionCode,
    CustomerSatisfactionCodePLTable.Value,
    Incident.Description,
    dbo.fn_UTCToTzSpecificLocalTime(Incident.FollowupBy,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Incident.FollowupBy,
    Incident.ImportSequenceNumber,
    Incident.IncidentId,
    Incident.IncidentStageCode,
    IncidentStageCodePLTable.Value,
    Incident.IsDecrementing,
    IsDecrementingPLTable.Value,
    Incident.KbArticleId,
    Incident.KbArticleIdDsc,
    Incident.KbArticleIdName,
    Incident.ModifiedBy,
    Incident.ModifiedByDsc,
    Incident.ModifiedByName,
    Incident.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Incident.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Incident.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(Incident.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Incident.OverriddenCreatedOn,
    Incident.OwnerId,
    Incident.OwnerIdDsc,
    Incident.OwnerIdName,
    Incident.OwnerIdType,
    Incident.OwnerIdYomiName,
    Incident.OwningBusinessUnit,
    Incident.OwningUser,
    Incident.PriorityCode,
    PriorityCodePLTable.Value,
    Incident.ProductId,
    Incident.ProductIdDsc,
    Incident.ProductIdName,
    Incident.ProductSerialNumber,
    Incident.ResponsibleContactId,
    Incident.ResponsibleContactIdDsc,
    Incident.ResponsibleContactIdName,
    Incident.ResponsibleContactIdYomiName,
    Incident.SeverityCode,
    SeverityCodePLTable.Value,
    Incident.StateCode,
    StateCodePLTable.Value,
    Incident.StatusCode,
    StatusCodePLTable.Value,
    Incident.SubjectId,
    Incident.SubjectIdDsc,
    Incident.SubjectIdName,
    Incident.TicketNumber,
    Incident.TimeZoneRuleVersionNumber,
    Incident.Title,
    Incident.UTCConversionTimeZoneCode
from Incident
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap CaseOriginCodePLTable on 
        (CaseOriginCodePLTable.AttributeName = 'caseorigincode'
        and CaseOriginCodePLTable.ObjectTypeCode = 112
        and CaseOriginCodePLTable.AttributeValue = Incident.CaseOriginCode
        and CaseOriginCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap CaseTypeCodePLTable on 
        (CaseTypeCodePLTable.AttributeName = 'casetypecode'
        and CaseTypeCodePLTable.ObjectTypeCode = 112
        and CaseTypeCodePLTable.AttributeValue = Incident.CaseTypeCode
        and CaseTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ContractServiceLevelCodePLTable on 
        (ContractServiceLevelCodePLTable.AttributeName = 'contractservicelevelcode'
        and ContractServiceLevelCodePLTable.ObjectTypeCode = 112
        and ContractServiceLevelCodePLTable.AttributeValue = Incident.ContractServiceLevelCode
        and ContractServiceLevelCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap CustomerSatisfactionCodePLTable on 
        (CustomerSatisfactionCodePLTable.AttributeName = 'customersatisfactioncode'
        and CustomerSatisfactionCodePLTable.ObjectTypeCode = 112
        and CustomerSatisfactionCodePLTable.AttributeValue = Incident.CustomerSatisfactionCode
        and CustomerSatisfactionCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IncidentStageCodePLTable on 
        (IncidentStageCodePLTable.AttributeName = 'incidentstagecode'
        and IncidentStageCodePLTable.ObjectTypeCode = 112
        and IncidentStageCodePLTable.AttributeValue = Incident.IncidentStageCode
        and IncidentStageCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsDecrementingPLTable on 
        (IsDecrementingPLTable.AttributeName = 'isdecrementing'
        and IsDecrementingPLTable.ObjectTypeCode = 112
        and IsDecrementingPLTable.AttributeValue = Incident.IsDecrementing
        and IsDecrementingPLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 112
        and PriorityCodePLTable.AttributeValue = Incident.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap SeverityCodePLTable on 
        (SeverityCodePLTable.AttributeName = 'severitycode'
        and SeverityCodePLTable.ObjectTypeCode = 112
        and SeverityCodePLTable.AttributeValue = Incident.SeverityCode
        and SeverityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 112
        and StateCodePLTable.AttributeValue = Incident.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 112
        and StatusCodePLTable.AttributeValue = Incident.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(112) pdm
where Incident.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Incident.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Incident.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Incident.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Incident.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Incident.IncidentId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 112 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredFixedMonthlyFiscalCalendar]    Script Date: 04/11/2008 06:57:55 ******/




--
-- report view for fixedmonthlyfiscalcalendar
--
create view [dbo].[FilteredFixedMonthlyFiscalCalendar] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    effectiveon, 
    effectiveonutc,
    exchangerate,
    fiscalperiodtype,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    period1,
    period1_base,
    period10,
    period10_base,
    period11,
    period11_base,
    period12,
    period12_base,
    period13,
    period13_base,
    period2,
    period2_base,
    period3,
    period3_base,
    period4,
    period4_base,
    period5,
    period5_base,
    period6,
    period6_base,
    period7,
    period7_base,
    period8,
    period8_base,
    period9,
    period9_base,
    salespersonid,
    salespersoniddsc,
    salespersonidname,
    salespersonidyominame,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    userfiscalcalendarid,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    UserFiscalCalendar.BusinessUnitId,
    UserFiscalCalendar.BusinessUnitIdDsc,
    UserFiscalCalendar.BusinessUnitIdName,
    UserFiscalCalendar.CreatedBy,
    UserFiscalCalendar.CreatedByDsc,
    UserFiscalCalendar.CreatedByName,
    UserFiscalCalendar.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.CreatedOn,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.EffectiveOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.EffectiveOn,
    UserFiscalCalendar.ExchangeRate,
    UserFiscalCalendar.FiscalPeriodType,
    UserFiscalCalendar.ModifiedBy,
    UserFiscalCalendar.ModifiedByDsc,
    UserFiscalCalendar.ModifiedByName,
    UserFiscalCalendar.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.ModifiedOn,
    UserFiscalCalendar.Period1,
    UserFiscalCalendar.Period1_Base,
    UserFiscalCalendar.Period10,
    UserFiscalCalendar.Period10_Base,
    UserFiscalCalendar.Period11,
    UserFiscalCalendar.Period11_Base,
    UserFiscalCalendar.Period12,
    UserFiscalCalendar.Period12_Base,
    UserFiscalCalendar.Period13,
    UserFiscalCalendar.Period13_Base,
    UserFiscalCalendar.Period2,
    UserFiscalCalendar.Period2_Base,
    UserFiscalCalendar.Period3,
    UserFiscalCalendar.Period3_Base,
    UserFiscalCalendar.Period4,
    UserFiscalCalendar.Period4_Base,
    UserFiscalCalendar.Period5,
    UserFiscalCalendar.Period5_Base,
    UserFiscalCalendar.Period6,
    UserFiscalCalendar.Period6_Base,
    UserFiscalCalendar.Period7,
    UserFiscalCalendar.Period7_Base,
    UserFiscalCalendar.Period8,
    UserFiscalCalendar.Period8_Base,
    UserFiscalCalendar.Period9,
    UserFiscalCalendar.Period9_Base,
    UserFiscalCalendar.SalesPersonId,
    UserFiscalCalendar.SalesPersonIdDsc,
    UserFiscalCalendar.SalesPersonIdName,
    UserFiscalCalendar.SalesPersonIdYomiName,
    UserFiscalCalendar.TimeZoneRuleVersionNumber,
    UserFiscalCalendar.TransactionCurrencyId,
    UserFiscalCalendar.TransactionCurrencyIdDsc,
    UserFiscalCalendar.TransactionCurrencyIdName,
    UserFiscalCalendar.UserFiscalCalendarId,
    UserFiscalCalendar.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from UserFiscalCalendar
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = UserFiscalCalendar.TransactionCurrencyId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(8) pdm
    where
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		UserFiscalCalendar.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		UserFiscalCalendar.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		UserFiscalCalendar.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredBusinessTask]    Script Date: 04/11/2008 06:57:49 ******/




--
-- report view for businesstask
--
create view [dbo].[FilteredBusinessTask] (
    actionurl,
    businesstaskid,
    createdby,
    createdbydsc,
    createdbyname,
    createdon, 
    createdonutc,
    description,
    helpurl,
    iconurl,
    languagecode,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    parentbusinesstaskid,
    parentbusinesstaskiddsc,
    parentbusinesstaskidname,
    privilege,
    privilegename,
    statecode,
    statecodename,
    statuscode,
    taskorder
) with view_metadata as 
select 
    BusinessTask.ActionUrl,
    BusinessTask.BusinessTaskId,
    BusinessTask.CreatedBy,
    BusinessTask.CreatedByDsc,
    BusinessTask.CreatedByName,
    dbo.fn_UTCToTzSpecificLocalTime(BusinessTask.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BusinessTask.CreatedOn,
    coalesce(dbo.fn_GetLocalizedLabel(BusinessTask.BusinessTaskId,'Description',us.UILanguageId),BusinessTask.Description),
    BusinessTask.HelpUrl,
    BusinessTask.IconUrl,
    BusinessTask.LanguageCode,
    BusinessTask.ModifiedBy,
    BusinessTask.ModifiedByDsc,
    BusinessTask.ModifiedByName,
    dbo.fn_UTCToTzSpecificLocalTime(BusinessTask.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BusinessTask.ModifiedOn,
    coalesce(dbo.fn_GetLocalizedLabel(BusinessTask.BusinessTaskId,'Name',us.UILanguageId),BusinessTask.Name),
    BusinessTask.OrganizationId,
    BusinessTask.OrganizationIdDsc,
    BusinessTask.OrganizationIdName,
    BusinessTask.ParentBusinessTaskId,
    BusinessTask.ParentBusinessTaskIdDsc,
    BusinessTask.ParentBusinessTaskIdName,
    BusinessTask.Privilege,
    PrivilegePLTable.Value,
    BusinessTask.statecode,
    statecodePLTable.Value,
    BusinessTask.statuscode,
    BusinessTask.TaskOrder
from BusinessTask
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap PrivilegePLTable on 
        (PrivilegePLTable.AttributeName = 'privilege'
        and PrivilegePLTable.ObjectTypeCode = 4901
        and PrivilegePLTable.AttributeValue = BusinessTask.Privilege
        and PrivilegePLTable.LangId = us.UILanguageId )
    left outer join StringMap statecodePLTable on 
        (statecodePLTable.AttributeName = 'statecode'
        and statecodePLTable.ObjectTypeCode = 4901
        and statecodePLTable.AttributeValue = BusinessTask.statecode
        and statecodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4901) pdm
where BusinessTask.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    BusinessTask.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredMonthlyFiscalCalendar]    Script Date: 04/11/2008 06:58:00 ******/




--
-- report view for monthlyfiscalcalendar
--
create view [dbo].[FilteredMonthlyFiscalCalendar] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    effectiveon, 
    effectiveonutc,
    exchangerate,
    fiscalperiodtype,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    month1,
    month1_base,
    month10,
    month10_base,
    month11,
    month11_base,
    month12,
    month12_base,
    month2,
    month2_base,
    month3,
    month3_base,
    month4,
    month4_base,
    month5,
    month5_base,
    month6,
    month6_base,
    month7,
    month7_base,
    month8,
    month8_base,
    month9,
    month9_base,
    salespersonid,
    salespersoniddsc,
    salespersonidname,
    salespersonidyominame,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    userfiscalcalendarid,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    UserFiscalCalendar.BusinessUnitId,
    UserFiscalCalendar.BusinessUnitIdDsc,
    UserFiscalCalendar.BusinessUnitIdName,
    UserFiscalCalendar.CreatedBy,
    UserFiscalCalendar.CreatedByDsc,
    UserFiscalCalendar.CreatedByName,
    UserFiscalCalendar.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.CreatedOn,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.EffectiveOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.EffectiveOn,
    UserFiscalCalendar.ExchangeRate,
    UserFiscalCalendar.FiscalPeriodType,
    UserFiscalCalendar.ModifiedBy,
    UserFiscalCalendar.ModifiedByDsc,
    UserFiscalCalendar.ModifiedByName,
    UserFiscalCalendar.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.ModifiedOn,
    UserFiscalCalendar.Period1,
    UserFiscalCalendar.Period1_Base,
    UserFiscalCalendar.Period10,
    UserFiscalCalendar.Period10_Base,
    UserFiscalCalendar.Period11,
    UserFiscalCalendar.Period11_Base,
    UserFiscalCalendar.Period12,
    UserFiscalCalendar.Period12_Base,
    UserFiscalCalendar.Period2,
    UserFiscalCalendar.Period2_Base,
    UserFiscalCalendar.Period3,
    UserFiscalCalendar.Period3_Base,
    UserFiscalCalendar.Period4,
    UserFiscalCalendar.Period4_Base,
    UserFiscalCalendar.Period5,
    UserFiscalCalendar.Period5_Base,
    UserFiscalCalendar.Period6,
    UserFiscalCalendar.Period6_Base,
    UserFiscalCalendar.Period7,
    UserFiscalCalendar.Period7_Base,
    UserFiscalCalendar.Period8,
    UserFiscalCalendar.Period8_Base,
    UserFiscalCalendar.Period9,
    UserFiscalCalendar.Period9_Base,
    UserFiscalCalendar.SalesPersonId,
    UserFiscalCalendar.SalesPersonIdDsc,
    UserFiscalCalendar.SalesPersonIdName,
    UserFiscalCalendar.SalesPersonIdYomiName,
    UserFiscalCalendar.TimeZoneRuleVersionNumber,
    UserFiscalCalendar.TransactionCurrencyId,
    UserFiscalCalendar.TransactionCurrencyIdDsc,
    UserFiscalCalendar.TransactionCurrencyIdName,
    UserFiscalCalendar.UserFiscalCalendarId,
    UserFiscalCalendar.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from UserFiscalCalendar
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = UserFiscalCalendar.TransactionCurrencyId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(8) pdm
    where
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		UserFiscalCalendar.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		UserFiscalCalendar.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		UserFiscalCalendar.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredBusinessUnitNewsArticle]    Script Date: 04/11/2008 06:57:50 ******/




--
-- report view for businessunitnewsarticle
--
create view [dbo].[FilteredBusinessUnitNewsArticle] (
    activeon, 
    activeonutc,
    activeuntil, 
    activeuntilutc,
    articletitle,
    articletypecode,
    articletypecodename,
    articleurl,
    businessunitnewsarticleid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    newsarticle,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    showonhomepage,
    showonhomepagename,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    dbo.fn_UTCToTzSpecificLocalTime(BusinessUnitNewsArticle.ActiveOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BusinessUnitNewsArticle.ActiveOn,
    dbo.fn_UTCToTzSpecificLocalTime(BusinessUnitNewsArticle.ActiveUntil,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BusinessUnitNewsArticle.ActiveUntil,
    BusinessUnitNewsArticle.ArticleTitle,
    BusinessUnitNewsArticle.ArticleTypeCode,
    ArticleTypeCodePLTable.Value,
    BusinessUnitNewsArticle.ArticleUrl,
    BusinessUnitNewsArticle.BusinessUnitNewsArticleId,
    BusinessUnitNewsArticle.CreatedBy,
    BusinessUnitNewsArticle.CreatedByDsc,
    BusinessUnitNewsArticle.CreatedByName,
    BusinessUnitNewsArticle.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(BusinessUnitNewsArticle.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BusinessUnitNewsArticle.CreatedOn,
    BusinessUnitNewsArticle.ImportSequenceNumber,
    BusinessUnitNewsArticle.ModifiedBy,
    BusinessUnitNewsArticle.ModifiedByDsc,
    BusinessUnitNewsArticle.ModifiedByName,
    BusinessUnitNewsArticle.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(BusinessUnitNewsArticle.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BusinessUnitNewsArticle.ModifiedOn,
    BusinessUnitNewsArticle.NewsArticle,
    BusinessUnitNewsArticle.OrganizationId,
    BusinessUnitNewsArticle.OrganizationIdDsc,
    BusinessUnitNewsArticle.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(BusinessUnitNewsArticle.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BusinessUnitNewsArticle.OverriddenCreatedOn,
    BusinessUnitNewsArticle.ShowOnHomepage,
    ShowOnHomepagePLTable.Value,
    BusinessUnitNewsArticle.TimeZoneRuleVersionNumber,
    BusinessUnitNewsArticle.UTCConversionTimeZoneCode
from BusinessUnitNewsArticle
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap ArticleTypeCodePLTable on 
        (ArticleTypeCodePLTable.AttributeName = 'articletypecode'
        and ArticleTypeCodePLTable.ObjectTypeCode = 132
        and ArticleTypeCodePLTable.AttributeValue = BusinessUnitNewsArticle.ArticleTypeCode
        and ArticleTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShowOnHomepagePLTable on 
        (ShowOnHomepagePLTable.AttributeName = 'showonhomepage'
        and ShowOnHomepagePLTable.ObjectTypeCode = 132
        and ShowOnHomepagePLTable.AttributeValue = BusinessUnitNewsArticle.ShowOnHomepage
        and ShowOnHomepagePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(132) pdm
where BusinessUnitNewsArticle.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    BusinessUnitNewsArticle.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredAnnualFiscalCalendar]    Script Date: 04/11/2008 06:57:48 ******/




--
-- report view for annualfiscalcalendar
--
create view [dbo].[FilteredAnnualFiscalCalendar] (
    annual,
    annual_base,
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    effectiveon, 
    effectiveonutc,
    exchangerate,
    fiscalperiodtype,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    salespersonid,
    salespersoniddsc,
    salespersonidname,
    salespersonidyominame,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    userfiscalcalendarid,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    UserFiscalCalendar.Period1,
    UserFiscalCalendar.Period1_Base,
    UserFiscalCalendar.BusinessUnitId,
    UserFiscalCalendar.BusinessUnitIdDsc,
    UserFiscalCalendar.BusinessUnitIdName,
    UserFiscalCalendar.CreatedBy,
    UserFiscalCalendar.CreatedByDsc,
    UserFiscalCalendar.CreatedByName,
    UserFiscalCalendar.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.CreatedOn,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.EffectiveOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.EffectiveOn,
    UserFiscalCalendar.ExchangeRate,
    UserFiscalCalendar.FiscalPeriodType,
    UserFiscalCalendar.ModifiedBy,
    UserFiscalCalendar.ModifiedByDsc,
    UserFiscalCalendar.ModifiedByName,
    UserFiscalCalendar.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.ModifiedOn,
    UserFiscalCalendar.SalesPersonId,
    UserFiscalCalendar.SalesPersonIdDsc,
    UserFiscalCalendar.SalesPersonIdName,
    UserFiscalCalendar.SalesPersonIdYomiName,
    UserFiscalCalendar.TimeZoneRuleVersionNumber,
    UserFiscalCalendar.TransactionCurrencyId,
    UserFiscalCalendar.TransactionCurrencyIdDsc,
    UserFiscalCalendar.TransactionCurrencyIdName,
    UserFiscalCalendar.UserFiscalCalendarId,
    UserFiscalCalendar.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from UserFiscalCalendar
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = UserFiscalCalendar.TransactionCurrencyId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(8) pdm
    where
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		UserFiscalCalendar.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		UserFiscalCalendar.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		UserFiscalCalendar.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredProduct]    Script Date: 04/11/2008 06:58:03 ******/




--
-- report view for product
--
create view [dbo].[FilteredProduct] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    currentcost,
    currentcost_base,
    defaultuomid,
    defaultuomiddsc,
    defaultuomidname,
    defaultuomscheduleid,
    defaultuomscheduleiddsc,
    defaultuomscheduleidname,
    description,
    exchangerate,
    importsequencenumber,
    iskit,
    iskitname,
    isstockitem,
    isstockitemname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    price,
    price_base,
    pricelevelid,
    priceleveliddsc,
    pricelevelidname,
    productid,
    productnumber,
    producttypecode,
    producttypecodename,
    producturl,
    quantitydecimal,
    quantityonhand,
    size,
    standardcost,
    standardcost_base,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    stockvolume,
    stockweight,
    subjectid,
    subjectiddsc,
    subjectidname,
    suppliername,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode,
    vendorname,
    vendorpartnumber,
crm_moneyformatstring
) with view_metadata as 
select 
    Product.CreatedBy,
    Product.CreatedByDsc,
    Product.CreatedByName,
    Product.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Product.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Product.CreatedOn,
    Product.CurrentCost,
    Product.CurrentCost_Base,
    Product.DefaultUoMId,
    Product.DefaultUoMIdDsc,
    Product.DefaultUoMIdName,
    Product.DefaultUoMScheduleId,
    Product.DefaultUoMScheduleIdDsc,
    Product.DefaultUoMScheduleIdName,
    Product.Description,
    Product.ExchangeRate,
    Product.ImportSequenceNumber,
    Product.IsKit,
    IsKitPLTable.Value,
    Product.IsStockItem,
    IsStockItemPLTable.Value,
    Product.ModifiedBy,
    Product.ModifiedByDsc,
    Product.ModifiedByName,
    Product.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Product.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Product.ModifiedOn,
    Product.Name,
    Product.OrganizationId,
    Product.OrganizationIdDsc,
    Product.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(Product.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Product.OverriddenCreatedOn,
    Product.Price,
    Product.Price_Base,
    Product.PriceLevelId,
    Product.PriceLevelIdDsc,
    Product.PriceLevelIdName,
    Product.ProductId,
    Product.ProductNumber,
    Product.ProductTypeCode,
    ProductTypeCodePLTable.Value,
    Product.ProductUrl,
    Product.QuantityDecimal,
    Product.QuantityOnHand,
    Product.Size,
    Product.StandardCost,
    Product.StandardCost_Base,
    Product.StateCode,
    StateCodePLTable.Value,
    Product.StatusCode,
    StatusCodePLTable.Value,
    Product.StockVolume,
    Product.StockWeight,
    Product.SubjectId,
    Product.SubjectIdDsc,
    Product.SubjectIdName,
    Product.SupplierName,
    Product.TimeZoneRuleVersionNumber,
    Product.TransactionCurrencyId,
    Product.TransactionCurrencyIdDsc,
    Product.TransactionCurrencyIdName,
    Product.UTCConversionTimeZoneCode,
    Product.VendorName,
    Product.VendorPartNumber,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from Product
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = Product.TransactionCurrencyId
    left outer join StringMap IsKitPLTable on 
        (IsKitPLTable.AttributeName = 'iskit'
        and IsKitPLTable.ObjectTypeCode = 1024
        and IsKitPLTable.AttributeValue = Product.IsKit
        and IsKitPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsStockItemPLTable on 
        (IsStockItemPLTable.AttributeName = 'isstockitem'
        and IsStockItemPLTable.ObjectTypeCode = 1024
        and IsStockItemPLTable.AttributeValue = Product.IsStockItem
        and IsStockItemPLTable.LangId = us.UILanguageId )
    left outer join StringMap ProductTypeCodePLTable on 
        (ProductTypeCodePLTable.AttributeName = 'producttypecode'
        and ProductTypeCodePLTable.ObjectTypeCode = 1024
        and ProductTypeCodePLTable.AttributeValue = Product.ProductTypeCode
        and ProductTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 1024
        and StateCodePLTable.AttributeValue = Product.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 1024
        and StatusCodePLTable.AttributeValue = Product.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1024) pdm
where Product.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    Product.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredContractTemplate]    Script Date: 04/11/2008 06:57:53 ******/




--
-- report view for contracttemplate
--
create view [dbo].[FilteredContractTemplate] (
    abbreviation,
    allotmenttypecode,
    allotmenttypecodename,
    billingfrequencycode,
    billingfrequencycodename,
    contractservicelevelcode,
    contractservicelevelcodename,
    contracttemplateid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    effectivitycalendar,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    usediscountaspercentage,
    usediscountaspercentagename
) with view_metadata as 
select 
    ContractTemplate.Abbreviation,
    ContractTemplate.AllotmentTypeCode,
    AllotmentTypeCodePLTable.Value,
    ContractTemplate.BillingFrequencyCode,
    BillingFrequencyCodePLTable.Value,
    ContractTemplate.ContractServiceLevelCode,
    ContractServiceLevelCodePLTable.Value,
    ContractTemplate.ContractTemplateId,
    ContractTemplate.CreatedBy,
    ContractTemplate.CreatedByDsc,
    ContractTemplate.CreatedByName,
    ContractTemplate.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ContractTemplate.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ContractTemplate.CreatedOn,
    ContractTemplate.Description,
    ContractTemplate.EffectivityCalendar,
    ContractTemplate.ImportSequenceNumber,
    ContractTemplate.ModifiedBy,
    ContractTemplate.ModifiedByDsc,
    ContractTemplate.ModifiedByName,
    ContractTemplate.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ContractTemplate.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ContractTemplate.ModifiedOn,
    ContractTemplate.Name,
    ContractTemplate.OrganizationId,
    ContractTemplate.OrganizationIdDsc,
    ContractTemplate.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(ContractTemplate.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ContractTemplate.OverriddenCreatedOn,
    ContractTemplate.UseDiscountAsPercentage,
    UseDiscountAsPercentagePLTable.Value
from ContractTemplate
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap AllotmentTypeCodePLTable on 
        (AllotmentTypeCodePLTable.AttributeName = 'allotmenttypecode'
        and AllotmentTypeCodePLTable.ObjectTypeCode = 2011
        and AllotmentTypeCodePLTable.AttributeValue = ContractTemplate.AllotmentTypeCode
        and AllotmentTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap BillingFrequencyCodePLTable on 
        (BillingFrequencyCodePLTable.AttributeName = 'billingfrequencycode'
        and BillingFrequencyCodePLTable.ObjectTypeCode = 2011
        and BillingFrequencyCodePLTable.AttributeValue = ContractTemplate.BillingFrequencyCode
        and BillingFrequencyCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ContractServiceLevelCodePLTable on 
        (ContractServiceLevelCodePLTable.AttributeName = 'contractservicelevelcode'
        and ContractServiceLevelCodePLTable.ObjectTypeCode = 2011
        and ContractServiceLevelCodePLTable.AttributeValue = ContractTemplate.ContractServiceLevelCode
        and ContractServiceLevelCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap UseDiscountAsPercentagePLTable on 
        (UseDiscountAsPercentagePLTable.AttributeName = 'usediscountaspercentage'
        and UseDiscountAsPercentagePLTable.ObjectTypeCode = 2011
        and UseDiscountAsPercentagePLTable.AttributeValue = ContractTemplate.UseDiscountAsPercentage
        and UseDiscountAsPercentagePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(2011) pdm
where ContractTemplate.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    ContractTemplate.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredOpportunityProduct]    Script Date: 04/11/2008 06:58:01 ******/




--
-- report view for opportunityproduct
--
create view [dbo].[FilteredOpportunityProduct] (
    baseamount,
    baseamount_base,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    exchangerate,
    extendedamount,
    extendedamount_base,
    importsequencenumber,
    ispriceoverridden,
    ispriceoverriddenname,
    isproductoverridden,
    isproductoverriddenname,
    manualdiscountamount,
    manualdiscountamount_base,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    opportunityid,
    opportunityiddsc,
    opportunityidname,
    opportunityproductid,
    opportunitystatecode,
    opportunitystatecodename,
    overriddencreatedon, 
    overriddencreatedonutc,
    owningbusinessunit,
    owninguser,
    priceperunit,
    priceperunit_base,
    pricingerrorcode,
    pricingerrorcodename,
    productdescription,
    productid,
    productiddsc,
    productidname,
    quantity,
    tax,
    tax_base,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    uomid,
    uomiddsc,
    uomidname,
    utcconversiontimezonecode,
    volumediscountamount,
    volumediscountamount_base,
crm_moneyformatstring
) with view_metadata as 
select 
    OpportunityProduct.BaseAmount,
    OpportunityProduct.BaseAmount_Base,
    OpportunityProduct.CreatedBy,
    OpportunityProduct.CreatedByDsc,
    OpportunityProduct.CreatedByName,
    OpportunityProduct.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(OpportunityProduct.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OpportunityProduct.CreatedOn,
    OpportunityProduct.Description,
    OpportunityProduct.ExchangeRate,
    OpportunityProduct.ExtendedAmount,
    OpportunityProduct.ExtendedAmount_Base,
    OpportunityProduct.ImportSequenceNumber,
    OpportunityProduct.IsPriceOverridden,
    IsPriceOverriddenPLTable.Value,
    OpportunityProduct.IsProductOverridden,
    IsProductOverriddenPLTable.Value,
    OpportunityProduct.ManualDiscountAmount,
    OpportunityProduct.ManualDiscountAmount_Base,
    OpportunityProduct.ModifiedBy,
    OpportunityProduct.ModifiedByDsc,
    OpportunityProduct.ModifiedByName,
    OpportunityProduct.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(OpportunityProduct.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OpportunityProduct.ModifiedOn,
    OpportunityProduct.OpportunityId,
    OpportunityProduct.OpportunityIdDsc,
    OpportunityProduct.OpportunityIdName,
    OpportunityProduct.OpportunityProductId,
    OpportunityProduct.OpportunityStateCode,
    OpportunityStateCodePLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(OpportunityProduct.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    OpportunityProduct.OverriddenCreatedOn,
    OpportunityProduct.OwningBusinessUnit,
    OpportunityProduct.OwningUser,
    OpportunityProduct.PricePerUnit,
    OpportunityProduct.PricePerUnit_Base,
    OpportunityProduct.PricingErrorCode,
    PricingErrorCodePLTable.Value,
    OpportunityProduct.ProductDescription,
    OpportunityProduct.ProductId,
    OpportunityProduct.ProductIdDsc,
    OpportunityProduct.ProductIdName,
    OpportunityProduct.Quantity,
    OpportunityProduct.Tax,
    OpportunityProduct.Tax_Base,
    OpportunityProduct.TimeZoneRuleVersionNumber,
    OpportunityProduct.TransactionCurrencyId,
    OpportunityProduct.TransactionCurrencyIdDsc,
    OpportunityProduct.TransactionCurrencyIdName,
    OpportunityProduct.UoMId,
    OpportunityProduct.UoMIdDsc,
    OpportunityProduct.UoMIdName,
    OpportunityProduct.UTCConversionTimeZoneCode,
    OpportunityProduct.VolumeDiscountAmount,
    OpportunityProduct.VolumeDiscountAmount_Base,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from OpportunityProduct
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = OpportunityProduct.TransactionCurrencyId
    left outer join StringMap IsPriceOverriddenPLTable on 
        (IsPriceOverriddenPLTable.AttributeName = 'ispriceoverridden'
        and IsPriceOverriddenPLTable.ObjectTypeCode = 1083
        and IsPriceOverriddenPLTable.AttributeValue = OpportunityProduct.IsPriceOverridden
        and IsPriceOverriddenPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsProductOverriddenPLTable on 
        (IsProductOverriddenPLTable.AttributeName = 'isproductoverridden'
        and IsProductOverriddenPLTable.ObjectTypeCode = 1083
        and IsProductOverriddenPLTable.AttributeValue = OpportunityProduct.IsProductOverridden
        and IsProductOverriddenPLTable.LangId = us.UILanguageId )
    left outer join StringMap OpportunityStateCodePLTable on 
        (OpportunityStateCodePLTable.AttributeName = 'opportunitystatecode'
        and OpportunityStateCodePLTable.ObjectTypeCode = 1083
        and OpportunityStateCodePLTable.AttributeValue = OpportunityProduct.OpportunityStateCode
        and OpportunityStateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PricingErrorCodePLTable on 
        (PricingErrorCodePLTable.AttributeName = 'pricingerrorcode'
        and PricingErrorCodePLTable.ObjectTypeCode = 1083
        and PricingErrorCodePLTable.AttributeValue = OpportunityProduct.PricingErrorCode
        and PricingErrorCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(3) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    OpportunityProduct.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		OpportunityProduct.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		OpportunityProduct.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		OpportunityProduct.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    OpportunityProduct.OpportunityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 3 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredQuoteClose]    Script Date: 04/11/2008 06:58:05 ******/




--
-- report view for quoteclose
--
create view [dbo].[FilteredQuoteClose] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    category,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    importsequencenumber,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    quoteid,
    quoteiddsc,
    quoteidname,
    quoteidtype,
    quotenumber,
    revision,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    QuoteClose.ActivityId,
    QuoteClose.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(QuoteClose.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QuoteClose.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(QuoteClose.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QuoteClose.ActualStart,
    QuoteClose.Category,
    QuoteClose.CreatedBy,
    QuoteClose.CreatedByDsc,
    QuoteClose.CreatedByName,
    QuoteClose.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(QuoteClose.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QuoteClose.CreatedOn,
    QuoteClose.Description,
    QuoteClose.ImportSequenceNumber,
    QuoteClose.IsBilled,
    IsBilledPLTable.Value,
    QuoteClose.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    QuoteClose.ModifiedBy,
    QuoteClose.ModifiedByDsc,
    QuoteClose.ModifiedByName,
    QuoteClose.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(QuoteClose.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QuoteClose.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(QuoteClose.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QuoteClose.OverriddenCreatedOn,
    QuoteClose.OwnerId,
    QuoteClose.OwnerIdDsc,
    QuoteClose.OwnerIdName,
    QuoteClose.OwnerIdType,
    QuoteClose.OwnerIdYomiName,
    QuoteClose.OwningBusinessUnit,
    QuoteClose.OwningUser,
    QuoteClose.QuoteId,
    QuoteClose.QuoteIdDsc,
    QuoteClose.QuoteIdName,
    QuoteClose.QuoteIdType,
    QuoteClose.QuoteNumber,
    QuoteClose.Revision,
    QuoteClose.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(QuoteClose.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QuoteClose.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(QuoteClose.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QuoteClose.ScheduledStart,
    QuoteClose.ServiceId,
    QuoteClose.StateCode,
    StateCodePLTable.Value,
    QuoteClose.StatusCode,
    StatusCodePLTable.Value,
    QuoteClose.Subcategory,
    QuoteClose.Subject,
    QuoteClose.TimeZoneRuleVersionNumber,
    QuoteClose.UTCConversionTimeZoneCode
from QuoteClose
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4211
        and IsBilledPLTable.AttributeValue = QuoteClose.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4211
        and IsWorkflowCreatedPLTable.AttributeValue = QuoteClose.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4211
        and StateCodePLTable.AttributeValue = QuoteClose.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4211
        and StatusCodePLTable.AttributeValue = QuoteClose.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where QuoteClose.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    QuoteClose.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		QuoteClose.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		QuoteClose.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		QuoteClose.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    QuoteClose.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredService]    Script Date: 04/11/2008 06:58:11 ******/




--
-- report view for service
--
create view [dbo].[FilteredService] (
    anchoroffset,
    calendarid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    duration,
    granularity,
    importsequencenumber,
    initialstatuscode,
    initialstatuscodename,
    isschedulable,
    isschedulablename,
    isvisible,
    isvisiblename,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    resourcespecid,
    resourcespeciddsc,
    resourcespecidname,
    serviceid,
    showresources,
    showresourcesname,
    strategyid
) with view_metadata as 
select 
    Service.AnchorOffset,
    Service.CalendarId,
    Service.CreatedBy,
    Service.CreatedByDsc,
    Service.CreatedByName,
    Service.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Service.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Service.CreatedOn,
    Service.Description,
    Service.Duration,
    Service.Granularity,
    Service.ImportSequenceNumber,
    Service.InitialStatusCode,
    InitialStatusCodePLTable.Value,
    Service.IsSchedulable,
    IsSchedulablePLTable.Value,
    Service.IsVisible,
    IsVisiblePLTable.Value,
    Service.ModifiedBy,
    Service.ModifiedByDsc,
    Service.ModifiedByName,
    Service.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Service.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Service.ModifiedOn,
    Service.Name,
    Service.OrganizationId,
    Service.OrganizationIdDsc,
    Service.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(Service.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Service.OverriddenCreatedOn,
    Service.ResourceSpecId,
    Service.ResourceSpecIdDsc,
    Service.ResourceSpecIdName,
    Service.ServiceId,
    Service.ShowResources,
    ShowResourcesPLTable.Value,
    Service.StrategyId
from Service
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap InitialStatusCodePLTable on 
        (InitialStatusCodePLTable.AttributeName = 'initialstatuscode'
        and InitialStatusCodePLTable.ObjectTypeCode = 4001
        and InitialStatusCodePLTable.AttributeValue = Service.InitialStatusCode
        and InitialStatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsSchedulablePLTable on 
        (IsSchedulablePLTable.AttributeName = 'isschedulable'
        and IsSchedulablePLTable.ObjectTypeCode = 4001
        and IsSchedulablePLTable.AttributeValue = Service.IsSchedulable
        and IsSchedulablePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsVisiblePLTable on 
        (IsVisiblePLTable.AttributeName = 'isvisible'
        and IsVisiblePLTable.ObjectTypeCode = 4001
        and IsVisiblePLTable.AttributeValue = Service.IsVisible
        and IsVisiblePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShowResourcesPLTable on 
        (ShowResourcesPLTable.AttributeName = 'showresources'
        and ShowResourcesPLTable.ObjectTypeCode = 4001
        and ShowResourcesPLTable.AttributeValue = Service.ShowResources
        and ShowResourcesPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4001) pdm
where Service.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    Service.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredActivityParty]    Script Date: 04/11/2008 06:57:47 ******/




--
-- report view for activityparty
--
create view [dbo].[FilteredActivityParty] (
    activityid,
    activitypartyid,
    addressused,
    donotemail,
    donotemailname,
    donotfax,
    donotfaxname,
    donotphone,
    donotphonename,
    donotpostalmail,
    donotpostalmailname,
    effort,
    exchangeentryid,
    participationtypemask,
    participationtypemaskname,
    partyid,
    partyiddsc,
    partyidname,
    partyobjecttypecode,
    resourcespecid,
    resourcespeciddsc,
    resourcespecidname,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc
) with view_metadata as 
select 
    ActivityParty.ActivityId,
    ActivityParty.ActivityPartyId,
    ActivityParty.AddressUsed,
    ActivityParty.DoNotEmail,
    DoNotEmailPLTable.Value,
    ActivityParty.DoNotFax,
    DoNotFaxPLTable.Value,
    ActivityParty.DoNotPhone,
    DoNotPhonePLTable.Value,
    ActivityParty.DoNotPostalMail,
    DoNotPostalMailPLTable.Value,
    ActivityParty.Effort,
    ActivityParty.ExchangeEntryId,
    ActivityParty.ParticipationTypeMask,
    ParticipationTypeMaskPLTable.Value,
    ActivityParty.PartyId,
    ActivityParty.PartyIdDsc,
    ActivityParty.PartyIdName,
    ActivityParty.PartyObjectTypeCode,
    ActivityParty.ResourceSpecId,
    ActivityParty.ResourceSpecIdDsc,
    ActivityParty.ResourceSpecIdName,
    dbo.fn_UTCToTzSpecificLocalTime(ActivityParty.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ActivityParty.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(ActivityParty.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ActivityParty.ScheduledStart
from ActivityParty
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap DoNotEmailPLTable on 
        (DoNotEmailPLTable.AttributeName = 'donotemail'
        and DoNotEmailPLTable.ObjectTypeCode = 135
        and DoNotEmailPLTable.AttributeValue = ActivityParty.DoNotEmail
        and DoNotEmailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotFaxPLTable on 
        (DoNotFaxPLTable.AttributeName = 'donotfax'
        and DoNotFaxPLTable.ObjectTypeCode = 135
        and DoNotFaxPLTable.AttributeValue = ActivityParty.DoNotFax
        and DoNotFaxPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotPhonePLTable on 
        (DoNotPhonePLTable.AttributeName = 'donotphone'
        and DoNotPhonePLTable.ObjectTypeCode = 135
        and DoNotPhonePLTable.AttributeValue = ActivityParty.DoNotPhone
        and DoNotPhonePLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotPostalMailPLTable on 
        (DoNotPostalMailPLTable.AttributeName = 'donotpostalmail'
        and DoNotPostalMailPLTable.ObjectTypeCode = 135
        and DoNotPostalMailPLTable.AttributeValue = ActivityParty.DoNotPostalMail
        and DoNotPostalMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap ParticipationTypeMaskPLTable on 
        (ParticipationTypeMaskPLTable.AttributeName = 'participationtypemask'
        and ParticipationTypeMaskPLTable.ObjectTypeCode = 135
        and ParticipationTypeMaskPLTable.AttributeValue = ActivityParty.ParticipationTypeMask
        and ParticipationTypeMaskPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ActivityParty.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ActivityParty.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ActivityParty.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ActivityParty.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ActivityParty.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredOrganization]    Script Date: 04/11/2008 06:58:01 ******/




--
-- report view for organization
--
create view [dbo].[FilteredOrganization] (
    acknowledgementtemplateid,
    acknowledgementtemplateiddsc,
    acknowledgementtemplateidname,
    allowaddressbooksyncs,
    allowautoresponsecreation,
    allowautounsubscribe,
    allowautounsubscribeacknowledgement,
    allowmarketingemailexecution,
    allowofflinescheduledsyncs,
    allowoutlookscheduledsyncs,
    allowunresolvedpartiesonemailsend,
    allowwebexcelexport,
    amdesignator,
    basecurrencyid,
    basecurrencyiddsc,
    basecurrencyidname,
    blockedattachments,
    bulkoperationprefix,
    businessclosurecalendarid,
    calendartype,
    campaignprefix,
    caseprefix,
    contractprefix,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    currencydecimalprecision,
    currencydisplayoption,
    currencyformatcode,
    currencyformatcodename,
    currencysymbol,
    currentbulkoperationnumber,
    currentcampaignnumber,
    currentcasenumber,
    currentcontractnumber,
    currentimportsequencenumber,
    currentinvoicenumber,
    currentkbnumber,
    currentordernumber,
    currentparsedtablenumber,
    currentquotenumber,
    dateformatcode,
    dateformatcodename,
    dateformatstring,
    dateseparator,
    decimalsymbol,
    disabledreason,
    emailsendpollingperiod,
    enablepricingoncreate,
    featureset,
    fiscalcalendarstart, 
    fiscalcalendarstartutc,
    fiscalperiodformat,
    fiscalperiodtype,
    fiscalsettingsupdated,
    fiscalsettingsupdatedname,
    fiscalyeardisplaycode,
    fiscalyearformat,
    fiscalyearperiodconnect,
    fullnameconventioncode,
    fullnameconventioncodename,
    grantaccesstonetworkservice,
    ignoreinternalemail,
    integrationuserid,
    invoiceprefix,
    isappmode,
    isdisabled,
    isdisabledname,
    isduplicatedetectionenabled,
    isduplicatedetectionenabledforimport,
    isduplicatedetectionenabledforofflinesync,
    isduplicatedetectionenabledforonlinecreateupdate,
    isfiscalperiodmonthbased,
    ispresenceenabled,
    ispresenceenabledname,
    isregistered,
    isregisteredname,
    issopintegrationenabled,
    isvintegrationcode,
    kbprefix,
    languagecode,
    languagecodename,
    localeid,
    longdateformatcode,
    maxappointmentdurationdays,
    maximumtrackingnumber,
    maxrecordsforexporttoexcel,
    maxuploadfilesize,
    minaddressbooksyncinterval,
    minofflinesyncinterval,
    minoutlooksyncinterval,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    negativecurrencyformatcode,
    negativeformatcode,
    negativeformatcodename,
    nexttrackingnumber,
    numberformat,
    numbergroupformat,
    numberseparator,
    orderprefix,
    organizationid,
    parsedtablecolumnprefix,
    parsedtableprefix,
    picture,
    pmdesignator,
    pricingdecimalprecision,
    privilegeusergroupid,
    privreportinggroupid,
    privreportinggroupname,
    quoteprefix,
    referencesitemapxml,
    rendersecureiframeforemail,
    reportinggroupid,
    reportinggroupname,
    schemanameprefix,
    sharetopreviousowneronassign,
    showweeknumber,
    showweeknumbername,
    sitemapxml,
    sortid,
    sqlaccessgroupid,
    sqlaccessgroupname,
    sqmenabled,
    supportuserid,
    systemuserid,
    tagmaxaggressivecycles,
    tagpollingperiod,
    timeformatcode,
    timeformatcodename,
    timeformatstring,
    timeseparator,
    timezoneruleversionnumber,
    tokenexpiry,
    trackingprefix,
    trackingtokenidbase,
    trackingtokeniddigits,
    uniquespecifierlength,
    usergroupid,
    utcconversiontimezonecode,
    v3calloutconfighash,
    weekstartdaycode,
    weekstartdaycodename,
    yearstartweekcode
) with view_metadata as 
select 
    Organization.AcknowledgementTemplateId,
    Organization.AcknowledgementTemplateIdDsc,
    Organization.AcknowledgementTemplateIdName,
    Organization.AllowAddressBookSyncs,
    Organization.AllowAutoResponseCreation,
    Organization.AllowAutoUnsubscribe,
    Organization.AllowAutoUnsubscribeAcknowledgement,
    Organization.AllowMarketingEmailExecution,
    Organization.AllowOfflineScheduledSyncs,
    Organization.AllowOutlookScheduledSyncs,
    Organization.AllowUnresolvedPartiesOnEmailSend,
    Organization.AllowWebExcelExport,
    Organization.AMDesignator,
    Organization.BaseCurrencyId,
    Organization.BaseCurrencyIdDsc,
    Organization.BaseCurrencyIdName,
    Organization.BlockedAttachments,
    Organization.BulkOperationPrefix,
    Organization.BusinessClosureCalendarId,
    Organization.CalendarType,
    Organization.CampaignPrefix,
    Organization.CasePrefix,
    Organization.ContractPrefix,
    Organization.CreatedBy,
    Organization.CreatedByDsc,
    Organization.CreatedByName,
    Organization.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Organization.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Organization.CreatedOn,
    Organization.CurrencyDecimalPrecision,
    Organization.CurrencyDisplayOption,
    Organization.CurrencyFormatCode,
    CurrencyFormatCodePLTable.Value,
    Organization.CurrencySymbol,
    Organization.CurrentBulkOperationNumber,
    Organization.CurrentCampaignNumber,
    Organization.CurrentCaseNumber,
    Organization.CurrentContractNumber,
    Organization.CurrentImportSequenceNumber,
    Organization.CurrentInvoiceNumber,
    Organization.CurrentKbNumber,
    Organization.CurrentOrderNumber,
    Organization.CurrentParsedTableNumber,
    Organization.CurrentQuoteNumber,
    Organization.DateFormatCode,
    DateFormatCodePLTable.Value,
    Organization.DateFormatString,
    Organization.DateSeparator,
    Organization.DecimalSymbol,
    Organization.DisabledReason,
    Organization.EmailSendPollingPeriod,
    Organization.EnablePricingOnCreate,
    Organization.FeatureSet,
    dbo.fn_UTCToTzSpecificLocalTime(Organization.FiscalCalendarStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Organization.FiscalCalendarStart,
    Organization.FiscalPeriodFormat,
    Organization.FiscalPeriodType,
    Organization.FiscalSettingsUpdated,
    FiscalSettingsUpdatedPLTable.Value,
    Organization.FiscalYearDisplayCode,
    Organization.FiscalYearFormat,
    Organization.FiscalYearPeriodConnect,
    Organization.FullNameConventionCode,
    FullNameConventionCodePLTable.Value,
    Organization.GrantAccessToNetworkService,
    Organization.IgnoreInternalEmail,
    Organization.IntegrationUserId,
    Organization.InvoicePrefix,
    Organization.IsAppMode,
    Organization.IsDisabled,
    IsDisabledPLTable.Value,
    Organization.IsDuplicateDetectionEnabled,
    Organization.IsDuplicateDetectionEnabledForImport,
    Organization.IsDuplicateDetectionEnabledForOfflineSync,
    Organization.IsDuplicateDetectionEnabledForOnlineCreateUpdate,
    Organization.IsFiscalPeriodMonthBased,
    Organization.IsPresenceEnabled,
    IsPresenceEnabledPLTable.Value,
    Organization.IsRegistered,
    IsRegisteredPLTable.Value,
    Organization.IsSOPIntegrationEnabled,
    Organization.ISVIntegrationCode,
    Organization.KbPrefix,
    Organization.LanguageCode,
    LanguageCodePLTable.Value,
    Organization.LocaleId,
    Organization.LongDateFormatCode,
    Organization.MaxAppointmentDurationDays,
    Organization.MaximumTrackingNumber,
    Organization.MaxRecordsForExportToExcel,
    Organization.MaxUploadFileSize,
    Organization.MinAddressBookSyncInterval,
    Organization.MinOfflineSyncInterval,
    Organization.MinOutlookSyncInterval,
    Organization.ModifiedBy,
    Organization.ModifiedByDsc,
    Organization.ModifiedByName,
    Organization.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Organization.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Organization.ModifiedOn,
    Organization.Name,
    Organization.NegativeCurrencyFormatCode,
    Organization.NegativeFormatCode,
    NegativeFormatCodePLTable.Value,
    Organization.NextTrackingNumber,
    Organization.NumberFormat,
    Organization.NumberGroupFormat,
    Organization.NumberSeparator,
    Organization.OrderPrefix,
    Organization.OrganizationId,
    Organization.ParsedTableColumnPrefix,
    Organization.ParsedTablePrefix,
    Organization.Picture,
    Organization.PMDesignator,
    Organization.PricingDecimalPrecision,
    Organization.PrivilegeUserGroupId,
    Organization.PrivReportingGroupId,
    Organization.PrivReportingGroupName,
    Organization.QuotePrefix,
    Organization.ReferenceSiteMapXml,
    Organization.RenderSecureIFrameForEmail,
    Organization.ReportingGroupId,
    Organization.ReportingGroupName,
    Organization.SchemaNamePrefix,
    Organization.ShareToPreviousOwnerOnAssign,
    Organization.ShowWeekNumber,
    ShowWeekNumberPLTable.Value,
    Organization.SiteMapXml,
    Organization.SortId,
    Organization.SqlAccessGroupId,
    Organization.SqlAccessGroupName,
    Organization.SQMEnabled,
    Organization.SupportUserId,
    Organization.SystemUserId,
    Organization.TagMaxAggressiveCycles,
    Organization.TagPollingPeriod,
    Organization.TimeFormatCode,
    TimeFormatCodePLTable.Value,
    Organization.TimeFormatString,
    Organization.TimeSeparator,
    Organization.TimeZoneRuleVersionNumber,
    Organization.TokenExpiry,
    Organization.TrackingPrefix,
    Organization.TrackingTokenIdBase,
    Organization.TrackingTokenIdDigits,
    Organization.UniqueSpecifierLength,
    Organization.UserGroupId,
    Organization.UTCConversionTimeZoneCode,
    Organization.V3CalloutConfigHash,
    Organization.WeekStartDayCode,
    WeekStartDayCodePLTable.Value,
    Organization.YearStartWeekCode
from Organization
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap CurrencyFormatCodePLTable on 
        (CurrencyFormatCodePLTable.AttributeName = 'currencyformatcode'
        and CurrencyFormatCodePLTable.ObjectTypeCode = 1019
        and CurrencyFormatCodePLTable.AttributeValue = Organization.CurrencyFormatCode
        and CurrencyFormatCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap DateFormatCodePLTable on 
        (DateFormatCodePLTable.AttributeName = 'dateformatcode'
        and DateFormatCodePLTable.ObjectTypeCode = 1019
        and DateFormatCodePLTable.AttributeValue = Organization.DateFormatCode
        and DateFormatCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap FiscalSettingsUpdatedPLTable on 
        (FiscalSettingsUpdatedPLTable.AttributeName = 'fiscalsettingsupdated'
        and FiscalSettingsUpdatedPLTable.ObjectTypeCode = 1019
        and FiscalSettingsUpdatedPLTable.AttributeValue = Organization.FiscalSettingsUpdated
        and FiscalSettingsUpdatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap FullNameConventionCodePLTable on 
        (FullNameConventionCodePLTable.AttributeName = 'fullnameconventioncode'
        and FullNameConventionCodePLTable.ObjectTypeCode = 1019
        and FullNameConventionCodePLTable.AttributeValue = Organization.FullNameConventionCode
        and FullNameConventionCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsDisabledPLTable on 
        (IsDisabledPLTable.AttributeName = 'isdisabled'
        and IsDisabledPLTable.ObjectTypeCode = 1019
        and IsDisabledPLTable.AttributeValue = Organization.IsDisabled
        and IsDisabledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsPresenceEnabledPLTable on 
        (IsPresenceEnabledPLTable.AttributeName = 'ispresenceenabled'
        and IsPresenceEnabledPLTable.ObjectTypeCode = 1019
        and IsPresenceEnabledPLTable.AttributeValue = Organization.IsPresenceEnabled
        and IsPresenceEnabledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsRegisteredPLTable on 
        (IsRegisteredPLTable.AttributeName = 'isregistered'
        and IsRegisteredPLTable.ObjectTypeCode = 1019
        and IsRegisteredPLTable.AttributeValue = Organization.IsRegistered
        and IsRegisteredPLTable.LangId = us.UILanguageId )
    left outer join StringMap LanguageCodePLTable on 
        (LanguageCodePLTable.AttributeName = 'languagecode'
        and LanguageCodePLTable.ObjectTypeCode = 1019
        and LanguageCodePLTable.AttributeValue = Organization.LanguageCode
        and LanguageCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap NegativeFormatCodePLTable on 
        (NegativeFormatCodePLTable.AttributeName = 'negativeformatcode'
        and NegativeFormatCodePLTable.ObjectTypeCode = 1019
        and NegativeFormatCodePLTable.AttributeValue = Organization.NegativeFormatCode
        and NegativeFormatCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShowWeekNumberPLTable on 
        (ShowWeekNumberPLTable.AttributeName = 'showweeknumber'
        and ShowWeekNumberPLTable.ObjectTypeCode = 1019
        and ShowWeekNumberPLTable.AttributeValue = Organization.ShowWeekNumber
        and ShowWeekNumberPLTable.LangId = us.UILanguageId )
    left outer join StringMap TimeFormatCodePLTable on 
        (TimeFormatCodePLTable.AttributeName = 'timeformatcode'
        and TimeFormatCodePLTable.ObjectTypeCode = 1019
        and TimeFormatCodePLTable.AttributeValue = Organization.TimeFormatCode
        and TimeFormatCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap WeekStartDayCodePLTable on 
        (WeekStartDayCodePLTable.AttributeName = 'weekstartdaycode'
        and WeekStartDayCodePLTable.ObjectTypeCode = 1019
        and WeekStartDayCodePLTable.AttributeValue = Organization.WeekStartDayCode
        and WeekStartDayCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1019) pdm
where Organization.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    Organization.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredWorkflowLog]    Script Date: 04/11/2008 06:58:15 ******/




--
-- report view for workflowlog
--
create view [dbo].[FilteredWorkflowLog] (
    activityname,
    asyncoperationid,
    asyncoperationidname,
    completedon, 
    completedonutc,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    errorcode,
    message,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    owningbusinessunit,
    owninguser,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    stagename,
    status,
    statusname,
    stepname,
    workflowlogid
) with view_metadata as 
select 
    WorkflowLog.ActivityName,
    WorkflowLog.AsyncOperationId,
    WorkflowLog.AsyncOperationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(WorkflowLog.CompletedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    WorkflowLog.CompletedOn,
    WorkflowLog.CreatedBy,
    WorkflowLog.CreatedByDsc,
    WorkflowLog.CreatedByName,
    WorkflowLog.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(WorkflowLog.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    WorkflowLog.CreatedOn,
    WorkflowLog.Description,
    WorkflowLog.ErrorCode,
    WorkflowLog.Message,
    WorkflowLog.ModifiedBy,
    WorkflowLog.ModifiedByDsc,
    WorkflowLog.ModifiedByName,
    WorkflowLog.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(WorkflowLog.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    WorkflowLog.ModifiedOn,
    WorkflowLog.OwningBusinessUnit,
    WorkflowLog.OwningUser,
    WorkflowLog.RegardingObjectId,
    WorkflowLog.RegardingObjectIdDsc,
    WorkflowLog.RegardingObjectIdName,
    WorkflowLog.RegardingObjectIdYomiName,
    WorkflowLog.RegardingObjectTypeCode,
    WorkflowLog.StageName,
    WorkflowLog.Status,
    StatusPLTable.Value,
    WorkflowLog.StepName,
    WorkflowLog.WorkflowLogId
from WorkflowLog
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap StatusPLTable on 
        (StatusPLTable.AttributeName = 'status'
        and StatusPLTable.ObjectTypeCode = 4706
        and StatusPLTable.AttributeValue = WorkflowLog.Status
        and StatusPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4700) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    WorkflowLog.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		WorkflowLog.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		WorkflowLog.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		WorkflowLog.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    WorkflowLog.AsyncOperationId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4700 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredQuoteDetail]    Script Date: 04/11/2008 06:58:05 ******/




--
-- report view for quotedetail
--
create view [dbo].[FilteredQuoteDetail] (
    baseamount,
    baseamount_base,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    exchangerate,
    extendedamount,
    extendedamount_base,
    importsequencenumber,
    ispriceoverridden,
    ispriceoverriddenname,
    isproductoverridden,
    isproductoverriddenname,
    lineitemnumber,
    manualdiscountamount,
    manualdiscountamount_base,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    owningbusinessunit,
    owninguser,
    priceperunit,
    priceperunit_base,
    pricingerrorcode,
    pricingerrorcodename,
    productdescription,
    productid,
    productiddsc,
    productidname,
    quantity,
    quotedetailid,
    quoteid,
    quotestatecode,
    quotestatecodename,
    requestdeliveryby, 
    requestdeliverybyutc,
    salesrepid,
    salesrepiddsc,
    salesrepidname,
    salesrepidyominame,
    shipto_addressid,
    shipto_city,
    shipto_contactname,
    shipto_country,
    shipto_fax,
    shipto_freighttermscode,
    shipto_freighttermscodename,
    shipto_line1,
    shipto_line2,
    shipto_line3,
    shipto_name,
    shipto_postalcode,
    shipto_stateorprovince,
    shipto_telephone,
    tax,
    tax_base,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    uomid,
    uomiddsc,
    uomidname,
    utcconversiontimezonecode,
    volumediscountamount,
    volumediscountamount_base,
    willcall,
    willcallname,
crm_moneyformatstring
) with view_metadata as 
select 
    QuoteDetail.BaseAmount,
    QuoteDetail.BaseAmount_Base,
    QuoteDetail.CreatedBy,
    QuoteDetail.CreatedByDsc,
    QuoteDetail.CreatedByName,
    QuoteDetail.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(QuoteDetail.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QuoteDetail.CreatedOn,
    QuoteDetail.Description,
    QuoteDetail.ExchangeRate,
    QuoteDetail.ExtendedAmount,
    QuoteDetail.ExtendedAmount_Base,
    QuoteDetail.ImportSequenceNumber,
    QuoteDetail.IsPriceOverridden,
    IsPriceOverriddenPLTable.Value,
    QuoteDetail.IsProductOverridden,
    IsProductOverriddenPLTable.Value,
    QuoteDetail.LineItemNumber,
    QuoteDetail.ManualDiscountAmount,
    QuoteDetail.ManualDiscountAmount_Base,
    QuoteDetail.ModifiedBy,
    QuoteDetail.ModifiedByDsc,
    QuoteDetail.ModifiedByName,
    QuoteDetail.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(QuoteDetail.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QuoteDetail.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(QuoteDetail.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QuoteDetail.OverriddenCreatedOn,
    QuoteDetail.OwningBusinessUnit,
    QuoteDetail.OwningUser,
    QuoteDetail.PricePerUnit,
    QuoteDetail.PricePerUnit_Base,
    QuoteDetail.PricingErrorCode,
    PricingErrorCodePLTable.Value,
    QuoteDetail.ProductDescription,
    QuoteDetail.ProductId,
    QuoteDetail.ProductIdDsc,
    QuoteDetail.ProductIdName,
    QuoteDetail.Quantity,
    QuoteDetail.QuoteDetailId,
    QuoteDetail.QuoteId,
    QuoteDetail.QuoteStateCode,
    QuoteStateCodePLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(QuoteDetail.RequestDeliveryBy,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QuoteDetail.RequestDeliveryBy,
    QuoteDetail.SalesRepId,
    QuoteDetail.SalesRepIdDsc,
    QuoteDetail.SalesRepIdName,
    QuoteDetail.SalesRepIdYomiName,
    QuoteDetail.ShipTo_AddressId,
    QuoteDetail.ShipTo_City,
    QuoteDetail.ShipTo_ContactName,
    QuoteDetail.ShipTo_Country,
    QuoteDetail.ShipTo_Fax,
    QuoteDetail.ShipTo_FreightTermsCode,
    ShipTo_FreightTermsCodePLTable.Value,
    QuoteDetail.ShipTo_Line1,
    QuoteDetail.ShipTo_Line2,
    QuoteDetail.ShipTo_Line3,
    QuoteDetail.ShipTo_Name,
    QuoteDetail.ShipTo_PostalCode,
    QuoteDetail.ShipTo_StateOrProvince,
    QuoteDetail.ShipTo_Telephone,
    QuoteDetail.Tax,
    QuoteDetail.Tax_Base,
    QuoteDetail.TimeZoneRuleVersionNumber,
    QuoteDetail.TransactionCurrencyId,
    QuoteDetail.TransactionCurrencyIdDsc,
    QuoteDetail.TransactionCurrencyIdName,
    QuoteDetail.UoMId,
    QuoteDetail.UoMIdDsc,
    QuoteDetail.UoMIdName,
    QuoteDetail.UTCConversionTimeZoneCode,
    QuoteDetail.VolumeDiscountAmount,
    QuoteDetail.VolumeDiscountAmount_Base,
    QuoteDetail.WillCall,
    WillCallPLTable.Value,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from QuoteDetail
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = QuoteDetail.TransactionCurrencyId
    left outer join StringMap IsPriceOverriddenPLTable on 
        (IsPriceOverriddenPLTable.AttributeName = 'ispriceoverridden'
        and IsPriceOverriddenPLTable.ObjectTypeCode = 1085
        and IsPriceOverriddenPLTable.AttributeValue = QuoteDetail.IsPriceOverridden
        and IsPriceOverriddenPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsProductOverriddenPLTable on 
        (IsProductOverriddenPLTable.AttributeName = 'isproductoverridden'
        and IsProductOverriddenPLTable.ObjectTypeCode = 1085
        and IsProductOverriddenPLTable.AttributeValue = QuoteDetail.IsProductOverridden
        and IsProductOverriddenPLTable.LangId = us.UILanguageId )
    left outer join StringMap PricingErrorCodePLTable on 
        (PricingErrorCodePLTable.AttributeName = 'pricingerrorcode'
        and PricingErrorCodePLTable.ObjectTypeCode = 1085
        and PricingErrorCodePLTable.AttributeValue = QuoteDetail.PricingErrorCode
        and PricingErrorCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap QuoteStateCodePLTable on 
        (QuoteStateCodePLTable.AttributeName = 'quotestatecode'
        and QuoteStateCodePLTable.ObjectTypeCode = 1085
        and QuoteStateCodePLTable.AttributeValue = QuoteDetail.QuoteStateCode
        and QuoteStateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShipTo_FreightTermsCodePLTable on 
        (ShipTo_FreightTermsCodePLTable.AttributeName = 'shipto_freighttermscode'
        and ShipTo_FreightTermsCodePLTable.ObjectTypeCode = 1085
        and ShipTo_FreightTermsCodePLTable.AttributeValue = QuoteDetail.ShipTo_FreightTermsCode
        and ShipTo_FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap WillCallPLTable on 
        (WillCallPLTable.AttributeName = 'willcall'
        and WillCallPLTable.ObjectTypeCode = 1085
        and WillCallPLTable.AttributeValue = QuoteDetail.WillCall
        and WillCallPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1084) pdm
where QuoteDetail.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    QuoteDetail.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		QuoteDetail.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		QuoteDetail.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		QuoteDetail.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    QuoteDetail.QuoteId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 1084 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredImportMap]    Script Date: 04/11/2008 06:57:56 ******/




--
-- report view for importmap
--
create view [dbo].[FilteredImportMap] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    importmapid,
    importmaptype,
    importmaptypename,
    isvalidforimport,
    isvalidforimportname,
    iswizardcreated,
    iswizardcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    source,
    sourceuseridentifierforsourcecrmuserlink,
    sourceuseridentifierforsourcedatasourceuserlink,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    targetentity,
    targetentityname,
    targetuseridentifierforsourcecrmuserlink
) with view_metadata as 
select 
    ImportMap.CreatedBy,
    ImportMap.CreatedByDsc,
    ImportMap.CreatedByName,
    ImportMap.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ImportMap.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ImportMap.CreatedOn,
    ImportMap.Description,
    ImportMap.ImportMapId,
    ImportMap.ImportMapType,
    ImportMapTypePLTable.Value,
    ImportMap.IsValidForImport,
    IsValidForImportPLTable.Value,
    ImportMap.IsWizardCreated,
    IsWizardCreatedPLTable.Value,
    ImportMap.ModifiedBy,
    ImportMap.ModifiedByDsc,
    ImportMap.ModifiedByName,
    ImportMap.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ImportMap.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ImportMap.ModifiedOn,
    ImportMap.Name,
    ImportMap.OwnerId,
    ImportMap.OwnerIdDsc,
    ImportMap.OwnerIdName,
    ImportMap.OwnerIdType,
    ImportMap.OwnerIdYomiName,
    ImportMap.OwningBusinessUnit,
    ImportMap.OwningUser,
    ImportMap.Source,
    ImportMap.SourceUserIdentifierForSourceCRMUserLink,
    ImportMap.SourceUserIdentifierForSourceDataSourceUserLink,
    ImportMap.StateCode,
    StateCodePLTable.Value,
    ImportMap.StatusCode,
    StatusCodePLTable.Value,
    ImportMap.TargetEntity,
    TargetEntityPLTable.Value,
    ImportMap.TargetUserIdentifierForSourceCRMUserLink
from ImportMap
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap ImportMapTypePLTable on 
        (ImportMapTypePLTable.AttributeName = 'importmaptype'
        and ImportMapTypePLTable.ObjectTypeCode = 4411
        and ImportMapTypePLTable.AttributeValue = ImportMap.ImportMapType
        and ImportMapTypePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsValidForImportPLTable on 
        (IsValidForImportPLTable.AttributeName = 'isvalidforimport'
        and IsValidForImportPLTable.ObjectTypeCode = 4411
        and IsValidForImportPLTable.AttributeValue = ImportMap.IsValidForImport
        and IsValidForImportPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWizardCreatedPLTable on 
        (IsWizardCreatedPLTable.AttributeName = 'iswizardcreated'
        and IsWizardCreatedPLTable.ObjectTypeCode = 4411
        and IsWizardCreatedPLTable.AttributeValue = ImportMap.IsWizardCreated
        and IsWizardCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4411
        and StateCodePLTable.AttributeValue = ImportMap.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4411
        and StatusCodePLTable.AttributeValue = ImportMap.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap TargetEntityPLTable on 
        (TargetEntityPLTable.AttributeName = 'targetentity'
        and TargetEntityPLTable.ObjectTypeCode = 4411
        and TargetEntityPLTable.AttributeValue = ImportMap.TargetEntity
        and TargetEntityPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4411) pdm
where ImportMap.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ImportMap.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ImportMap.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ImportMap.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ImportMap.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ImportMap.ImportMapId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4411 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredQueueItem]    Script Date: 04/11/2008 06:58:04 ******/




--
-- report view for queueitem
--
create view [dbo].[FilteredQueueItem] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    enteredon, 
    enteredonutc,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    objectid,
    objecttypecode,
    objecttypecodename,
    organizationid,
    organizationiddsc,
    organizationidname,
    priority,
    queueid,
    queueitemid,
    sender,
    state,
    status,
    timezoneruleversionnumber,
    title,
    torecipients,
    utcconversiontimezonecode
) with view_metadata as 
select 
    QueueItem.CreatedBy,
    QueueItem.CreatedByDsc,
    QueueItem.CreatedByName,
    QueueItem.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(QueueItem.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QueueItem.CreatedOn,
    dbo.fn_UTCToTzSpecificLocalTime(QueueItem.EnteredOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QueueItem.EnteredOn,
    QueueItem.ModifiedBy,
    QueueItem.ModifiedByDsc,
    QueueItem.ModifiedByName,
    QueueItem.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(QueueItem.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    QueueItem.ModifiedOn,
    QueueItem.ObjectId,
    QueueItem.ObjectTypeCode,
    ObjectTypeCodePLTable.Value,
    QueueItem.OrganizationId,
    QueueItem.OrganizationIdDsc,
    QueueItem.OrganizationIdName,
    QueueItem.Priority,
    QueueItem.QueueId,
    QueueItem.QueueItemId,
    QueueItem.Sender,
    QueueItem.State,
    QueueItem.Status,
    QueueItem.TimeZoneRuleVersionNumber,
    QueueItem.Title,
    QueueItem.ToRecipients,
    QueueItem.UTCConversionTimeZoneCode
from QueueItem
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap ObjectTypeCodePLTable on 
        (ObjectTypeCodePLTable.AttributeName = 'objecttypecode'
        and ObjectTypeCodePLTable.ObjectTypeCode = 2029
        and ObjectTypeCodePLTable.AttributeValue = QueueItem.ObjectTypeCode
        and ObjectTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(2029) pdm
where QueueItem.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    QueueItem.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredReport]    Script Date: 04/11/2008 06:58:05 ******/




--
-- report view for report
--
create view [dbo].[FilteredReport] (
    bodybinary,
    bodytext,
    bodyurl,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customreportxml,
    defaultfilter,
    description,
    filename,
    filesize,
    iscustomreport,
    iscustomreportname,
    ispersonal,
    ispersonalname,
    isscheduledreport,
    isscheduledreportname,
    languagecode,
    mimetype,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    parentreportid,
    parentreportiddsc,
    parentreportidname,
    queryinfo,
    reportid,
    reporttypecode,
    reporttypecodename,
    schedulexml,
    signaturedate, 
    signaturedateutc,
    signatureid,
    signaturelcid,
    signaturemajorversion,
    signatureminorversion,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    Report.BodyBinary,
    Report.BodyText,
    Report.BodyUrl,
    Report.CreatedBy,
    Report.CreatedByDsc,
    Report.CreatedByName,
    Report.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Report.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Report.CreatedOn,
    Report.CustomReportXml,
    Report.DefaultFilter,
    Report.Description,
    Report.FileName,
    Report.FileSize,
    Report.IsCustomReport,
    IsCustomReportPLTable.Value,
    Report.IsPersonal,
    IsPersonalPLTable.Value,
    Report.IsScheduledReport,
    IsScheduledReportPLTable.Value,
    Report.LanguageCode,
    Report.MimeType,
    Report.ModifiedBy,
    Report.ModifiedByDsc,
    Report.ModifiedByName,
    Report.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Report.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Report.ModifiedOn,
    Report.Name,
    Report.OwnerId,
    Report.OwnerIdDsc,
    Report.OwnerIdName,
    Report.OwnerIdType,
    Report.OwnerIdYomiName,
    Report.OwningBusinessUnit,
    Report.OwningUser,
    Report.ParentReportId,
    Report.ParentReportIdDsc,
    Report.ParentReportIdName,
    Report.QueryInfo,
    Report.ReportId,
    Report.ReportTypeCode,
    ReportTypeCodePLTable.Value,
    Report.ScheduleXml,
    dbo.fn_UTCToTzSpecificLocalTime(Report.SignatureDate,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Report.SignatureDate,
    Report.SignatureId,
    Report.SignatureLcid,
    Report.SignatureMajorVersion,
    Report.SignatureMinorVersion,
    Report.TimeZoneRuleVersionNumber,
    Report.UTCConversionTimeZoneCode
from Report
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsCustomReportPLTable on 
        (IsCustomReportPLTable.AttributeName = 'iscustomreport'
        and IsCustomReportPLTable.ObjectTypeCode = 9100
        and IsCustomReportPLTable.AttributeValue = Report.IsCustomReport
        and IsCustomReportPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsPersonalPLTable on 
        (IsPersonalPLTable.AttributeName = 'ispersonal'
        and IsPersonalPLTable.ObjectTypeCode = 9100
        and IsPersonalPLTable.AttributeValue = Report.IsPersonal
        and IsPersonalPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsScheduledReportPLTable on 
        (IsScheduledReportPLTable.AttributeName = 'isscheduledreport'
        and IsScheduledReportPLTable.ObjectTypeCode = 9100
        and IsScheduledReportPLTable.AttributeValue = Report.IsScheduledReport
        and IsScheduledReportPLTable.LangId = us.UILanguageId )
    left outer join StringMap ReportTypeCodePLTable on 
        (ReportTypeCodePLTable.AttributeName = 'reporttypecode'
        and ReportTypeCodePLTable.ObjectTypeCode = 9100
        and ReportTypeCodePLTable.AttributeValue = Report.ReportTypeCode
        and ReportTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(9100) pdm
where Report.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Report.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Report.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Report.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Report.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Report.ReportId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 9100 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredCampaignActivity]    Script Date: 04/11/2008 06:57:50 ******/




--
-- report view for campaignactivity
--
create view [dbo].[FilteredCampaignActivity] (
    activityid,
    actualcost,
    actualcost_base,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    budgetedcost,
    budgetedcost_base,
    category,
    channeltypecode,
    channeltypecodename,
    checkfordonotsendmmonlistmembersname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    donotsendonoptout,
    exchangerate,
    excludeifcontactedinxdays,
    ignoreinactivelistmembers,
    ignoreinactivelistmembersname,
    importsequencenumber,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    prioritycode,
    prioritycodename,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    typecode,
    typecodename,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    CampaignActivity.ActivityId,
    CampaignActivity.ActualCost,
    CampaignActivity.ActualCost_Base,
    CampaignActivity.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignActivity.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignActivity.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignActivity.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignActivity.ActualStart,
    CampaignActivity.BudgetedCost,
    CampaignActivity.BudgetedCost_Base,
    CampaignActivity.Category,
    CampaignActivity.ChannelTypeCode,
    ChannelTypeCodePLTable.Value,
    DoNotSendOnOptOutPLTable.Value,
    CampaignActivity.CreatedBy,
    CampaignActivity.CreatedByDsc,
    CampaignActivity.CreatedByName,
    CampaignActivity.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignActivity.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignActivity.CreatedOn,
    CampaignActivity.Description,
    CampaignActivity.DoNotSendOnOptOut,
    CampaignActivity.ExchangeRate,
    CampaignActivity.ExcludeIfContactedInXDays,
    CampaignActivity.IgnoreInactiveListMembers,
    IgnoreInactiveListMembersPLTable.Value,
    CampaignActivity.ImportSequenceNumber,
    CampaignActivity.IsBilled,
    IsBilledPLTable.Value,
    CampaignActivity.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    CampaignActivity.ModifiedBy,
    CampaignActivity.ModifiedByDsc,
    CampaignActivity.ModifiedByName,
    CampaignActivity.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignActivity.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignActivity.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignActivity.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignActivity.OverriddenCreatedOn,
    CampaignActivity.OwnerId,
    CampaignActivity.OwnerIdDsc,
    CampaignActivity.OwnerIdName,
    CampaignActivity.OwnerIdType,
    CampaignActivity.OwnerIdYomiName,
    CampaignActivity.OwningBusinessUnit,
    CampaignActivity.OwningUser,
    CampaignActivity.PriorityCode,
    PriorityCodePLTable.Value,
    CampaignActivity.RegardingObjectId,
    CampaignActivity.RegardingObjectIdDsc,
    CampaignActivity.RegardingObjectIdName,
    CampaignActivity.RegardingObjectIdYomiName,
    CampaignActivity.RegardingObjectTypeCode,
    CampaignActivity.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignActivity.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignActivity.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignActivity.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignActivity.ScheduledStart,
    CampaignActivity.ServiceId,
    CampaignActivity.StateCode,
    StateCodePLTable.Value,
    CampaignActivity.StatusCode,
    StatusCodePLTable.Value,
    CampaignActivity.Subcategory,
    CampaignActivity.Subject,
    CampaignActivity.TimeZoneRuleVersionNumber,
    CampaignActivity.TransactionCurrencyId,
    CampaignActivity.TransactionCurrencyIdDsc,
    CampaignActivity.TransactionCurrencyIdName,
    CampaignActivity.TypeCode,
    TypeCodePLTable.Value,
    CampaignActivity.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from CampaignActivity
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = CampaignActivity.TransactionCurrencyId
    left outer join StringMap ChannelTypeCodePLTable on 
        (ChannelTypeCodePLTable.AttributeName = 'channeltypecode'
        and ChannelTypeCodePLTable.ObjectTypeCode = 4402
        and ChannelTypeCodePLTable.AttributeValue = CampaignActivity.ChannelTypeCode
        and ChannelTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotSendOnOptOutPLTable on 
        (DoNotSendOnOptOutPLTable.AttributeName = 'donotsendonoptout'
        and DoNotSendOnOptOutPLTable.ObjectTypeCode = 4402
        and DoNotSendOnOptOutPLTable.AttributeValue = CampaignActivity.DoNotSendOnOptOut
        and DoNotSendOnOptOutPLTable.LangId = us.UILanguageId )
    left outer join StringMap IgnoreInactiveListMembersPLTable on 
        (IgnoreInactiveListMembersPLTable.AttributeName = 'ignoreinactivelistmembers'
        and IgnoreInactiveListMembersPLTable.ObjectTypeCode = 4402
        and IgnoreInactiveListMembersPLTable.AttributeValue = CampaignActivity.IgnoreInactiveListMembers
        and IgnoreInactiveListMembersPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4402
        and IsBilledPLTable.AttributeValue = CampaignActivity.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4402
        and IsWorkflowCreatedPLTable.AttributeValue = CampaignActivity.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 4402
        and PriorityCodePLTable.AttributeValue = CampaignActivity.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4402
        and StateCodePLTable.AttributeValue = CampaignActivity.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4402
        and StatusCodePLTable.AttributeValue = CampaignActivity.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap TypeCodePLTable on 
        (TypeCodePLTable.AttributeName = 'typecode'
        and TypeCodePLTable.ObjectTypeCode = 4402
        and TypeCodePLTable.AttributeValue = CampaignActivity.TypeCode
        and TypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where CampaignActivity.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    CampaignActivity.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		CampaignActivity.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		CampaignActivity.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		CampaignActivity.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    CampaignActivity.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredContractDetail]    Script Date: 04/11/2008 06:57:53 ******/




--
-- report view for contractdetail
--
create view [dbo].[FilteredContractDetail] (
    accountid,
    activeon, 
    activeonutc,
    allotmentsremaining,
    allotmentsused,
    contactid,
    contractdetailid,
    contractid,
    contractiddsc,
    contractidname,
    contractstatecode,
    contractstatecodename,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customerid,
    customeriddsc,
    customeridname,
    customeridtype,
    discount,
    discount_base,
    discountpercentage,
    effectivitycalendar,
    exchangerate,
    expireson, 
    expiresonutc,
    importsequencenumber,
    initialquantity,
    lineitemorder,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    net,
    net_base,
    overriddencreatedon, 
    overriddencreatedonutc,
    owningbusinessunit,
    owninguser,
    price,
    price_base,
    productid,
    productiddsc,
    productidname,
    productserialnumber,
    rate,
    rate_base,
    serviceaddress,
    serviceaddressdsc,
    serviceaddressname,
    servicecontractunitscode,
    servicecontractunitscodename,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    timezoneruleversionnumber,
    title,
    totalallotments,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    uomid,
    uomiddsc,
    uomidname,
    uomscheduleid,
    uomscheduleiddsc,
    uomscheduleidname,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    ContractDetail.AccountId,
    dbo.fn_UTCToTzSpecificLocalTime(ContractDetail.ActiveOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ContractDetail.ActiveOn,
    ContractDetail.AllotmentsRemaining,
    ContractDetail.AllotmentsUsed,
    ContractDetail.ContactId,
    ContractDetail.ContractDetailId,
    ContractDetail.ContractId,
    ContractDetail.ContractIdDsc,
    ContractDetail.ContractIdName,
    ContractDetail.ContractStateCode,
    ContractStateCodePLTable.Value,
    ContractDetail.CreatedBy,
    ContractDetail.CreatedByDsc,
    ContractDetail.CreatedByName,
    ContractDetail.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ContractDetail.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ContractDetail.CreatedOn,
    ContractDetail.CustomerId,
    ContractDetail.CustomerIdDsc,
    ContractDetail.CustomerIdName,
    ContractDetail.CustomerIdType,
    ContractDetail.Discount,
    ContractDetail.Discount_Base,
    ContractDetail.DiscountPercentage,
    ContractDetail.EffectivityCalendar,
    ContractDetail.ExchangeRate,
    dbo.fn_UTCToTzSpecificLocalTime(ContractDetail.ExpiresOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ContractDetail.ExpiresOn,
    ContractDetail.ImportSequenceNumber,
    ContractDetail.InitialQuantity,
    ContractDetail.LineItemOrder,
    ContractDetail.ModifiedBy,
    ContractDetail.ModifiedByDsc,
    ContractDetail.ModifiedByName,
    ContractDetail.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ContractDetail.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ContractDetail.ModifiedOn,
    ContractDetail.Net,
    ContractDetail.Net_Base,
    dbo.fn_UTCToTzSpecificLocalTime(ContractDetail.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ContractDetail.OverriddenCreatedOn,
    ContractDetail.OwningBusinessUnit,
    ContractDetail.OwningUser,
    ContractDetail.Price,
    ContractDetail.Price_Base,
    ContractDetail.ProductId,
    ContractDetail.ProductIdDsc,
    ContractDetail.ProductIdName,
    ContractDetail.ProductSerialNumber,
    ContractDetail.Rate,
    ContractDetail.Rate_Base,
    ContractDetail.ServiceAddress,
    ContractDetail.ServiceAddressDsc,
    ContractDetail.ServiceAddressName,
    ContractDetail.ServiceContractUnitsCode,
    ServiceContractUnitsCodePLTable.Value,
    ContractDetail.StateCode,
    StateCodePLTable.Value,
    ContractDetail.StatusCode,
    StatusCodePLTable.Value,
    ContractDetail.TimeZoneRuleVersionNumber,
    ContractDetail.Title,
    ContractDetail.TotalAllotments,
    ContractDetail.TransactionCurrencyId,
    ContractDetail.TransactionCurrencyIdDsc,
    ContractDetail.TransactionCurrencyIdName,
    ContractDetail.UoMId,
    ContractDetail.UoMIdDsc,
    ContractDetail.UoMIdName,
    ContractDetail.UoMScheduleId,
    ContractDetail.UoMScheduleIdDsc,
    ContractDetail.UoMScheduleIdName,
    ContractDetail.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from ContractDetail
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = ContractDetail.TransactionCurrencyId
    left outer join StringMap ContractStateCodePLTable on 
        (ContractStateCodePLTable.AttributeName = 'contractstatecode'
        and ContractStateCodePLTable.ObjectTypeCode = 1011
        and ContractStateCodePLTable.AttributeValue = ContractDetail.ContractStateCode
        and ContractStateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ServiceContractUnitsCodePLTable on 
        (ServiceContractUnitsCodePLTable.AttributeName = 'servicecontractunitscode'
        and ServiceContractUnitsCodePLTable.ObjectTypeCode = 1011
        and ServiceContractUnitsCodePLTable.AttributeValue = ContractDetail.ServiceContractUnitsCode
        and ServiceContractUnitsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 1011
        and StateCodePLTable.AttributeValue = ContractDetail.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 1011
        and StatusCodePLTable.AttributeValue = ContractDetail.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1010) pdm
where ContractDetail.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ContractDetail.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ContractDetail.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ContractDetail.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ContractDetail.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ContractDetail.ContractId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 1010 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredList]    Script Date: 04/11/2008 06:57:59 ******/




--
-- report view for list
--
create view [dbo].[FilteredList] (
    checkfordonotsendmmonlistmembersname,
    cost,
    cost_base,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdfromcode,
    createdfromcodename,
    createdon, 
    createdonutc,
    description,
    donotsendonoptout,
    exchangerate,
    ignoreinactivelistmembers,
    ignoreinactivelistmembersname,
    importsequencenumber,
    lastusedon, 
    lastusedonutc,
    listid,
    listname,
    lockstatus,
    lockstatusname,
    membercount,
    membertype,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    purpose,
    source,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    DoNotSendOnOptOutPLTable.Value,
    List.Cost,
    List.Cost_Base,
    List.CreatedBy,
    List.CreatedByDsc,
    List.CreatedByName,
    List.CreatedByYomiName,
    List.CreatedFromCode,
    CreatedFromCodePLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(List.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    List.CreatedOn,
    List.Description,
    List.DoNotSendOnOptOut,
    List.ExchangeRate,
    List.IgnoreInactiveListMembers,
    IgnoreInactiveListMembersPLTable.Value,
    List.ImportSequenceNumber,
    dbo.fn_UTCToTzSpecificLocalTime(List.LastUsedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    List.LastUsedOn,
    List.ListId,
    List.ListName,
    List.LockStatus,
    LockStatusPLTable.Value,
    List.MemberCount,
    List.MemberType,
    List.ModifiedBy,
    List.ModifiedByDsc,
    List.ModifiedByName,
    List.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(List.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    List.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(List.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    List.OverriddenCreatedOn,
    List.OwnerId,
    List.OwnerIdDsc,
    List.OwnerIdName,
    List.OwnerIdType,
    List.OwnerIdYomiName,
    List.OwningBusinessUnit,
    List.OwningUser,
    List.Purpose,
    List.Source,
    List.StateCode,
    StateCodePLTable.Value,
    List.StatusCode,
    StatusCodePLTable.Value,
    List.TimeZoneRuleVersionNumber,
    List.TransactionCurrencyId,
    List.TransactionCurrencyIdDsc,
    List.TransactionCurrencyIdName,
    List.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from List
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = List.TransactionCurrencyId
    left outer join StringMap DoNotSendOnOptOutPLTable on 
        (DoNotSendOnOptOutPLTable.AttributeName = 'donotsendonoptout'
        and DoNotSendOnOptOutPLTable.ObjectTypeCode = 4300
        and DoNotSendOnOptOutPLTable.AttributeValue = List.DoNotSendOnOptOut
        and DoNotSendOnOptOutPLTable.LangId = us.UILanguageId )
    left outer join StringMap CreatedFromCodePLTable on 
        (CreatedFromCodePLTable.AttributeName = 'createdfromcode'
        and CreatedFromCodePLTable.ObjectTypeCode = 4300
        and CreatedFromCodePLTable.AttributeValue = List.CreatedFromCode
        and CreatedFromCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IgnoreInactiveListMembersPLTable on 
        (IgnoreInactiveListMembersPLTable.AttributeName = 'ignoreinactivelistmembers'
        and IgnoreInactiveListMembersPLTable.ObjectTypeCode = 4300
        and IgnoreInactiveListMembersPLTable.AttributeValue = List.IgnoreInactiveListMembers
        and IgnoreInactiveListMembersPLTable.LangId = us.UILanguageId )
    left outer join StringMap LockStatusPLTable on 
        (LockStatusPLTable.AttributeName = 'lockstatus'
        and LockStatusPLTable.ObjectTypeCode = 4300
        and LockStatusPLTable.AttributeValue = List.LockStatus
        and LockStatusPLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4300
        and StateCodePLTable.AttributeValue = List.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4300
        and StatusCodePLTable.AttributeValue = List.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4300) pdm
where List.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    List.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		List.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		List.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		List.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    List.ListId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4300 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredEquipment]    Script Date: 04/11/2008 06:57:55 ******/




--
-- report view for equipment
--
create view [dbo].[FilteredEquipment] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    calendarid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    displayinserviceviews,
    displayinserviceviewsname,
    emailaddress,
    equipmentid,
    importsequencenumber,
    isdisabled,
    isdisabledname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    siteid,
    siteiddsc,
    siteidname,
    skills,
    timezonecode,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    Equipment.BusinessUnitId,
    Equipment.BusinessUnitIdDsc,
    Equipment.BusinessUnitIdName,
    Equipment.CalendarId,
    Equipment.CreatedBy,
    Equipment.CreatedByDsc,
    Equipment.CreatedByName,
    Equipment.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Equipment.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Equipment.CreatedOn,
    Equipment.Description,
    Equipment.DisplayInServiceViews,
    DisplayInServiceViewsPLTable.Value,
    Equipment.EMailAddress,
    Equipment.EquipmentId,
    Equipment.ImportSequenceNumber,
    Equipment.IsDisabled,
    IsDisabledPLTable.Value,
    Equipment.ModifiedBy,
    Equipment.ModifiedByDsc,
    Equipment.ModifiedByName,
    Equipment.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Equipment.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Equipment.ModifiedOn,
    Equipment.Name,
    Equipment.OrganizationId,
    Equipment.OrganizationIdDsc,
    Equipment.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(Equipment.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Equipment.OverriddenCreatedOn,
    Equipment.SiteId,
    Equipment.SiteIdDsc,
    Equipment.SiteIdName,
    Equipment.Skills,
    Equipment.TimeZoneCode,
    Equipment.TimeZoneRuleVersionNumber,
    Equipment.UTCConversionTimeZoneCode
from Equipment
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap DisplayInServiceViewsPLTable on 
        (DisplayInServiceViewsPLTable.AttributeName = 'displayinserviceviews'
        and DisplayInServiceViewsPLTable.ObjectTypeCode = 4000
        and DisplayInServiceViewsPLTable.AttributeValue = Equipment.DisplayInServiceViews
        and DisplayInServiceViewsPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsDisabledPLTable on 
        (IsDisabledPLTable.AttributeName = 'isdisabled'
        and IsDisabledPLTable.ObjectTypeCode = 4000
        and IsDisabledPLTable.AttributeValue = Equipment.IsDisabled
        and IsDisabledPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4000) pdm
where Equipment.DeletionStateCode in (0) 
    and
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Equipment.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Equipment.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Equipment.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredAnnotation]    Script Date: 04/11/2008 06:57:47 ******/




--
-- report view for annotation
--
create view [dbo].[FilteredAnnotation] (
    annotationid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    documentbody,
    filename,
    filesize,
    importsequencenumber,
    isdocument,
    isdocumentname,
    isprivatename,
    langid,
    mimetype,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    notetext,
    objectid,
    objecttypecode,
    objecttypecodename,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owningteam,
    owninguser,
    stepid,
    subject
) with view_metadata as 
select 
    Annotation.AnnotationId,
    Annotation.CreatedBy,
    Annotation.CreatedByDsc,
    Annotation.CreatedByName,
    Annotation.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Annotation.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Annotation.CreatedOn,
    Annotation.DocumentBody,
    Annotation.FileName,
    Annotation.FileSize,
    Annotation.ImportSequenceNumber,
    Annotation.IsDocument,
    IsDocumentPLTable.Value,
    IsPrivatePLTable.Value,
    Annotation.LangId,
    Annotation.MimeType,
    Annotation.ModifiedBy,
    Annotation.ModifiedByDsc,
    Annotation.ModifiedByName,
    Annotation.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Annotation.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Annotation.ModifiedOn,
    Annotation.NoteText,
    Annotation.ObjectId,
    Annotation.ObjectTypeCode,
    ObjectTypeCodePLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(Annotation.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Annotation.OverriddenCreatedOn,
    Annotation.OwnerId,
    Annotation.OwnerIdDsc,
    Annotation.OwnerIdName,
    Annotation.OwnerIdType,
    Annotation.OwnerIdYomiName,
    Annotation.OwningBusinessUnit,
    Annotation.OwningTeam,
    Annotation.OwningUser,
    Annotation.StepId,
    Annotation.Subject
from Annotation
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsDocumentPLTable on 
        (IsDocumentPLTable.AttributeName = 'isdocument'
        and IsDocumentPLTable.ObjectTypeCode = 5
        and IsDocumentPLTable.AttributeValue = Annotation.IsDocument
        and IsDocumentPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsPrivatePLTable on 
        (IsPrivatePLTable.AttributeName = 'isprivate'
        and IsPrivatePLTable.ObjectTypeCode = 5
        and IsPrivatePLTable.AttributeValue = Annotation.IsPrivate
        and IsPrivatePLTable.LangId = us.UILanguageId )
    left outer join StringMap ObjectTypeCodePLTable on 
        (ObjectTypeCodePLTable.AttributeName = 'objecttypecode'
        and ObjectTypeCodePLTable.ObjectTypeCode = 5
        and ObjectTypeCodePLTable.AttributeValue = Annotation.ObjectTypeCode
        and ObjectTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(5) pdm
where Annotation.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Annotation.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Annotation.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Annotation.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Annotation.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Annotation.AnnotationId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 5 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredAppointment]    Script Date: 04/11/2008 06:57:48 ******/




--
-- report view for appointment
--
create view [dbo].[FilteredAppointment] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    category,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    globalobjectid,
    importsequencenumber,
    isalldayevent,
    isalldayeventname,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    location,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    outlookownerapptid,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    prioritycode,
    prioritycodename,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    Appointment.ActivityId,
    Appointment.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(Appointment.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Appointment.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Appointment.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Appointment.ActualStart,
    Appointment.Category,
    Appointment.CreatedBy,
    Appointment.CreatedByDsc,
    Appointment.CreatedByName,
    Appointment.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Appointment.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Appointment.CreatedOn,
    Appointment.Description,
    Appointment.GlobalObjectId,
    Appointment.ImportSequenceNumber,
    Appointment.IsAllDayEvent,
    IsAllDayEventPLTable.Value,
    Appointment.IsBilled,
    IsBilledPLTable.Value,
    Appointment.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    Appointment.Location,
    Appointment.ModifiedBy,
    Appointment.ModifiedByDsc,
    Appointment.ModifiedByName,
    Appointment.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Appointment.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Appointment.ModifiedOn,
    Appointment.OutlookOwnerApptId,
    dbo.fn_UTCToTzSpecificLocalTime(Appointment.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Appointment.OverriddenCreatedOn,
    Appointment.OwnerId,
    Appointment.OwnerIdDsc,
    Appointment.OwnerIdName,
    Appointment.OwnerIdType,
    Appointment.OwnerIdYomiName,
    Appointment.OwningBusinessUnit,
    Appointment.OwningUser,
    Appointment.PriorityCode,
    PriorityCodePLTable.Value,
    Appointment.RegardingObjectId,
    Appointment.RegardingObjectIdDsc,
    Appointment.RegardingObjectIdName,
    Appointment.RegardingObjectIdYomiName,
    Appointment.RegardingObjectTypeCode,
    Appointment.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(Appointment.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Appointment.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Appointment.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Appointment.ScheduledStart,
    Appointment.ServiceId,
    Appointment.StateCode,
    StateCodePLTable.Value,
    Appointment.StatusCode,
    StatusCodePLTable.Value,
    Appointment.Subcategory,
    Appointment.Subject,
    Appointment.TimeZoneRuleVersionNumber,
    Appointment.UTCConversionTimeZoneCode
from Appointment
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsAllDayEventPLTable on 
        (IsAllDayEventPLTable.AttributeName = 'isalldayevent'
        and IsAllDayEventPLTable.ObjectTypeCode = 4201
        and IsAllDayEventPLTable.AttributeValue = Appointment.IsAllDayEvent
        and IsAllDayEventPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4201
        and IsBilledPLTable.AttributeValue = Appointment.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4201
        and IsWorkflowCreatedPLTable.AttributeValue = Appointment.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 4201
        and PriorityCodePLTable.AttributeValue = Appointment.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4201
        and StateCodePLTable.AttributeValue = Appointment.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4201
        and StatusCodePLTable.AttributeValue = Appointment.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where Appointment.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Appointment.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Appointment.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Appointment.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Appointment.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Appointment.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredUserQuery]    Script Date: 04/11/2008 06:58:14 ******/




--
-- report view for userquery
--
create view [dbo].[FilteredUserQuery] (
    columnsetxml,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    fetchxml,
    layoutxml,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    querytype,
    returnedtypecode,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    userqueryid
) with view_metadata as 
select 
    UserQuery.ColumnSetXml,
    UserQuery.CreatedBy,
    UserQuery.CreatedByDsc,
    UserQuery.CreatedByName,
    UserQuery.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserQuery.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserQuery.CreatedOn,
    UserQuery.Description,
    UserQuery.FetchXml,
    UserQuery.LayoutXml,
    UserQuery.ModifiedBy,
    UserQuery.ModifiedByDsc,
    UserQuery.ModifiedByName,
    UserQuery.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserQuery.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserQuery.ModifiedOn,
    UserQuery.Name,
    UserQuery.OwnerId,
    UserQuery.OwnerIdDsc,
    UserQuery.OwnerIdName,
    UserQuery.OwnerIdType,
    UserQuery.OwnerIdYomiName,
    UserQuery.OwningBusinessUnit,
    UserQuery.OwningUser,
    UserQuery.QueryType,
    UserQuery.ReturnedTypeCode,
    UserQuery.StateCode,
    StateCodePLTable.Value,
    UserQuery.StatusCode,
    StatusCodePLTable.Value,
    UserQuery.UserQueryId
from UserQuery
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4230
        and StateCodePLTable.AttributeValue = UserQuery.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4230
        and StatusCodePLTable.AttributeValue = UserQuery.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4230) pdm
where UserQuery.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    UserQuery.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		UserQuery.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		UserQuery.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		UserQuery.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    UserQuery.UserQueryId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4230 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredCompetitor]    Script Date: 04/11/2008 06:57:51 ******/




--
-- report view for competitor
--
create view [dbo].[FilteredCompetitor] (
    address1_addressid,
    address1_addresstypecode,
    address1_addresstypecodename,
    address1_city,
    address1_country,
    address1_county,
    address1_fax,
    address1_latitude,
    address1_line1,
    address1_line2,
    address1_line3,
    address1_longitude,
    address1_name,
    address1_postalcode,
    address1_postofficebox,
    address1_shippingmethodcode,
    address1_shippingmethodcodename,
    address1_stateorprovince,
    address1_telephone1,
    address1_telephone2,
    address1_telephone3,
    address1_upszone,
    address1_utcoffset,
    address2_addressid,
    address2_addresstypecode,
    address2_addresstypecodename,
    address2_city,
    address2_country,
    address2_county,
    address2_fax,
    address2_latitude,
    address2_line1,
    address2_line2,
    address2_line3,
    address2_longitude,
    address2_name,
    address2_postalcode,
    address2_postofficebox,
    address2_shippingmethodcode,
    address2_shippingmethodcodename,
    address2_stateorprovince,
    address2_telephone1,
    address2_telephone2,
    address2_telephone3,
    address2_upszone,
    address2_utcoffset,
    competitorid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    exchangerate,
    importsequencenumber,
    keyproduct,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    opportunities,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    overview,
    referenceinfourl,
    reportedrevenue,
    reportedrevenue_base,
    reportingquarter,
    reportingyear,
    stockexchange,
    strengths,
    threats,
    tickersymbol,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode,
    weaknesses,
    websiteurl,
    winpercentage,
    yominame,
crm_moneyformatstring
) with view_metadata as 
select 
    Competitor.Address1_AddressId,
    Competitor.Address1_AddressTypeCode,
    Address1_AddressTypeCodePLTable.Value,
    Competitor.Address1_City,
    Competitor.Address1_Country,
    Competitor.Address1_County,
    Competitor.Address1_Fax,
    Competitor.Address1_Latitude,
    Competitor.Address1_Line1,
    Competitor.Address1_Line2,
    Competitor.Address1_Line3,
    Competitor.Address1_Longitude,
    Competitor.Address1_Name,
    Competitor.Address1_PostalCode,
    Competitor.Address1_PostOfficeBox,
    Competitor.Address1_ShippingMethodCode,
    Address1_ShippingMethodCodePLTable.Value,
    Competitor.Address1_StateOrProvince,
    Competitor.Address1_Telephone1,
    Competitor.Address1_Telephone2,
    Competitor.Address1_Telephone3,
    Competitor.Address1_UPSZone,
    Competitor.Address1_UTCOffset,
    Competitor.Address2_AddressId,
    Competitor.Address2_AddressTypeCode,
    Address2_AddressTypeCodePLTable.Value,
    Competitor.Address2_City,
    Competitor.Address2_Country,
    Competitor.Address2_County,
    Competitor.Address2_Fax,
    Competitor.Address2_Latitude,
    Competitor.Address2_Line1,
    Competitor.Address2_Line2,
    Competitor.Address2_Line3,
    Competitor.Address2_Longitude,
    Competitor.Address2_Name,
    Competitor.Address2_PostalCode,
    Competitor.Address2_PostOfficeBox,
    Competitor.Address2_ShippingMethodCode,
    Address2_ShippingMethodCodePLTable.Value,
    Competitor.Address2_StateOrProvince,
    Competitor.Address2_Telephone1,
    Competitor.Address2_Telephone2,
    Competitor.Address2_Telephone3,
    Competitor.Address2_UPSZone,
    Competitor.Address2_UTCOffset,
    Competitor.CompetitorId,
    Competitor.CreatedBy,
    Competitor.CreatedByDsc,
    Competitor.CreatedByName,
    Competitor.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Competitor.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Competitor.CreatedOn,
    Competitor.ExchangeRate,
    Competitor.ImportSequenceNumber,
    Competitor.KeyProduct,
    Competitor.ModifiedBy,
    Competitor.ModifiedByDsc,
    Competitor.ModifiedByName,
    Competitor.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Competitor.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Competitor.ModifiedOn,
    Competitor.Name,
    Competitor.Opportunities,
    Competitor.OrganizationId,
    Competitor.OrganizationIdDsc,
    Competitor.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(Competitor.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Competitor.OverriddenCreatedOn,
    Competitor.Overview,
    Competitor.ReferenceInfoUrl,
    Competitor.ReportedRevenue,
    Competitor.ReportedRevenue_Base,
    Competitor.ReportingQuarter,
    Competitor.ReportingYear,
    Competitor.StockExchange,
    Competitor.Strengths,
    Competitor.Threats,
    Competitor.TickerSymbol,
    Competitor.TimeZoneRuleVersionNumber,
    Competitor.TransactionCurrencyId,
    Competitor.TransactionCurrencyIdDsc,
    Competitor.TransactionCurrencyIdName,
    Competitor.UTCConversionTimeZoneCode,
    Competitor.Weaknesses,
    Competitor.WebSiteUrl,
    Competitor.WinPercentage,
    Competitor.YomiName,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from Competitor
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = Competitor.TransactionCurrencyId
    left outer join StringMap Address1_AddressTypeCodePLTable on 
        (Address1_AddressTypeCodePLTable.AttributeName = 'address1_addresstypecode'
        and Address1_AddressTypeCodePLTable.ObjectTypeCode = 123
        and Address1_AddressTypeCodePLTable.AttributeValue = Competitor.Address1_AddressTypeCode
        and Address1_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_ShippingMethodCodePLTable on 
        (Address1_ShippingMethodCodePLTable.AttributeName = 'address1_shippingmethodcode'
        and Address1_ShippingMethodCodePLTable.ObjectTypeCode = 123
        and Address1_ShippingMethodCodePLTable.AttributeValue = Competitor.Address1_ShippingMethodCode
        and Address1_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_AddressTypeCodePLTable on 
        (Address2_AddressTypeCodePLTable.AttributeName = 'address2_addresstypecode'
        and Address2_AddressTypeCodePLTable.ObjectTypeCode = 123
        and Address2_AddressTypeCodePLTable.AttributeValue = Competitor.Address2_AddressTypeCode
        and Address2_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_ShippingMethodCodePLTable on 
        (Address2_ShippingMethodCodePLTable.AttributeName = 'address2_shippingmethodcode'
        and Address2_ShippingMethodCodePLTable.ObjectTypeCode = 123
        and Address2_ShippingMethodCodePLTable.AttributeValue = Competitor.Address2_ShippingMethodCode
        and Address2_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(123) pdm
where Competitor.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    Competitor.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredSalesLiterature]    Script Date: 04/11/2008 06:58:07 ******/




--
-- report view for salesliterature
--
create view [dbo].[FilteredSalesLiterature] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    employeecontactid,
    employeecontactiddsc,
    employeecontactidname,
    employeecontactidyominame,
    expirationdate, 
    expirationdateutc,
    hasattachments,
    hasattachmentsname,
    importsequencenumber,
    iscustomerviewable,
    iscustomerviewablename,
    keywords,
    literaturetypecode,
    literaturetypecodename,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    salesliteratureid,
    subjectid,
    subjectiddsc,
    subjectidname,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    SalesLiterature.CreatedBy,
    SalesLiterature.CreatedByDsc,
    SalesLiterature.CreatedByName,
    SalesLiterature.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SalesLiterature.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesLiterature.CreatedOn,
    SalesLiterature.Description,
    SalesLiterature.EmployeeContactId,
    SalesLiterature.EmployeeContactIdDsc,
    SalesLiterature.EmployeeContactIdName,
    SalesLiterature.EmployeeContactIdYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SalesLiterature.ExpirationDate,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesLiterature.ExpirationDate,
    SalesLiterature.HasAttachments,
    HasAttachmentsPLTable.Value,
    SalesLiterature.ImportSequenceNumber,
    SalesLiterature.IsCustomerViewable,
    IsCustomerViewablePLTable.Value,
    SalesLiterature.KeyWords,
    SalesLiterature.LiteratureTypeCode,
    LiteratureTypeCodePLTable.Value,
    SalesLiterature.ModifiedBy,
    SalesLiterature.ModifiedByDsc,
    SalesLiterature.ModifiedByName,
    SalesLiterature.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SalesLiterature.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesLiterature.ModifiedOn,
    SalesLiterature.Name,
    SalesLiterature.OrganizationId,
    SalesLiterature.OrganizationIdDsc,
    SalesLiterature.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(SalesLiterature.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesLiterature.OverriddenCreatedOn,
    SalesLiterature.SalesLiteratureId,
    SalesLiterature.SubjectId,
    SalesLiterature.SubjectIdDsc,
    SalesLiterature.SubjectIdName,
    SalesLiterature.TimeZoneRuleVersionNumber,
    SalesLiterature.UTCConversionTimeZoneCode
from SalesLiterature
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap HasAttachmentsPLTable on 
        (HasAttachmentsPLTable.AttributeName = 'hasattachments'
        and HasAttachmentsPLTable.ObjectTypeCode = 1038
        and HasAttachmentsPLTable.AttributeValue = SalesLiterature.HasAttachments
        and HasAttachmentsPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsCustomerViewablePLTable on 
        (IsCustomerViewablePLTable.AttributeName = 'iscustomerviewable'
        and IsCustomerViewablePLTable.ObjectTypeCode = 1038
        and IsCustomerViewablePLTable.AttributeValue = SalesLiterature.IsCustomerViewable
        and IsCustomerViewablePLTable.LangId = us.UILanguageId )
    left outer join StringMap LiteratureTypeCodePLTable on 
        (LiteratureTypeCodePLTable.AttributeName = 'literaturetypecode'
        and LiteratureTypeCodePLTable.ObjectTypeCode = 1038
        and LiteratureTypeCodePLTable.AttributeValue = SalesLiterature.LiteratureTypeCode
        and LiteratureTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1038) pdm
where SalesLiterature.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SalesLiterature.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredUoM]    Script Date: 04/11/2008 06:58:14 ******/




--
-- report view for uom
--
create view [dbo].[FilteredUoM] (
    baseuom,
    baseuomname,
    baseuomnamedsc,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    importsequencenumber,
    isschedulebaseuom,
    isschedulebaseuomname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    overriddencreatedon, 
    overriddencreatedonutc,
    quantity,
    uomid,
    uomscheduleid
) with view_metadata as 
select 
    UoM.BaseUoM,
    UoM.BaseUoMName,
    UoM.BaseUoMNameDsc,
    UoM.CreatedBy,
    UoM.CreatedByDsc,
    UoM.CreatedByName,
    UoM.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UoM.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UoM.CreatedOn,
    UoM.ImportSequenceNumber,
    UoM.IsScheduleBaseUoM,
    IsScheduleBaseUoMPLTable.Value,
    UoM.ModifiedBy,
    UoM.ModifiedByDsc,
    UoM.ModifiedByName,
    UoM.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UoM.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UoM.ModifiedOn,
    UoM.Name,
    UoM.OrganizationId,
    dbo.fn_UTCToTzSpecificLocalTime(UoM.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UoM.OverriddenCreatedOn,
    UoM.Quantity,
    UoM.UoMId,
    UoM.UoMScheduleId
from UoM
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsScheduleBaseUoMPLTable on 
        (IsScheduleBaseUoMPLTable.AttributeName = 'isschedulebaseuom'
        and IsScheduleBaseUoMPLTable.ObjectTypeCode = 1055
        and IsScheduleBaseUoMPLTable.AttributeValue = UoM.IsScheduleBaseUoM
        and IsScheduleBaseUoMPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1056) pdm
where UoM.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    UoM.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredMailMergeTemplate]    Script Date: 04/11/2008 06:58:00 ******/




--
-- report view for mailmergetemplate
--
create view [dbo].[FilteredMailMergeTemplate] (
    body,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    defaultfilter,
    description,
    documentformat,
    documentformatname,
    filename,
    filesize,
    ispersonal,
    ispersonalname,
    languagecode,
    mailmergetemplateid,
    mailmergetype,
    mailmergetypename,
    mimetype,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    parameterxml,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    templatetypecode,
    templatetypecodename,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    MailMergeTemplate.Body,
    MailMergeTemplate.CreatedBy,
    MailMergeTemplate.CreatedByDsc,
    MailMergeTemplate.CreatedByName,
    MailMergeTemplate.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(MailMergeTemplate.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    MailMergeTemplate.CreatedOn,
    MailMergeTemplate.DefaultFilter,
    MailMergeTemplate.Description,
    MailMergeTemplate.DocumentFormat,
    DocumentFormatPLTable.Value,
    MailMergeTemplate.FileName,
    MailMergeTemplate.FileSize,
    MailMergeTemplate.IsPersonal,
    IsPersonalPLTable.Value,
    MailMergeTemplate.LanguageCode,
    MailMergeTemplate.MailMergeTemplateId,
    MailMergeTemplate.MailMergeType,
    MailMergeTypePLTable.Value,
    MailMergeTemplate.MimeType,
    MailMergeTemplate.ModifiedBy,
    MailMergeTemplate.ModifiedByDsc,
    MailMergeTemplate.ModifiedByName,
    MailMergeTemplate.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(MailMergeTemplate.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    MailMergeTemplate.ModifiedOn,
    MailMergeTemplate.Name,
    MailMergeTemplate.OwnerId,
    MailMergeTemplate.OwnerIdDsc,
    MailMergeTemplate.OwnerIdName,
    MailMergeTemplate.OwnerIdType,
    MailMergeTemplate.OwnerIdYomiName,
    MailMergeTemplate.OwningBusinessUnit,
    MailMergeTemplate.OwningUser,
    MailMergeTemplate.ParameterXml,
    MailMergeTemplate.StateCode,
    StateCodePLTable.Value,
    MailMergeTemplate.StatusCode,
    StatusCodePLTable.Value,
    MailMergeTemplate.TemplateTypeCode,
    TemplateTypeCodePLTable.Value,
    MailMergeTemplate.TimeZoneRuleVersionNumber,
    MailMergeTemplate.UTCConversionTimeZoneCode
from MailMergeTemplate
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap DocumentFormatPLTable on 
        (DocumentFormatPLTable.AttributeName = 'documentformat'
        and DocumentFormatPLTable.ObjectTypeCode = 9106
        and DocumentFormatPLTable.AttributeValue = MailMergeTemplate.DocumentFormat
        and DocumentFormatPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsPersonalPLTable on 
        (IsPersonalPLTable.AttributeName = 'ispersonal'
        and IsPersonalPLTable.ObjectTypeCode = 9106
        and IsPersonalPLTable.AttributeValue = MailMergeTemplate.IsPersonal
        and IsPersonalPLTable.LangId = us.UILanguageId )
    left outer join StringMap MailMergeTypePLTable on 
        (MailMergeTypePLTable.AttributeName = 'mailmergetype'
        and MailMergeTypePLTable.ObjectTypeCode = 9106
        and MailMergeTypePLTable.AttributeValue = MailMergeTemplate.MailMergeType
        and MailMergeTypePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 9106
        and StateCodePLTable.AttributeValue = MailMergeTemplate.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 9106
        and StatusCodePLTable.AttributeValue = MailMergeTemplate.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap TemplateTypeCodePLTable on 
        (TemplateTypeCodePLTable.AttributeName = 'templatetypecode'
        and TemplateTypeCodePLTable.ObjectTypeCode = 9106
        and TemplateTypeCodePLTable.AttributeValue = MailMergeTemplate.TemplateTypeCode
        and TemplateTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(9106) pdm
where MailMergeTemplate.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    MailMergeTemplate.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		MailMergeTemplate.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		MailMergeTemplate.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		MailMergeTemplate.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    MailMergeTemplate.MailMergeTemplateId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 9106 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredContact]    Script Date: 04/11/2008 06:57:52 ******/




--
-- report view for contact
--
create view [dbo].[FilteredContact] (
    accountid,
    accountiddsc,
    accountidname,
    accountidyominame,
    accountrolecode,
    accountrolecodename,
    address1_addressid,
    address1_addresstypecode,
    address1_addresstypecodename,
    address1_city,
    address1_country,
    address1_county,
    address1_fax,
    address1_freighttermscode,
    address1_freighttermscodename,
    address1_latitude,
    address1_line1,
    address1_line2,
    address1_line3,
    address1_longitude,
    address1_name,
    address1_postalcode,
    address1_postofficebox,
    address1_primarycontactname,
    address1_shippingmethodcode,
    address1_shippingmethodcodename,
    address1_stateorprovince,
    address1_telephone1,
    address1_telephone2,
    address1_telephone3,
    address1_upszone,
    address1_utcoffset,
    address2_addressid,
    address2_addresstypecode,
    address2_addresstypecodename,
    address2_city,
    address2_country,
    address2_county,
    address2_fax,
    address2_freighttermscode,
    address2_freighttermscodename,
    address2_latitude,
    address2_line1,
    address2_line2,
    address2_line3,
    address2_longitude,
    address2_name,
    address2_postalcode,
    address2_postofficebox,
    address2_primarycontactname,
    address2_shippingmethodcode,
    address2_shippingmethodcodename,
    address2_stateorprovince,
    address2_telephone1,
    address2_telephone2,
    address2_telephone3,
    address2_upszone,
    address2_utcoffset,
    aging30,
    aging30_base,
    aging60,
    aging60_base,
    aging90,
    aging90_base,
    anniversary, 
    anniversaryutc,
    annualincome,
    annualincome_base,
    assistantname,
    assistantphone,
    birthdate, 
    birthdateutc,
    childrensnames,
    contactid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    creditlimit,
    creditlimit_base,
    creditonhold,
    creditonholdname,
    customersizecode,
    customersizecodename,
    customertypecode,
    customertypecodename,
    defaultpricelevelid,
    defaultpriceleveliddsc,
    defaultpricelevelidname,
    department,
    description,
    donotbulkemail,
    donotbulkemailname,
    donotbulkpostalmail,
    donotbulkpostalmailname,
    donotemail,
    donotemailname,
    donotfax,
    donotfaxname,
    donotphone,
    donotphonename,
    donotpostalmail,
    donotpostalmailname,
    donotsendmarketingmaterialname,
    donotsendmm,
    educationcode,
    educationcodename,
    emailaddress1,
    emailaddress2,
    emailaddress3,
    employeeid,
    exchangerate,
    externaluseridentifier,
    familystatuscode,
    familystatuscodename,
    fax,
    firstname,
    ftpsiteurl,
    fullname,
    gendercode,
    gendercodename,
    governmentid,
    haschildrencode,
    haschildrencodename,
    importsequencenumber,
    isbackofficecustomer,
    isbackofficecustomername,
    isprivatename,
    jobtitle,
    lastname,
    lastusedincampaign, 
    lastusedincampaignutc,
    leadsourcecode,
    leadsourcecodename,
    managername,
    managerphone,
    mastercontactiddsc,
    mastercontactidname,
    mastercontactidyominame,
    masterid,
    merged,
    mergedname,
    middlename,
    mobilephone,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    nickname,
    numberofchildren,
    originatingleadid,
    originatingleadiddsc,
    originatingleadidname,
    originatingleadidyominame,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owningteam,
    owninguser,
    pager,
    parentcontactid,
    parentcontactiddsc,
    parentcontactidname,
    parentcontactidyominame,
    parentcustomerid,
    parentcustomeriddsc,
    parentcustomeridname,
    parentcustomeridtype,
    parentcustomeridyominame,
    participatesinworkflow,
    participatesinworkflowname,
    paymenttermscode,
    paymenttermscodename,
    preferredappointmentdaycode,
    preferredappointmentdaycodename,
    preferredappointmenttimecode,
    preferredappointmenttimecodename,
    preferredcontactmethodcode,
    preferredcontactmethodcodename,
    preferredequipmentid,
    preferredequipmentiddsc,
    preferredequipmentidname,
    preferredserviceid,
    preferredserviceiddsc,
    preferredserviceidname,
    preferredsystemuserid,
    preferredsystemuseriddsc,
    preferredsystemuseridname,
    preferredsystemuseridyominame,
    salutation,
    shippingmethodcode,
    shippingmethodcodename,
    spousesname,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    suffix,
    telephone1,
    telephone2,
    telephone3,
    territorycode,
    territorycodename,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode,
    websiteurl,
    yomifirstname,
    yomifullname,
    yomilastname,
    yomimiddlename,
crm_moneyformatstring
) with view_metadata as 
select 
    Contact.AccountId,
    Contact.AccountIdDsc,
    Contact.AccountIdName,
    Contact.AccountIdYomiName,
    Contact.AccountRoleCode,
    AccountRoleCodePLTable.Value,
    Contact.Address1_AddressId,
    Contact.Address1_AddressTypeCode,
    Address1_AddressTypeCodePLTable.Value,
    Contact.Address1_City,
    Contact.Address1_Country,
    Contact.Address1_County,
    Contact.Address1_Fax,
    Contact.Address1_FreightTermsCode,
    Address1_FreightTermsCodePLTable.Value,
    Contact.Address1_Latitude,
    Contact.Address1_Line1,
    Contact.Address1_Line2,
    Contact.Address1_Line3,
    Contact.Address1_Longitude,
    Contact.Address1_Name,
    Contact.Address1_PostalCode,
    Contact.Address1_PostOfficeBox,
    Contact.Address1_PrimaryContactName,
    Contact.Address1_ShippingMethodCode,
    Address1_ShippingMethodCodePLTable.Value,
    Contact.Address1_StateOrProvince,
    Contact.Address1_Telephone1,
    Contact.Address1_Telephone2,
    Contact.Address1_Telephone3,
    Contact.Address1_UPSZone,
    Contact.Address1_UTCOffset,
    Contact.Address2_AddressId,
    Contact.Address2_AddressTypeCode,
    Address2_AddressTypeCodePLTable.Value,
    Contact.Address2_City,
    Contact.Address2_Country,
    Contact.Address2_County,
    Contact.Address2_Fax,
    Contact.Address2_FreightTermsCode,
    Address2_FreightTermsCodePLTable.Value,
    Contact.Address2_Latitude,
    Contact.Address2_Line1,
    Contact.Address2_Line2,
    Contact.Address2_Line3,
    Contact.Address2_Longitude,
    Contact.Address2_Name,
    Contact.Address2_PostalCode,
    Contact.Address2_PostOfficeBox,
    Contact.Address2_PrimaryContactName,
    Contact.Address2_ShippingMethodCode,
    Address2_ShippingMethodCodePLTable.Value,
    Contact.Address2_StateOrProvince,
    Contact.Address2_Telephone1,
    Contact.Address2_Telephone2,
    Contact.Address2_Telephone3,
    Contact.Address2_UPSZone,
    Contact.Address2_UTCOffset,
    Contact.Aging30,
    Contact.Aging30_Base,
    Contact.Aging60,
    Contact.Aging60_Base,
    Contact.Aging90,
    Contact.Aging90_Base,
    dbo.fn_UTCToTzSpecificLocalTime(Contact.Anniversary,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contact.Anniversary,
    Contact.AnnualIncome,
    Contact.AnnualIncome_Base,
    Contact.AssistantName,
    Contact.AssistantPhone,
    dbo.fn_UTCToTzSpecificLocalTime(Contact.BirthDate,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contact.BirthDate,
    Contact.ChildrensNames,
    Contact.ContactId,
    Contact.CreatedBy,
    Contact.CreatedByDsc,
    Contact.CreatedByName,
    Contact.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Contact.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contact.CreatedOn,
    Contact.CreditLimit,
    Contact.CreditLimit_Base,
    Contact.CreditOnHold,
    CreditOnHoldPLTable.Value,
    Contact.CustomerSizeCode,
    CustomerSizeCodePLTable.Value,
    Contact.CustomerTypeCode,
    CustomerTypeCodePLTable.Value,
    Contact.DefaultPriceLevelId,
    Contact.DefaultPriceLevelIdDsc,
    Contact.DefaultPriceLevelIdName,
    Contact.Department,
    Contact.Description,
    Contact.DoNotBulkEMail,
    DoNotBulkEMailPLTable.Value,
    Contact.DoNotBulkPostalMail,
    DoNotBulkPostalMailPLTable.Value,
    Contact.DoNotEMail,
    DoNotEMailPLTable.Value,
    Contact.DoNotFax,
    DoNotFaxPLTable.Value,
    Contact.DoNotPhone,
    DoNotPhonePLTable.Value,
    Contact.DoNotPostalMail,
    DoNotPostalMailPLTable.Value,
    DoNotSendMMPLTable.Value,
    Contact.DoNotSendMM,
    Contact.EducationCode,
    EducationCodePLTable.Value,
    Contact.EMailAddress1,
    Contact.EMailAddress2,
    Contact.EMailAddress3,
    Contact.EmployeeId,
    Contact.ExchangeRate,
    Contact.ExternalUserIdentifier,
    Contact.FamilyStatusCode,
    FamilyStatusCodePLTable.Value,
    Contact.Fax,
    Contact.FirstName,
    Contact.FtpSiteUrl,
    Contact.FullName,
    Contact.GenderCode,
    GenderCodePLTable.Value,
    Contact.GovernmentId,
    Contact.HasChildrenCode,
    HasChildrenCodePLTable.Value,
    Contact.ImportSequenceNumber,
    Contact.IsBackofficeCustomer,
    IsBackofficeCustomerPLTable.Value,
    IsPrivatePLTable.Value,
    Contact.JobTitle,
    Contact.LastName,
    dbo.fn_UTCToTzSpecificLocalTime(Contact.LastUsedInCampaign,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contact.LastUsedInCampaign,
    Contact.LeadSourceCode,
    LeadSourceCodePLTable.Value,
    Contact.ManagerName,
    Contact.ManagerPhone,
    Contact.MasterContactIdDsc,
    Contact.MasterContactIdName,
    Contact.MasterContactIdYomiName,
    Contact.MasterId,
    Contact.Merged,
    MergedPLTable.Value,
    Contact.MiddleName,
    Contact.MobilePhone,
    Contact.ModifiedBy,
    Contact.ModifiedByDsc,
    Contact.ModifiedByName,
    Contact.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Contact.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contact.ModifiedOn,
    Contact.NickName,
    Contact.NumberOfChildren,
    Contact.OriginatingLeadId,
    Contact.OriginatingLeadIdDsc,
    Contact.OriginatingLeadIdName,
    Contact.OriginatingLeadIdYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Contact.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Contact.OverriddenCreatedOn,
    Contact.OwnerId,
    Contact.OwnerIdDsc,
    Contact.OwnerIdName,
    Contact.OwnerIdType,
    Contact.OwnerIdYomiName,
    Contact.OwningBusinessUnit,
    Contact.OwningTeam,
    Contact.OwningUser,
    Contact.Pager,
    Contact.ParentContactId,
    Contact.ParentContactIdDsc,
    Contact.ParentContactIdName,
    Contact.ParentContactIdYomiName,
    Contact.ParentCustomerId,
    Contact.ParentCustomerIdDsc,
    Contact.ParentCustomerIdName,
    Contact.ParentCustomerIdType,
    Contact.ParentCustomerIdYomiName,
    Contact.ParticipatesInWorkflow,
    ParticipatesInWorkflowPLTable.Value,
    Contact.PaymentTermsCode,
    PaymentTermsCodePLTable.Value,
    Contact.PreferredAppointmentDayCode,
    PreferredAppointmentDayCodePLTable.Value,
    Contact.PreferredAppointmentTimeCode,
    PreferredAppointmentTimeCodePLTable.Value,
    Contact.PreferredContactMethodCode,
    PreferredContactMethodCodePLTable.Value,
    Contact.PreferredEquipmentId,
    Contact.PreferredEquipmentIdDsc,
    Contact.PreferredEquipmentIdName,
    Contact.PreferredServiceId,
    Contact.PreferredServiceIdDsc,
    Contact.PreferredServiceIdName,
    Contact.PreferredSystemUserId,
    Contact.PreferredSystemUserIdDsc,
    Contact.PreferredSystemUserIdName,
    Contact.PreferredSystemUserIdYomiName,
    Contact.Salutation,
    Contact.ShippingMethodCode,
    ShippingMethodCodePLTable.Value,
    Contact.SpousesName,
    Contact.StateCode,
    StateCodePLTable.Value,
    Contact.StatusCode,
    StatusCodePLTable.Value,
    Contact.Suffix,
    Contact.Telephone1,
    Contact.Telephone2,
    Contact.Telephone3,
    Contact.TerritoryCode,
    TerritoryCodePLTable.Value,
    Contact.TimeZoneRuleVersionNumber,
    Contact.TransactionCurrencyId,
    Contact.TransactionCurrencyIdDsc,
    Contact.TransactionCurrencyIdName,
    Contact.UTCConversionTimeZoneCode,
    Contact.WebSiteUrl,
    Contact.YomiFirstName,
    Contact.YomiFullName,
    Contact.YomiLastName,
    Contact.YomiMiddleName,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from Contact
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = Contact.TransactionCurrencyId
    left outer join StringMap AccountRoleCodePLTable on 
        (AccountRoleCodePLTable.AttributeName = 'accountrolecode'
        and AccountRoleCodePLTable.ObjectTypeCode = 2
        and AccountRoleCodePLTable.AttributeValue = Contact.AccountRoleCode
        and AccountRoleCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_AddressTypeCodePLTable on 
        (Address1_AddressTypeCodePLTable.AttributeName = 'address1_addresstypecode'
        and Address1_AddressTypeCodePLTable.ObjectTypeCode = 2
        and Address1_AddressTypeCodePLTable.AttributeValue = Contact.Address1_AddressTypeCode
        and Address1_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_FreightTermsCodePLTable on 
        (Address1_FreightTermsCodePLTable.AttributeName = 'address1_freighttermscode'
        and Address1_FreightTermsCodePLTable.ObjectTypeCode = 2
        and Address1_FreightTermsCodePLTable.AttributeValue = Contact.Address1_FreightTermsCode
        and Address1_FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_ShippingMethodCodePLTable on 
        (Address1_ShippingMethodCodePLTable.AttributeName = 'address1_shippingmethodcode'
        and Address1_ShippingMethodCodePLTable.ObjectTypeCode = 2
        and Address1_ShippingMethodCodePLTable.AttributeValue = Contact.Address1_ShippingMethodCode
        and Address1_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_AddressTypeCodePLTable on 
        (Address2_AddressTypeCodePLTable.AttributeName = 'address2_addresstypecode'
        and Address2_AddressTypeCodePLTable.ObjectTypeCode = 2
        and Address2_AddressTypeCodePLTable.AttributeValue = Contact.Address2_AddressTypeCode
        and Address2_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_FreightTermsCodePLTable on 
        (Address2_FreightTermsCodePLTable.AttributeName = 'address2_freighttermscode'
        and Address2_FreightTermsCodePLTable.ObjectTypeCode = 2
        and Address2_FreightTermsCodePLTable.AttributeValue = Contact.Address2_FreightTermsCode
        and Address2_FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_ShippingMethodCodePLTable on 
        (Address2_ShippingMethodCodePLTable.AttributeName = 'address2_shippingmethodcode'
        and Address2_ShippingMethodCodePLTable.ObjectTypeCode = 2
        and Address2_ShippingMethodCodePLTable.AttributeValue = Contact.Address2_ShippingMethodCode
        and Address2_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap CreditOnHoldPLTable on 
        (CreditOnHoldPLTable.AttributeName = 'creditonhold'
        and CreditOnHoldPLTable.ObjectTypeCode = 2
        and CreditOnHoldPLTable.AttributeValue = Contact.CreditOnHold
        and CreditOnHoldPLTable.LangId = us.UILanguageId )
    left outer join StringMap CustomerSizeCodePLTable on 
        (CustomerSizeCodePLTable.AttributeName = 'customersizecode'
        and CustomerSizeCodePLTable.ObjectTypeCode = 2
        and CustomerSizeCodePLTable.AttributeValue = Contact.CustomerSizeCode
        and CustomerSizeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap CustomerTypeCodePLTable on 
        (CustomerTypeCodePLTable.AttributeName = 'customertypecode'
        and CustomerTypeCodePLTable.ObjectTypeCode = 2
        and CustomerTypeCodePLTable.AttributeValue = Contact.CustomerTypeCode
        and CustomerTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotBulkEMailPLTable on 
        (DoNotBulkEMailPLTable.AttributeName = 'donotbulkemail'
        and DoNotBulkEMailPLTable.ObjectTypeCode = 2
        and DoNotBulkEMailPLTable.AttributeValue = Contact.DoNotBulkEMail
        and DoNotBulkEMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotBulkPostalMailPLTable on 
        (DoNotBulkPostalMailPLTable.AttributeName = 'donotbulkpostalmail'
        and DoNotBulkPostalMailPLTable.ObjectTypeCode = 2
        and DoNotBulkPostalMailPLTable.AttributeValue = Contact.DoNotBulkPostalMail
        and DoNotBulkPostalMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotEMailPLTable on 
        (DoNotEMailPLTable.AttributeName = 'donotemail'
        and DoNotEMailPLTable.ObjectTypeCode = 2
        and DoNotEMailPLTable.AttributeValue = Contact.DoNotEMail
        and DoNotEMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotFaxPLTable on 
        (DoNotFaxPLTable.AttributeName = 'donotfax'
        and DoNotFaxPLTable.ObjectTypeCode = 2
        and DoNotFaxPLTable.AttributeValue = Contact.DoNotFax
        and DoNotFaxPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotPhonePLTable on 
        (DoNotPhonePLTable.AttributeName = 'donotphone'
        and DoNotPhonePLTable.ObjectTypeCode = 2
        and DoNotPhonePLTable.AttributeValue = Contact.DoNotPhone
        and DoNotPhonePLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotPostalMailPLTable on 
        (DoNotPostalMailPLTable.AttributeName = 'donotpostalmail'
        and DoNotPostalMailPLTable.ObjectTypeCode = 2
        and DoNotPostalMailPLTable.AttributeValue = Contact.DoNotPostalMail
        and DoNotPostalMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotSendMMPLTable on 
        (DoNotSendMMPLTable.AttributeName = 'donotsendmm'
        and DoNotSendMMPLTable.ObjectTypeCode = 2
        and DoNotSendMMPLTable.AttributeValue = Contact.DoNotSendMM
        and DoNotSendMMPLTable.LangId = us.UILanguageId )
    left outer join StringMap EducationCodePLTable on 
        (EducationCodePLTable.AttributeName = 'educationcode'
        and EducationCodePLTable.ObjectTypeCode = 2
        and EducationCodePLTable.AttributeValue = Contact.EducationCode
        and EducationCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap FamilyStatusCodePLTable on 
        (FamilyStatusCodePLTable.AttributeName = 'familystatuscode'
        and FamilyStatusCodePLTable.ObjectTypeCode = 2
        and FamilyStatusCodePLTable.AttributeValue = Contact.FamilyStatusCode
        and FamilyStatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap GenderCodePLTable on 
        (GenderCodePLTable.AttributeName = 'gendercode'
        and GenderCodePLTable.ObjectTypeCode = 2
        and GenderCodePLTable.AttributeValue = Contact.GenderCode
        and GenderCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap HasChildrenCodePLTable on 
        (HasChildrenCodePLTable.AttributeName = 'haschildrencode'
        and HasChildrenCodePLTable.ObjectTypeCode = 2
        and HasChildrenCodePLTable.AttributeValue = Contact.HasChildrenCode
        and HasChildrenCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsBackofficeCustomerPLTable on 
        (IsBackofficeCustomerPLTable.AttributeName = 'isbackofficecustomer'
        and IsBackofficeCustomerPLTable.ObjectTypeCode = 2
        and IsBackofficeCustomerPLTable.AttributeValue = Contact.IsBackofficeCustomer
        and IsBackofficeCustomerPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsPrivatePLTable on 
        (IsPrivatePLTable.AttributeName = 'isprivate'
        and IsPrivatePLTable.ObjectTypeCode = 2
        and IsPrivatePLTable.AttributeValue = Contact.IsPrivate
        and IsPrivatePLTable.LangId = us.UILanguageId )
    left outer join StringMap LeadSourceCodePLTable on 
        (LeadSourceCodePLTable.AttributeName = 'leadsourcecode'
        and LeadSourceCodePLTable.ObjectTypeCode = 2
        and LeadSourceCodePLTable.AttributeValue = Contact.LeadSourceCode
        and LeadSourceCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap MergedPLTable on 
        (MergedPLTable.AttributeName = 'merged'
        and MergedPLTable.ObjectTypeCode = 2
        and MergedPLTable.AttributeValue = Contact.Merged
        and MergedPLTable.LangId = us.UILanguageId )
    left outer join StringMap ParticipatesInWorkflowPLTable on 
        (ParticipatesInWorkflowPLTable.AttributeName = 'participatesinworkflow'
        and ParticipatesInWorkflowPLTable.ObjectTypeCode = 2
        and ParticipatesInWorkflowPLTable.AttributeValue = Contact.ParticipatesInWorkflow
        and ParticipatesInWorkflowPLTable.LangId = us.UILanguageId )
    left outer join StringMap PaymentTermsCodePLTable on 
        (PaymentTermsCodePLTable.AttributeName = 'paymenttermscode'
        and PaymentTermsCodePLTable.ObjectTypeCode = 2
        and PaymentTermsCodePLTable.AttributeValue = Contact.PaymentTermsCode
        and PaymentTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PreferredAppointmentDayCodePLTable on 
        (PreferredAppointmentDayCodePLTable.AttributeName = 'preferredappointmentdaycode'
        and PreferredAppointmentDayCodePLTable.ObjectTypeCode = 2
        and PreferredAppointmentDayCodePLTable.AttributeValue = Contact.PreferredAppointmentDayCode
        and PreferredAppointmentDayCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PreferredAppointmentTimeCodePLTable on 
        (PreferredAppointmentTimeCodePLTable.AttributeName = 'preferredappointmenttimecode'
        and PreferredAppointmentTimeCodePLTable.ObjectTypeCode = 2
        and PreferredAppointmentTimeCodePLTable.AttributeValue = Contact.PreferredAppointmentTimeCode
        and PreferredAppointmentTimeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PreferredContactMethodCodePLTable on 
        (PreferredContactMethodCodePLTable.AttributeName = 'preferredcontactmethodcode'
        and PreferredContactMethodCodePLTable.ObjectTypeCode = 2
        and PreferredContactMethodCodePLTable.AttributeValue = Contact.PreferredContactMethodCode
        and PreferredContactMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShippingMethodCodePLTable on 
        (ShippingMethodCodePLTable.AttributeName = 'shippingmethodcode'
        and ShippingMethodCodePLTable.ObjectTypeCode = 2
        and ShippingMethodCodePLTable.AttributeValue = Contact.ShippingMethodCode
        and ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 2
        and StateCodePLTable.AttributeValue = Contact.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 2
        and StatusCodePLTable.AttributeValue = Contact.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap TerritoryCodePLTable on 
        (TerritoryCodePLTable.AttributeName = 'territorycode'
        and TerritoryCodePLTable.ObjectTypeCode = 2
        and TerritoryCodePLTable.AttributeValue = Contact.TerritoryCode
        and TerritoryCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(2) pdm
where Contact.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Contact.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Contact.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Contact.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Contact.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Contact.ContactId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 2 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredDiscount]    Script Date: 04/11/2008 06:57:54 ******/




--
-- report view for discount
--
create view [dbo].[FilteredDiscount] (
    amount,
    amount_base,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    discountid,
    discounttypeid,
    discounttypeiddsc,
    discounttypeidname,
    exchangerate,
    highquantity,
    importsequencenumber,
    isamounttype,
    isamounttypename,
    lowquantity,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    organizationid,
    overriddencreatedon, 
    overriddencreatedonutc,
    percentage,
    statuscode,
    statuscodename,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
crm_moneyformatstring
) with view_metadata as 
select 
    Discount.Amount,
    Discount.Amount_Base,
    Discount.CreatedBy,
    Discount.CreatedByDsc,
    Discount.CreatedByName,
    Discount.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Discount.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Discount.CreatedOn,
    Discount.DiscountId,
    Discount.DiscountTypeId,
    Discount.DiscountTypeIdDsc,
    Discount.DiscountTypeIdName,
    Discount.ExchangeRate,
    Discount.HighQuantity,
    Discount.ImportSequenceNumber,
    Discount.IsAmountType,
    IsAmountTypePLTable.Value,
    Discount.LowQuantity,
    Discount.ModifiedBy,
    Discount.ModifiedByDsc,
    Discount.ModifiedByName,
    Discount.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Discount.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Discount.ModifiedOn,
    Discount.OrganizationId,
    dbo.fn_UTCToTzSpecificLocalTime(Discount.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Discount.OverriddenCreatedOn,
    Discount.Percentage,
    Discount.StatusCode,
    StatusCodePLTable.Value,
    Discount.TransactionCurrencyId,
    Discount.TransactionCurrencyIdDsc,
    Discount.TransactionCurrencyIdName,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from Discount
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = Discount.TransactionCurrencyId
    left outer join StringMap IsAmountTypePLTable on 
        (IsAmountTypePLTable.AttributeName = 'isamounttype'
        and IsAmountTypePLTable.ObjectTypeCode = 1013
        and IsAmountTypePLTable.AttributeValue = Discount.IsAmountType
        and IsAmountTypePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 1013
        and StatusCodePLTable.AttributeValue = Discount.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1080) pdm
where Discount.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    Discount.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredInvoice]    Script Date: 04/11/2008 06:57:57 ******/




--
-- report view for invoice
--
create view [dbo].[FilteredInvoice] (
    accountid,
    accountiddsc,
    accountidname,
    accountidyominame,
    billto_city,
    billto_country,
    billto_fax,
    billto_line1,
    billto_line2,
    billto_line3,
    billto_name,
    billto_postalcode,
    billto_stateorprovince,
    billto_telephone,
    contactid,
    contactiddsc,
    contactidname,
    contactidyominame,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customerid,
    customeriddsc,
    customeridname,
    customeridtype,
    datedelivered, 
    datedeliveredutc,
    description,
    discountamount,
    discountamount_base,
    discountpercentage,
    duedate, 
    duedateutc,
    exchangerate,
    freightamount,
    freightamount_base,
    importsequencenumber,
    invoiceid,
    invoicenumber,
    ispricelocked,
    ispricelockedname,
    lastbackofficesubmit, 
    lastbackofficesubmitutc,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    opportunityid,
    opportunityiddsc,
    opportunityidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owningteam,
    owninguser,
    paymenttermscode,
    paymenttermscodename,
    pricelevelid,
    priceleveliddsc,
    pricelevelidname,
    pricingerrorcode,
    pricingerrorcodename,
    prioritycode,
    prioritycodename,
    salesorderid,
    salesorderiddsc,
    salesorderidname,
    shippingmethodcode,
    shippingmethodcodename,
    shipto_city,
    shipto_country,
    shipto_fax,
    shipto_freighttermscode,
    shipto_freighttermscodename,
    shipto_line1,
    shipto_line2,
    shipto_line3,
    shipto_name,
    shipto_postalcode,
    shipto_stateorprovince,
    shipto_telephone,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    timezoneruleversionnumber,
    totalamount,
    totalamount_base,
    totalamountlessfreight,
    totalamountlessfreight_base,
    totaldiscountamount,
    totaldiscountamount_base,
    totallineitemamount,
    totallineitemamount_base,
    totallineitemdiscountamount,
    totallineitemdiscountamount_base,
    totaltax,
    totaltax_base,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode,
    willcall,
    willcallname,
crm_moneyformatstring
) with view_metadata as 
select 
    Invoice.AccountId,
    Invoice.AccountIdDsc,
    Invoice.AccountIdName,
    Invoice.AccountIdYomiName,
    Invoice.BillTo_City,
    Invoice.BillTo_Country,
    Invoice.BillTo_Fax,
    Invoice.BillTo_Line1,
    Invoice.BillTo_Line2,
    Invoice.BillTo_Line3,
    Invoice.BillTo_Name,
    Invoice.BillTo_PostalCode,
    Invoice.BillTo_StateOrProvince,
    Invoice.BillTo_Telephone,
    Invoice.ContactId,
    Invoice.ContactIdDsc,
    Invoice.ContactIdName,
    Invoice.ContactIdYomiName,
    Invoice.CreatedBy,
    Invoice.CreatedByDsc,
    Invoice.CreatedByName,
    Invoice.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Invoice.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Invoice.CreatedOn,
    Invoice.CustomerId,
    Invoice.CustomerIdDsc,
    Invoice.CustomerIdName,
    Invoice.CustomerIdType,
    dbo.fn_UTCToTzSpecificLocalTime(Invoice.DateDelivered,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Invoice.DateDelivered,
    Invoice.Description,
    Invoice.DiscountAmount,
    Invoice.DiscountAmount_Base,
    Invoice.DiscountPercentage,
    dbo.fn_UTCToTzSpecificLocalTime(Invoice.DueDate,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Invoice.DueDate,
    Invoice.ExchangeRate,
    Invoice.FreightAmount,
    Invoice.FreightAmount_Base,
    Invoice.ImportSequenceNumber,
    Invoice.InvoiceId,
    Invoice.InvoiceNumber,
    Invoice.IsPriceLocked,
    IsPriceLockedPLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(Invoice.LastBackofficeSubmit,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Invoice.LastBackofficeSubmit,
    Invoice.ModifiedBy,
    Invoice.ModifiedByDsc,
    Invoice.ModifiedByName,
    Invoice.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Invoice.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Invoice.ModifiedOn,
    Invoice.Name,
    Invoice.OpportunityId,
    Invoice.OpportunityIdDsc,
    Invoice.OpportunityIdName,
    dbo.fn_UTCToTzSpecificLocalTime(Invoice.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Invoice.OverriddenCreatedOn,
    Invoice.OwnerId,
    Invoice.OwnerIdDsc,
    Invoice.OwnerIdName,
    Invoice.OwnerIdType,
    Invoice.OwnerIdYomiName,
    Invoice.OwningBusinessUnit,
    Invoice.OwningTeam,
    Invoice.OwningUser,
    Invoice.PaymentTermsCode,
    PaymentTermsCodePLTable.Value,
    Invoice.PriceLevelId,
    Invoice.PriceLevelIdDsc,
    Invoice.PriceLevelIdName,
    Invoice.PricingErrorCode,
    PricingErrorCodePLTable.Value,
    Invoice.PriorityCode,
    PriorityCodePLTable.Value,
    Invoice.SalesOrderId,
    Invoice.SalesOrderIdDsc,
    Invoice.SalesOrderIdName,
    Invoice.ShippingMethodCode,
    ShippingMethodCodePLTable.Value,
    Invoice.ShipTo_City,
    Invoice.ShipTo_Country,
    Invoice.ShipTo_Fax,
    Invoice.ShipTo_FreightTermsCode,
    ShipTo_FreightTermsCodePLTable.Value,
    Invoice.ShipTo_Line1,
    Invoice.ShipTo_Line2,
    Invoice.ShipTo_Line3,
    Invoice.ShipTo_Name,
    Invoice.ShipTo_PostalCode,
    Invoice.ShipTo_StateOrProvince,
    Invoice.ShipTo_Telephone,
    Invoice.StateCode,
    StateCodePLTable.Value,
    Invoice.StatusCode,
    StatusCodePLTable.Value,
    Invoice.TimeZoneRuleVersionNumber,
    Invoice.TotalAmount,
    Invoice.TotalAmount_Base,
    Invoice.TotalAmountLessFreight,
    Invoice.TotalAmountLessFreight_Base,
    Invoice.TotalDiscountAmount,
    Invoice.TotalDiscountAmount_Base,
    Invoice.TotalLineItemAmount,
    Invoice.TotalLineItemAmount_Base,
    Invoice.TotalLineItemDiscountAmount,
    Invoice.TotalLineItemDiscountAmount_Base,
    Invoice.TotalTax,
    Invoice.TotalTax_Base,
    Invoice.TransactionCurrencyId,
    Invoice.TransactionCurrencyIdDsc,
    Invoice.TransactionCurrencyIdName,
    Invoice.UTCConversionTimeZoneCode,
    Invoice.WillCall,
    WillCallPLTable.Value,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from Invoice
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = Invoice.TransactionCurrencyId
    left outer join StringMap IsPriceLockedPLTable on 
        (IsPriceLockedPLTable.AttributeName = 'ispricelocked'
        and IsPriceLockedPLTable.ObjectTypeCode = 1090
        and IsPriceLockedPLTable.AttributeValue = Invoice.IsPriceLocked
        and IsPriceLockedPLTable.LangId = us.UILanguageId )
    left outer join StringMap PaymentTermsCodePLTable on 
        (PaymentTermsCodePLTable.AttributeName = 'paymenttermscode'
        and PaymentTermsCodePLTable.ObjectTypeCode = 1090
        and PaymentTermsCodePLTable.AttributeValue = Invoice.PaymentTermsCode
        and PaymentTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PricingErrorCodePLTable on 
        (PricingErrorCodePLTable.AttributeName = 'pricingerrorcode'
        and PricingErrorCodePLTable.ObjectTypeCode = 1090
        and PricingErrorCodePLTable.AttributeValue = Invoice.PricingErrorCode
        and PricingErrorCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 1090
        and PriorityCodePLTable.AttributeValue = Invoice.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShippingMethodCodePLTable on 
        (ShippingMethodCodePLTable.AttributeName = 'shippingmethodcode'
        and ShippingMethodCodePLTable.ObjectTypeCode = 1090
        and ShippingMethodCodePLTable.AttributeValue = Invoice.ShippingMethodCode
        and ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShipTo_FreightTermsCodePLTable on 
        (ShipTo_FreightTermsCodePLTable.AttributeName = 'shipto_freighttermscode'
        and ShipTo_FreightTermsCodePLTable.ObjectTypeCode = 1090
        and ShipTo_FreightTermsCodePLTable.AttributeValue = Invoice.ShipTo_FreightTermsCode
        and ShipTo_FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 1090
        and StateCodePLTable.AttributeValue = Invoice.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 1090
        and StatusCodePLTable.AttributeValue = Invoice.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap WillCallPLTable on 
        (WillCallPLTable.AttributeName = 'willcall'
        and WillCallPLTable.ObjectTypeCode = 1090
        and WillCallPLTable.AttributeValue = Invoice.WillCall
        and WillCallPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1090) pdm
where Invoice.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Invoice.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Invoice.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Invoice.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Invoice.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Invoice.InvoiceId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 1090 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredSalesOrderDetail]    Script Date: 04/11/2008 06:58:08 ******/




--
-- report view for salesorderdetail
--
create view [dbo].[FilteredSalesOrderDetail] (
    baseamount,
    baseamount_base,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    exchangerate,
    extendedamount,
    extendedamount_base,
    importsequencenumber,
    iscopied,
    iscopiedname,
    ispriceoverridden,
    ispriceoverriddenname,
    isproductoverridden,
    isproductoverriddenname,
    lineitemnumber,
    manualdiscountamount,
    manualdiscountamount_base,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    owningbusinessunit,
    owninguser,
    priceperunit,
    priceperunit_base,
    pricingerrorcode,
    pricingerrorcodename,
    productdescription,
    productid,
    productiddsc,
    productidname,
    quantity,
    quantitybackordered,
    quantitycancelled,
    quantityshipped,
    requestdeliveryby, 
    requestdeliverybyutc,
    salesorderdetailid,
    salesorderid,
    salesorderispricelocked,
    salesorderispricelockedname,
    salesorderstatecode,
    salesorderstatecodename,
    salesrepid,
    salesrepiddsc,
    salesrepidname,
    salesrepidyominame,
    shipto_addressid,
    shipto_city,
    shipto_contactname,
    shipto_country,
    shipto_fax,
    shipto_freighttermscode,
    shipto_freighttermscodename,
    shipto_line1,
    shipto_line2,
    shipto_line3,
    shipto_name,
    shipto_postalcode,
    shipto_stateorprovince,
    shipto_telephone,
    tax,
    tax_base,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    uomid,
    uomiddsc,
    uomidname,
    utcconversiontimezonecode,
    volumediscountamount,
    volumediscountamount_base,
    willcall,
    willcallname,
crm_moneyformatstring
) with view_metadata as 
select 
    SalesOrderDetail.BaseAmount,
    SalesOrderDetail.BaseAmount_Base,
    SalesOrderDetail.CreatedBy,
    SalesOrderDetail.CreatedByDsc,
    SalesOrderDetail.CreatedByName,
    SalesOrderDetail.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SalesOrderDetail.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesOrderDetail.CreatedOn,
    SalesOrderDetail.Description,
    SalesOrderDetail.ExchangeRate,
    SalesOrderDetail.ExtendedAmount,
    SalesOrderDetail.ExtendedAmount_Base,
    SalesOrderDetail.ImportSequenceNumber,
    SalesOrderDetail.IsCopied,
    IsCopiedPLTable.Value,
    SalesOrderDetail.IsPriceOverridden,
    IsPriceOverriddenPLTable.Value,
    SalesOrderDetail.IsProductOverridden,
    IsProductOverriddenPLTable.Value,
    SalesOrderDetail.LineItemNumber,
    SalesOrderDetail.ManualDiscountAmount,
    SalesOrderDetail.ManualDiscountAmount_Base,
    SalesOrderDetail.ModifiedBy,
    SalesOrderDetail.ModifiedByDsc,
    SalesOrderDetail.ModifiedByName,
    SalesOrderDetail.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SalesOrderDetail.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesOrderDetail.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(SalesOrderDetail.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesOrderDetail.OverriddenCreatedOn,
    SalesOrderDetail.OwningBusinessUnit,
    SalesOrderDetail.OwningUser,
    SalesOrderDetail.PricePerUnit,
    SalesOrderDetail.PricePerUnit_Base,
    SalesOrderDetail.PricingErrorCode,
    PricingErrorCodePLTable.Value,
    SalesOrderDetail.ProductDescription,
    SalesOrderDetail.ProductId,
    SalesOrderDetail.ProductIdDsc,
    SalesOrderDetail.ProductIdName,
    SalesOrderDetail.Quantity,
    SalesOrderDetail.QuantityBackordered,
    SalesOrderDetail.QuantityCancelled,
    SalesOrderDetail.QuantityShipped,
    dbo.fn_UTCToTzSpecificLocalTime(SalesOrderDetail.RequestDeliveryBy,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesOrderDetail.RequestDeliveryBy,
    SalesOrderDetail.SalesOrderDetailId,
    SalesOrderDetail.SalesOrderId,
    SalesOrderDetail.SalesOrderIsPriceLocked,
    SalesOrderIsPriceLockedPLTable.Value,
    SalesOrderDetail.SalesOrderStateCode,
    SalesOrderStateCodePLTable.Value,
    SalesOrderDetail.SalesRepId,
    SalesOrderDetail.SalesRepIdDsc,
    SalesOrderDetail.SalesRepIdName,
    SalesOrderDetail.SalesRepIdYomiName,
    SalesOrderDetail.ShipTo_AddressId,
    SalesOrderDetail.ShipTo_City,
    SalesOrderDetail.ShipTo_ContactName,
    SalesOrderDetail.ShipTo_Country,
    SalesOrderDetail.ShipTo_Fax,
    SalesOrderDetail.ShipTo_FreightTermsCode,
    ShipTo_FreightTermsCodePLTable.Value,
    SalesOrderDetail.ShipTo_Line1,
    SalesOrderDetail.ShipTo_Line2,
    SalesOrderDetail.ShipTo_Line3,
    SalesOrderDetail.ShipTo_Name,
    SalesOrderDetail.ShipTo_PostalCode,
    SalesOrderDetail.ShipTo_StateOrProvince,
    SalesOrderDetail.ShipTo_Telephone,
    SalesOrderDetail.Tax,
    SalesOrderDetail.Tax_Base,
    SalesOrderDetail.TimeZoneRuleVersionNumber,
    SalesOrderDetail.TransactionCurrencyId,
    SalesOrderDetail.TransactionCurrencyIdDsc,
    SalesOrderDetail.TransactionCurrencyIdName,
    SalesOrderDetail.UoMId,
    SalesOrderDetail.UoMIdDsc,
    SalesOrderDetail.UoMIdName,
    SalesOrderDetail.UTCConversionTimeZoneCode,
    SalesOrderDetail.VolumeDiscountAmount,
    SalesOrderDetail.VolumeDiscountAmount_Base,
    SalesOrderDetail.WillCall,
    WillCallPLTable.Value,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from SalesOrderDetail
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = SalesOrderDetail.TransactionCurrencyId
    left outer join StringMap IsCopiedPLTable on 
        (IsCopiedPLTable.AttributeName = 'iscopied'
        and IsCopiedPLTable.ObjectTypeCode = 1089
        and IsCopiedPLTable.AttributeValue = SalesOrderDetail.IsCopied
        and IsCopiedPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsPriceOverriddenPLTable on 
        (IsPriceOverriddenPLTable.AttributeName = 'ispriceoverridden'
        and IsPriceOverriddenPLTable.ObjectTypeCode = 1089
        and IsPriceOverriddenPLTable.AttributeValue = SalesOrderDetail.IsPriceOverridden
        and IsPriceOverriddenPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsProductOverriddenPLTable on 
        (IsProductOverriddenPLTable.AttributeName = 'isproductoverridden'
        and IsProductOverriddenPLTable.ObjectTypeCode = 1089
        and IsProductOverriddenPLTable.AttributeValue = SalesOrderDetail.IsProductOverridden
        and IsProductOverriddenPLTable.LangId = us.UILanguageId )
    left outer join StringMap PricingErrorCodePLTable on 
        (PricingErrorCodePLTable.AttributeName = 'pricingerrorcode'
        and PricingErrorCodePLTable.ObjectTypeCode = 1089
        and PricingErrorCodePLTable.AttributeValue = SalesOrderDetail.PricingErrorCode
        and PricingErrorCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap SalesOrderIsPriceLockedPLTable on 
        (SalesOrderIsPriceLockedPLTable.AttributeName = 'salesorderispricelocked'
        and SalesOrderIsPriceLockedPLTable.ObjectTypeCode = 1089
        and SalesOrderIsPriceLockedPLTable.AttributeValue = SalesOrderDetail.SalesOrderIsPriceLocked
        and SalesOrderIsPriceLockedPLTable.LangId = us.UILanguageId )
    left outer join StringMap SalesOrderStateCodePLTable on 
        (SalesOrderStateCodePLTable.AttributeName = 'salesorderstatecode'
        and SalesOrderStateCodePLTable.ObjectTypeCode = 1089
        and SalesOrderStateCodePLTable.AttributeValue = SalesOrderDetail.SalesOrderStateCode
        and SalesOrderStateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShipTo_FreightTermsCodePLTable on 
        (ShipTo_FreightTermsCodePLTable.AttributeName = 'shipto_freighttermscode'
        and ShipTo_FreightTermsCodePLTable.ObjectTypeCode = 1089
        and ShipTo_FreightTermsCodePLTable.AttributeValue = SalesOrderDetail.ShipTo_FreightTermsCode
        and ShipTo_FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap WillCallPLTable on 
        (WillCallPLTable.AttributeName = 'willcall'
        and WillCallPLTable.ObjectTypeCode = 1089
        and WillCallPLTable.AttributeValue = SalesOrderDetail.WillCall
        and WillCallPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1088) pdm
where SalesOrderDetail.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    SalesOrderDetail.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		SalesOrderDetail.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		SalesOrderDetail.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		SalesOrderDetail.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    SalesOrderDetail.SalesOrderId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 1088 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredInvoiceDetail]    Script Date: 04/11/2008 06:57:57 ******/




--
-- report view for invoicedetail
--
create view [dbo].[FilteredInvoiceDetail] (
    actualdeliveryon, 
    actualdeliveryonutc,
    baseamount,
    baseamount_base,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    exchangerate,
    extendedamount,
    extendedamount_base,
    importsequencenumber,
    invoicedetailid,
    invoiceid,
    invoiceispricelocked,
    invoiceispricelockedname,
    invoicestatecode,
    invoicestatecodename,
    iscopied,
    iscopiedname,
    ispriceoverridden,
    ispriceoverriddenname,
    isproductoverridden,
    isproductoverriddenname,
    lineitemnumber,
    manualdiscountamount,
    manualdiscountamount_base,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    owningbusinessunit,
    owninguser,
    priceperunit,
    priceperunit_base,
    pricingerrorcode,
    pricingerrorcodename,
    productdescription,
    productid,
    productiddsc,
    productidname,
    quantity,
    quantitybackordered,
    quantitycancelled,
    quantityshipped,
    salesrepid,
    salesrepiddsc,
    salesrepidname,
    salesrepidyominame,
    shippingtrackingnumber,
    shipto_city,
    shipto_country,
    shipto_fax,
    shipto_freighttermscode,
    shipto_freighttermscodename,
    shipto_line1,
    shipto_line2,
    shipto_line3,
    shipto_name,
    shipto_postalcode,
    shipto_stateorprovince,
    shipto_telephone,
    tax,
    tax_base,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    uomid,
    uomiddsc,
    uomidname,
    utcconversiontimezonecode,
    volumediscountamount,
    volumediscountamount_base,
    willcall,
    willcallname,
crm_moneyformatstring
) with view_metadata as 
select 
    dbo.fn_UTCToTzSpecificLocalTime(InvoiceDetail.ActualDeliveryOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    InvoiceDetail.ActualDeliveryOn,
    InvoiceDetail.BaseAmount,
    InvoiceDetail.BaseAmount_Base,
    InvoiceDetail.CreatedBy,
    InvoiceDetail.CreatedByDsc,
    InvoiceDetail.CreatedByName,
    InvoiceDetail.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(InvoiceDetail.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    InvoiceDetail.CreatedOn,
    InvoiceDetail.Description,
    InvoiceDetail.ExchangeRate,
    InvoiceDetail.ExtendedAmount,
    InvoiceDetail.ExtendedAmount_Base,
    InvoiceDetail.ImportSequenceNumber,
    InvoiceDetail.InvoiceDetailId,
    InvoiceDetail.InvoiceId,
    InvoiceDetail.InvoiceIsPriceLocked,
    InvoiceIsPriceLockedPLTable.Value,
    InvoiceDetail.InvoiceStateCode,
    InvoiceStateCodePLTable.Value,
    InvoiceDetail.IsCopied,
    IsCopiedPLTable.Value,
    InvoiceDetail.IsPriceOverridden,
    IsPriceOverriddenPLTable.Value,
    InvoiceDetail.IsProductOverridden,
    IsProductOverriddenPLTable.Value,
    InvoiceDetail.LineItemNumber,
    InvoiceDetail.ManualDiscountAmount,
    InvoiceDetail.ManualDiscountAmount_Base,
    InvoiceDetail.ModifiedBy,
    InvoiceDetail.ModifiedByDsc,
    InvoiceDetail.ModifiedByName,
    InvoiceDetail.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(InvoiceDetail.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    InvoiceDetail.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(InvoiceDetail.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    InvoiceDetail.OverriddenCreatedOn,
    InvoiceDetail.OwningBusinessUnit,
    InvoiceDetail.OwningUser,
    InvoiceDetail.PricePerUnit,
    InvoiceDetail.PricePerUnit_Base,
    InvoiceDetail.PricingErrorCode,
    PricingErrorCodePLTable.Value,
    InvoiceDetail.ProductDescription,
    InvoiceDetail.ProductId,
    InvoiceDetail.ProductIdDsc,
    InvoiceDetail.ProductIdName,
    InvoiceDetail.Quantity,
    InvoiceDetail.QuantityBackordered,
    InvoiceDetail.QuantityCancelled,
    InvoiceDetail.QuantityShipped,
    InvoiceDetail.SalesRepId,
    InvoiceDetail.SalesRepIdDsc,
    InvoiceDetail.SalesRepIdName,
    InvoiceDetail.SalesRepIdYomiName,
    InvoiceDetail.ShippingTrackingNumber,
    InvoiceDetail.ShipTo_City,
    InvoiceDetail.ShipTo_Country,
    InvoiceDetail.ShipTo_Fax,
    InvoiceDetail.ShipTo_FreightTermsCode,
    ShipTo_FreightTermsCodePLTable.Value,
    InvoiceDetail.ShipTo_Line1,
    InvoiceDetail.ShipTo_Line2,
    InvoiceDetail.ShipTo_Line3,
    InvoiceDetail.ShipTo_Name,
    InvoiceDetail.ShipTo_PostalCode,
    InvoiceDetail.ShipTo_StateOrProvince,
    InvoiceDetail.ShipTo_Telephone,
    InvoiceDetail.Tax,
    InvoiceDetail.Tax_Base,
    InvoiceDetail.TimeZoneRuleVersionNumber,
    InvoiceDetail.TransactionCurrencyId,
    InvoiceDetail.TransactionCurrencyIdDsc,
    InvoiceDetail.TransactionCurrencyIdName,
    InvoiceDetail.UoMId,
    InvoiceDetail.UoMIdDsc,
    InvoiceDetail.UoMIdName,
    InvoiceDetail.UTCConversionTimeZoneCode,
    InvoiceDetail.VolumeDiscountAmount,
    InvoiceDetail.VolumeDiscountAmount_Base,
    InvoiceDetail.WillCall,
    WillCallPLTable.Value,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from InvoiceDetail
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = InvoiceDetail.TransactionCurrencyId
    left outer join StringMap InvoiceIsPriceLockedPLTable on 
        (InvoiceIsPriceLockedPLTable.AttributeName = 'invoiceispricelocked'
        and InvoiceIsPriceLockedPLTable.ObjectTypeCode = 1091
        and InvoiceIsPriceLockedPLTable.AttributeValue = InvoiceDetail.InvoiceIsPriceLocked
        and InvoiceIsPriceLockedPLTable.LangId = us.UILanguageId )
    left outer join StringMap InvoiceStateCodePLTable on 
        (InvoiceStateCodePLTable.AttributeName = 'invoicestatecode'
        and InvoiceStateCodePLTable.ObjectTypeCode = 1091
        and InvoiceStateCodePLTable.AttributeValue = InvoiceDetail.InvoiceStateCode
        and InvoiceStateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsCopiedPLTable on 
        (IsCopiedPLTable.AttributeName = 'iscopied'
        and IsCopiedPLTable.ObjectTypeCode = 1091
        and IsCopiedPLTable.AttributeValue = InvoiceDetail.IsCopied
        and IsCopiedPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsPriceOverriddenPLTable on 
        (IsPriceOverriddenPLTable.AttributeName = 'ispriceoverridden'
        and IsPriceOverriddenPLTable.ObjectTypeCode = 1091
        and IsPriceOverriddenPLTable.AttributeValue = InvoiceDetail.IsPriceOverridden
        and IsPriceOverriddenPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsProductOverriddenPLTable on 
        (IsProductOverriddenPLTable.AttributeName = 'isproductoverridden'
        and IsProductOverriddenPLTable.ObjectTypeCode = 1091
        and IsProductOverriddenPLTable.AttributeValue = InvoiceDetail.IsProductOverridden
        and IsProductOverriddenPLTable.LangId = us.UILanguageId )
    left outer join StringMap PricingErrorCodePLTable on 
        (PricingErrorCodePLTable.AttributeName = 'pricingerrorcode'
        and PricingErrorCodePLTable.ObjectTypeCode = 1091
        and PricingErrorCodePLTable.AttributeValue = InvoiceDetail.PricingErrorCode
        and PricingErrorCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShipTo_FreightTermsCodePLTable on 
        (ShipTo_FreightTermsCodePLTable.AttributeName = 'shipto_freighttermscode'
        and ShipTo_FreightTermsCodePLTable.ObjectTypeCode = 1091
        and ShipTo_FreightTermsCodePLTable.AttributeValue = InvoiceDetail.ShipTo_FreightTermsCode
        and ShipTo_FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap WillCallPLTable on 
        (WillCallPLTable.AttributeName = 'willcall'
        and WillCallPLTable.ObjectTypeCode = 1091
        and WillCallPLTable.AttributeValue = InvoiceDetail.WillCall
        and WillCallPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1090) pdm
where InvoiceDetail.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    InvoiceDetail.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		InvoiceDetail.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		InvoiceDetail.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		InvoiceDetail.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    InvoiceDetail.InvoiceId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 1090 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredUserFiscalCalendar]    Script Date: 04/11/2008 06:58:14 ******/




--
-- report view for userfiscalcalendar
--
create view [dbo].[FilteredUserFiscalCalendar] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    effectiveon, 
    effectiveonutc,
    exchangerate,
    fiscalperiodtype,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    period1,
    period1_base,
    period10,
    period10_base,
    period11,
    period11_base,
    period12,
    period12_base,
    period13,
    period13_base,
    period2,
    period2_base,
    period3,
    period3_base,
    period4,
    period4_base,
    period5,
    period5_base,
    period6,
    period6_base,
    period7,
    period7_base,
    period8,
    period8_base,
    period9,
    period9_base,
    salespersonid,
    salespersoniddsc,
    salespersonidname,
    salespersonidyominame,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    userfiscalcalendarid,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    UserFiscalCalendar.BusinessUnitId,
    UserFiscalCalendar.BusinessUnitIdDsc,
    UserFiscalCalendar.BusinessUnitIdName,
    UserFiscalCalendar.CreatedBy,
    UserFiscalCalendar.CreatedByDsc,
    UserFiscalCalendar.CreatedByName,
    UserFiscalCalendar.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.CreatedOn,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.EffectiveOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.EffectiveOn,
    UserFiscalCalendar.ExchangeRate,
    UserFiscalCalendar.FiscalPeriodType,
    UserFiscalCalendar.ImportSequenceNumber,
    UserFiscalCalendar.ModifiedBy,
    UserFiscalCalendar.ModifiedByDsc,
    UserFiscalCalendar.ModifiedByName,
    UserFiscalCalendar.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UserFiscalCalendar.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UserFiscalCalendar.ModifiedOn,
    UserFiscalCalendar.Period1,
    UserFiscalCalendar.Period1_Base,
    UserFiscalCalendar.Period10,
    UserFiscalCalendar.Period10_Base,
    UserFiscalCalendar.Period11,
    UserFiscalCalendar.Period11_Base,
    UserFiscalCalendar.Period12,
    UserFiscalCalendar.Period12_Base,
    UserFiscalCalendar.Period13,
    UserFiscalCalendar.Period13_Base,
    UserFiscalCalendar.Period2,
    UserFiscalCalendar.Period2_Base,
    UserFiscalCalendar.Period3,
    UserFiscalCalendar.Period3_Base,
    UserFiscalCalendar.Period4,
    UserFiscalCalendar.Period4_Base,
    UserFiscalCalendar.Period5,
    UserFiscalCalendar.Period5_Base,
    UserFiscalCalendar.Period6,
    UserFiscalCalendar.Period6_Base,
    UserFiscalCalendar.Period7,
    UserFiscalCalendar.Period7_Base,
    UserFiscalCalendar.Period8,
    UserFiscalCalendar.Period8_Base,
    UserFiscalCalendar.Period9,
    UserFiscalCalendar.Period9_Base,
    UserFiscalCalendar.SalesPersonId,
    UserFiscalCalendar.SalesPersonIdDsc,
    UserFiscalCalendar.SalesPersonIdName,
    UserFiscalCalendar.SalesPersonIdYomiName,
    UserFiscalCalendar.TimeZoneRuleVersionNumber,
    UserFiscalCalendar.TransactionCurrencyId,
    UserFiscalCalendar.TransactionCurrencyIdDsc,
    UserFiscalCalendar.TransactionCurrencyIdName,
    UserFiscalCalendar.UserFiscalCalendarId,
    UserFiscalCalendar.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from UserFiscalCalendar
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = UserFiscalCalendar.TransactionCurrencyId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(8) pdm
    where
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		UserFiscalCalendar.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		UserFiscalCalendar.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		UserFiscalCalendar.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredReportEntity]    Script Date: 04/11/2008 06:58:06 ******/




--
-- report view for reportentity
--
create view [dbo].[FilteredReportEntity] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    importsequencenumber,
    isfilterable,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    objecttypecode,
    objecttypecodename,
    owningbusinessunit,
    owninguser,
    reportentityid,
    reportid,
    reportiddsc,
    reportidname
) with view_metadata as 
select 
    ReportEntity.CreatedBy,
    ReportEntity.CreatedByDsc,
    ReportEntity.CreatedByName,
    ReportEntity.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ReportEntity.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ReportEntity.CreatedOn,
    ReportEntity.ImportSequenceNumber,
    ReportEntity.IsFilterable,
    ReportEntity.ModifiedBy,
    ReportEntity.ModifiedByDsc,
    ReportEntity.ModifiedByName,
    ReportEntity.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ReportEntity.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ReportEntity.ModifiedOn,
    ReportEntity.ObjectTypeCode,
    ObjectTypeCodePLTable.Value,
    ReportEntity.OwningBusinessUnit,
    ReportEntity.OwningUser,
    ReportEntity.ReportEntityId,
    ReportEntity.ReportId,
    ReportEntity.ReportIdDsc,
    ReportEntity.ReportIdName
from ReportEntity
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap ObjectTypeCodePLTable on 
        (ObjectTypeCodePLTable.AttributeName = 'objecttypecode'
        and ObjectTypeCodePLTable.ObjectTypeCode = 9101
        and ObjectTypeCodePLTable.AttributeValue = ReportEntity.ObjectTypeCode
        and ObjectTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(9100) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ReportEntity.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ReportEntity.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ReportEntity.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ReportEntity.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ReportEntity.ReportId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 9100 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredReportLink]    Script Date: 04/11/2008 06:58:06 ******/




--
-- report view for reportlink
--
create view [dbo].[FilteredReportLink] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    importsequencenumber,
    linkedreportid,
    linkedreportname,
    linktypecode,
    linktypecodename,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    owningbusinessunit,
    owninguser,
    reportid,
    reportlinkid
) with view_metadata as 
select 
    ReportLink.CreatedBy,
    ReportLink.CreatedByDsc,
    ReportLink.CreatedByName,
    ReportLink.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ReportLink.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ReportLink.CreatedOn,
    ReportLink.ImportSequenceNumber,
    ReportLink.LinkedReportId,
    ReportLink.LinkedReportName,
    ReportLink.LinkTypeCode,
    LinkTypeCodePLTable.Value,
    ReportLink.ModifiedBy,
    ReportLink.ModifiedByDsc,
    ReportLink.ModifiedByName,
    ReportLink.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ReportLink.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ReportLink.ModifiedOn,
    ReportLink.OwningBusinessUnit,
    ReportLink.OwningUser,
    ReportLink.ReportId,
    ReportLink.ReportLinkId
from ReportLink
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap LinkTypeCodePLTable on 
        (LinkTypeCodePLTable.AttributeName = 'linktypecode'
        and LinkTypeCodePLTable.ObjectTypeCode = 9104
        and LinkTypeCodePLTable.AttributeValue = ReportLink.LinkTypeCode
        and LinkTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(9100) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ReportLink.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ReportLink.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ReportLink.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ReportLink.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ReportLink.ReportId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 9100 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredCampaignResponse]    Script Date: 04/11/2008 06:57:51 ******/




--
-- report view for campaignresponse
--
create view [dbo].[FilteredCampaignResponse] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    category,
    channeltypecode,
    channeltypecodename,
    companyname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    emailaddress,
    fax,
    firstname,
    importsequencenumber,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    lastname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    originatingactivitydsc,
    originatingactivityid,
    originatingactivityidtypecode,
    originatingactivityname,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    prioritycode,
    prioritycodename,
    promotioncodename,
    receivedon, 
    receivedonutc,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    responsecode,
    responsecodename,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    telephone,
    timezoneruleversionnumber,
    utcconversiontimezonecode,
    yomicompanyname,
    yomifirstname,
    yomilastname
) with view_metadata as 
select 
    CampaignResponse.ActivityId,
    CampaignResponse.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignResponse.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignResponse.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignResponse.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignResponse.ActualStart,
    CampaignResponse.Category,
    CampaignResponse.ChannelTypeCode,
    ChannelTypeCodePLTable.Value,
    CampaignResponse.CompanyName,
    CampaignResponse.CreatedBy,
    CampaignResponse.CreatedByDsc,
    CampaignResponse.CreatedByName,
    CampaignResponse.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignResponse.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignResponse.CreatedOn,
    CampaignResponse.Description,
    CampaignResponse.EMailAddress,
    CampaignResponse.Fax,
    CampaignResponse.FirstName,
    CampaignResponse.ImportSequenceNumber,
    CampaignResponse.IsBilled,
    IsBilledPLTable.Value,
    CampaignResponse.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    CampaignResponse.LastName,
    CampaignResponse.ModifiedBy,
    CampaignResponse.ModifiedByDsc,
    CampaignResponse.ModifiedByName,
    CampaignResponse.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignResponse.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignResponse.ModifiedOn,
    CampaignResponse.OriginatingActivityDsc,
    CampaignResponse.OriginatingActivityId,
    CampaignResponse.OriginatingActivityIdTypeCode,
    CampaignResponse.OriginatingActivityName,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignResponse.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignResponse.OverriddenCreatedOn,
    CampaignResponse.OwnerId,
    CampaignResponse.OwnerIdDsc,
    CampaignResponse.OwnerIdName,
    CampaignResponse.OwnerIdType,
    CampaignResponse.OwnerIdYomiName,
    CampaignResponse.OwningBusinessUnit,
    CampaignResponse.OwningUser,
    CampaignResponse.PriorityCode,
    PriorityCodePLTable.Value,
    CampaignResponse.PromotionCodeName,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignResponse.ReceivedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignResponse.ReceivedOn,
    CampaignResponse.RegardingObjectId,
    CampaignResponse.RegardingObjectIdDsc,
    CampaignResponse.RegardingObjectIdName,
    CampaignResponse.RegardingObjectIdYomiName,
    CampaignResponse.RegardingObjectTypeCode,
    CampaignResponse.ResponseCode,
    ResponseCodePLTable.Value,
    CampaignResponse.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignResponse.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignResponse.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(CampaignResponse.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CampaignResponse.ScheduledStart,
    CampaignResponse.ServiceId,
    CampaignResponse.StateCode,
    StateCodePLTable.Value,
    CampaignResponse.StatusCode,
    StatusCodePLTable.Value,
    CampaignResponse.Subcategory,
    CampaignResponse.Subject,
    CampaignResponse.Telephone,
    CampaignResponse.TimeZoneRuleVersionNumber,
    CampaignResponse.UTCConversionTimeZoneCode,
    CampaignResponse.YomiCompanyName,
    CampaignResponse.YomiFirstName,
    CampaignResponse.YomiLastName
from CampaignResponse
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap ChannelTypeCodePLTable on 
        (ChannelTypeCodePLTable.AttributeName = 'channeltypecode'
        and ChannelTypeCodePLTable.ObjectTypeCode = 4401
        and ChannelTypeCodePLTable.AttributeValue = CampaignResponse.ChannelTypeCode
        and ChannelTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4401
        and IsBilledPLTable.AttributeValue = CampaignResponse.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4401
        and IsWorkflowCreatedPLTable.AttributeValue = CampaignResponse.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 4401
        and PriorityCodePLTable.AttributeValue = CampaignResponse.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ResponseCodePLTable on 
        (ResponseCodePLTable.AttributeName = 'responsecode'
        and ResponseCodePLTable.ObjectTypeCode = 4401
        and ResponseCodePLTable.AttributeValue = CampaignResponse.ResponseCode
        and ResponseCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4401
        and StateCodePLTable.AttributeValue = CampaignResponse.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4401
        and StatusCodePLTable.AttributeValue = CampaignResponse.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where CampaignResponse.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    CampaignResponse.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		CampaignResponse.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		CampaignResponse.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		CampaignResponse.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    CampaignResponse.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredProductPriceLevel]    Script Date: 04/11/2008 06:58:03 ******/




--
-- report view for productpricelevel
--
create view [dbo].[FilteredProductPriceLevel] (
    amount,
    amount_base,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    discounttypeid,
    discounttypeiddsc,
    discounttypeidname,
    exchangerate,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    organizationid,
    overriddencreatedon, 
    overriddencreatedonutc,
    percentage,
    pricelevelid,
    priceleveliddsc,
    pricelevelidname,
    pricingmethodcode,
    pricingmethodcodename,
    productid,
    productiddsc,
    productidname,
    productpricelevelid,
    quantitysellingcode,
    quantitysellingcodename,
    roundingoptionamount,
    roundingoptionamount_base,
    roundingoptioncode,
    roundingoptioncodename,
    roundingpolicycode,
    roundingpolicycodename,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    uomid,
    uomiddsc,
    uomidname,
    uomscheduleid,
    uomscheduleiddsc,
    uomscheduleidname,
crm_moneyformatstring
) with view_metadata as 
select 
    ProductPriceLevel.Amount,
    ProductPriceLevel.Amount_Base,
    ProductPriceLevel.CreatedBy,
    ProductPriceLevel.CreatedByDsc,
    ProductPriceLevel.CreatedByName,
    ProductPriceLevel.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ProductPriceLevel.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ProductPriceLevel.CreatedOn,
    ProductPriceLevel.DiscountTypeId,
    ProductPriceLevel.DiscountTypeIdDsc,
    ProductPriceLevel.DiscountTypeIdName,
    ProductPriceLevel.ExchangeRate,
    ProductPriceLevel.ImportSequenceNumber,
    ProductPriceLevel.ModifiedBy,
    ProductPriceLevel.ModifiedByDsc,
    ProductPriceLevel.ModifiedByName,
    ProductPriceLevel.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ProductPriceLevel.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ProductPriceLevel.ModifiedOn,
    ProductPriceLevel.OrganizationId,
    dbo.fn_UTCToTzSpecificLocalTime(ProductPriceLevel.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ProductPriceLevel.OverriddenCreatedOn,
    ProductPriceLevel.Percentage,
    ProductPriceLevel.PriceLevelId,
    ProductPriceLevel.PriceLevelIdDsc,
    ProductPriceLevel.PriceLevelIdName,
    ProductPriceLevel.PricingMethodCode,
    PricingMethodCodePLTable.Value,
    ProductPriceLevel.ProductId,
    ProductPriceLevel.ProductIdDsc,
    ProductPriceLevel.ProductIdName,
    ProductPriceLevel.ProductPriceLevelId,
    ProductPriceLevel.QuantitySellingCode,
    QuantitySellingCodePLTable.Value,
    ProductPriceLevel.RoundingOptionAmount,
    ProductPriceLevel.RoundingOptionAmount_Base,
    ProductPriceLevel.RoundingOptionCode,
    RoundingOptionCodePLTable.Value,
    ProductPriceLevel.RoundingPolicyCode,
    RoundingPolicyCodePLTable.Value,
    ProductPriceLevel.TransactionCurrencyId,
    ProductPriceLevel.TransactionCurrencyIdDsc,
    ProductPriceLevel.TransactionCurrencyIdName,
    ProductPriceLevel.UoMId,
    ProductPriceLevel.UoMIdDsc,
    ProductPriceLevel.UoMIdName,
    ProductPriceLevel.UoMScheduleId,
    ProductPriceLevel.UoMScheduleIdDsc,
    ProductPriceLevel.UoMScheduleIdName,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from ProductPriceLevel
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = ProductPriceLevel.TransactionCurrencyId
    left outer join StringMap PricingMethodCodePLTable on 
        (PricingMethodCodePLTable.AttributeName = 'pricingmethodcode'
        and PricingMethodCodePLTable.ObjectTypeCode = 1026
        and PricingMethodCodePLTable.AttributeValue = ProductPriceLevel.PricingMethodCode
        and PricingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap QuantitySellingCodePLTable on 
        (QuantitySellingCodePLTable.AttributeName = 'quantitysellingcode'
        and QuantitySellingCodePLTable.ObjectTypeCode = 1026
        and QuantitySellingCodePLTable.AttributeValue = ProductPriceLevel.QuantitySellingCode
        and QuantitySellingCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap RoundingOptionCodePLTable on 
        (RoundingOptionCodePLTable.AttributeName = 'roundingoptioncode'
        and RoundingOptionCodePLTable.ObjectTypeCode = 1026
        and RoundingOptionCodePLTable.AttributeValue = ProductPriceLevel.RoundingOptionCode
        and RoundingOptionCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap RoundingPolicyCodePLTable on 
        (RoundingPolicyCodePLTable.AttributeName = 'roundingpolicycode'
        and RoundingPolicyCodePLTable.ObjectTypeCode = 1026
        and RoundingPolicyCodePLTable.AttributeValue = ProductPriceLevel.RoundingPolicyCode
        and RoundingPolicyCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1022) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    ProductPriceLevel.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredSalesLiteratureItem]    Script Date: 04/11/2008 06:58:07 ******/




--
-- report view for salesliteratureitem
--
create view [dbo].[FilteredSalesLiteratureItem] (
    abstract,
    attacheddocumenturl,
    authorname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    documentbody,
    filename,
    filesize,
    filetypecode,
    filetypecodename,
    importsequencenumber,
    iscustomerviewable,
    iscustomerviewablename,
    keywords,
    mimetype,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    organizationid,
    overriddencreatedon, 
    overriddencreatedonutc,
    salesliteratureid,
    salesliteratureitemid,
    title
) with view_metadata as 
select 
    SalesLiteratureItem.Abstract,
    SalesLiteratureItem.AttachedDocumentUrl,
    SalesLiteratureItem.AuthorName,
    SalesLiteratureItem.CreatedBy,
    SalesLiteratureItem.CreatedByDsc,
    SalesLiteratureItem.CreatedByName,
    SalesLiteratureItem.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SalesLiteratureItem.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesLiteratureItem.CreatedOn,
    SalesLiteratureItem.DocumentBody,
    SalesLiteratureItem.FileName,
    SalesLiteratureItem.FileSize,
    SalesLiteratureItem.FileTypeCode,
    FileTypeCodePLTable.Value,
    SalesLiteratureItem.ImportSequenceNumber,
    SalesLiteratureItem.IsCustomerViewable,
    IsCustomerViewablePLTable.Value,
    SalesLiteratureItem.KeyWords,
    SalesLiteratureItem.MimeType,
    SalesLiteratureItem.ModifiedBy,
    SalesLiteratureItem.ModifiedByDsc,
    SalesLiteratureItem.ModifiedByName,
    SalesLiteratureItem.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(SalesLiteratureItem.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesLiteratureItem.ModifiedOn,
    SalesLiteratureItem.OrganizationId,
    dbo.fn_UTCToTzSpecificLocalTime(SalesLiteratureItem.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SalesLiteratureItem.OverriddenCreatedOn,
    SalesLiteratureItem.SalesLiteratureId,
    SalesLiteratureItem.SalesLiteratureItemId,
    SalesLiteratureItem.Title
from SalesLiteratureItem
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap FileTypeCodePLTable on 
        (FileTypeCodePLTable.AttributeName = 'filetypecode'
        and FileTypeCodePLTable.ObjectTypeCode = 1070
        and FileTypeCodePLTable.AttributeValue = SalesLiteratureItem.FileTypeCode
        and FileTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsCustomerViewablePLTable on 
        (IsCustomerViewablePLTable.AttributeName = 'iscustomerviewable'
        and IsCustomerViewablePLTable.ObjectTypeCode = 1070
        and IsCustomerViewablePLTable.AttributeValue = SalesLiteratureItem.IsCustomerViewable
        and IsCustomerViewablePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1038) pdm
where SalesLiteratureItem.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SalesLiteratureItem.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredOpportunity]    Script Date: 04/11/2008 06:58:00 ******/




--
-- report view for opportunity
--
create view [dbo].[FilteredOpportunity] (
    accountid,
    accountiddsc,
    accountidname,
    accountidyominame,
    actualclosedate, 
    actualclosedateutc,
    actualvalue,
    actualvalue_base,
    campaignid,
    campaigniddsc,
    campaignidname,
    closeprobability,
    contactid,
    contactiddsc,
    contactidname,
    contactidyominame,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customerid,
    customeriddsc,
    customeridname,
    customeridtype,
    customeridyominame,
    description,
    estimatedclosedate, 
    estimatedclosedateutc,
    estimatedvalue,
    estimatedvalue_base,
    exchangerate,
    importsequencenumber,
    isprivatename,
    isrevenuesystemcalculated,
    isrevenuesystemcalculatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    opportunityid,
    opportunityratingcode,
    opportunityratingcodename,
    originatingleadid,
    originatingleadiddsc,
    originatingleadidname,
    originatingleadidyominame,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owningteam,
    owninguser,
    participatesinworkflow,
    participatesinworkflowname,
    pricelevelid,
    priceleveliddsc,
    pricelevelidname,
    pricingerrorcode,
    pricingerrorcodename,
    prioritycode,
    prioritycodename,
    salesstagecode,
    salesstagecodename,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    stepid,
    stepname,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    Opportunity.AccountId,
    Opportunity.AccountIdDsc,
    Opportunity.AccountIdName,
    Opportunity.AccountIdYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Opportunity.ActualCloseDate,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Opportunity.ActualCloseDate,
    Opportunity.ActualValue,
    Opportunity.ActualValue_Base,
    Opportunity.CampaignId,
    Opportunity.CampaignIdDsc,
    Opportunity.CampaignIdName,
    Opportunity.CloseProbability,
    Opportunity.ContactId,
    Opportunity.ContactIdDsc,
    Opportunity.ContactIdName,
    Opportunity.ContactIdYomiName,
    Opportunity.CreatedBy,
    Opportunity.CreatedByDsc,
    Opportunity.CreatedByName,
    Opportunity.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Opportunity.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Opportunity.CreatedOn,
    Opportunity.CustomerId,
    Opportunity.CustomerIdDsc,
    Opportunity.CustomerIdName,
    Opportunity.CustomerIdType,
    Opportunity.CustomerIdYomiName,
    Opportunity.Description,
    dbo.fn_UTCToTzSpecificLocalTime(Opportunity.EstimatedCloseDate,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Opportunity.EstimatedCloseDate,
    Opportunity.EstimatedValue,
    Opportunity.EstimatedValue_Base,
    Opportunity.ExchangeRate,
    Opportunity.ImportSequenceNumber,
    IsPrivatePLTable.Value,
    Opportunity.IsRevenueSystemCalculated,
    IsRevenueSystemCalculatedPLTable.Value,
    Opportunity.ModifiedBy,
    Opportunity.ModifiedByDsc,
    Opportunity.ModifiedByName,
    Opportunity.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Opportunity.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Opportunity.ModifiedOn,
    Opportunity.Name,
    Opportunity.OpportunityId,
    Opportunity.OpportunityRatingCode,
    OpportunityRatingCodePLTable.Value,
    Opportunity.OriginatingLeadId,
    Opportunity.OriginatingLeadIdDsc,
    Opportunity.OriginatingLeadIdName,
    Opportunity.OriginatingLeadIdYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Opportunity.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Opportunity.OverriddenCreatedOn,
    Opportunity.OwnerId,
    Opportunity.OwnerIdDsc,
    Opportunity.OwnerIdName,
    Opportunity.OwnerIdType,
    Opportunity.OwnerIdYomiName,
    Opportunity.OwningBusinessUnit,
    Opportunity.OwningTeam,
    Opportunity.OwningUser,
    Opportunity.ParticipatesInWorkflow,
    ParticipatesInWorkflowPLTable.Value,
    Opportunity.PriceLevelId,
    Opportunity.PriceLevelIdDsc,
    Opportunity.PriceLevelIdName,
    Opportunity.PricingErrorCode,
    PricingErrorCodePLTable.Value,
    Opportunity.PriorityCode,
    PriorityCodePLTable.Value,
    Opportunity.SalesStageCode,
    SalesStageCodePLTable.Value,
    Opportunity.StateCode,
    StateCodePLTable.Value,
    Opportunity.StatusCode,
    StatusCodePLTable.Value,
    Opportunity.StepId,
    Opportunity.StepName,
    Opportunity.TimeZoneRuleVersionNumber,
    Opportunity.TransactionCurrencyId,
    Opportunity.TransactionCurrencyIdDsc,
    Opportunity.TransactionCurrencyIdName,
    Opportunity.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from Opportunity
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = Opportunity.TransactionCurrencyId
    left outer join StringMap IsPrivatePLTable on 
        (IsPrivatePLTable.AttributeName = 'isprivate'
        and IsPrivatePLTable.ObjectTypeCode = 3
        and IsPrivatePLTable.AttributeValue = Opportunity.IsPrivate
        and IsPrivatePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsRevenueSystemCalculatedPLTable on 
        (IsRevenueSystemCalculatedPLTable.AttributeName = 'isrevenuesystemcalculated'
        and IsRevenueSystemCalculatedPLTable.ObjectTypeCode = 3
        and IsRevenueSystemCalculatedPLTable.AttributeValue = Opportunity.IsRevenueSystemCalculated
        and IsRevenueSystemCalculatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap OpportunityRatingCodePLTable on 
        (OpportunityRatingCodePLTable.AttributeName = 'opportunityratingcode'
        and OpportunityRatingCodePLTable.ObjectTypeCode = 3
        and OpportunityRatingCodePLTable.AttributeValue = Opportunity.OpportunityRatingCode
        and OpportunityRatingCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ParticipatesInWorkflowPLTable on 
        (ParticipatesInWorkflowPLTable.AttributeName = 'participatesinworkflow'
        and ParticipatesInWorkflowPLTable.ObjectTypeCode = 3
        and ParticipatesInWorkflowPLTable.AttributeValue = Opportunity.ParticipatesInWorkflow
        and ParticipatesInWorkflowPLTable.LangId = us.UILanguageId )
    left outer join StringMap PricingErrorCodePLTable on 
        (PricingErrorCodePLTable.AttributeName = 'pricingerrorcode'
        and PricingErrorCodePLTable.ObjectTypeCode = 3
        and PricingErrorCodePLTable.AttributeValue = Opportunity.PricingErrorCode
        and PricingErrorCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 3
        and PriorityCodePLTable.AttributeValue = Opportunity.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap SalesStageCodePLTable on 
        (SalesStageCodePLTable.AttributeName = 'salesstagecode'
        and SalesStageCodePLTable.ObjectTypeCode = 3
        and SalesStageCodePLTable.AttributeValue = Opportunity.SalesStageCode
        and SalesStageCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 3
        and StateCodePLTable.AttributeValue = Opportunity.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 3
        and StatusCodePLTable.AttributeValue = Opportunity.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(3) pdm
where Opportunity.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Opportunity.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Opportunity.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Opportunity.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Opportunity.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Opportunity.OpportunityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 3 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredEmail]    Script Date: 04/11/2008 06:57:55 ******/




--
-- report view for email
--
create view [dbo].[FilteredEmail] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    category,
    compressed,
    compressedname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    deliveryattempts,
    deliveryreceiptrequested,
    deliveryreceiptrequestedname,
    description,
    directioncode,
    directioncodename,
    importsequencenumber,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    messageid,
    mimetype,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    notifications,
    notificationsname,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    prioritycode,
    prioritycodename,
    readreceiptrequested,
    readreceiptrequestedname,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    sender,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    submittedby,
    timezoneruleversionnumber,
    torecipients,
    trackingtoken,
    utcconversiontimezonecode
) with view_metadata as 
select 
    Email.ActivityId,
    Email.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(Email.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Email.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Email.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Email.ActualStart,
    Email.Category,
    Email.Compressed,
    CompressedPLTable.Value,
    Email.CreatedBy,
    Email.CreatedByDsc,
    Email.CreatedByName,
    Email.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Email.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Email.CreatedOn,
    Email.DeliveryAttempts,
    Email.DeliveryReceiptRequested,
    DeliveryReceiptRequestedPLTable.Value,
    Email.Description,
    Email.DirectionCode,
    DirectionCodePLTable.Value,
    Email.ImportSequenceNumber,
    Email.IsBilled,
    IsBilledPLTable.Value,
    Email.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    Email.MessageId,
    Email.MimeType,
    Email.ModifiedBy,
    Email.ModifiedByDsc,
    Email.ModifiedByName,
    Email.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Email.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Email.ModifiedOn,
    Email.Notifications,
    NotificationsPLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(Email.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Email.OverriddenCreatedOn,
    Email.OwnerId,
    Email.OwnerIdDsc,
    Email.OwnerIdName,
    Email.OwnerIdType,
    Email.OwnerIdYomiName,
    Email.OwningBusinessUnit,
    Email.OwningUser,
    Email.PriorityCode,
    PriorityCodePLTable.Value,
    Email.ReadReceiptRequested,
    ReadReceiptRequestedPLTable.Value,
    Email.RegardingObjectId,
    Email.RegardingObjectIdDsc,
    Email.RegardingObjectIdName,
    Email.RegardingObjectIdYomiName,
    Email.RegardingObjectTypeCode,
    Email.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(Email.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Email.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Email.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Email.ScheduledStart,
    Email.Sender,
    Email.ServiceId,
    Email.StateCode,
    StateCodePLTable.Value,
    Email.StatusCode,
    StatusCodePLTable.Value,
    Email.Subcategory,
    Email.Subject,
    Email.SubmittedBy,
    Email.TimeZoneRuleVersionNumber,
    Email.ToRecipients,
    Email.TrackingToken,
    Email.UTCConversionTimeZoneCode
from Email
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap CompressedPLTable on 
        (CompressedPLTable.AttributeName = 'compressed'
        and CompressedPLTable.ObjectTypeCode = 4202
        and CompressedPLTable.AttributeValue = Email.Compressed
        and CompressedPLTable.LangId = us.UILanguageId )
    left outer join StringMap DeliveryReceiptRequestedPLTable on 
        (DeliveryReceiptRequestedPLTable.AttributeName = 'deliveryreceiptrequested'
        and DeliveryReceiptRequestedPLTable.ObjectTypeCode = 4202
        and DeliveryReceiptRequestedPLTable.AttributeValue = Email.DeliveryReceiptRequested
        and DeliveryReceiptRequestedPLTable.LangId = us.UILanguageId )
    left outer join StringMap DirectionCodePLTable on 
        (DirectionCodePLTable.AttributeName = 'directioncode'
        and DirectionCodePLTable.ObjectTypeCode = 4202
        and DirectionCodePLTable.AttributeValue = Email.DirectionCode
        and DirectionCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4202
        and IsBilledPLTable.AttributeValue = Email.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4202
        and IsWorkflowCreatedPLTable.AttributeValue = Email.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap NotificationsPLTable on 
        (NotificationsPLTable.AttributeName = 'notifications'
        and NotificationsPLTable.ObjectTypeCode = 4202
        and NotificationsPLTable.AttributeValue = Email.Notifications
        and NotificationsPLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 4202
        and PriorityCodePLTable.AttributeValue = Email.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ReadReceiptRequestedPLTable on 
        (ReadReceiptRequestedPLTable.AttributeName = 'readreceiptrequested'
        and ReadReceiptRequestedPLTable.ObjectTypeCode = 4202
        and ReadReceiptRequestedPLTable.AttributeValue = Email.ReadReceiptRequested
        and ReadReceiptRequestedPLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4202
        and StateCodePLTable.AttributeValue = Email.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4202
        and StatusCodePLTable.AttributeValue = Email.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where Email.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Email.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Email.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Email.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Email.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Email.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredTransactionCurrency]    Script Date: 04/11/2008 06:58:13 ******/




--
-- report view for transactioncurrency
--
create view [dbo].[FilteredTransactionCurrency] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    currencyname,
    currencysymbol,
    exchangerate,
    importsequencenumber,
    isocurrencycode,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    organizationid,
    overriddencreatedon, 
    overriddencreatedonutc,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    transactioncurrencyid
) with view_metadata as 
select 
    TransactionCurrency.CreatedBy,
    TransactionCurrency.CreatedByDsc,
    TransactionCurrency.CreatedByName,
    TransactionCurrency.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(TransactionCurrency.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    TransactionCurrency.CreatedOn,
    TransactionCurrency.CurrencyName,
    TransactionCurrency.CurrencySymbol,
    TransactionCurrency.ExchangeRate,
    TransactionCurrency.ImportSequenceNumber,
    TransactionCurrency.ISOCurrencyCode,
    TransactionCurrency.ModifiedBy,
    TransactionCurrency.ModifiedByDsc,
    TransactionCurrency.ModifiedByName,
    TransactionCurrency.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(TransactionCurrency.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    TransactionCurrency.ModifiedOn,
    TransactionCurrency.OrganizationId,
    dbo.fn_UTCToTzSpecificLocalTime(TransactionCurrency.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    TransactionCurrency.OverriddenCreatedOn,
    TransactionCurrency.StateCode,
    StateCodePLTable.Value,
    TransactionCurrency.StatusCode,
    StatusCodePLTable.Value,
    TransactionCurrency.TransactionCurrencyId
from TransactionCurrency
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 9105
        and StateCodePLTable.AttributeValue = TransactionCurrency.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 9105
        and StatusCodePLTable.AttributeValue = TransactionCurrency.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(9105) pdm
where TransactionCurrency.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    TransactionCurrency.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredBulkDeleteOperation]    Script Date: 04/11/2008 06:57:48 ******/




--
-- report view for bulkdeleteoperation
--
create view [dbo].[FilteredBulkDeleteOperation] (
    asyncoperationid,
    bulkdeleteoperationid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    failurecount,
    isrecurring,
    isrecurringname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    nextrun, 
    nextrunutc,
    orderedquerysetxml,
    owningbusinessunit,
    owninguser,
    processingqeindex,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    successcount,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    BulkDeleteOperation.AsyncOperationId,
    BulkDeleteOperation.BulkDeleteOperationId,
    BulkDeleteOperation.CreatedBy,
    BulkDeleteOperation.CreatedByDsc,
    BulkDeleteOperation.CreatedByName,
    BulkDeleteOperation.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(BulkDeleteOperation.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BulkDeleteOperation.CreatedOn,
    BulkDeleteOperation.FailureCount,
    BulkDeleteOperation.IsRecurring,
    IsRecurringPLTable.Value,
    BulkDeleteOperation.ModifiedBy,
    BulkDeleteOperation.ModifiedByDsc,
    BulkDeleteOperation.ModifiedByName,
    BulkDeleteOperation.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(BulkDeleteOperation.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BulkDeleteOperation.ModifiedOn,
    BulkDeleteOperation.Name,
    dbo.fn_UTCToTzSpecificLocalTime(BulkDeleteOperation.NextRun,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BulkDeleteOperation.NextRun,
    BulkDeleteOperation.OrderedQuerySetXml,
    BulkDeleteOperation.OwningBusinessUnit,
    BulkDeleteOperation.OwningUser,
    BulkDeleteOperation.ProcessingQEIndex,
    BulkDeleteOperation.StateCode,
    StateCodePLTable.Value,
    BulkDeleteOperation.StatusCode,
    StatusCodePLTable.Value,
    BulkDeleteOperation.SuccessCount,
    BulkDeleteOperation.TimeZoneRuleVersionNumber,
    BulkDeleteOperation.UTCConversionTimeZoneCode
from BulkDeleteOperation
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsRecurringPLTable on 
        (IsRecurringPLTable.AttributeName = 'isrecurring'
        and IsRecurringPLTable.ObjectTypeCode = 4424
        and IsRecurringPLTable.AttributeValue = BulkDeleteOperation.IsRecurring
        and IsRecurringPLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4424
        and StateCodePLTable.AttributeValue = BulkDeleteOperation.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4424
        and StatusCodePLTable.AttributeValue = BulkDeleteOperation.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4700) pdm
where BulkDeleteOperation.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    BulkDeleteOperation.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		BulkDeleteOperation.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		BulkDeleteOperation.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		BulkDeleteOperation.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    BulkDeleteOperation.AsyncOperationId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4700 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredBulkOperation]    Script Date: 04/11/2008 06:57:49 ******/




--
-- report view for bulkoperation
--
create view [dbo].[FilteredBulkOperation] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    bulkoperationnumber,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    createdrecordtypecode,
    createdrecordtypecodename,
    description,
    errornumber,
    failurecount,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    operationtypecode,
    operationtypecodename,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    parameters,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subject,
    successcount,
    targetedrecordtypecode,
    targetedrecordtypecodename,
    targetmemberscount,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    BulkOperation.ActivityId,
    BulkOperation.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(BulkOperation.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BulkOperation.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(BulkOperation.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BulkOperation.ActualStart,
    BulkOperation.BulkOperationNumber,
    BulkOperation.CreatedBy,
    BulkOperation.CreatedByDsc,
    BulkOperation.CreatedByName,
    BulkOperation.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(BulkOperation.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BulkOperation.CreatedOn,
    BulkOperation.CreatedRecordTypeCode,
    CreatedRecordTypeCodePLTable.Value,
    BulkOperation.Description,
    BulkOperation.ErrorNumber,
    BulkOperation.FailureCount,
    BulkOperation.IsBilled,
    IsBilledPLTable.Value,
    BulkOperation.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    BulkOperation.ModifiedBy,
    BulkOperation.ModifiedByDsc,
    BulkOperation.ModifiedByName,
    BulkOperation.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(BulkOperation.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BulkOperation.ModifiedOn,
    BulkOperation.OperationTypeCode,
    OperationTypeCodePLTable.Value,
    BulkOperation.OwnerId,
    BulkOperation.OwnerIdDsc,
    BulkOperation.OwnerIdName,
    BulkOperation.OwnerIdType,
    BulkOperation.OwnerIdYomiName,
    BulkOperation.OwningBusinessUnit,
    BulkOperation.OwningUser,
    BulkOperation.Parameters,
    BulkOperation.RegardingObjectId,
    BulkOperation.RegardingObjectIdDsc,
    BulkOperation.RegardingObjectIdName,
    BulkOperation.RegardingObjectIdYomiName,
    BulkOperation.RegardingObjectTypeCode,
    BulkOperation.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(BulkOperation.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BulkOperation.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(BulkOperation.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BulkOperation.ScheduledStart,
    BulkOperation.ServiceId,
    BulkOperation.StateCode,
    StateCodePLTable.Value,
    BulkOperation.StatusCode,
    StatusCodePLTable.Value,
    BulkOperation.Subject,
    BulkOperation.SuccessCount,
    BulkOperation.TargetedRecordTypeCode,
    TargetedRecordTypeCodePLTable.Value,
    BulkOperation.TargetMembersCount,
    BulkOperation.TimeZoneRuleVersionNumber,
    BulkOperation.UTCConversionTimeZoneCode
from BulkOperation
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap CreatedRecordTypeCodePLTable on 
        (CreatedRecordTypeCodePLTable.AttributeName = 'createdrecordtypecode'
        and CreatedRecordTypeCodePLTable.ObjectTypeCode = 4406
        and CreatedRecordTypeCodePLTable.AttributeValue = BulkOperation.CreatedRecordTypeCode
        and CreatedRecordTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4406
        and IsBilledPLTable.AttributeValue = BulkOperation.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4406
        and IsWorkflowCreatedPLTable.AttributeValue = BulkOperation.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap OperationTypeCodePLTable on 
        (OperationTypeCodePLTable.AttributeName = 'operationtypecode'
        and OperationTypeCodePLTable.ObjectTypeCode = 4406
        and OperationTypeCodePLTable.AttributeValue = BulkOperation.OperationTypeCode
        and OperationTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4406
        and StateCodePLTable.AttributeValue = BulkOperation.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4406
        and StatusCodePLTable.AttributeValue = BulkOperation.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap TargetedRecordTypeCodePLTable on 
        (TargetedRecordTypeCodePLTable.AttributeName = 'targetedrecordtypecode'
        and TargetedRecordTypeCodePLTable.ObjectTypeCode = 4406
        and TargetedRecordTypeCodePLTable.AttributeValue = BulkOperation.TargetedRecordTypeCode
        and TargetedRecordTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where BulkOperation.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    BulkOperation.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		BulkOperation.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		BulkOperation.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		BulkOperation.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    BulkOperation.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredBusinessUnit]    Script Date: 04/11/2008 06:57:49 ******/




--
-- report view for businessunit
--
create view [dbo].[FilteredBusinessUnit] (
    address1_addressid,
    address1_addresstypecode,
    address1_addresstypecodename,
    address1_city,
    address1_country,
    address1_county,
    address1_fax,
    address1_latitude,
    address1_line1,
    address1_line2,
    address1_line3,
    address1_longitude,
    address1_name,
    address1_postalcode,
    address1_postofficebox,
    address1_shippingmethodcode,
    address1_shippingmethodcodename,
    address1_stateorprovince,
    address1_telephone1,
    address1_telephone2,
    address1_telephone3,
    address1_upszone,
    address1_utcoffset,
    address2_addressid,
    address2_addresstypecode,
    address2_addresstypecodename,
    address2_city,
    address2_country,
    address2_county,
    address2_fax,
    address2_latitude,
    address2_line1,
    address2_line2,
    address2_line3,
    address2_longitude,
    address2_name,
    address2_postalcode,
    address2_postofficebox,
    address2_shippingmethodcode,
    address2_shippingmethodcodename,
    address2_stateorprovince,
    address2_telephone1,
    address2_telephone2,
    address2_telephone3,
    address2_upszone,
    address2_utcoffset,
    businessunitid,
    calendarid,
    costcenter,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    creditlimit,
    description,
    disabledreason,
    divisionname,
    emailaddress,
    fileasname,
    ftpsiteurl,
    importsequencenumber,
    inheritancemask,
    isdisabled,
    isdisabledname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    parentbusinessunitid,
    parentbusinessunitiddsc,
    parentbusinessunitidname,
    picture,
    stockexchange,
    tickersymbol,
    utcoffset,
    websiteurl,
    workflowsuspended,
    workflowsuspendedname
) with view_metadata as 
select 
    BusinessUnit.Address1_AddressId,
    BusinessUnit.Address1_AddressTypeCode,
    Address1_AddressTypeCodePLTable.Value,
    BusinessUnit.Address1_City,
    BusinessUnit.Address1_Country,
    BusinessUnit.Address1_County,
    BusinessUnit.Address1_Fax,
    BusinessUnit.Address1_Latitude,
    BusinessUnit.Address1_Line1,
    BusinessUnit.Address1_Line2,
    BusinessUnit.Address1_Line3,
    BusinessUnit.Address1_Longitude,
    BusinessUnit.Address1_Name,
    BusinessUnit.Address1_PostalCode,
    BusinessUnit.Address1_PostOfficeBox,
    BusinessUnit.Address1_ShippingMethodCode,
    Address1_ShippingMethodCodePLTable.Value,
    BusinessUnit.Address1_StateOrProvince,
    BusinessUnit.Address1_Telephone1,
    BusinessUnit.Address1_Telephone2,
    BusinessUnit.Address1_Telephone3,
    BusinessUnit.Address1_UPSZone,
    BusinessUnit.Address1_UTCOffset,
    BusinessUnit.Address2_AddressId,
    BusinessUnit.Address2_AddressTypeCode,
    Address2_AddressTypeCodePLTable.Value,
    BusinessUnit.Address2_City,
    BusinessUnit.Address2_Country,
    BusinessUnit.Address2_County,
    BusinessUnit.Address2_Fax,
    BusinessUnit.Address2_Latitude,
    BusinessUnit.Address2_Line1,
    BusinessUnit.Address2_Line2,
    BusinessUnit.Address2_Line3,
    BusinessUnit.Address2_Longitude,
    BusinessUnit.Address2_Name,
    BusinessUnit.Address2_PostalCode,
    BusinessUnit.Address2_PostOfficeBox,
    BusinessUnit.Address2_ShippingMethodCode,
    Address2_ShippingMethodCodePLTable.Value,
    BusinessUnit.Address2_StateOrProvince,
    BusinessUnit.Address2_Telephone1,
    BusinessUnit.Address2_Telephone2,
    BusinessUnit.Address2_Telephone3,
    BusinessUnit.Address2_UPSZone,
    BusinessUnit.Address2_UTCOffset,
    BusinessUnit.BusinessUnitId,
    BusinessUnit.CalendarId,
    BusinessUnit.CostCenter,
    BusinessUnit.CreatedBy,
    BusinessUnit.CreatedByDsc,
    BusinessUnit.CreatedByName,
    BusinessUnit.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(BusinessUnit.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BusinessUnit.CreatedOn,
    BusinessUnit.CreditLimit,
    BusinessUnit.Description,
    BusinessUnit.DisabledReason,
    BusinessUnit.DivisionName,
    BusinessUnit.EMailAddress,
    BusinessUnit.FileAsName,
    BusinessUnit.FtpSiteUrl,
    BusinessUnit.ImportSequenceNumber,
    BusinessUnit.InheritanceMask,
    BusinessUnit.IsDisabled,
    IsDisabledPLTable.Value,
    BusinessUnit.ModifiedBy,
    BusinessUnit.ModifiedByDsc,
    BusinessUnit.ModifiedByName,
    BusinessUnit.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(BusinessUnit.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BusinessUnit.ModifiedOn,
    BusinessUnit.Name,
    BusinessUnit.OrganizationId,
    BusinessUnit.OrganizationIdDsc,
    BusinessUnit.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(BusinessUnit.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    BusinessUnit.OverriddenCreatedOn,
    BusinessUnit.ParentBusinessUnitId,
    BusinessUnit.ParentBusinessUnitIdDsc,
    BusinessUnit.ParentBusinessUnitIdName,
    BusinessUnit.Picture,
    BusinessUnit.StockExchange,
    BusinessUnit.TickerSymbol,
    BusinessUnit.UTCOffset,
    BusinessUnit.WebSiteUrl,
    BusinessUnit.WorkflowSuspended,
    WorkflowSuspendedPLTable.Value
from BusinessUnit
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap Address1_AddressTypeCodePLTable on 
        (Address1_AddressTypeCodePLTable.AttributeName = 'address1_addresstypecode'
        and Address1_AddressTypeCodePLTable.ObjectTypeCode = 10
        and Address1_AddressTypeCodePLTable.AttributeValue = BusinessUnit.Address1_AddressTypeCode
        and Address1_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_ShippingMethodCodePLTable on 
        (Address1_ShippingMethodCodePLTable.AttributeName = 'address1_shippingmethodcode'
        and Address1_ShippingMethodCodePLTable.ObjectTypeCode = 10
        and Address1_ShippingMethodCodePLTable.AttributeValue = BusinessUnit.Address1_ShippingMethodCode
        and Address1_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_AddressTypeCodePLTable on 
        (Address2_AddressTypeCodePLTable.AttributeName = 'address2_addresstypecode'
        and Address2_AddressTypeCodePLTable.ObjectTypeCode = 10
        and Address2_AddressTypeCodePLTable.AttributeValue = BusinessUnit.Address2_AddressTypeCode
        and Address2_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_ShippingMethodCodePLTable on 
        (Address2_ShippingMethodCodePLTable.AttributeName = 'address2_shippingmethodcode'
        and Address2_ShippingMethodCodePLTable.ObjectTypeCode = 10
        and Address2_ShippingMethodCodePLTable.AttributeValue = BusinessUnit.Address2_ShippingMethodCode
        and Address2_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsDisabledPLTable on 
        (IsDisabledPLTable.AttributeName = 'isdisabled'
        and IsDisabledPLTable.ObjectTypeCode = 10
        and IsDisabledPLTable.AttributeValue = BusinessUnit.IsDisabled
        and IsDisabledPLTable.LangId = us.UILanguageId )
    left outer join StringMap WorkflowSuspendedPLTable on 
        (WorkflowSuspendedPLTable.AttributeName = 'workflowsuspended'
        and WorkflowSuspendedPLTable.ObjectTypeCode = 10
        and WorkflowSuspendedPLTable.AttributeValue = BusinessUnit.WorkflowSuspended
        and WorkflowSuspendedPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(10) pdm
where BusinessUnit.DeletionStateCode in (0) 
    and
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		BusinessUnit.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		BusinessUnit.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		BusinessUnit.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredConstraintBasedGroup]    Script Date: 04/11/2008 06:57:52 ******/




--
-- report view for constraintbasedgroup
--
create view [dbo].[FilteredConstraintBasedGroup] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    constraintbasedgroupid,
    constraints,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    grouptypecode,
    grouptypecodename,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname
) with view_metadata as 
select 
    ConstraintBasedGroup.BusinessUnitId,
    ConstraintBasedGroup.BusinessUnitIdDsc,
    ConstraintBasedGroup.BusinessUnitIdName,
    ConstraintBasedGroup.ConstraintBasedGroupId,
    ConstraintBasedGroup.Constraints,
    ConstraintBasedGroup.CreatedBy,
    ConstraintBasedGroup.CreatedByDsc,
    ConstraintBasedGroup.CreatedByName,
    ConstraintBasedGroup.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ConstraintBasedGroup.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ConstraintBasedGroup.CreatedOn,
    ConstraintBasedGroup.Description,
    ConstraintBasedGroup.GroupTypeCode,
    GroupTypeCodePLTable.Value,
    ConstraintBasedGroup.ModifiedBy,
    ConstraintBasedGroup.ModifiedByDsc,
    ConstraintBasedGroup.ModifiedByName,
    ConstraintBasedGroup.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ConstraintBasedGroup.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ConstraintBasedGroup.ModifiedOn,
    ConstraintBasedGroup.Name,
    ConstraintBasedGroup.OrganizationId,
    ConstraintBasedGroup.OrganizationIdDsc,
    ConstraintBasedGroup.OrganizationIdName
from ConstraintBasedGroup
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap GroupTypeCodePLTable on 
        (GroupTypeCodePLTable.AttributeName = 'grouptypecode'
        and GroupTypeCodePLTable.ObjectTypeCode = 4007
        and GroupTypeCodePLTable.AttributeValue = ConstraintBasedGroup.GroupTypeCode
        and GroupTypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4007) pdm
where ConstraintBasedGroup.DeletionStateCode in (0) 
    and
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ConstraintBasedGroup.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ConstraintBasedGroup.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ConstraintBasedGroup.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredServiceAppointment]    Script Date: 04/11/2008 06:58:11 ******/




--
-- report view for serviceappointment
--
create view [dbo].[FilteredServiceAppointment] (
    activityid,
    actualdurationminutes,
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    category,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    importsequencenumber,
    isalldayevent,
    isalldayeventname,
    isbilled,
    isbilledname,
    isworkflowcreated,
    isworkflowcreatedname,
    location,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    prioritycode,
    prioritycodename,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidyominame,
    regardingobjecttypecode,
    scheduleddurationminutes,
    scheduledend, 
    scheduledendutc,
    scheduledstart, 
    scheduledstartutc,
    serviceid,
    serviceiddsc,
    serviceidname,
    siteid,
    siteiddsc,
    siteidname,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subcategory,
    subject,
    timezoneruleversionnumber,
    utcconversiontimezonecode
) with view_metadata as 
select 
    ServiceAppointment.ActivityId,
    ServiceAppointment.ActualDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(ServiceAppointment.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ServiceAppointment.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(ServiceAppointment.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ServiceAppointment.ActualStart,
    ServiceAppointment.Category,
    ServiceAppointment.CreatedBy,
    ServiceAppointment.CreatedByDsc,
    ServiceAppointment.CreatedByName,
    ServiceAppointment.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ServiceAppointment.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ServiceAppointment.CreatedOn,
    ServiceAppointment.Description,
    ServiceAppointment.ImportSequenceNumber,
    ServiceAppointment.IsAllDayEvent,
    IsAllDayEventPLTable.Value,
    ServiceAppointment.IsBilled,
    IsBilledPLTable.Value,
    ServiceAppointment.IsWorkflowCreated,
    IsWorkflowCreatedPLTable.Value,
    ServiceAppointment.Location,
    ServiceAppointment.ModifiedBy,
    ServiceAppointment.ModifiedByDsc,
    ServiceAppointment.ModifiedByName,
    ServiceAppointment.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ServiceAppointment.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ServiceAppointment.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(ServiceAppointment.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ServiceAppointment.OverriddenCreatedOn,
    ServiceAppointment.OwnerId,
    ServiceAppointment.OwnerIdDsc,
    ServiceAppointment.OwnerIdName,
    ServiceAppointment.OwnerIdType,
    ServiceAppointment.OwnerIdYomiName,
    ServiceAppointment.OwningBusinessUnit,
    ServiceAppointment.OwningUser,
    ServiceAppointment.PriorityCode,
    PriorityCodePLTable.Value,
    ServiceAppointment.RegardingObjectId,
    ServiceAppointment.RegardingObjectIdDsc,
    ServiceAppointment.RegardingObjectIdName,
    ServiceAppointment.RegardingObjectIdYomiName,
    ServiceAppointment.RegardingObjectTypeCode,
    ServiceAppointment.ScheduledDurationMinutes,
    dbo.fn_UTCToTzSpecificLocalTime(ServiceAppointment.ScheduledEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ServiceAppointment.ScheduledEnd,
    dbo.fn_UTCToTzSpecificLocalTime(ServiceAppointment.ScheduledStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ServiceAppointment.ScheduledStart,
    ServiceAppointment.ServiceId,
    ServiceAppointment.ServiceIdDsc,
    ServiceAppointment.ServiceIdName,
    ServiceAppointment.SiteId,
    ServiceAppointment.SiteIdDsc,
    ServiceAppointment.SiteIdName,
    ServiceAppointment.StateCode,
    StateCodePLTable.Value,
    ServiceAppointment.StatusCode,
    StatusCodePLTable.Value,
    ServiceAppointment.Subcategory,
    ServiceAppointment.Subject,
    ServiceAppointment.TimeZoneRuleVersionNumber,
    ServiceAppointment.UTCConversionTimeZoneCode
from ServiceAppointment
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap IsAllDayEventPLTable on 
        (IsAllDayEventPLTable.AttributeName = 'isalldayevent'
        and IsAllDayEventPLTable.ObjectTypeCode = 4214
        and IsAllDayEventPLTable.AttributeValue = ServiceAppointment.IsAllDayEvent
        and IsAllDayEventPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsBilledPLTable on 
        (IsBilledPLTable.AttributeName = 'isbilled'
        and IsBilledPLTable.ObjectTypeCode = 4214
        and IsBilledPLTable.AttributeValue = ServiceAppointment.IsBilled
        and IsBilledPLTable.LangId = us.UILanguageId )
    left outer join StringMap IsWorkflowCreatedPLTable on 
        (IsWorkflowCreatedPLTable.AttributeName = 'isworkflowcreated'
        and IsWorkflowCreatedPLTable.ObjectTypeCode = 4214
        and IsWorkflowCreatedPLTable.AttributeValue = ServiceAppointment.IsWorkflowCreated
        and IsWorkflowCreatedPLTable.LangId = us.UILanguageId )
    left outer join StringMap PriorityCodePLTable on 
        (PriorityCodePLTable.AttributeName = 'prioritycode'
        and PriorityCodePLTable.ObjectTypeCode = 4214
        and PriorityCodePLTable.AttributeValue = ServiceAppointment.PriorityCode
        and PriorityCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4214
        and StateCodePLTable.AttributeValue = ServiceAppointment.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4214
        and StatusCodePLTable.AttributeValue = ServiceAppointment.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
where ServiceAppointment.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ServiceAppointment.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ServiceAppointment.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ServiceAppointment.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ServiceAppointment.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ServiceAppointment.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredCampaign]    Script Date: 04/11/2008 06:57:50 ******/




--
-- report view for campaign
--
create view [dbo].[FilteredCampaign] (
    actualend, 
    actualendutc,
    actualstart, 
    actualstartutc,
    budgetedcost,
    budgetedcost_base,
    campaignid,
    codename,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    exchangerate,
    expectedresponse,
    expectedrevenue,
    expectedrevenue_base,
    importsequencenumber,
    istemplate,
    istemplatename,
    message,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    objective,
    othercost,
    othercost_base,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    pricelistdsc,
    pricelistid,
    pricelistname,
    promotioncodename,
    proposedend, 
    proposedendutc,
    proposedstart, 
    proposedstartutc,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    timezoneruleversionnumber,
    totalactualcost,
    totalactualcost_base,
    totalcampaignactivityactualcost,
    totalcampaignactivityactualcost_base,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    typecode,
    typecodename,
    utcconversiontimezonecode,
crm_moneyformatstring
) with view_metadata as 
select 
    dbo.fn_UTCToTzSpecificLocalTime(Campaign.ActualEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Campaign.ActualEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Campaign.ActualStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Campaign.ActualStart,
    Campaign.BudgetedCost,
    Campaign.BudgetedCost_Base,
    Campaign.CampaignId,
    Campaign.CodeName,
    Campaign.CreatedBy,
    Campaign.CreatedByDsc,
    Campaign.CreatedByName,
    Campaign.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Campaign.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Campaign.CreatedOn,
    Campaign.Description,
    Campaign.ExchangeRate,
    Campaign.ExpectedResponse,
    Campaign.ExpectedRevenue,
    Campaign.ExpectedRevenue_Base,
    Campaign.ImportSequenceNumber,
    Campaign.IsTemplate,
    IsTemplatePLTable.Value,
    Campaign.Message,
    Campaign.ModifiedBy,
    Campaign.ModifiedByDsc,
    Campaign.ModifiedByName,
    Campaign.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Campaign.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Campaign.ModifiedOn,
    Campaign.Name,
    Campaign.Objective,
    Campaign.OtherCost,
    Campaign.OtherCost_Base,
    dbo.fn_UTCToTzSpecificLocalTime(Campaign.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Campaign.OverriddenCreatedOn,
    Campaign.OwnerId,
    Campaign.OwnerIdDsc,
    Campaign.OwnerIdName,
    Campaign.OwnerIdType,
    Campaign.OwnerIdYomiName,
    Campaign.OwningBusinessUnit,
    Campaign.OwningUser,
    Campaign.PriceListDsc,
    Campaign.PriceListId,
    Campaign.PriceListName,
    Campaign.PromotionCodeName,
    dbo.fn_UTCToTzSpecificLocalTime(Campaign.ProposedEnd,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Campaign.ProposedEnd,
    dbo.fn_UTCToTzSpecificLocalTime(Campaign.ProposedStart,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Campaign.ProposedStart,
    Campaign.StateCode,
    StateCodePLTable.Value,
    Campaign.StatusCode,
    StatusCodePLTable.Value,
    Campaign.TimeZoneRuleVersionNumber,
    Campaign.TotalActualCost,
    Campaign.TotalActualCost_Base,
    Campaign.TotalCampaignActivityActualCost,
    Campaign.TotalCampaignActivityActualCost_Base,
    Campaign.TransactionCurrencyId,
    Campaign.TransactionCurrencyIdDsc,
    Campaign.TransactionCurrencyIdName,
    Campaign.TypeCode,
    TypeCodePLTable.Value,
    Campaign.UTCConversionTimeZoneCode,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from Campaign
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = Campaign.TransactionCurrencyId
    left outer join StringMap IsTemplatePLTable on 
        (IsTemplatePLTable.AttributeName = 'istemplate'
        and IsTemplatePLTable.ObjectTypeCode = 4400
        and IsTemplatePLTable.AttributeValue = Campaign.IsTemplate
        and IsTemplatePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4400
        and StateCodePLTable.AttributeValue = Campaign.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4400
        and StatusCodePLTable.AttributeValue = Campaign.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap TypeCodePLTable on 
        (TypeCodePLTable.AttributeName = 'typecode'
        and TypeCodePLTable.ObjectTypeCode = 4400
        and TypeCodePLTable.AttributeValue = Campaign.TypeCode
        and TypeCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4400) pdm
where Campaign.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Campaign.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Campaign.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Campaign.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Campaign.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Campaign.CampaignId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4400 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredImportFile]    Script Date: 04/11/2008 06:57:56 ******/




--
-- report view for importfile
--
create view [dbo].[FilteredImportFile] (
    additionalheaderrow,
    completedon, 
    completedonutc,
    content,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    datadelimitercode,
    datadelimitername,
    enableduplicatedetection,
    enableduplicatedetectionname,
    failurecount,
    fielddelimitercode,
    fielddelimitername,
    headerrow,
    importfileid,
    importid,
    importiddsc,
    importidname,
    importmapid,
    importmapiddsc,
    importmapidname,
    isfirstrowheader,
    isfirstrowheadername,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    parsedtablecolumnprefix,
    parsedtablecolumnsnumber,
    parsedtablename,
    processcode,
    processcodename,
    processingstatus,
    processingstatusname,
    progresscounter,
    recordsownerid,
    recordsowneriddsc,
    recordsowneridname,
    size,
    source,
    sourceentityname,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    successcount,
    targetentityname,
    timezoneruleversionnumber,
    totalcount,
    usesystemmap,
    usesystemmapname,
    utcconversiontimezonecode
) with view_metadata as 
select 
    ImportFile.AdditionalHeaderRow,
    dbo.fn_UTCToTzSpecificLocalTime(ImportFile.CompletedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ImportFile.CompletedOn,
    ImportFile.Content,
    ImportFile.CreatedBy,
    ImportFile.CreatedByDsc,
    ImportFile.CreatedByName,
    ImportFile.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ImportFile.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ImportFile.CreatedOn,
    ImportFile.DataDelimiterCode,
    DataDelimiterCodePLTable.Value,
    ImportFile.EnableDuplicateDetection,
    EnableDuplicateDetectionPLTable.Value,
    ImportFile.FailureCount,
    ImportFile.FieldDelimiterCode,
    FieldDelimiterCodePLTable.Value,
    ImportFile.HeaderRow,
    ImportFile.ImportFileId,
    ImportFile.ImportId,
    ImportFile.ImportIdDsc,
    ImportFile.ImportIdName,
    ImportFile.ImportMapId,
    ImportFile.ImportMapIdDsc,
    ImportFile.ImportMapIdName,
    ImportFile.IsFirstRowHeader,
    IsFirstRowHeaderPLTable.Value,
    ImportFile.ModifiedBy,
    ImportFile.ModifiedByDsc,
    ImportFile.ModifiedByName,
    ImportFile.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ImportFile.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ImportFile.ModifiedOn,
    ImportFile.Name,
    ImportFile.OwnerId,
    ImportFile.OwnerIdDsc,
    ImportFile.OwnerIdName,
    ImportFile.OwnerIdType,
    ImportFile.OwnerIdYomiName,
    ImportFile.OwningBusinessUnit,
    ImportFile.OwningUser,
    ImportFile.ParsedTableColumnPrefix,
    ImportFile.ParsedTableColumnsNumber,
    ImportFile.ParsedTableName,
    ImportFile.ProcessCode,
    ProcessCodePLTable.Value,
    ImportFile.ProcessingStatus,
    ProcessingStatusPLTable.Value,
    ImportFile.ProgressCounter,
    ImportFile.RecordsOwnerId,
    ImportFile.RecordsOwnerIdDsc,
    ImportFile.RecordsOwnerIdName,
    ImportFile.Size,
    ImportFile.Source,
    ImportFile.SourceEntityName,
    ImportFile.StateCode,
    StateCodePLTable.Value,
    ImportFile.StatusCode,
    StatusCodePLTable.Value,
    ImportFile.SuccessCount,
    ImportFile.TargetEntityName,
    ImportFile.TimeZoneRuleVersionNumber,
    ImportFile.TotalCount,
    ImportFile.UseSystemMap,
    UseSystemMapPLTable.Value,
    ImportFile.UTCConversionTimeZoneCode
from ImportFile
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap DataDelimiterCodePLTable on 
        (DataDelimiterCodePLTable.AttributeName = 'datadelimitercode'
        and DataDelimiterCodePLTable.ObjectTypeCode = 4412
        and DataDelimiterCodePLTable.AttributeValue = ImportFile.DataDelimiterCode
        and DataDelimiterCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap EnableDuplicateDetectionPLTable on 
        (EnableDuplicateDetectionPLTable.AttributeName = 'enableduplicatedetection'
        and EnableDuplicateDetectionPLTable.ObjectTypeCode = 4412
        and EnableDuplicateDetectionPLTable.AttributeValue = ImportFile.EnableDuplicateDetection
        and EnableDuplicateDetectionPLTable.LangId = us.UILanguageId )
    left outer join StringMap FieldDelimiterCodePLTable on 
        (FieldDelimiterCodePLTable.AttributeName = 'fielddelimitercode'
        and FieldDelimiterCodePLTable.ObjectTypeCode = 4412
        and FieldDelimiterCodePLTable.AttributeValue = ImportFile.FieldDelimiterCode
        and FieldDelimiterCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsFirstRowHeaderPLTable on 
        (IsFirstRowHeaderPLTable.AttributeName = 'isfirstrowheader'
        and IsFirstRowHeaderPLTable.ObjectTypeCode = 4412
        and IsFirstRowHeaderPLTable.AttributeValue = ImportFile.IsFirstRowHeader
        and IsFirstRowHeaderPLTable.LangId = us.UILanguageId )
    left outer join StringMap ProcessCodePLTable on 
        (ProcessCodePLTable.AttributeName = 'processcode'
        and ProcessCodePLTable.ObjectTypeCode = 4412
        and ProcessCodePLTable.AttributeValue = ImportFile.ProcessCode
        and ProcessCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ProcessingStatusPLTable on 
        (ProcessingStatusPLTable.AttributeName = 'processingstatus'
        and ProcessingStatusPLTable.ObjectTypeCode = 4412
        and ProcessingStatusPLTable.AttributeValue = ImportFile.ProcessingStatus
        and ProcessingStatusPLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 4412
        and StateCodePLTable.AttributeValue = ImportFile.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 4412
        and StatusCodePLTable.AttributeValue = ImportFile.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap UseSystemMapPLTable on 
        (UseSystemMapPLTable.AttributeName = 'usesystemmap'
        and UseSystemMapPLTable.ObjectTypeCode = 4412
        and UseSystemMapPLTable.AttributeValue = ImportFile.UseSystemMap
        and UseSystemMapPLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4412) pdm
where ImportFile.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ImportFile.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ImportFile.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ImportFile.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ImportFile.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ImportFile.ImportFileId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4412 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredKbArticle]    Script Date: 04/11/2008 06:57:58 ******/




--
-- report view for kbarticle
--
create view [dbo].[FilteredKbArticle] (
    articlexml,
    comments,
    content,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    importsequencenumber,
    kbarticleid,
    kbarticletemplateid,
    kbarticletemplateiddsc,
    kbarticletemplateidtitle,
    keywords,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    number,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    subjectid,
    subjectiddsc,
    subjectidname,
    title
) with view_metadata as 
select 
    KbArticle.ArticleXml,
    KbArticle.Comments,
    KbArticle.Content,
    KbArticle.CreatedBy,
    KbArticle.CreatedByDsc,
    KbArticle.CreatedByName,
    KbArticle.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(KbArticle.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    KbArticle.CreatedOn,
    KbArticle.Description,
    KbArticle.ImportSequenceNumber,
    KbArticle.KbArticleId,
    KbArticle.KbArticleTemplateId,
    KbArticle.KbArticleTemplateIdDsc,
    KbArticle.KbArticleTemplateIdTitle,
    KbArticle.KeyWords,
    KbArticle.ModifiedBy,
    KbArticle.ModifiedByDsc,
    KbArticle.ModifiedByName,
    KbArticle.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(KbArticle.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    KbArticle.ModifiedOn,
    KbArticle.Number,
    KbArticle.OrganizationId,
    KbArticle.OrganizationIdDsc,
    KbArticle.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(KbArticle.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    KbArticle.OverriddenCreatedOn,
    KbArticle.StateCode,
    StateCodePLTable.Value,
    KbArticle.StatusCode,
    StatusCodePLTable.Value,
    KbArticle.SubjectId,
    KbArticle.SubjectIdDsc,
    KbArticle.SubjectIdName,
    KbArticle.Title
from KbArticle
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 127
        and StateCodePLTable.AttributeValue = KbArticle.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 127
        and StatusCodePLTable.AttributeValue = KbArticle.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(127) pdm
where KbArticle.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    KbArticle.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredAccount]    Script Date: 04/11/2008 06:57:46 ******/




--
-- report view for account
--
create view [dbo].[FilteredAccount] (
    accountcategorycode,
    accountcategorycodename,
    accountclassificationcode,
    accountclassificationcodename,
    accountid,
    accountnumber,
    accountratingcode,
    accountratingcodename,
    address1_addressid,
    address1_addresstypecode,
    address1_addresstypecodename,
    address1_city,
    address1_country,
    address1_county,
    address1_fax,
    address1_freighttermscode,
    address1_freighttermscodename,
    address1_latitude,
    address1_line1,
    address1_line2,
    address1_line3,
    address1_longitude,
    address1_name,
    address1_postalcode,
    address1_postofficebox,
    address1_primarycontactname,
    address1_shippingmethodcode,
    address1_shippingmethodcodename,
    address1_stateorprovince,
    address1_telephone1,
    address1_telephone2,
    address1_telephone3,
    address1_upszone,
    address1_utcoffset,
    address2_addressid,
    address2_addresstypecode,
    address2_addresstypecodename,
    address2_city,
    address2_country,
    address2_county,
    address2_fax,
    address2_freighttermscode,
    address2_freighttermscodename,
    address2_latitude,
    address2_line1,
    address2_line2,
    address2_line3,
    address2_longitude,
    address2_name,
    address2_postalcode,
    address2_postofficebox,
    address2_primarycontactname,
    address2_shippingmethodcode,
    address2_shippingmethodcodename,
    address2_stateorprovince,
    address2_telephone1,
    address2_telephone2,
    address2_telephone3,
    address2_upszone,
    address2_utcoffset,
    aging30,
    aging30_base,
    aging60,
    aging60_base,
    aging90,
    aging90_base,
    businesstypecode,
    businesstypecodename,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    creditlimit,
    creditlimit_base,
    creditonhold,
    creditonholdname,
    customersizecode,
    customersizecodename,
    customertypecode,
    customertypecodename,
    defaultpricelevelid,
    defaultpriceleveliddsc,
    defaultpricelevelidname,
    description,
    donotbulkemail,
    donotbulkemailname,
    donotbulkpostalmail,
    donotbulkpostalmailname,
    donotemail,
    donotemailname,
    donotfax,
    donotfaxname,
    donotphone,
    donotphonename,
    donotpostalmail,
    donotpostalmailname,
    donotsendmarketingmaterialname,
    donotsendmm,
    emailaddress1,
    emailaddress2,
    emailaddress3,
    exchangerate,
    fax,
    ftpsiteurl,
    importsequencenumber,
    industrycode,
    industrycodename,
    isprivatename,
    lastusedincampaign, 
    lastusedincampaignutc,
    marketcap,
    marketcap_base,
    masteraccountiddsc,
    masteraccountidname,
    masteraccountidyominame,
    masterid,
    merged,
    mergedname,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    numberofemployees,
    originatingleadid,
    originatingleadiddsc,
    originatingleadidname,
    originatingleadidyominame,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    ownershipcode,
    ownershipcodename,
    owningbusinessunit,
    owningteam,
    owninguser,
    parentaccountid,
    parentaccountiddsc,
    parentaccountidname,
    parentaccountidyominame,
    participatesinworkflow,
    participatesinworkflowname,
    paymenttermscode,
    paymenttermscodename,
    preferredappointmentdaycode,
    preferredappointmentdaycodename,
    preferredappointmenttimecode,
    preferredappointmenttimecodename,
    preferredcontactmethodcode,
    preferredcontactmethodcodename,
    preferredequipmentid,
    preferredequipmentiddsc,
    preferredequipmentidname,
    preferredserviceid,
    preferredserviceiddsc,
    preferredserviceidname,
    preferredsystemuserid,
    preferredsystemuseriddsc,
    preferredsystemuseridname,
    preferredsystemuseridyominame,
    primarycontactid,
    primarycontactiddsc,
    primarycontactidname,
    primarycontactidyominame,
    revenue,
    revenue_base,
    sharesoutstanding,
    shippingmethodcode,
    shippingmethodcodename,
    sic,
    statecode,
    statecodename,
    statuscode,
    statuscodename,
    stockexchange,
    telephone1,
    telephone2,
    telephone3,
    territorycode,
    territorycodename,
    territoryid,
    territoryiddsc,
    territoryidname,
    tickersymbol,
    timezoneruleversionnumber,
    transactioncurrencyid,
    transactioncurrencyiddsc,
    transactioncurrencyidname,
    utcconversiontimezonecode,
    websiteurl,
    yominame,
crm_moneyformatstring
) with view_metadata as 
select 
    Account.AccountCategoryCode,
    AccountCategoryCodePLTable.Value,
    Account.AccountClassificationCode,
    AccountClassificationCodePLTable.Value,
    Account.AccountId,
    Account.AccountNumber,
    Account.AccountRatingCode,
    AccountRatingCodePLTable.Value,
    Account.Address1_AddressId,
    Account.Address1_AddressTypeCode,
    Address1_AddressTypeCodePLTable.Value,
    Account.Address1_City,
    Account.Address1_Country,
    Account.Address1_County,
    Account.Address1_Fax,
    Account.Address1_FreightTermsCode,
    Address1_FreightTermsCodePLTable.Value,
    Account.Address1_Latitude,
    Account.Address1_Line1,
    Account.Address1_Line2,
    Account.Address1_Line3,
    Account.Address1_Longitude,
    Account.Address1_Name,
    Account.Address1_PostalCode,
    Account.Address1_PostOfficeBox,
    Account.Address1_PrimaryContactName,
    Account.Address1_ShippingMethodCode,
    Address1_ShippingMethodCodePLTable.Value,
    Account.Address1_StateOrProvince,
    Account.Address1_Telephone1,
    Account.Address1_Telephone2,
    Account.Address1_Telephone3,
    Account.Address1_UPSZone,
    Account.Address1_UTCOffset,
    Account.Address2_AddressId,
    Account.Address2_AddressTypeCode,
    Address2_AddressTypeCodePLTable.Value,
    Account.Address2_City,
    Account.Address2_Country,
    Account.Address2_County,
    Account.Address2_Fax,
    Account.Address2_FreightTermsCode,
    Address2_FreightTermsCodePLTable.Value,
    Account.Address2_Latitude,
    Account.Address2_Line1,
    Account.Address2_Line2,
    Account.Address2_Line3,
    Account.Address2_Longitude,
    Account.Address2_Name,
    Account.Address2_PostalCode,
    Account.Address2_PostOfficeBox,
    Account.Address2_PrimaryContactName,
    Account.Address2_ShippingMethodCode,
    Address2_ShippingMethodCodePLTable.Value,
    Account.Address2_StateOrProvince,
    Account.Address2_Telephone1,
    Account.Address2_Telephone2,
    Account.Address2_Telephone3,
    Account.Address2_UPSZone,
    Account.Address2_UTCOffset,
    Account.Aging30,
    Account.Aging30_Base,
    Account.Aging60,
    Account.Aging60_Base,
    Account.Aging90,
    Account.Aging90_Base,
    Account.BusinessTypeCode,
    BusinessTypeCodePLTable.Value,
    Account.CreatedBy,
    Account.CreatedByDsc,
    Account.CreatedByName,
    Account.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Account.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Account.CreatedOn,
    Account.CreditLimit,
    Account.CreditLimit_Base,
    Account.CreditOnHold,
    CreditOnHoldPLTable.Value,
    Account.CustomerSizeCode,
    CustomerSizeCodePLTable.Value,
    Account.CustomerTypeCode,
    CustomerTypeCodePLTable.Value,
    Account.DefaultPriceLevelId,
    Account.DefaultPriceLevelIdDsc,
    Account.DefaultPriceLevelIdName,
    Account.Description,
    Account.DoNotBulkEMail,
    DoNotBulkEMailPLTable.Value,
    Account.DoNotBulkPostalMail,
    DoNotBulkPostalMailPLTable.Value,
    Account.DoNotEMail,
    DoNotEMailPLTable.Value,
    Account.DoNotFax,
    DoNotFaxPLTable.Value,
    Account.DoNotPhone,
    DoNotPhonePLTable.Value,
    Account.DoNotPostalMail,
    DoNotPostalMailPLTable.Value,
    DoNotSendMMPLTable.Value,
    Account.DoNotSendMM,
    Account.EMailAddress1,
    Account.EMailAddress2,
    Account.EMailAddress3,
    Account.ExchangeRate,
    Account.Fax,
    Account.FtpSiteURL,
    Account.ImportSequenceNumber,
    Account.IndustryCode,
    IndustryCodePLTable.Value,
    IsPrivatePLTable.Value,
    dbo.fn_UTCToTzSpecificLocalTime(Account.LastUsedInCampaign,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Account.LastUsedInCampaign,
    Account.MarketCap,
    Account.MarketCap_Base,
    Account.MasterAccountIdDsc,
    Account.MasterAccountIdName,
    Account.MasterAccountIdYomiName,
    Account.MasterId,
    Account.Merged,
    MergedPLTable.Value,
    Account.ModifiedBy,
    Account.ModifiedByDsc,
    Account.ModifiedByName,
    Account.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Account.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Account.ModifiedOn,
    Account.Name,
    Account.NumberOfEmployees,
    Account.OriginatingLeadId,
    Account.OriginatingLeadIdDsc,
    Account.OriginatingLeadIdName,
    Account.OriginatingLeadIdYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Account.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Account.OverriddenCreatedOn,
    Account.OwnerId,
    Account.OwnerIdDsc,
    Account.OwnerIdName,
    Account.OwnerIdType,
    Account.OwnerIdYomiName,
    Account.OwnershipCode,
    OwnershipCodePLTable.Value,
    Account.OwningBusinessUnit,
    Account.OwningTeam,
    Account.OwningUser,
    Account.ParentAccountId,
    Account.ParentAccountIdDsc,
    Account.ParentAccountIdName,
    Account.ParentAccountIdYomiName,
    Account.ParticipatesInWorkflow,
    ParticipatesInWorkflowPLTable.Value,
    Account.PaymentTermsCode,
    PaymentTermsCodePLTable.Value,
    Account.PreferredAppointmentDayCode,
    PreferredAppointmentDayCodePLTable.Value,
    Account.PreferredAppointmentTimeCode,
    PreferredAppointmentTimeCodePLTable.Value,
    Account.PreferredContactMethodCode,
    PreferredContactMethodCodePLTable.Value,
    Account.PreferredEquipmentId,
    Account.PreferredEquipmentIdDsc,
    Account.PreferredEquipmentIdName,
    Account.PreferredServiceId,
    Account.PreferredServiceIdDsc,
    Account.PreferredServiceIdName,
    Account.PreferredSystemUserId,
    Account.PreferredSystemUserIdDsc,
    Account.PreferredSystemUserIdName,
    Account.PreferredSystemUserIdYomiName,
    Account.PrimaryContactId,
    Account.PrimaryContactIdDsc,
    Account.PrimaryContactIdName,
    Account.PrimaryContactIdYomiName,
    Account.Revenue,
    Account.Revenue_Base,
    Account.SharesOutstanding,
    Account.ShippingMethodCode,
    ShippingMethodCodePLTable.Value,
    Account.SIC,
    Account.StateCode,
    StateCodePLTable.Value,
    Account.StatusCode,
    StatusCodePLTable.Value,
    Account.StockExchange,
    Account.Telephone1,
    Account.Telephone2,
    Account.Telephone3,
    Account.TerritoryCode,
    TerritoryCodePLTable.Value,
    Account.TerritoryId,
    Account.TerritoryIdDsc,
    Account.TerritoryIdName,
    Account.TickerSymbol,
    Account.TimeZoneRuleVersionNumber,
    Account.TransactionCurrencyId,
    Account.TransactionCurrencyIdDsc,
    Account.TransactionCurrencyIdName,
    Account.UTCConversionTimeZoneCode,
    Account.WebSiteURL,
    Account.YomiName,
dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode)
from Account
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    left join OrganizationBase o on u.OrganizationId = o.OrganizationId
    left join TransactionCurrencyBase t on t.TransactionCurrencyId = Account.TransactionCurrencyId
    left outer join StringMap AccountCategoryCodePLTable on 
        (AccountCategoryCodePLTable.AttributeName = 'accountcategorycode'
        and AccountCategoryCodePLTable.ObjectTypeCode = 1
        and AccountCategoryCodePLTable.AttributeValue = Account.AccountCategoryCode
        and AccountCategoryCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap AccountClassificationCodePLTable on 
        (AccountClassificationCodePLTable.AttributeName = 'accountclassificationcode'
        and AccountClassificationCodePLTable.ObjectTypeCode = 1
        and AccountClassificationCodePLTable.AttributeValue = Account.AccountClassificationCode
        and AccountClassificationCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap AccountRatingCodePLTable on 
        (AccountRatingCodePLTable.AttributeName = 'accountratingcode'
        and AccountRatingCodePLTable.ObjectTypeCode = 1
        and AccountRatingCodePLTable.AttributeValue = Account.AccountRatingCode
        and AccountRatingCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_AddressTypeCodePLTable on 
        (Address1_AddressTypeCodePLTable.AttributeName = 'address1_addresstypecode'
        and Address1_AddressTypeCodePLTable.ObjectTypeCode = 1
        and Address1_AddressTypeCodePLTable.AttributeValue = Account.Address1_AddressTypeCode
        and Address1_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_FreightTermsCodePLTable on 
        (Address1_FreightTermsCodePLTable.AttributeName = 'address1_freighttermscode'
        and Address1_FreightTermsCodePLTable.ObjectTypeCode = 1
        and Address1_FreightTermsCodePLTable.AttributeValue = Account.Address1_FreightTermsCode
        and Address1_FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address1_ShippingMethodCodePLTable on 
        (Address1_ShippingMethodCodePLTable.AttributeName = 'address1_shippingmethodcode'
        and Address1_ShippingMethodCodePLTable.ObjectTypeCode = 1
        and Address1_ShippingMethodCodePLTable.AttributeValue = Account.Address1_ShippingMethodCode
        and Address1_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_AddressTypeCodePLTable on 
        (Address2_AddressTypeCodePLTable.AttributeName = 'address2_addresstypecode'
        and Address2_AddressTypeCodePLTable.ObjectTypeCode = 1
        and Address2_AddressTypeCodePLTable.AttributeValue = Account.Address2_AddressTypeCode
        and Address2_AddressTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_FreightTermsCodePLTable on 
        (Address2_FreightTermsCodePLTable.AttributeName = 'address2_freighttermscode'
        and Address2_FreightTermsCodePLTable.ObjectTypeCode = 1
        and Address2_FreightTermsCodePLTable.AttributeValue = Account.Address2_FreightTermsCode
        and Address2_FreightTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap Address2_ShippingMethodCodePLTable on 
        (Address2_ShippingMethodCodePLTable.AttributeName = 'address2_shippingmethodcode'
        and Address2_ShippingMethodCodePLTable.ObjectTypeCode = 1
        and Address2_ShippingMethodCodePLTable.AttributeValue = Account.Address2_ShippingMethodCode
        and Address2_ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap BusinessTypeCodePLTable on 
        (BusinessTypeCodePLTable.AttributeName = 'businesstypecode'
        and BusinessTypeCodePLTable.ObjectTypeCode = 1
        and BusinessTypeCodePLTable.AttributeValue = Account.BusinessTypeCode
        and BusinessTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap CreditOnHoldPLTable on 
        (CreditOnHoldPLTable.AttributeName = 'creditonhold'
        and CreditOnHoldPLTable.ObjectTypeCode = 1
        and CreditOnHoldPLTable.AttributeValue = Account.CreditOnHold
        and CreditOnHoldPLTable.LangId = us.UILanguageId )
    left outer join StringMap CustomerSizeCodePLTable on 
        (CustomerSizeCodePLTable.AttributeName = 'customersizecode'
        and CustomerSizeCodePLTable.ObjectTypeCode = 1
        and CustomerSizeCodePLTable.AttributeValue = Account.CustomerSizeCode
        and CustomerSizeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap CustomerTypeCodePLTable on 
        (CustomerTypeCodePLTable.AttributeName = 'customertypecode'
        and CustomerTypeCodePLTable.ObjectTypeCode = 1
        and CustomerTypeCodePLTable.AttributeValue = Account.CustomerTypeCode
        and CustomerTypeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotBulkEMailPLTable on 
        (DoNotBulkEMailPLTable.AttributeName = 'donotbulkemail'
        and DoNotBulkEMailPLTable.ObjectTypeCode = 1
        and DoNotBulkEMailPLTable.AttributeValue = Account.DoNotBulkEMail
        and DoNotBulkEMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotBulkPostalMailPLTable on 
        (DoNotBulkPostalMailPLTable.AttributeName = 'donotbulkpostalmail'
        and DoNotBulkPostalMailPLTable.ObjectTypeCode = 1
        and DoNotBulkPostalMailPLTable.AttributeValue = Account.DoNotBulkPostalMail
        and DoNotBulkPostalMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotEMailPLTable on 
        (DoNotEMailPLTable.AttributeName = 'donotemail'
        and DoNotEMailPLTable.ObjectTypeCode = 1
        and DoNotEMailPLTable.AttributeValue = Account.DoNotEMail
        and DoNotEMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotFaxPLTable on 
        (DoNotFaxPLTable.AttributeName = 'donotfax'
        and DoNotFaxPLTable.ObjectTypeCode = 1
        and DoNotFaxPLTable.AttributeValue = Account.DoNotFax
        and DoNotFaxPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotPhonePLTable on 
        (DoNotPhonePLTable.AttributeName = 'donotphone'
        and DoNotPhonePLTable.ObjectTypeCode = 1
        and DoNotPhonePLTable.AttributeValue = Account.DoNotPhone
        and DoNotPhonePLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotPostalMailPLTable on 
        (DoNotPostalMailPLTable.AttributeName = 'donotpostalmail'
        and DoNotPostalMailPLTable.ObjectTypeCode = 1
        and DoNotPostalMailPLTable.AttributeValue = Account.DoNotPostalMail
        and DoNotPostalMailPLTable.LangId = us.UILanguageId )
    left outer join StringMap DoNotSendMMPLTable on 
        (DoNotSendMMPLTable.AttributeName = 'donotsendmm'
        and DoNotSendMMPLTable.ObjectTypeCode = 1
        and DoNotSendMMPLTable.AttributeValue = Account.DoNotSendMM
        and DoNotSendMMPLTable.LangId = us.UILanguageId )
    left outer join StringMap IndustryCodePLTable on 
        (IndustryCodePLTable.AttributeName = 'industrycode'
        and IndustryCodePLTable.ObjectTypeCode = 1
        and IndustryCodePLTable.AttributeValue = Account.IndustryCode
        and IndustryCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap IsPrivatePLTable on 
        (IsPrivatePLTable.AttributeName = 'isprivate'
        and IsPrivatePLTable.ObjectTypeCode = 1
        and IsPrivatePLTable.AttributeValue = Account.IsPrivate
        and IsPrivatePLTable.LangId = us.UILanguageId )
    left outer join StringMap MergedPLTable on 
        (MergedPLTable.AttributeName = 'merged'
        and MergedPLTable.ObjectTypeCode = 1
        and MergedPLTable.AttributeValue = Account.Merged
        and MergedPLTable.LangId = us.UILanguageId )
    left outer join StringMap OwnershipCodePLTable on 
        (OwnershipCodePLTable.AttributeName = 'ownershipcode'
        and OwnershipCodePLTable.ObjectTypeCode = 1
        and OwnershipCodePLTable.AttributeValue = Account.OwnershipCode
        and OwnershipCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ParticipatesInWorkflowPLTable on 
        (ParticipatesInWorkflowPLTable.AttributeName = 'participatesinworkflow'
        and ParticipatesInWorkflowPLTable.ObjectTypeCode = 1
        and ParticipatesInWorkflowPLTable.AttributeValue = Account.ParticipatesInWorkflow
        and ParticipatesInWorkflowPLTable.LangId = us.UILanguageId )
    left outer join StringMap PaymentTermsCodePLTable on 
        (PaymentTermsCodePLTable.AttributeName = 'paymenttermscode'
        and PaymentTermsCodePLTable.ObjectTypeCode = 1
        and PaymentTermsCodePLTable.AttributeValue = Account.PaymentTermsCode
        and PaymentTermsCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PreferredAppointmentDayCodePLTable on 
        (PreferredAppointmentDayCodePLTable.AttributeName = 'preferredappointmentdaycode'
        and PreferredAppointmentDayCodePLTable.ObjectTypeCode = 1
        and PreferredAppointmentDayCodePLTable.AttributeValue = Account.PreferredAppointmentDayCode
        and PreferredAppointmentDayCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PreferredAppointmentTimeCodePLTable on 
        (PreferredAppointmentTimeCodePLTable.AttributeName = 'preferredappointmenttimecode'
        and PreferredAppointmentTimeCodePLTable.ObjectTypeCode = 1
        and PreferredAppointmentTimeCodePLTable.AttributeValue = Account.PreferredAppointmentTimeCode
        and PreferredAppointmentTimeCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap PreferredContactMethodCodePLTable on 
        (PreferredContactMethodCodePLTable.AttributeName = 'preferredcontactmethodcode'
        and PreferredContactMethodCodePLTable.ObjectTypeCode = 1
        and PreferredContactMethodCodePLTable.AttributeValue = Account.PreferredContactMethodCode
        and PreferredContactMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap ShippingMethodCodePLTable on 
        (ShippingMethodCodePLTable.AttributeName = 'shippingmethodcode'
        and ShippingMethodCodePLTable.ObjectTypeCode = 1
        and ShippingMethodCodePLTable.AttributeValue = Account.ShippingMethodCode
        and ShippingMethodCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StateCodePLTable on 
        (StateCodePLTable.AttributeName = 'statecode'
        and StateCodePLTable.ObjectTypeCode = 1
        and StateCodePLTable.AttributeValue = Account.StateCode
        and StateCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap StatusCodePLTable on 
        (StatusCodePLTable.AttributeName = 'statuscode'
        and StatusCodePLTable.ObjectTypeCode = 1
        and StatusCodePLTable.AttributeValue = Account.StatusCode
        and StatusCodePLTable.LangId = us.UILanguageId )
    left outer join StringMap TerritoryCodePLTable on 
        (TerritoryCodePLTable.AttributeName = 'territorycode'
        and TerritoryCodePLTable.ObjectTypeCode = 1
        and TerritoryCodePLTable.AttributeValue = Account.TerritoryCode
        and TerritoryCodePLTable.LangId = us.UILanguageId )
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1) pdm
where Account.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    Account.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Account.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Account.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Account.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    Account.AccountId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 1 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredCalendar]    Script Date: 04/11/2008 06:57:50 ******/




--
-- report view for calendar
--
create view [dbo].[FilteredCalendar] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    calendarid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    isshared,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    primaryuserid
) with view_metadata as 
select 
    Calendar.BusinessUnitId,
    Calendar.BusinessUnitIdDsc,
    Calendar.BusinessUnitIdName,
    Calendar.CalendarId,
    Calendar.CreatedBy,
    Calendar.CreatedByDsc,
    Calendar.CreatedByName,
    Calendar.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Calendar.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Calendar.CreatedOn,
    Calendar.Description,
    Calendar.IsShared,
    Calendar.ModifiedBy,
    Calendar.ModifiedByDsc,
    Calendar.ModifiedByName,
    Calendar.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Calendar.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Calendar.ModifiedOn,
    Calendar.Name,
    Calendar.OrganizationId,
    Calendar.OrganizationIdDsc,
    Calendar.OrganizationIdName,
    Calendar.PrimaryUserId
from Calendar
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4003) pdm
where Calendar.DeletionStateCode in (0) 
    and
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Calendar.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Calendar.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Calendar.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredSdkMessageResponse]    Script Date: 04/11/2008 06:58:10 ******/




--
-- report view for sdkmessageresponse
--
create view [dbo].[FilteredSdkMessageResponse] (
    createdby,
    createdon, 
    createdonutc,
    customizationlevel,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    organizationid,
    sdkmessagerequestid,
    sdkmessageresponseid,
    sdkmessageresponseidunique
) with view_metadata as 
select 
    SdkMessageResponse.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageResponse.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageResponse.CreatedOn,
    SdkMessageResponse.CustomizationLevel,
    SdkMessageResponse.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageResponse.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageResponse.ModifiedOn,
    SdkMessageResponse.OrganizationId,
    SdkMessageResponse.SdkMessageRequestId,
    SdkMessageResponse.SdkMessageResponseId,
    SdkMessageResponse.SdkMessageResponseIdUnique
from SdkMessageResponse
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4610) pdm
where SdkMessageResponse.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SdkMessageResponse.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredBulkOperationLog]    Script Date: 04/11/2008 06:57:49 ******/




--
-- report view for bulkoperationlog
--
create view [dbo].[FilteredBulkOperationLog] (
    additionalinfo,
    bulkoperationid,
    bulkoperationiddsc,
    bulkoperationidname,
    bulkoperationlogid,
    createdobjectid,
    createdobjectiddsc,
    createdobjectidname,
    createdobjectidtypecode,
    errornumber,
    owningbusinessunit,
    owninguser,
    regardingobjectid,
    regardingobjectiddsc,
    regardingobjectidname,
    regardingobjectidtypecode,
    regardingobjectidyominame
) with view_metadata as 
select 
    BulkOperationLog.AdditionalInfo,
    BulkOperationLog.BulkOperationId,
    BulkOperationLog.BulkOperationIdDsc,
    BulkOperationLog.BulkOperationIdName,
    BulkOperationLog.BulkOperationLogId,
    BulkOperationLog.CreatedObjectId,
    BulkOperationLog.CreatedObjectIdDsc,
    BulkOperationLog.CreatedObjectIdName,
    BulkOperationLog.CreatedObjectIdTypeCode,
    BulkOperationLog.ErrorNumber,
    BulkOperationLog.OwningBusinessUnit,
    BulkOperationLog.OwningUser,
    BulkOperationLog.RegardingObjectId,
    BulkOperationLog.RegardingObjectIdDsc,
    BulkOperationLog.RegardingObjectIdName,
    BulkOperationLog.RegardingObjectIdTypeCode,
    BulkOperationLog.RegardingObjectIdYomiName
from BulkOperationLog
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4406) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    BulkOperationLog.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		BulkOperationLog.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		BulkOperationLog.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		BulkOperationLog.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    BulkOperationLog.BulkOperationId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4406 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredCustomerOpportunityRole]    Script Date: 04/11/2008 06:57:54 ******/




--
-- report view for customeropportunityrole
--
create view [dbo].[FilteredCustomerOpportunityRole] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customerid,
    customeriddsc,
    customeridname,
    customeridtype,
    customeridyominame,
    customeropportunityroleid,
    description,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    opportunityid,
    opportunityiddsc,
    opportunityidname,
    opportunityroleid,
    opportunityroleiddsc,
    opportunityroleidname,
    opportunitystatecode,
    opportunitystatuscode,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser
) with view_metadata as 
select 
    CustomerOpportunityRole.CreatedBy,
    CustomerOpportunityRole.CreatedByDsc,
    CustomerOpportunityRole.CreatedByName,
    CustomerOpportunityRole.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CustomerOpportunityRole.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CustomerOpportunityRole.CreatedOn,
    CustomerOpportunityRole.CustomerId,
    CustomerOpportunityRole.CustomerIdDsc,
    CustomerOpportunityRole.CustomerIdName,
    CustomerOpportunityRole.CustomerIdType,
    CustomerOpportunityRole.CustomerIdYomiName,
    CustomerOpportunityRole.CustomerOpportunityRoleId,
    CustomerOpportunityRole.Description,
    CustomerOpportunityRole.ImportSequenceNumber,
    CustomerOpportunityRole.ModifiedBy,
    CustomerOpportunityRole.ModifiedByDsc,
    CustomerOpportunityRole.ModifiedByName,
    CustomerOpportunityRole.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CustomerOpportunityRole.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CustomerOpportunityRole.ModifiedOn,
    CustomerOpportunityRole.OpportunityId,
    CustomerOpportunityRole.OpportunityIdDsc,
    CustomerOpportunityRole.OpportunityIdName,
    CustomerOpportunityRole.OpportunityRoleId,
    CustomerOpportunityRole.OpportunityRoleIdDsc,
    CustomerOpportunityRole.OpportunityRoleIdName,
    CustomerOpportunityRole.OpportunityStateCode,
    CustomerOpportunityRole.OpportunityStatusCode,
    dbo.fn_UTCToTzSpecificLocalTime(CustomerOpportunityRole.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CustomerOpportunityRole.OverriddenCreatedOn,
    CustomerOpportunityRole.OwnerId,
    CustomerOpportunityRole.OwnerIdDsc,
    CustomerOpportunityRole.OwnerIdName,
    CustomerOpportunityRole.OwnerIdType,
    CustomerOpportunityRole.OwnerIdYomiName,
    CustomerOpportunityRole.OwningBusinessUnit,
    CustomerOpportunityRole.OwningUser
from CustomerOpportunityRole
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4503) pdm
where CustomerOpportunityRole.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    CustomerOpportunityRole.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		CustomerOpportunityRole.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		CustomerOpportunityRole.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		CustomerOpportunityRole.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    CustomerOpportunityRole.CustomerOpportunityRoleId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4503 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredActivityMimeAttachment]    Script Date: 04/11/2008 06:57:47 ******/




--
-- report view for activitymimeattachment
--
create view [dbo].[FilteredActivityMimeAttachment] (
    activityid,
    activitymimeattachmentid,
    attachmentnumber,
    body,
    filename,
    filesize,
    mimetype,
    subject
) with view_metadata as 
select 
    ActivityAttachment.ActivityId,
    ActivityAttachment.ActivityMimeAttachmentId,
    ActivityAttachment.AttachmentNumber,
    ActivityAttachment.Body,
    ActivityAttachment.FileName,
    ActivityAttachment.FileSize,
    ActivityAttachment.MimeType,
    ActivityAttachment.Subject
from ActivityAttachment
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4200) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    ActivityAttachment.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		ActivityAttachment.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		ActivityAttachment.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		ActivityAttachment.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    ActivityAttachment.ActivityId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4200 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredCustomerRelationship]    Script Date: 04/11/2008 06:57:54 ******/




--
-- report view for customerrelationship
--
create view [dbo].[FilteredCustomerRelationship] (
    converserelationshipid,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    customerid,
    customeriddsc,
    customeridname,
    customeridtype,
    customeridyominame,
    customerrelationshipid,
    customerroledescription,
    customerroleid,
    customerroleiddsc,
    customerroleidname,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    overriddencreatedon, 
    overriddencreatedonutc,
    ownerid,
    owneriddsc,
    owneridname,
    owneridtype,
    owneridyominame,
    owningbusinessunit,
    owninguser,
    partnerid,
    partneriddsc,
    partneridname,
    partneridtype,
    partneridyominame,
    partnerroledescription,
    partnerroleid,
    partnerroleiddsc,
    partnerroleidname
) with view_metadata as 
select 
    CustomerRelationship.ConverseRelationshipId,
    CustomerRelationship.CreatedBy,
    CustomerRelationship.CreatedByDsc,
    CustomerRelationship.CreatedByName,
    CustomerRelationship.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CustomerRelationship.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CustomerRelationship.CreatedOn,
    CustomerRelationship.CustomerId,
    CustomerRelationship.CustomerIdDsc,
    CustomerRelationship.CustomerIdName,
    CustomerRelationship.CustomerIdType,
    CustomerRelationship.CustomerIdYomiName,
    CustomerRelationship.CustomerRelationshipId,
    CustomerRelationship.CustomerRoleDescription,
    CustomerRelationship.CustomerRoleId,
    CustomerRelationship.CustomerRoleIdDsc,
    CustomerRelationship.CustomerRoleIdName,
    CustomerRelationship.ImportSequenceNumber,
    CustomerRelationship.ModifiedBy,
    CustomerRelationship.ModifiedByDsc,
    CustomerRelationship.ModifiedByName,
    CustomerRelationship.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(CustomerRelationship.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CustomerRelationship.ModifiedOn,
    dbo.fn_UTCToTzSpecificLocalTime(CustomerRelationship.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    CustomerRelationship.OverriddenCreatedOn,
    CustomerRelationship.OwnerId,
    CustomerRelationship.OwnerIdDsc,
    CustomerRelationship.OwnerIdName,
    CustomerRelationship.OwnerIdType,
    CustomerRelationship.OwnerIdYomiName,
    CustomerRelationship.OwningBusinessUnit,
    CustomerRelationship.OwningUser,
    CustomerRelationship.PartnerId,
    CustomerRelationship.PartnerIdDsc,
    CustomerRelationship.PartnerIdName,
    CustomerRelationship.PartnerIdType,
    CustomerRelationship.PartnerIdYomiName,
    CustomerRelationship.PartnerRoleDescription,
    CustomerRelationship.PartnerRoleId,
    CustomerRelationship.PartnerRoleIdDsc,
    CustomerRelationship.PartnerRoleIdName
from CustomerRelationship
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4502) pdm
where CustomerRelationship.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    (
    -- object owned by the user
    --
    CustomerRelationship.OwningUser = u.SystemUserId
    -- role based access
    or 
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		CustomerRelationship.OwningBusinessUnit in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		CustomerRelationship.OwningBusinessUnit is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		CustomerRelationship.OwningBusinessUnit = u.BusinessUnitId
	)
)

    -- object shared to the user
    or 
    CustomerRelationship.CustomerRelationshipId in 
    (
        select  POA.ObjectId from PrincipalObjectAccess POA 
        join SystemUserPrincipals sup on POA.PrincipalId = sup.PrincipalId
            where sup.SystemUserId = u.SystemUserId and
                POA.ObjectTypeCode = 4502 AND 
                ((POA.AccessRightsMask | POA.InheritedAccessRightsMask) & 1)=1
    )
    )
    )

/****** Object:  View [dbo].[FilteredTeam]    Script Date: 04/11/2008 06:58:13 ******/




--
-- report view for team
--
create view [dbo].[FilteredTeam] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    emailaddress,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    teamid
) with view_metadata as 
select 
    Team.BusinessUnitId,
    Team.BusinessUnitIdDsc,
    Team.BusinessUnitIdName,
    Team.CreatedBy,
    Team.CreatedByDsc,
    Team.CreatedByName,
    Team.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Team.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Team.CreatedOn,
    Team.Description,
    Team.EMailAddress,
    Team.ImportSequenceNumber,
    Team.ModifiedBy,
    Team.ModifiedByDsc,
    Team.ModifiedByName,
    Team.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Team.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Team.ModifiedOn,
    Team.Name,
    Team.OrganizationId,
    Team.OrganizationIdDsc,
    Team.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(Team.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Team.OverriddenCreatedOn,
    Team.TeamId
from Team
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(9) pdm
where Team.DeletionStateCode in (0) 
    and
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Team.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Team.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Team.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredRole]    Script Date: 04/11/2008 06:58:07 ******/




--
-- report view for role
--
create view [dbo].[FilteredRole] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    parentroleid,
    parentroleiddsc,
    parentroleidname,
    roleid,
    roletemplateid
) with view_metadata as 
select 
    Role.BusinessUnitId,
    Role.BusinessUnitIdDsc,
    Role.BusinessUnitIdName,
    Role.CreatedBy,
    Role.CreatedByDsc,
    Role.CreatedByName,
    Role.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Role.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Role.CreatedOn,
    Role.ImportSequenceNumber,
    Role.ModifiedBy,
    Role.ModifiedByDsc,
    Role.ModifiedByName,
    Role.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Role.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Role.ModifiedOn,
    Role.Name,
    Role.OrganizationId,
    Role.OrganizationIdDsc,
    Role.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(Role.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Role.OverriddenCreatedOn,
    Role.ParentRoleId,
    Role.ParentRoleIdDsc,
    Role.ParentRoleIdName,
    Role.RoleId,
    Role.RoleTemplateId
from Role
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1036) pdm
where Role.DeletionStateCode in (0) 
    and
    (
    exists
(
	select 
		1
	where
	(
		-- deep security
		((pdm.PrivilegeDepthMask & 0x44) != 0) and 
		Role.BusinessUnitId in (select biz.SubBusinessId from BusinessUnitMap as biz where biz.BusinessId = u.BusinessUnitId)
	) 
	or
	(
		-- global security
		((pdm.PrivilegeDepthMask & 0x88) != 0) and 
		Role.BusinessUnitId is not null 
	) 
	or
	(
		-- local security
		((pdm.PrivilegeDepthMask & 0x22) != 0) and 
		Role.BusinessUnitId = u.BusinessUnitId
	)
)

    )

/****** Object:  View [dbo].[FilteredPluginType]    Script Date: 04/11/2008 06:58:02 ******/




--
-- report view for plugintype
--
create view [dbo].[FilteredPluginType] (
    assemblyname,
    createdby,
    createdon, 
    createdonutc,
    culture,
    customizationlevel,
    friendlyname,
    isworkflowactivity,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    organizationid,
    pluginassemblyid,
    plugintypeid,
    plugintypeidunique,
    publickeytoken,
    typename,
    version
) with view_metadata as 
select 
    PluginType.AssemblyName,
    PluginType.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(PluginType.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PluginType.CreatedOn,
    PluginType.Culture,
    PluginType.CustomizationLevel,
    PluginType.FriendlyName,
    PluginType.IsWorkflowActivity,
    PluginType.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(PluginType.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PluginType.ModifiedOn,
    PluginType.OrganizationId,
    PluginType.PluginAssemblyId,
    PluginType.PluginTypeId,
    PluginType.PluginTypeIdUnique,
    PluginType.PublicKeyToken,
    PluginType.TypeName,
    PluginType.Version
from PluginType
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4602) pdm
where PluginType.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    PluginType.OrganizationId = u.OrganizationId
    )

/****** Object:  StoredProcedure [dbo].[p_GenCascadeDeleteCollect]    Script Date: 04/11/2008 06:35:08 ******/




create proc [dbo].[p_GenCascadeDeleteCollect](@alter int = 0)
as
begin
    set nocount on
    
    declare @count int
    declare @cascade_type varchar(40)     
    set @cascade_type = 'CascadeDelete'

    -- temp table to hold the generated stored proc
    create table #txttbl (id int identity, line varchar(8000), layer int, objecttypecode int)

    declare @fn_name as varchar(255)
    set @fn_name = 'fn_CollectFor'+@cascade_type

    -- head of the function
    -- if this is at the setup/upgrade phase, then drop and create the function
    if (@alter = 0) 
    begin
        insert into #txttbl (line) values ('if object_id(''' + @fn_name + ''') is not null')
        insert into #txttbl (line) values ('drop function ' + @fn_name)
        insert into #txttbl (line) values ('go')
        insert into #txttbl (line) values ('create function ' + @fn_name)
    end
    else
    -- if this is at the meta-date change phase, then alter the function
        insert into #txttbl (line) values ('alter function ' + @fn_name)

    insert into #txttbl (line) values ('(')
    insert into #txttbl (line) values ('    @root_id uniqueidentifier, ')
    insert into #txttbl (line) values ('    @root_otc int,')
    insert into #txttbl (line) values ('    @isoffline int ')
    insert into #txttbl (line) values (')')
    insert into #txttbl (line) values ('returns @tbl table
( 	
     oid uniqueidentifier,
     otc int,
     isroot bit default 0,
     processed int default 0
) ')
    insert into #txttbl (line) values ('as')
    insert into #txttbl (line) values ('begin')
    insert into #txttbl (line) values ('     declare @null_guid as uniqueidentifier')
    insert into #txttbl (line) values ('     set @null_guid = N''00000000-0000-0000-0000-000000000000''')

    create table #entitylayer(objecttypecode int , layer int, constraint _idx_entitylayer_ primary key clustered (objecttypecode, layer))
    -- cascade related stuff
    exec p_TopoSortEntityRelationshipAll @cascade_type, N'not in (0, 2)'
    -- insert the root entity    
    insert into #txttbl (line) values (char(9)+' insert into @tbl values(@root_id, @root_otc, 1, 0)')

    declare @line varchar(8000), @line2 varchar(8000)
    -- iterate through each entity ordered by layers
    declare cur_entity cursor fast_forward for
    select objecttypecode, layer from #entitylayer order by layer, objecttypecode
    
    declare @otc int, @layer int
    
    open cur_entity
    fetch next from cur_entity into @otc, @layer
    
    while(@@fetch_status = 0)
    begin
        -- process the restrict link type
        declare @re_pk_name varchar(255), @re_name varchar(255), @re_ra_name varchar(255), 
                @e_otc int, @re_has_dsc int, @re_repl bit, @re_id uniqueidentifier, @re_ra_id uniqueidentifier

        declare cur_rel cursor fast_forward for
            select e.ObjectTypeCode, ra.PhysicalName, pk.PhysicalName, re.PhysicalName, 
                   re.HasDeletionStateCode, re.IsReplicated
            from RelationshipView r, EntityView e, EntityView re, AttributeView pk, AttributeView ra
            where e.EntityId = r.ReferencedEntityId and re.EntityId = r.ReferencingEntityId
            and re.ObjectTypeCode = @otc 
            and pk.EntityId = re.EntityId and pk.IsPKAttribute = 1
            and ra.AttributeId = r.ReferencingAttributeId
            and r.CascadeDelete = 3
        
        open cur_rel
        fetch next from cur_rel into @e_otc, @re_ra_name, @re_pk_name, @re_name, @re_has_dsc, @re_repl 
        declare @first bit
        set @first = 1   
        
        while(@@fetch_status = 0)
        begin
            if(@first = 1) set @line = char(9)+'if(exists(select o.' + @re_pk_name + ' from ' + @re_name + ' o, @tbl c where (('
            else set @line = @line + ' or '
            set @line = @line + '(o.'+@re_ra_name+'=c.oid and c.otc = '+cast(@e_otc as varchar(40)) + ')'
            set @first = 0
            fetch next from cur_rel into @e_otc, @re_ra_name, @re_pk_name, @re_name, @re_has_dsc, @re_repl
        end
        
        if(@first = 0) 
        begin 
            set @line = @line + ')'
            if(@re_has_dsc = 1) set @line = @line + ' and o.DeletionStateCode in (0) '
            set @line = @line + '))) goto rl'
            if(@re_repl = 0) set @line = char(9) + 'if (@isoffline = 0) begin '+@line+' end'
            insert into #txttbl (line) values (@line)
        end
 
        close cur_rel
        deallocate cur_rel
 
        -- process regular cascade link type
        
        -- iterate through all the referencing attribute
        declare cur_ref_attr cursor fast_forward for 
            select distinct re.PhysicalName, ra.PhysicalName, pk.PhysicalName,
            re.EntityId, ra.AttributeId, re.HasDeletionStateCode, re.IsReplicated
            from EntityView re, RelationshipView r, AttributeView ra, AttributeView pk
            where re.EntityId  = r.ReferencingEntityId
            and ra.EntityId = re.EntityId
            and ra.AttributeId = r.ReferencingAttributeId
            and pk.EntityId = re.EntityId
            and pk.IsPKAttribute = 1
            and re.ObjectTypeCode = @otc
            and r.CascadeDelete = 1

        open cur_ref_attr
        fetch next from cur_ref_attr into @re_name, @re_ra_name, @re_pk_name, @re_id, @re_ra_id, @re_has_dsc, @re_repl
        
        while(@@fetch_status = 0)
        begin
            declare cur_ref_otc cursor fast_forward for
                select e.ObjectTypeCode
                from EntityView e, RelationshipView r
                where e.EntityId = r.ReferencedEntityId
                and r.ReferencingEntityId = @re_id
                and r.ReferencingAttributeId = @re_ra_id
            
            open cur_ref_otc
            fetch next from cur_ref_otc into @e_otc
            set @count = 0
            set @first = 1
            set @line2 = ''
            while(@@fetch_status = 0)
            begin
                if(@first = 1) set @line2 = '('
                else set @line2 = @line2 + ', '
                set @line2 = @line2 + cast(@e_otc as varchar(40))
                set @first = 0 
                set @count = @count + 1
                fetch next from cur_ref_otc into @e_otc
            end
            
            if(@first = 0) 
            begin
                set @line2 = @line2 + ')'
                set @line  = char(9) + 'insert into @tbl(oid, otc) select o.'+@re_pk_name+', '+cast(@otc as varchar(40))
                           +' from '+@re_name+' o, @tbl c where c.oid=o.'+@re_ra_name+' and c.otc in '+@line2
                if(@count < 5) set @line = char(9) + 'if(exists(select top 1 otc from @tbl where otc in '+@line2+')) '+@line
                if(@re_has_dsc = 1) set @line = @line + ' and o.DeletionStateCode in (0)'
                if(@re_repl = 0) set @line = char(9) + 'if (@isoffline = 0) begin '+@line+' end'    
            end 

            close cur_ref_otc
            deallocate cur_ref_otc
            
            insert into #txttbl (line) values (@line)

            fetch next from cur_ref_attr into @re_name, @re_ra_name, @re_pk_name, @re_id, @re_ra_id, @re_has_dsc, @re_repl
        end
        close cur_ref_attr
        deallocate cur_ref_attr    
        
        fetch next from cur_entity into @otc, @layer
    end

    close cur_entity
    deallocate cur_entity

    -- tail of the function
    insert into #txttbl (line) values ('    return')
    insert into #txttbl (line) values ('rl: insert into @tbl values(@null_guid, 0, 0, 0) return')
    insert into #txttbl (line) values ('end')

    select line from #txttbl where line is not null order by id, objecttypecode
  
    -- drop the temp table
    drop table #entitylayer
    drop table #txttbl 
end

/****** Object:  View [dbo].[FilteredPluginAssembly]    Script Date: 04/11/2008 06:58:02 ******/




--
-- report view for pluginassembly
--
create view [dbo].[FilteredPluginAssembly] (
    content,
    createdby,
    createdon, 
    createdonutc,
    culture,
    customizationlevel,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    path,
    pluginassemblyid,
    pluginassemblyidunique,
    publickeytoken,
    sourcehash,
    sourcetype,
    version
) with view_metadata as 
select 
    PluginAssembly.Content,
    PluginAssembly.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(PluginAssembly.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PluginAssembly.CreatedOn,
    PluginAssembly.Culture,
    PluginAssembly.CustomizationLevel,
    PluginAssembly.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(PluginAssembly.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    PluginAssembly.ModifiedOn,
    PluginAssembly.Name,
    PluginAssembly.OrganizationId,
    PluginAssembly.Path,
    PluginAssembly.PluginAssemblyId,
    PluginAssembly.PluginAssemblyIdUnique,
    PluginAssembly.PublicKeyToken,
    PluginAssembly.SourceHash,
    PluginAssembly.SourceType,
    PluginAssembly.Version
from PluginAssembly
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4605) pdm
where PluginAssembly.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    PluginAssembly.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredSdkMessageRequest]    Script Date: 04/11/2008 06:58:10 ******/




--
-- report view for sdkmessagerequest
--
create view [dbo].[FilteredSdkMessageRequest] (
    createdby,
    createdon, 
    createdonutc,
    customizationlevel,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    sdkmessagepairid,
    sdkmessagerequestid,
    sdkmessagerequestidunique
) with view_metadata as 
select 
    SdkMessageRequest.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageRequest.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageRequest.CreatedOn,
    SdkMessageRequest.CustomizationLevel,
    SdkMessageRequest.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageRequest.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageRequest.ModifiedOn,
    SdkMessageRequest.Name,
    SdkMessageRequest.OrganizationId,
    SdkMessageRequest.SdkMessagePairId,
    SdkMessageRequest.SdkMessageRequestId,
    SdkMessageRequest.SdkMessageRequestIdUnique
from SdkMessageRequest
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4609) pdm
where SdkMessageRequest.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SdkMessageRequest.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredTerritory]    Script Date: 04/11/2008 06:58:13 ******/




--
-- report view for territory
--
create view [dbo].[FilteredTerritory] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    importsequencenumber,
    managerid,
    manageriddsc,
    manageridname,
    manageridyominame,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    territoryid
) with view_metadata as 
select 
    Territory.CreatedBy,
    Territory.CreatedByDsc,
    Territory.CreatedByName,
    Territory.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Territory.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Territory.CreatedOn,
    Territory.Description,
    Territory.ImportSequenceNumber,
    Territory.ManagerId,
    Territory.ManagerIdDsc,
    Territory.ManagerIdName,
    Territory.ManagerIdYomiName,
    Territory.ModifiedBy,
    Territory.ModifiedByDsc,
    Territory.ModifiedByName,
    Territory.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Territory.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Territory.ModifiedOn,
    Territory.Name,
    Territory.OrganizationId,
    Territory.OrganizationIdDsc,
    Territory.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(Territory.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Territory.OverriddenCreatedOn,
    Territory.TerritoryId
from Territory
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(2013) pdm
where Territory.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    Territory.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredKbArticleComment]    Script Date: 04/11/2008 06:57:58 ******/




--
-- report view for kbarticlecomment
--
create view [dbo].[FilteredKbArticleComment] (
    commenttext,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    kbarticlecommentid,
    kbarticleid,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    organizationid,
    title
) with view_metadata as 
select 
    KbArticleComment.CommentText,
    KbArticleComment.CreatedBy,
    KbArticleComment.CreatedByDsc,
    KbArticleComment.CreatedByName,
    KbArticleComment.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(KbArticleComment.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    KbArticleComment.CreatedOn,
    KbArticleComment.KbArticleCommentId,
    KbArticleComment.KbArticleId,
    KbArticleComment.ModifiedBy,
    KbArticleComment.ModifiedByDsc,
    KbArticleComment.ModifiedByName,
    KbArticleComment.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(KbArticleComment.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    KbArticleComment.ModifiedOn,
    KbArticleComment.OrganizationId,
    KbArticleComment.Title
from KbArticleComment
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(127) pdm
    where
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    KbArticleComment.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredSdkMessageResponseField]    Script Date: 04/11/2008 06:58:10 ******/




--
-- report view for sdkmessageresponsefield
--
create view [dbo].[FilteredSdkMessageResponseField] (
    clrformatter,
    createdby,
    createdon, 
    createdonutc,
    customizationlevel,
    formatter,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    position,
    publicname,
    sdkmessageresponsefieldid,
    sdkmessageresponsefieldidunique,
    sdkmessageresponseid,
    value
) with view_metadata as 
select 
    SdkMessageResponseField.ClrFormatter,
    SdkMessageResponseField.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageResponseField.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageResponseField.CreatedOn,
    SdkMessageResponseField.CustomizationLevel,
    SdkMessageResponseField.Formatter,
    SdkMessageResponseField.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageResponseField.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageResponseField.ModifiedOn,
    SdkMessageResponseField.Name,
    SdkMessageResponseField.OrganizationId,
    SdkMessageResponseField.Position,
    SdkMessageResponseField.PublicName,
    SdkMessageResponseField.SdkMessageResponseFieldId,
    SdkMessageResponseField.SdkMessageResponseFieldIdUnique,
    SdkMessageResponseField.SdkMessageResponseId,
    SdkMessageResponseField.Value
from SdkMessageResponseField
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4611) pdm
where SdkMessageResponseField.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SdkMessageResponseField.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredApplicationFile]    Script Date: 04/11/2008 06:57:48 ******/




--
-- report view for applicationfile
--
create view [dbo].[FilteredApplicationFile] (
    body,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    fileid,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname
) with view_metadata as 
select 
    ApplicationFile.Body,
    ApplicationFile.CreatedBy,
    ApplicationFile.CreatedByDsc,
    ApplicationFile.CreatedByName,
    ApplicationFile.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ApplicationFile.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ApplicationFile.CreatedOn,
    ApplicationFile.FileId,
    ApplicationFile.ModifiedBy,
    ApplicationFile.ModifiedByDsc,
    ApplicationFile.ModifiedByName,
    ApplicationFile.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(ApplicationFile.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    ApplicationFile.ModifiedOn,
    ApplicationFile.Name,
    ApplicationFile.OrganizationId,
    ApplicationFile.OrganizationIdDsc,
    ApplicationFile.OrganizationIdName
from ApplicationFile
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4707) pdm
where ApplicationFile.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    ApplicationFile.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredSdkMessageRequestInput]    Script Date: 04/11/2008 06:58:10 ******/




--
-- report view for sdkmessagerequestinput
--
create view [dbo].[FilteredSdkMessageRequestInput] (
    createdby,
    createdon, 
    createdonutc,
    customizationlevel,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    sdkmessagerequestid,
    sdkmessagerequestinputid,
    sdkmessagerequestinputidunique
) with view_metadata as 
select 
    SdkMessageRequestInput.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageRequestInput.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageRequestInput.CreatedOn,
    SdkMessageRequestInput.CustomizationLevel,
    SdkMessageRequestInput.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageRequestInput.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageRequestInput.ModifiedOn,
    SdkMessageRequestInput.Name,
    SdkMessageRequestInput.OrganizationId,
    SdkMessageRequestInput.SdkMessageRequestId,
    SdkMessageRequestInput.SdkMessageRequestInputId,
    SdkMessageRequestInput.SdkMessageRequestInputIdUnique
from SdkMessageRequestInput
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4612) pdm
where SdkMessageRequestInput.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SdkMessageRequestInput.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredSdkMessageProcessingStepSecureConfig]    Script Date: 04/11/2008 06:58:09 ******/




--
-- report view for sdkmessageprocessingstepsecureconfig
--
create view [dbo].[FilteredSdkMessageProcessingStepSecureConfig] (
    createdby,
    createdon, 
    createdonutc,
    customizationlevel,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    organizationid,
    sdkmessageprocessingstepsecureconfigid,
    sdkmessageprocessingstepsecureconfigidunique,
    secureconfig
) with view_metadata as 
select 
    SdkMessageProcessingStepSecureConfig.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageProcessingStepSecureConfig.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageProcessingStepSecureConfig.CreatedOn,
    SdkMessageProcessingStepSecureConfig.CustomizationLevel,
    SdkMessageProcessingStepSecureConfig.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessageProcessingStepSecureConfig.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessageProcessingStepSecureConfig.ModifiedOn,
    SdkMessageProcessingStepSecureConfig.OrganizationId,
    SdkMessageProcessingStepSecureConfig.SdkMessageProcessingStepSecureConfigId,
    SdkMessageProcessingStepSecureConfig.SdkMessageProcessingStepSecureConfigIdUnique,
    SdkMessageProcessingStepSecureConfig.SecureConfig
from SdkMessageProcessingStepSecureConfig
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4616) pdm
where SdkMessageProcessingStepSecureConfig.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SdkMessageProcessingStepSecureConfig.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredSdkMessagePair]    Script Date: 04/11/2008 06:58:09 ******/




--
-- report view for sdkmessagepair
--
create view [dbo].[FilteredSdkMessagePair] (
    createdby,
    createdon, 
    createdonutc,
    customizationlevel,
    endpoint,
    modifiedby,
    modifiedon, 
    modifiedonutc,
    namespace,
    organizationid,
    sdkmessageid,
    sdkmessagepairid,
    sdkmessagepairidunique
) with view_metadata as 
select 
    SdkMessagePair.CreatedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessagePair.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessagePair.CreatedOn,
    SdkMessagePair.CustomizationLevel,
    SdkMessagePair.Endpoint,
    SdkMessagePair.ModifiedBy,
    dbo.fn_UTCToTzSpecificLocalTime(SdkMessagePair.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    SdkMessagePair.ModifiedOn,
    SdkMessagePair.Namespace,
    SdkMessagePair.OrganizationId,
    SdkMessagePair.SdkMessageId,
    SdkMessagePair.SdkMessagePairId,
    SdkMessagePair.SdkMessagePairIdUnique
from SdkMessagePair
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(4613) pdm
where SdkMessagePair.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    SdkMessagePair.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredSubject]    Script Date: 04/11/2008 06:58:12 ******/




--
-- report view for subject
--
create view [dbo].[FilteredSubject] (
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    featuremask,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    parentsubject,
    parentsubjectdsc,
    parentsubjectname,
    subjectid,
    title
) with view_metadata as 
select 
    Subject.CreatedBy,
    Subject.CreatedByDsc,
    Subject.CreatedByName,
    Subject.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Subject.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Subject.CreatedOn,
    Subject.Description,
    Subject.FeatureMask,
    Subject.ImportSequenceNumber,
    Subject.ModifiedBy,
    Subject.ModifiedByDsc,
    Subject.ModifiedByName,
    Subject.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(Subject.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Subject.ModifiedOn,
    Subject.OrganizationId,
    Subject.OrganizationIdDsc,
    Subject.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(Subject.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    Subject.OverriddenCreatedOn,
    Subject.ParentSubject,
    Subject.ParentSubjectDsc,
    Subject.ParentSubjectName,
    Subject.SubjectId,
    Subject.Title
from Subject
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(129) pdm
where Subject.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    Subject.OrganizationId = u.OrganizationId
    )

/****** Object:  View [dbo].[FilteredUoMSchedule]    Script Date: 04/11/2008 06:58:14 ******/




--
-- report view for uomschedule
--
create view [dbo].[FilteredUoMSchedule] (
    baseuomname,
    createdby,
    createdbydsc,
    createdbyname,
    createdbyyominame,
    createdon, 
    createdonutc,
    description,
    importsequencenumber,
    modifiedby,
    modifiedbydsc,
    modifiedbyname,
    modifiedbyyominame,
    modifiedon, 
    modifiedonutc,
    name,
    organizationid,
    organizationiddsc,
    organizationidname,
    overriddencreatedon, 
    overriddencreatedonutc,
    uomscheduleid
) with view_metadata as 
select 
    UoMSchedule.BaseUoMName,
    UoMSchedule.CreatedBy,
    UoMSchedule.CreatedByDsc,
    UoMSchedule.CreatedByName,
    UoMSchedule.CreatedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UoMSchedule.CreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UoMSchedule.CreatedOn,
    UoMSchedule.Description,
    UoMSchedule.ImportSequenceNumber,
    UoMSchedule.ModifiedBy,
    UoMSchedule.ModifiedByDsc,
    UoMSchedule.ModifiedByName,
    UoMSchedule.ModifiedByYomiName,
    dbo.fn_UTCToTzSpecificLocalTime(UoMSchedule.ModifiedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UoMSchedule.ModifiedOn,
    UoMSchedule.Name,
    UoMSchedule.OrganizationId,
    UoMSchedule.OrganizationIdDsc,
    UoMSchedule.OrganizationIdName,
    dbo.fn_UTCToTzSpecificLocalTime(UoMSchedule.OverriddenCreatedOn,
			us.TimeZoneBias,
			us.TimeZoneDaylightBias,
			us.TimeZoneDaylightYear,
			us.TimeZoneDaylightMonth,
			us.TimeZoneDaylightDay,
			us.TimeZoneDaylightHour,
			us.TimeZoneDaylightMinute,
			us.TimeZoneDaylightSecond,
			0,
			us.TimeZoneDaylightDayOfWeek,
			us.TimeZoneStandardBias,
			us.TimeZoneStandardYear,
			us.TimeZoneStandardMonth,
			us.TimeZoneStandardDay,
			us.TimeZoneStandardHour,
			us.TimeZoneStandardMinute,
			us.TimeZoneStandardSecond,
			0,
			us.TimeZoneStandardDayOfWeek), 
    UoMSchedule.OverriddenCreatedOn,
    UoMSchedule.UoMScheduleId
from UoMSchedule
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId
    cross join dbo.fn_GetMaxPrivilegeDepthMask(1056) pdm
where UoMSchedule.DeletionStateCode in (0) 
    and
    (
    -- privilege check
    pdm.PrivilegeDepthMask is not null and
    UoMSchedule.OrganizationId = u.OrganizationId
    )

/****** Object:  StoredProcedure [dbo].[p_CascadeGrantAccess]    Script Date: 04/11/2008 06:34:58 ******/
SET ANSI_NULLS OFF



CREATE PROC [dbo].[p_CascadeGrantAccess](
        @principal_id UNIQUEIDENTIFIER,
        @principal_type INT,
	    @root_entity_otc int,
		@root_entity_oid UNIQUEIDENTIFIER,
        @access_rights INT,
        @inherited_access_rights INT
        ) AS
BEGIN
    SET NOCOUNT ON
        
        
	-- CHANGE ALL THE OBJECT TYPE CODES OF ACTIVITIES TO THAT OF ACTIVITY POINTER (4200)
	UPDATE #CascadeCollect SET objecttype = 4200 
		 FROM #CascadeCollect tmp, EntityView e
		 WHERE tmp.objecttype = e.ObjectTypeCode AND e.IsActivity = 1
 
	-- UPDATE ROOT OTC to 4200 if it is an activity
 	IF EXISTS(SELECT * FROM EntityView e where e.ObjectTypeCode = @root_entity_otc AND e.IsActivity = 1)
		SET @root_entity_otc = 4200
 
    	-- Track sync changes for all entities
		EXEC p_CascadeGrantRevokeAccessSyncTracking

         -- FOR THE ROOT ENTITY, WE SET AccessRightsMask
        UPDATE PrincipalObjectAccess SET AccessRightsMask=AccessRightsMask|@access_rights, ChangedOn=GETUTCDATE()
        FROM PrincipalObjectAccess as poa
        WHERE poa.ObjectTypeCode=@root_entity_otc AND poa.ObjectId=@root_entity_oid AND poa.PrincipalId = @principal_id AND poa.PrincipalTypeCode = @principal_type
        
		IF(@@ROWCOUNT = 0) 
        INSERT INTO PrincipalObjectAccess (ObjectId,PrincipalId,ObjectTypeCode,PrincipalTypeCode,ChangedOn,AccessRightsMask,InheritedAccessRightsMask)
                SELECT objectid, @principal_id, objecttype, @principal_type
                    , GETUTCDATE(), @access_rights, 0 
                FROM #CascadeCollect as coll WHERE coll.objecttype=@root_entity_otc AND coll.objectid=@root_entity_oid
        
        -- Remove the root record from #CascadeCollect
        DELETE FROM #CascadeCollect WHERE #CascadeCollect.objecttype=@root_entity_otc AND #CascadeCollect.objectid=@root_entity_oid
        
        -- FOR THE OTHER ENTITIES, WE SET InheritedAccessRightsMask
        UPDATE PrincipalObjectAccess SET InheritedAccessRightsMask=InheritedAccessRightsMask|@inherited_access_rights, ChangedOn=GETUTCDATE()
        FROM PrincipalObjectAccess as poa INNER JOIN #CascadeCollect AS coll ON poa.ObjectId=coll.objectid AND poa.ObjectTypeCode=coll.objecttype
        WHERE poa.PrincipalId = @principal_id AND poa.PrincipalTypeCode = @principal_type

  		-- Some records where updated in POA table
		-- Remove them from #CascadeCollect
		IF(@@ROWCOUNT > 0) 
		BEGIN
			DELETE FROM #CascadeCollect WHERE 
			EXISTS(SELECT * FROM PrincipalObjectAccess as poa where poa.ObjectId=#CascadeCollect.objectid 
			AND poa.ObjectTypeCode=#CascadeCollect.objecttype AND poa.PrincipalId = @principal_id AND poa.PrincipalTypeCode = @principal_type )
		END	

            INSERT INTO PrincipalObjectAccess (ObjectId,PrincipalId,ObjectTypeCode,PrincipalTypeCode,ChangedOn,AccessRightsMask,InheritedAccessRightsMask)
                SELECT objectid, @principal_id, objecttype, @principal_type
                    , GETUTCDATE(), 0, @inherited_access_rights FROM #CascadeCollect

END

/****** Object:  StoredProcedure [dbo].[p_feGetFormXml]    Script Date: 04/11/2008 06:35:07 ******/




create procedure [dbo].[p_feGetFormXml](@entityname nvarchar(255)) as
set nocount on

set nocount on

set nocount on

declare @entityid uniqueidentifier

select @entityid = EntityId
from EntityView
where LogicalName = @entityname

select 
	1 as tag,
	null as parent,
	EntityId as [entity!1!enityid!hide],
	LogicalName as [entity!1!name],
	ObjectTypeCode as [entity!1!otc],
	null as [fields!2!name],
	null as [field!3!entityid!hide],
	null as [field!3!name],
	null as [field!3!localizedname],
	null as [field!3!description],
	null as [field!3!requiredforplatform],
	null as [field!3!requiredforgrid],
	null as [field!3!requiredforform],
	null as [field!3!validforadvancedfind],
	null as [field!3!validforgrid],
	null as [field!3!validforform],
	null as [field!3!validforcreateapi],
	null as [field!3!validforupdateapi],
	null as [field!3!validforreadapi],
	null as [field!3!maxlength],
	null as [field!3!datatype],
    null as [field!3!objecttypecode],
	null as [field!3!customfield]
from EntityView
where EntityId = @entityid

union all

select
	2 as tag,
	1 as parent,
	EntityId,
	null, -- entity name
	null, -- entity ot code
	null, -- fields name
	null, -- entity id
	null, -- field name
	null, -- localized name
	null, -- description
	null, -- required platform
	null, -- required grid
	null, -- required form
	null, -- valid advanced find
	null, -- valid grid
	null, -- valid form
	null, -- valid create
	null, -- valid update
	null, -- valid read
	null, -- max length
	null, -- data type
    null,  -- field otc
    null  -- is custom field
from EntityView
where EntityId = @entityid
	
union all

select
	3 as tag,
	2 as parent,
	EntityId,
	null, -- entity name
	null, -- entity ot code
	null, -- fields name
	null, -- entityid
	AttributeName,
	LocalizedName,
	cast(Description as nvarchar(255)),
	IsRequiredByPlatform, 
	IsRequiredForGrid, 
	IsRequiredForForm,
	IsValidForAdvancedFind, 
	ValidForGrid, 
	ValidForForm,	
	ValidForCreate,
	ValidForUpdate,
	ValidForRead,
	MaxLength,
    Datatype,
    ObjectTypeCode,
	IsCustomField
from v_attributeobjecttypes
where EntityId = @entityid

order by [entity!1!enityid!hide], [field!3!name], parent

for xml explicit

/****** Object:  StoredProcedure [dbo].[p_LoadAllLocalizedLabels]    Script Date: 04/11/2008 06:35:22 ******/




create procedure [dbo].[p_LoadAllLocalizedLabels]
(
    @retrieve_latest bit
)
as
begin
	set nocount on
	if(@retrieve_latest <> 0)
	begin
		select l1.* from LocalizedLabelLogicalView l1
		left outer join LocalizedLabelLogicalView l2 on
		(l1.LocalizedLabelId = l2.LocalizedLabelId and l1.LocalizedLabelRowId <> l2.LocalizedLabelRowId
		and l1.InProduction = 1)
		where l2.InProduction is null and l1.CustomizationLevel <> 2
	end
	else
	begin
		select *    
		from LocalizedLabelView
	end
end

/****** Object:  View [dbo].[FilteredSalesProcessInstance]    Script Date: 04/11/2008 06:58:08 ******/




--
-- report view for salesprocessinstance
--
create view [dbo].[FilteredSalesProcessInstance] (
    businessunitid,
    businessunitiddsc,
    businessunitidname,
    opportunityid,
    opportunityiddsc,
    opportunityidname,
    salesprocessinstanceid,
    salesprocessname,
    salesstagename
) with view_metadata as 
select 
    SalesProcessInstance.BusinessUnitId,
    SalesProcessInstance.BusinessUnitIdDsc,
    SalesProcessInstance.BusinessUnitIdName,
    SalesProcessInstance.OpportunityId,
    SalesProcessInstance.OpportunityIdDsc,
    SalesProcessInstance.OpportunityIdName,
    SalesProcessInstance.SalesProcessInstanceId,
    SalesProcessInstance.SalesProcessName,
    SalesProcessInstance.SalesStageName
from SalesProcessInstance
    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)
    cross join dbo.fn_GetMaxPrivilegeDepthMask(32) pdm
 where pdm.PrivilegeDepthMask is not null

/****** Object:  StoredProcedure [dbo].[p_LoadAllAttributePicklistValues]    Script Date: 04/11/2008 06:35:22 ******/




create procedure [dbo].[p_LoadAllAttributePicklistValues]
(
    @retrieve_latest bit
)
as
begin
	set nocount on
	if(@retrieve_latest <> 0)
	begin
		select a1.* from AttributePicklistValueLogicalView a1
		left outer join AttributePicklistValueLogicalView a2 on
		(a1.AttributePicklistValueId = a2.AttributePicklistValueId and a1.AttributePicklistValueRowId <> a2.AttributePicklistValueRowId
		and a1.InProduction = 1)
		where a2.InProduction is null and a1.CustomizationLevel <> 2
		order by a1.DisplayOrder asc
	end
	else
	begin
		select *    
		from AttributePicklistValueView
		order by DisplayOrder asc
	end
end

/****** Object:  StoredProcedure [dbo].[p_LoadAllAttributeLookupValues]    Script Date: 04/11/2008 06:35:22 ******/




create procedure [dbo].[p_LoadAllAttributeLookupValues]
(
    @retrieve_latest bit
)
as
begin
	set nocount on
	if(@retrieve_latest <> 0)
	begin
		select a1.* from AttributeLookupValueLogicalView a1
		left outer join AttributeLookupValueLogicalView a2 on
		(a1.AttributeLookupValueId = a2.AttributeLookupValueId and a1.AttributeLookupValueRowId <> a2.AttributeLookupValueRowId
		and a1.InProduction = 1)
		where a2.InProduction is null and a1.CustomizationLevel <> 2
	end
	else
	begin
		select *    
		from AttributeLookupValueView
	end
end

/****** Object:  View [dbo].[FilteredStringMap]    Script Date: 04/11/2008 06:58:12 ******/




create view [dbo].[FilteredStringMap](
    FilteredViewName,
    AttributeName,
    AttributeValue,
    Value,
    DisplayOrder
)
as
select
    e.ReportViewName,
    sm.AttributeName,
    sm.AttributeValue,
    sm.Value,
    sm.DisplayOrder
from
    StringMap sm
    join EntityView e on (e.ObjectTypeCode = sm.ObjectTypeCode)

/****** Object:  StoredProcedure [dbo].[p_DropOneIndex]    Script Date: 04/11/2008 06:35:07 ******/




create procedure [dbo].[p_DropOneIndex](@indexid uniqueidentifier) as
begin
set nocount on

declare @indexname sysname
declare @entityid uniqueidentifier
declare @baseTableName sysname
declare @extensionTableName sysname
declare @isPrimaryKey bit
declare @hasBaseIndex int
declare @hasExtensionIndex int
declare @isunique bit
declare @fillfactor int

select @indexname = Name, @entityid = EntityId, @isPrimaryKey = IsPrimaryKey, @isunique = IsUnique, @fillfactor = SqlFillFactor
from EntityIndex
where IndexId = @indexid

select @hasBaseIndex = count(*) 
from AttributeView 
where IsCustomField = 0 and 
AttributeId in (select AttributeId from IndexAttributes where IndexId = @indexid)

select @hasExtensionIndex = count(*) 
from AttributeView 
where IsCustomField <> 0 and 
AttributeId in (select AttributeId from IndexAttributes where IndexId = @indexid)

declare @sqlstr nvarchar(2048)

select @baseTableName = BaseTableName, @extensionTableName = ExtensionTableName from EntityView where EntityId = @entityid

if (@hasBaseIndex <> 0)
begin
	if (@isPrimaryKey <> 0)
	begin
		select @sqlstr = 'IF EXISTS (SELECT * FROM sysindexes WHERE NAME = ''' + @indexname + ''' and id = object_id(''' + @baseTableName + ''')) ALTER TABLE ' + @baseTableName + ' DROP CONSTRAINT ' + @indexname
		exec sp_executesql @sqlstr
		select @sqlstr = null
	end
	else
	begin
		select @sqlstr = 'IF EXISTS (SELECT * FROM sysindexes WHERE NAME = ''' + @indexname + ''' and id = object_id(''' + @baseTableName + ''')) DROP INDEX ' + @baseTableName + '.' + @indexname
		exec sp_executesql @sqlstr
		select @sqlstr = null
	end
end

if (@hasExtensionIndex <> 0)
begin
	if (@isPrimaryKey <> 0)
	begin
		select @sqlstr = 'IF EXISTS (SELECT * FROM sysindexes WHERE NAME = ''' + @indexname + ''' and id = object_id(''' + @extensionTableName + ''')) ALTER TABLE ' + @extensionTableName + ' DROP CONSTRAINT ' + @indexname
		exec sp_executesql @sqlstr
		select @sqlstr = null
	end
	else
	begin
		select @sqlstr = 'IF EXISTS (SELECT * FROM sysindexes WHERE NAME = ''' + @indexname + ''' and id = object_id(''' + @extensionTableName + ''')) DROP INDEX ' + @extensionTableName + '.' + @indexname
		exec sp_executesql @sqlstr
		select @sqlstr = null
	end
end

end -- p_DropOneIndex

/****** Object:  StoredProcedure [dbo].[p_DeleteForeignKeysToEntity]    Script Date: 04/11/2008 06:35:03 ******/




create procedure [dbo].[p_DeleteForeignKeysToEntity](@entityid uniqueidentifier) as
begin
set nocount on
--
-- drop FKs
--
declare @sqlstr nvarchar(2048)
declare @tableName sysname
declare @constName sysname

declare fkCursor cursor FORWARD_ONLY READ_ONLY for
select object_name(parent_obj), name 
from sysobjects 
where id in
(select constraint_object_id from sys.foreign_key_columns 
 where referenced_object_id in 
	(select id from sys.sysobjects 
	     -- referenced Base/Extension table name
		where (   name in (select BaseTableName from EntityView where EntityId = @entityid )
		       or name in (select ExtensionTableName from EntityView where EntityId = @entityid )
		and xtype= 'U')
	)
)

open fkCursor
fetch next from fkCursor into @tableName, @constName
while (@@fetch_status = 0)
begin

select @sqlstr = 'ALTER TABLE ' + @tableName + ' DROP CONSTRAINT ' + @constName
exec sp_executesql @sqlstr

fetch next from fkCursor into @tableName, @constName

end -- fkCursor
close fkCursor
deallocate fkCursor

end

/****** Object:  StoredProcedure [dbo].[p_genSpecificReportView]    Script Date: 04/11/2008 06:35:09 ******/




create procedure [dbo].[p_genSpecificReportView](@viewName nvarchar(64)) as
set nocount on

declare @view table
(
	line int identity,
	value nvarchar(4000)
)

declare @linenumber int
declare @EntityId uniqueidentifier
declare @EntityLogicalName nvarchar(300)
declare @EntityPhysicalName nvarchar(300)
declare @EntityViewName nvarchar(300)
declare @BaseTableName nvarchar(300)
declare @ObjectTypeCode int
declare @OwnershipTypeMask int
declare @bFirstWhereCondition bit
declare @bChildEntity bit
declare @PKAttributePhysicalName nvarchar(100)
declare @PointerObjectTypeCode int
declare @SecurityObjectTypeCode int
declare @SecurityOwnershipTypeMask int
declare @bIntersect bit
declare @bHasDateTimeFields bit
declare @bHasMoneyFields bit
declare @bHasPicklistValue bit
declare @bHasLocalizedFields bit

-- Build a list of hardcoded views
declare @hardcodedViews table
(
	viewName nvarchar(100)
)


insert into @hardcodedViews values('FilteredStringMap')
insert into @hardcodedViews values('FilteredStatusMap')

if not exists(select * from @hardcodedViews where viewName = @viewName)
begin
select @EntityId = EntityId,
		@EntityLogicalName = LogicalName,
		@EntityPhysicalName = PhysicalName,
		@BaseTableName = BaseTableName,
		@ObjectTypeCode = ObjectTypeCode,
		@OwnershipTypeMask = OwnershipTypeMask,
		@bChildEntity = IsChildEntity,
		@bIntersect = IsIntersect
from EntityView
where ReportViewName = @viewName

	select @SecurityOwnershipTypeMask = @OwnershipTypeMask
	select @SecurityObjectTypeCode = @ObjectTypeCode
	select @EntityViewName = @viewName

	-- If this is a child entity, get parent info
	if(@bChildEntity = 1)
	begin
		select
			@SecurityOwnershipTypeMask = parent.OwnershipTypeMask,
			@SecurityObjectTypeCode = parent.ObjectTypeCode,
			@PKAttributePhysicalName = attrib.PhysicalName
		from
			RelationshipView r
			join EntityView parent on (parent.EntityId = r.ReferencedEntityId)
			join AttributeView attrib on (attrib.AttributeId = r.ReferencingAttributeId)
		where
			r.ReferencingEntityId = @EntityId and
			r.RelationshipType = 2
	end
	else
	begin
		-- Check to see if this entity references a pointer table
		-- If it does, we need to use the pointer's object type code for security checks
		select
			@PointerObjectTypeCode = pointer.ObjectTypeCode
		from
			RelationshipView r
			join EntityView pointer on (pointer.EntityId = r.ReferencedEntityId)
		where
			r.ReferencingEntityId = @EntityId and
			r.RelationshipType = 4

		if(@PointerObjectTypeCode is not null)
			select @SecurityObjectTypeCode = @PointerObjectTypeCode

		select
			@PKAttributePhysicalName = a.PhysicalName
		from
			AttributeView a
			join EntityView e on (a.EntityId = e.EntityId)
		where
			e.EntityId = @EntityId and
				a.IsPKAttribute = 1
	end

	-- customer address special case
	if (@ObjectTypeCode = 1071)
	begin
		select @SecurityOwnershipTypeMask = 1
		select @PKAttributePhysicalName = 'ParentId'
	end

	-- Does this entity have datetime fields?
	select @bHasDateTimeFields = 0
	if exists
		( select a.AttributeId
				from AttributeView a
					join EntityView e on (a.EntityId = e.EntityId)
			left outer join AttributeView aparent on (a.AttributeOf = aparent.AttributeId)
				where e.BaseTableName = @BaseTableName
						and e.ReportViewName = @EntityViewName
						and a.IsPKAttribute = 0
						and a.ValidForReadAPI = 1
						and a.AttributeTypeId = '00000000-0000-0000-00AA-110000000015' --datetime
			)
		begin
		select @bHasDateTimeFields = 1
	end

	-- Does this entity have money fields?
	select @bHasMoneyFields = 0
	if exists
		( select a.AttributeId
				from AttributeView a
					join EntityView e on (a.EntityId = e.EntityId)
			left outer join AttributeView aparent on (a.AttributeOf = aparent.AttributeId)
				where e.BaseTableName = @BaseTableName
						and e.ReportViewName = @EntityViewName
						and a.IsPKAttribute = 0
						and a.ValidForReadAPI = 1
						and a.AttributeTypeId = '00000000-0000-0000-00aa-11000000001a' --money
			)
		begin
		select @bHasMoneyFields = 1
	end

	select @bHasLocalizedFields = 0
	if exists
		( select a.AttributeId
				from AttributeView a
					join EntityView e on (a.EntityId = e.EntityId)
			left outer join AttributeView aparent on (a.AttributeOf = aparent.AttributeId)
				where e.BaseTableName = @BaseTableName
						and e.ReportViewName = @EntityViewName
						and a.IsPKAttribute = 0
						and a.ValidForReadAPI = 1
						and a.HasMultipleLabels = 1
			)
		begin
		select @bHasLocalizedFields = 1
	end
	--
	-- create the view
	--

	insert @view (value) values ('if exists (select * from sysobjects where name = ''' + @EntityViewName + ''' and xtype = ''V'')')
	insert @view (value) values ('begin')
	insert @view (value) values ('    drop view ' + @EntityViewName)
	insert @view (value) values ('end')
	insert @view (value) values ('go')
	insert @view (value) values ('')


	if exists (select a.Name
				from AttributeView a join EntityView e on (a.EntityId = e.EntityId)
				where e.BaseTableName = @BaseTableName
				and e.ReportViewName = @EntityViewName
				and a.ValidForReadAPI = 1
				and a.AttributeTypeId <> '00000000-0000-0000-00AA-110000000039')
	begin
		-- *************************************************************************
		--
		--
		--
		-- create the view
		--
		--
		--
		-- *************************************************************************
		insert @view (value) values ('--')
		insert @view (value) values ('-- report view for ' + @EntityLogicalName)
		insert @view (value) values ('--')

		insert @view (value) values ('create view dbo.' + @EntityViewName + ' (')

		insert @view (value)
		select '    ' +
		case a.AttributeTypeId
		when '00000000-0000-0000-00AA-110000000015' --datetime
			then a.LogicalName + ', ' + CHAR(13) + CHAR(10) + '    ' + a.LogicalName + 'utc'
		else a.LogicalName end + ','
		from AttributeView a join EntityView e on (a.EntityId = e.EntityId)
		where e.BaseTableName = @BaseTableName
			and e.ReportViewName = @EntityViewName
			and a.ValidForReadAPI = 1
			and a.AttributeTypeId <> '00000000-0000-0000-00AA-110000000039'
		order by a.Name

		-- Append reporting money format string field
		if (@bHasMoneyFields = 1)
			insert @view (value) values ('crm_moneyformatstring,')

		-- trim final comma
		select @linenumber = max(line) from @view
		update @view
		set value = substring(value, 1, len(value) - 1)
		where line = @linenumber

		insert @view (value) values (') with view_metadata as ')

		insert @view (value) values ('select ')

	insert @view (value)
	select '    ' +
		case
		when (a.AttributeTypeId = '00000000-0000-0000-00AA-110000000033') --virtual
			then aparent.PhysicalName + 'PLTable.Value'
		when (a.AttributeTypeId ='00000000-0000-0000-00AA-110000000015') --datetime
			then dbo.fn_TranslateDateTime(@EntityPhysicalName + '.' + a.PhysicalName) + CHAR(13) + CHAR(10) +
				'    ' + @EntityPhysicalName + '.' + a.PhysicalName
		when (a.HasMultipleLabels=1)
			then 'coalesce(dbo.fn_GetLocalizedLabel('+@EntityPhysicalName+'.'+@PKAttributePhysicalName+','''+a.PhysicalName+''','+'us.UILanguageId),'+@EntityPhysicalName + '.' + a.PhysicalName+')'
		else @EntityPhysicalName + '.' + a.PhysicalName end + ','
		from AttributeView a join EntityView e on (a.EntityId = e.EntityId)
			left outer join AttributeView aparent on (a.AttributeOf = aparent.AttributeId)
		where e.BaseTableName = @BaseTableName
			and e.ReportViewName = @EntityViewName
			and a.ValidForReadAPI = 1
			and a.AttributeTypeId <> '00000000-0000-0000-00AA-110000000039'
		order by a.Name

		-- Append reporting money format string field
		-- '2' -> decimal precision
		-- '1' -> currency (as opposed to number)
		if (@bHasMoneyFields = 1)
			insert @view (value) values ('dbo.fn_GetNumberFormatString(2, us.NumberGroupFormat, us.NegativeCurrencyFormatCode, 1, case o.CurrencyDisplayOption when 0 then t.CurrencySymbol when 1 then t.ISOCurrencyCode end, us.CurrencyFormatCode),')

		-- trim final comma
		select @linenumber = max(line) from @view
		update @view
		set value = substring(value, 1, len(value) - 1)
		where line = @linenumber

		insert @view (value) values ('from ' + @EntityPhysicalName)

	-- left join with StringMap for resolving integer picklists
	declare picklistcursor cursor local static for
	select
		aparent.PhysicalName,
		aparent.LogicalName,
		aparent.AttributeTypeId
	from AttributeView a join EntityView e on (a.EntityId = e.EntityId)
		left outer join AttributeView aparent on (a.AttributeOf = aparent.AttributeId)
		where e.BaseTableName = @BaseTableName
			and e.ReportViewName = @EntityViewName
			and a.ValidForReadAPI = 1
			and a.AttributeTypeId = '00000000-0000-0000-00AA-110000000033'
		order by a.Name

	open picklistcursor

	select @bHasPicklistValue = 0
	if cursor_status('local', 'picklistcursor') = 1
	begin
		select @bHasPicklistValue = 1
	end

	if(@SecurityOwnershipTypeMask <> 0 or @bHasDateTimeFields = 1 or @bHasPicklistValue = 1 or @bHasMoneyFields = 1)
	begin
			-- left join SystemUserBase table for security
			insert @view (value) values ('    left join SystemUserBase u on (u.SystemUserId = dbo.fn_FindUserGuid() and u.IsDisabled = 0)')
	end


		if(@bHasDateTimeFields = 1 or @bHasLocalizedFields = 1 or @bHasMoneyFields = 1 or @bHasPicklistValue = 1)
		begin
			-- left join UserSettingsBase table only when datetime transformation is needed
			insert @view (value) values ('    left join UserSettingsBase us on us.SystemUserId = u.SystemUserId')
		end

	if (@bHasPicklistValue = 1 or @bHasMoneyFields = 1)
		begin
			-- left join OrganizationBase to resolve picklist value
			insert @view (value) values ('    left join OrganizationBase o on u.OrganizationId = o.OrganizationId')
		end

	if(@bHasMoneyFields = 1)
		begin
			-- left join TransactionCurrencyBase to get currency symbol
			insert @view (value) values ('    left join TransactionCurrencyBase t on t.TransactionCurrencyId = ' + @EntityPhysicalName + '.TransactionCurrencyId')
		end

	declare @ParentAttributePhysicalName nvarchar(100)
	declare @ParentAttributeLogicalName nvarchar(100)
	declare @ParentAttributeTypeId uniqueidentifier
	declare @PicklistTableName nvarchar(50)

	select @PicklistTableName = 'StringMap'

	fetch picklistcursor into
		@ParentAttributePhysicalName,
		@ParentAttributeLogicalName,
		@ParentAttributeTypeId

	while @@fetch_status = 0
	begin
		insert into @view(value)
			select
			'    left outer join ' + @PicklistTableName + ' ' + @ParentAttributePhysicalName + 'PLTable on ' + CHAR(13) + CHAR(10) +
			'        (' + @ParentAttributePhysicalName + 'PLTable.AttributeName = ''' + @ParentAttributeLogicalName + '''' + CHAR(13) + CHAR(10) +
			'        and ' + @ParentAttributePhysicalName + 'PLTable.ObjectTypeCode = ' + cast(@ObjectTypeCode as nvarchar) + CHAR(13) + CHAR(10) +
			'        and ' + @ParentAttributePhysicalName + 'PLTable.AttributeValue = ' + @EntityPhysicalName + '.' + @ParentAttributePhysicalName + CHAR(13) + CHAR(10) +
			'        and ' + @ParentAttributePhysicalName + 'PLTable.LangId = us.UILanguageId )'


		fetch picklistcursor into
			@ParentAttributePhysicalName,
			@ParentAttributeLogicalName,
		@ParentAttributeTypeId
	end

	close picklistcursor
	deallocate picklistcursor

		-- cross join for privilege depth mask for user and business owned entities
		if(@SecurityOwnershipTypeMask <> 0)
		insert @view (value) values ('    cross join dbo.fn_GetMaxPrivilegeDepthMask(' + cast(@SecurityObjectTypeCode as nvarchar) + ') pdm')

		-- append DeletionStateCode
		insert @view (value)
		select 'where ' + @EntityPhysicalName + '.' + a.PhysicalName + ' in (0) '
			from AttributeView a
			where a.EntityId = @EntityId
			and a.Name = 'DeletionStateCode'

		set	@bFirstWhereCondition = 1
		if exists ( select a.PhysicalName
						from AttributeView a
						where a.EntityId = @EntityId and a.Name = 'DeletionStateCode')
		set @bFirstWhereCondition = 0

		-- Append security check if it is secured entity
		if(@SecurityOwnershipTypeMask <> 0)
			if (@viewName = 'FilteredSalesProcessInstance')
				insert @view (value) values (' where pdm.PrivilegeDepthMask is not null ')
			else
				insert @view (value) values (dbo.fn_AppendAccessCheck(@SecurityObjectTypeCode, @EntityPhysicalName, @SecurityOwnershipTypeMask, @PKAttributePhysicalName, @bFirstWhereCondition))

		insert @view (value) values ('go')
		insert @view (value) values ('')

	end
end

else if(@viewName = 'FilteredStringMap')
begin

-- Hardcoded view for StringMap

insert into @view(value) values('if exists(select * from sysobjects where name=''FilteredStringMap'' and xtype=''V'')')
insert into @view(value) values('begin')
insert into @view(value) values('    drop view FilteredStringMap')
insert into @view(value) values('end')
insert into @view(value) values('go')
insert into @view(value) values('')
insert into @view(value) values('create view dbo.FilteredStringMap(')
insert into @view(value) values('    FilteredViewName,')
insert into @view(value) values('    AttributeName,')
insert into @view(value) values('    AttributeValue,')
insert into @view(value) values('    Value,')
insert into @view(value) values('    DisplayOrder')
insert into @view(value) values(')')
insert into @view(value) values('as')
insert into @view(value) values('select')
insert into @view(value) values('    e.ReportViewName,')
insert into @view(value) values('    sm.AttributeName,')
insert into @view(value) values('    sm.AttributeValue,')
insert into @view(value) values('    sm.Value,')
insert into @view(value) values('    sm.DisplayOrder')
insert into @view(value) values('from')
insert into @view(value) values('    StringMap sm')
insert into @view(value) values(N'    join EntityView e on (e.ObjectTypeCode = sm.ObjectTypeCode)')
insert into @view(value) values('go')

end

else if(@viewName = 'FilteredStatusMap')
begin

-- Hardcoded view for StatusMap

insert into @view(value) values('if exists(select * from sysobjects where name=''FilteredStatusMap'' and xtype=''V'')')
insert into @view(value) values('begin')
insert into @view(value) values('    drop view FilteredStatusMap')
insert into @view(value) values('end')
insert into @view(value) values('go')
insert into @view(value) values('')
insert into @view(value) values('create view dbo.FilteredStatusMap(')
insert into @view(value) values('    FilteredViewName,')
insert into @view(value) values('    StateCode,')
insert into @view(value) values('    StateCodeName,')
insert into @view(value) values('    StatusCode,')
insert into @view(value) values('    StatusCodeName,')
insert into @view(value) values('    IsDefault')
insert into @view(value) values(')')
insert into @view(value) values('as')
insert into @view(value) values('select')
insert into @view(value) values('    e.ReportViewName,')
insert into @view(value) values('    sm.State,')
insert into @view(value) values('    state.Value,')
insert into @view(value) values('    sm.Status,')
insert into @view(value) values('    status.Value,')
insert into @view(value) values('    sm.IsDefault')
insert into @view(value) values('from')
insert into @view(value) values('    StatusMap sm')
insert into @view(value) values(N'    join EntityView e on (e.ObjectTypeCode = sm.ObjectTypeCode)')
insert into @view(value) values('    join StringMap state on (state.ObjectTypeCode = sm.ObjectTypeCode and state.AttributeName = ''statecode'' and state.AttributeValue = sm.State)')
insert into @view(value) values('    join StringMap status on (status.ObjectTypeCode = sm.ObjectTypeCode and status.AttributeName = ''statuscode'' and status.AttributeValue = sm.Status)')
insert into @view(value) values('go')

end

select value
from @view
order by line

/****** Object:  StoredProcedure [dbo].[p_DeleteAttributeFromIndex]    Script Date: 04/11/2008 06:35:03 ******/




create procedure [dbo].[p_DeleteAttributeFromIndex] (@ObjectTypeCode int,
	@AttributeId uniqueidentifier, @indexType int) as
set nocount on

declare @indexid uniqueidentifier

select @indexid = ei.IndexId from EntityIndex ei
    join EntityView e on (e.EntityId = ei.EntityId)
where e.ObjectTypeCode = @ObjectTypeCode and ei.IndexType = @indexType

delete IndexAttributes
where IndexId = @indexid and AttributeId = @AttributeId 

update EntityIndex set RecreateIndex = 1, ModifiedOn = getutcdate()
where IndexId = @indexid

/****** Object:  StoredProcedure [dbo].[p_AddAttributeToIndex]    Script Date: 04/11/2008 06:34:56 ******/




create procedure [dbo].[p_AddAttributeToIndex] (@ObjectTypeCode int,
	@AttributeId uniqueidentifier, @indexType int) as
set nocount on

declare @indexid uniqueidentifier
set @indexid = null

select @indexid = ei.IndexId from EntityIndex ei
    join EntityView e on (e.EntityId = ei.EntityId)
where e.ObjectTypeCode = @ObjectTypeCode and ei.IndexType = @indexType

if (@indexid is null)
begin
	select @indexid = newid()

	insert EntityIndex(IndexId, Name, EntityId, IsClustered, IsUnique, 
		SqlFillFactor, RecreateIndex, ModifiedOn, IndexType, IsPrimaryKey)
	select @indexid, N'ndx_SystemManaged', EntityId, 0, 0, 80, 1,
		getutcdate(), @indexType, 0 from EntityView where ObjectTypeCode = @ObjectTypeCode
end

declare @indexOrder int
select @indexOrder = max(IndexOrder) from IndexAttributes where IndexId = @indexid
if (@indexOrder is null)
	set @indexOrder = 0

insert IndexAttributes(IndexAttributeId, AttributeId, IndexId, IndexOrder)
values (newid(), @AttributeId, @indexid, @indexOrder)

update EntityIndex set RecreateIndex = 1, ModifiedOn = getutcdate()
where IndexId = @indexid

/****** Object:  View [dbo].[FilteredStatusMap]    Script Date: 04/11/2008 06:58:11 ******/




create view [dbo].[FilteredStatusMap](
    FilteredViewName,
    StateCode,
    StateCodeName,
    StatusCode,
    StatusCodeName,
    IsDefault
)
as
select
    e.ReportViewName,
    sm.State,
    state.Value,
    sm.Status,
    status.Value,
    sm.IsDefault
from
    StatusMap sm
    join EntityView e on (e.ObjectTypeCode = sm.ObjectTypeCode)
    join StringMap state on (state.ObjectTypeCode = sm.ObjectTypeCode and state.AttributeName = 'statecode' and state.AttributeValue = sm.State)
    join StringMap status on (status.ObjectTypeCode = sm.ObjectTypeCode and status.AttributeName = 'statuscode' and status.AttributeValue = sm.Status)

/****** Object:  StoredProcedure [dbo].[p_CreatePrimaryKey]    Script Date: 04/11/2008 06:35:02 ******/




create procedure [dbo].[p_CreatePrimaryKey](@entity nvarchar(255), @attribute nvarchar(255)) as
set nocount on

declare @message nvarchar(500)
declare @keyid uniqueidentifier
declare @entityid uniqueidentifier
declare @attributeid uniqueidentifier

select @entityid = EntityId
from EntityView
where Name = @entity

if @entityid is null
begin
    set @message = 'ERROR: No entity named ' + @entity + ' was found in the metadata.'
    RAISERROR ( 1074008074, 16, 1, @message ) WITH NOWAIT, SETERROR
    return 
end

select @attributeid = AttributeId
from AttributeView
where PhysicalName = @attribute
  and EntityId = @entityid

if @attributeid is null
begin
    set @message = 'ERROR: No attribute named ' + @entity + '.' + @attribute + ' was found in the metadata.'
    RAISERROR ( 1074008074, 16, 2, @message ) WITH NOWAIT, SETERROR
    return 
end

-- mark the column as a PK
update Attribute
set IsPKAttribute = 1, AttributeTypeId = '00000000-0000-0000-00AA-110000000032'
where AttributeId = @attributeid

/****** Object:  StoredProcedure [dbo].[p_CreateReference]    Script Date: 04/11/2008 06:35:02 ******/




create procedure [dbo].[p_CreateReference](@localentityname nvarchar(50), @remoteentityname nvarchar(50),
                                   @localattrname nvarchar(50), @remoteattrname nvarchar(50),
                                   @datatype uniqueidentifier = '00000000-0000-0000-00AA-110000000031',
                                   @keyname nvarchar(255) = null) as
set nocount on

declare @localentityid uniqueidentifier
declare @remoteentityid uniqueidentifier
declare @remoteotc int
declare @localattributeid uniqueidentifier
declare @remoteattributeid uniqueidentifier
declare @keyid uniqueidentifier
declare @message nvarchar(2000)

-- get a new key name
set @keyid = newid()

-- generate a new fk name
if @keyname is null
    set @keyname = lower(('lk_' + @localentityname + '_' + @localattrname) collate Latin1_General_CI_AS)

-- get the participating entities
select @localentityid = EntityId
from EntityView
where Name = @localentityname

select @remoteentityid = EntityId, @remoteotc = ObjectTypeCode
from EntityView
where Name = @remoteentityname

if @localentityid is null or @remoteentityname is null
begin
    set @message = N'ERROR: One (or more) entities were not found in the metabase (' + @localentityname + ', ' + @remoteentityname + ')'
    RAISERROR ( 1074008074, 16, 1, @message ) WITH NOWAIT, SETERROR
    return 
end

-- get the participating attributes
select @localattributeid = AttributeId
from AttributeView
where EntityId = @localentityid
  and PhysicalName = @localattrname

select @remoteattributeid = AttributeId
from AttributeView
where EntityId = @remoteentityid
  and PhysicalName = @remoteattrname

if @localattributeid is null or @remoteattributeid is null
begin
    set @message = N'ERROR: One (or more) attributes were not found in the metabase (' + @localattrname + ', ' + @remoteattrname + ')'
    RAISERROR ( 1074008074, 16, 1, @message ) WITH NOWAIT, SETERROR
    return 
end

-- create relationship
INSERT Relationship(RelationshipId, Name, ReferencingEntityId, ReferencingAttributeId,
	ReferencedEntityId, ReferencedAttributeId, IsLogical)
VALUES (@keyid, @keyname, @localentityid, @localattributeid, 
	@remoteentityid, @remoteattributeid, 1)

-- update the attribute on the dest table, make it a lookup type
update Attribute
set AttributeTypeId = @datatype, ReferencedEntityObjectTypeCode = @remoteotc
where AttributeId = @localattributeid

/****** Object:  StoredProcedure [dbo].[p_BulkDeleteGeneric]    Script Date: 04/11/2008 06:34:57 ******/
SET ANSI_NULLS OFF



-- We walk thru' cascade_obj_collect table and process rows in bulk for each entity type.

-- Handles deletion for rows in temp table of a particular entity type. Doesnt do any special
-- casing, but handles core deletion stuff such as extension tables/deletionstatecode etc.
create procedure [dbo].[p_BulkDeleteGeneric](@EntityCode int) as
begin

	declare @EntityId uniqueidentifier
	declare @BaseTableName nvarchar(255)
	declare @PrimaryKeyName nvarchar(255)
	declare @RelationshipColumn nvarchar(255)
	declare @isCustomizable bit
	declare @ExtensionTableName nvarchar(255)
	declare @HasCustomAttributes bit
	declare @HasDsc bit
	declare @WorkflowEventMask int
	-- TODO: Does this string need to be bigger??
	declare @sql nvarchar(2048)

	-- get this entity's metadata
	select @EntityId = EntityId,
	       @BaseTableName = BaseTableName, 
	       @ExtensionTableName = ExtensionTableName,
	       @WorkflowEventMask = WorkflowEventMask,
	       @isCustomizable = coalesce(IsCustomizable, 0)
	from  EntityView as Entity
	where Entity.ObjectTypeCode = @EntityCode

	select @PrimaryKeyName = Attribute.PhysicalName 
	from AttributeView as Attribute, EntityView as Entity
	where Attribute.EntityId = @EntityId and Attribute.IsPKAttribute = 1

	-- check if the entity has dsc or not. For activities, dsc is Logical on Task and is valid only for ActivityPointer.
	select @HasDsc = coalesce(
	      ( select count(*) from AttributeView as Attribute where Attribute.PhysicalName = N'DeletionStateCode' and Attribute.IsLogical = 0 and Attribute.EntityId = @EntityId),
	      0)

	-- check if the entity has any custom attributes defined.
	select @HasCustomAttributes = coalesce(
		(select count(*) from AttributeView as Attribute where Attribute.IsCustomField = 1 and Attribute.EntityId = @EntityId),
		0)

    -- stores the sql statement used to select all the relevant objectids for the
    -- specified entitytype from the temp table.
    declare @tempTblSql nvarchar(1024)
    set @tempTblSql = ' in (select objectid from #CascadeCollect where objecttype = ' + 
			    cast(@EntityCode as nvarchar) + ') '
    
	-- if the entity is customizable and has custom attributes defined, delete the entry from extension table first.
	if @isCustomizable = 1 AND @HasCustomAttributes = 1
	begin
		set @sql = 'delete from ' + @ExtensionTableName + 
		           ' where ' + @PrimaryKeyName + @tempTblSql
	    --PRINT @sql
	    exec sp_executesql @sql
	end
	-- if the entity has dsc, set dsc to 2, otherwise do a hard delete.
	if @HasDsc = 1
	begin
		-- TODO: Need to update modifiedon/modifiedby as well? Does it matter since the record is going
		-- to be deleted any way???
		set @sql = 'update ' + @BaseTableName + ' set DeletionStateCode = 2 where ' + @PrimaryKeyName + @tempTblSql
	end
	else
	begin
		set @sql = 'delete from ' + @BaseTableName + ' where ' + @PrimaryKeyName +
		           @tempTblSql
	end
	--PRINT @sql
	exec sp_executesql @sql

	-- Post workflow events if needed.
	-- TODO (jasjitg): do we need to put in AsyncOperation events instead?

	
	update #CascadeCollect set processed = 8 where objecttype = @EntityCode
end

/****** Object:  StoredProcedure [dbo].[p_CascadeRevokeAccess]    Script Date: 04/11/2008 06:34:59 ******/
SET ANSI_NULLS OFF



CREATE PROC [dbo].[p_CascadeRevokeAccess](
        @principal_id UNIQUEIDENTIFIER,
        @principal_type INT,
   	    @root_entity_otc int,
		@root_entity_oid UNIQUEIDENTIFIER
        ) AS
BEGIN
        SET NOCOUNT ON
        
	-- CHANGE ALL THE OBJECT TYPE CODES OF ACTIVITIES TO THAT OF ACTIVITY POINTER (4200)
	UPDATE #CascadeCollect SET objecttype = 4200 
		 FROM #CascadeCollect tmp, EntityView e 
		 WHERE tmp.objecttype = e.ObjectTypeCode AND e.IsActivity = 1 
      
    -- UPDATE ROOT OTC to 4200 if it is an activity
   	IF EXISTS(SELECT * FROM EntityView e where e.ObjectTypeCode = @root_entity_otc AND e.IsActivity = 1)
		SET @root_entity_otc = 4200
      
    -- FOR THE ROOT ENTITY, WE SET AccessRightsMask
    UPDATE PrincipalObjectAccess SET AccessRightsMask=0, ChangedOn=GETUTCDATE()
         FROM PrincipalObjectAccess as poa INNER JOIN #CascadeCollect AS coll ON poa.ObjectId=coll.objectid AND poa.ObjectTypeCode=coll.objecttype
         WHERE coll.objecttype=@root_entity_otc AND coll.objectid=@root_entity_oid AND poa.PrincipalId = @principal_id AND poa.PrincipalTypeCode = @principal_type
    
    -- FOR THE OTHER ENTITIES, WE SET InheritedAccessRightsMask
    UPDATE PrincipalObjectAccess SET InheritedAccessRightsMask=0, ChangedOn=GETUTCDATE()
         FROM PrincipalObjectAccess as poa INNER JOIN #CascadeCollect AS coll ON poa.ObjectId=coll.objectid AND poa.ObjectTypeCode=coll.objecttype
         WHERE (coll.objecttype<>@root_entity_otc OR coll.objectid<>@root_entity_oid) AND poa.PrincipalId = @principal_id AND poa.PrincipalTypeCode = @principal_type

	-- Track sync changes for all entities
	EXEC p_CascadeGrantRevokeAccessSyncTracking
END

/****** Object:  StoredProcedure [dbo].[p_DefragIndexes]    Script Date: 04/11/2008 06:35:02 ******/




create procedure [dbo].[p_DefragIndexes] as
begin
set nocount on

declare @indexid uniqueidentifier
declare @entityid uniqueidentifier
declare @indexname sysname
declare @baseTableName sysname
declare @extensionTableName sysname
declare @isClustered bit
declare @isPrimary bit

declare indexCursor cursor FORWARD_ONLY READ_ONLY for
	select IndexId, EntityId, Name, IsClustered, IsPrimaryKey from EntityIndex

open indexCursor
fetch next from indexCursor into @indexid, @entityid, @indexname, @isClustered, @isPrimary

while (@@fetch_status = 0)
begin

	declare @hasBaseIndex int
	declare @hasExtensionIndex int

	select @hasBaseIndex =  count(*) 
	from AttributeView 
	where IsCustomField = 0 and 
	AttributeId in (select AttributeId from IndexAttributes where IndexId = @indexid)

	select @hasExtensionIndex =  count(*) 
	from AttributeView 
	where IsCustomField <> 0 and 
	AttributeId in (select AttributeId from IndexAttributes where IndexId = @indexid)

	declare @sqlstr nvarchar(2048)

	select @baseTableName = BaseTableName, @extensionTableName = ExtensionTableName from EntityView where EntityId = @entityid
	
	if (@isClustered <> 0 and @isPrimary <> 0)
	begin
		select @sqlstr = 'DBCC INDEXDEFRAG(0, ' + @baseTableName + ', PK_' + @baseTableName + ')'
		fetch next from indexCursor into @indexid, @entityid, @indexname, @isClustered, @isPrimary
		continue
	end

	if (@hasBaseIndex <> 0)
	begin
		select @sqlstr = 'DBCC INDEXDEFRAG(0, ' + @baseTableName + ', ' + @indexname + ')'
		exec sp_executesql @sqlstr
		select @sqlstr = null
	end
	
	if (@hasExtensionIndex <> 0)
	begin
		select @sqlstr = 'DBCC INDEXDEFRAG(0, ' + @extensionTableName + ', ' + @indexname + ')'
		exec sp_executesql @sqlstr
		select @sqlstr = null
	end
	
	--
	-- remove empty indexes
	--
	if (@hasExtensionIndex = 0 and @hasBaseIndex = 0)
	begin
		delete from EntityIndex where IndexId = @indexid
	end

	fetch next from indexCursor into @indexid, @entityid, @indexname, @isClustered, @isPrimary

end -- indexCursor
close indexCursor
deallocate indexCursor


--
-- special case extension table PKs
--
declare entityCursor cursor FORWARD_ONLY READ_ONLY for
	select ExtensionTableName from EntityView where IsCustomizable <> 0
open entityCursor
fetch next from entityCursor into @extensionTableName
while (@@fetch_status = 0)
begin
	select @sqlstr = 'DBCC INDEXDEFRAG(0, ' + @extensionTableName + ', PK_' + @extensionTableName + ')'
	exec sp_executesql @sqlstr
	fetch next from entityCursor into @extensionTableName
end
close entityCursor
deallocate entityCursor

end -- p_DefragIndexes

/****** Object:  StoredProcedure [dbo].[p_Reindex]    Script Date: 04/11/2008 06:35:27 ******/




create procedure [dbo].[p_Reindex] as
begin
set nocount on

declare @indexid uniqueidentifier
declare @indexname sysname
declare @entityid uniqueidentifier
declare @baseTableName sysname
declare @extensionTableName sysname
declare @fillfactor int
declare @isClustered bit
declare @isPrimary bit

declare indexCursor cursor FORWARD_ONLY READ_ONLY for
	select IndexId, Name, EntityId, IsClustered, IsPrimaryKey, SqlFillFactor
	from EntityIndex
	order by EntityId, IsClustered desc

open indexCursor
fetch next from indexCursor into @indexid, @indexname, @entityid, @isClustered, @isPrimary, @fillfactor

while (@@fetch_status = 0)
begin

	declare @hasBaseIndex int
	declare @hasExtensionIndex int

	select @hasBaseIndex =  count(*) 
	from AttributeView 
	where IsCustomField = 0 and 
	AttributeId in (select AttributeId from IndexAttributes where IndexId = @indexid)

	select @hasExtensionIndex =  count(*) 
	from AttributeView 
	where IsCustomField <> 0 and 
	AttributeId in (select AttributeId from IndexAttributes where IndexId = @indexid)

	declare @sqlstr nvarchar(2048)

	select @baseTableName = BaseTableName, @extensionTableName = ExtensionTableName from EntityView where EntityId = @entityid

	if (@isClustered <> 0 and @isPrimary <> 0)
	begin
		select @sqlstr = 'DBCC DBREINDEX(' + @baseTableName + ', PK_' + @baseTableName + ', 80)'
		print @sqlstr
		fetch next from indexCursor into @indexid, @indexname, @entityid, @isClustered, @isPrimary, @fillfactor
		continue
	end

	if (@hasBaseIndex <> 0)
	begin
		select @sqlstr = 'DBCC DBREINDEX(' + @baseTableName + ', ' + @indexname + ', ' + convert(nvarchar(128), @fillfactor) + ')'
		print @sqlstr
		exec sp_executesql @sqlstr
		select @sqlstr = null
	end
	
	if (@hasExtensionIndex <> 0)
	begin
		select @sqlstr = 'DBCC DBREINDEX(' + @extensionTableName + ', ' + @indexname + ', ' + convert(nvarchar(128), @fillfactor) + ')'
		print @sqlstr
		exec sp_executesql @sqlstr
		select @sqlstr = null
	end
	
	--
	-- remove empty indexes
	--
	if (@hasExtensionIndex = 0 and @hasBaseIndex = 0)
	begin
		delete from EntityIndex where IndexId = @indexid
	end

	fetch next from indexCursor into @indexid, @indexname, @entityid, @isClustered, @isPrimary, @fillfactor

end -- indexCursor
close indexCursor
deallocate indexCursor

--
-- special case extension table PKs
--
declare entityCursor cursor FORWARD_ONLY READ_ONLY for
	select ExtensionTableName from EntityView where IsCustomizable <> 0
open entityCursor
fetch next from entityCursor into @extensionTableName
while (@@fetch_status = 0)
begin
	select @sqlstr = 'DBCC DBREINDEX(' + @extensionTableName + ', PK_' + @extensionTableName + ', 80)'
	print @sqlstr
	exec sp_executesql @sqlstr
	fetch next from entityCursor into @extensionTableName
end
close entityCursor
deallocate entityCursor

end -- p_Reindex

/****** Object:  StoredProcedure [dbo].[p_CreateOneIndexHelper]    Script Date: 04/11/2008 06:35:01 ******/




create procedure [dbo].[p_CreateOneIndexHelper]
(
	@indexid uniqueidentifier, 
	@indexname sysname, 
	@entityid uniqueidentifier,
	@isclustered bit,
	@isunique bit,
	@fillfactor int,
	@custom bit
) as
begin
set nocount on

declare @tableName sysname
declare @baseTableName sysname
declare @extensionTableName sysname

select @baseTableName = BaseTableName, @extensionTableName = ExtensionTableName from EntityView where EntityId = @entityid

if (@custom = 0)
begin
	select @tableName = @baseTableName
end
if (@custom <> 0)
begin
	select @tableName = @extensionTableName
end

declare @sqlstr nvarchar(2048)
select @sqlstr = 'CREATE'

if (@isunique <> 0)
begin
	select @sqlstr = @sqlstr + ' UNIQUE'
end

if (@isclustered <> 0)
begin
	select @sqlstr = @sqlstr +' CLUSTERED'
end

select @sqlstr = @sqlstr + ' INDEX ' + @indexname + ' ON ' + @tableName + '('
declare @physicalName sysname
declare @isIncludeAttribute bit

declare attributeCursor cursor FORWARD_ONLY READ_ONLY for
select PhysicalName, ia.IsIncludeAttribute from AttributeView a
join IndexAttributes ia on (a.AttributeId = ia.AttributeId and a.IsCustomField = @custom and ia.IndexId = @indexid)
order by ia.IsIncludeAttribute, ia.IndexOrder

declare @attrCount int
select @attrCount = 0
declare @includeAttrCount int
select @includeAttrCount = 0

open attributeCursor
fetch next from attributeCursor into @physicalName, @isIncludeAttribute
while (@@fetch_status = 0)
begin

if (@isIncludeAttribute = 0) -- First, process regular attributes
begin
    if (@attrCount > 0)
    begin
	    select @sqlstr = @sqlstr + ', '
    end

    select @sqlstr = @sqlstr + @physicalName
    select @attrCount = @attrCount + 1
end
else    -- Second, process include attributes (because of 'order by' clause of fetch)
begin
    if (@includeAttrCount = 0)
    begin
	    select @sqlstr = @sqlstr + ') INCLUDE ( '
    end
    
    if (@includeAttrCount > 0)
    begin
	    select @sqlstr = @sqlstr + ', '
    end

    select @sqlstr = @sqlstr + @physicalName
    select @includeAttrCount = @includeAttrCount + 1
end

fetch next from attributeCursor into @physicalName, @isIncludeAttribute

end -- attributeCursor

close attributeCursor
deallocate attributeCursor

select @sqlstr = @sqlstr + ') WITH FILLFACTOR = ' + convert(nvarchar(128), @fillfactor)

if (@attrCount > 0)
begin
	exec sp_executesql @sqlstr
end
if (@attrCount = 0)
begin
	select @sqlstr = 'IF EXISTS (SELECT sysindexes.name FROM sysindexes' + 
		' join sysobjects on (sysindexes.id = sysobjects.id)' + 
		' WHERE sysindexes.name = ''' + @indexname + ''' and sysobjects.name = ''' + @tableName + ''')' + 
		' DROP INDEX ' + @tableName + '.' + @indexname
	exec sp_executesql @sqlstr
end

end -- p_CreateOneIndexHelper

/****** Object:  StoredProcedure [dbo].[p_GetTablesReferencing]    Script Date: 04/11/2008 06:35:19 ******/




create procedure [dbo].[p_GetTablesReferencing](@tablename nvarchar(255) = null, @tableid uniqueidentifier = null) as
set nocount on

if @tablename is null and @tableid is null
begin
   RAISERROR ( 1074008071, 16, 127 ) WITH NOWAIT, SETERROR
   return
end 

if @tableid is null
begin
    select @tableid = EntityId
    from EntityView
    where Name = @tablename
end

select e2.*
from EntityView e1, RelationshipView, EntityView e2
where e1.EntityId = RelationshipView.ReferencingEntityId
	and e1.EntityId = @tableid
	and RelationshipView.ReferencedEntityId = e2.EntityId

/****** Object:  StoredProcedure [dbo].[p_MDS_GetEntities]    Script Date: 04/11/2008 06:35:24 ******/




create procedure [dbo].[p_MDS_GetEntities] as
set nocount on

select 
    'entityid' = EntityId,
    'name' = Name,
    'objecttypecode' = ObjectTypeCode,
    'physicalname' = PhysicalName,
    'logicalname' = LogicalName,
    'collectionname' = CollectionName,
    'basetablename' = BaseTableName,
    'logicalcollectionname' = LogicalCollectionName,
    'isintersect' = IsIntersect,
    'issecurityintersect' = IsSecurityIntersect,
    'workfloweventmask' = WorkflowEventMask,
    'islookuptable' = IsLookupTable,
    'eventmask' = EventMask,
    'islogicalentity' = IsLogicalEntity,
    'iscustomizable' = IsCustomizable,
    'iscollaboration' = IsCollaboration,
    'isactivity' = IsActivity,
    'isassignment' = 0,
    'addresstablename' = AddressTableName,
    'ownershiptypemask' = OwnershipTypeMask,
    'isaudited' = IsAudited,
    'usesfullnameconventionrules' = UsesFullnameConventionRules,
    'isparented' = IsParented,
    'entitymask' = EntityMask
from EntityView entity
order by PhysicalName
for	xml auto

/****** Object:  StoredProcedure [dbo].[p_LoadEntityList]    Script Date: 04/11/2008 06:35:23 ******/




create procedure [dbo].[p_LoadEntityList] as
set nocount on

select *
from EntityView
order by Name

/****** Object:  StoredProcedure [dbo].[p_GetTableIntersectRelationships]    Script Date: 04/11/2008 06:35:18 ******/




CREATE procedure [dbo].[p_GetTableIntersectRelationships](@tablename nvarchar(255) = null, @tableid uniqueidentifier = null) as
set nocount on

if @tablename is null and @tableid is null
begin
   RAISERROR ( 1074008071, 16, 127 ) WITH NOWAIT, SETERROR 
   return
end 

if @tableid is null
begin
	select @tableid = EntityId
	from EntityView
	where Name = @tablename
end

select 
    'SourceEntity' = e1.Name, 
    'LeftKey' = r1.Name, 
    LeftAttribute.Name as LeftKeyName,
    'IntersectEntity' = i1.Name, 
    'RightKey' = r2.Name, 
    RightAttribute.Name as RightKeyName,
    'TargetEntity' = e3.Name
from 
    EntityView e1, 
    RelationshipView r1, 
    EntityView i1,
    EntityView e3, 
    RelationshipView r2, 
    EntityView i2,
    AttributeView as RightAttribute,
    AttributeView as LeftAttribute
where e1.EntityId = r1.ReferencedEntityId
    and r1.ReferencingEntityId = i1.EntityId
    and e3.EntityId = r2.ReferencedEntityId
    and r2.ReferencingEntityId = i2.EntityId
    and i1.EntityId = i2.EntityId
    and e3.IsLookupTable = 0
    and e3.IsIntersect = 0
    and e3.IsSecurityIntersect = 0
    and e1.IsLookupTable = 0
    and e1.IsIntersect = 0
    and e1.IsSecurityIntersect = 0
    and e1.Name <> e3.Name
    and e1.EntityId = @tableid
    and e3.IsIntersect = 1
    and LeftAttribute.AttributeId = r1.ReferencingAttributeId
    and LeftAttribute.EntityId = r1.ReferencingEntityId
    and RightAttribute.AttributeId = r2.ReferencingAttributeId
    and RightAttribute.EntityId = r2.ReferencingEntityId
order by 1, 4

/****** Object:  StoredProcedure [dbo].[p_GetTableRelationships]    Script Date: 04/11/2008 06:35:19 ******/




create procedure [dbo].[p_GetTableRelationships](@tablename nvarchar(255) = null, @tableid uniqueidentifier = null) as
set nocount on

if @tablename is null and @tableid is null
begin
   RAISERROR ( 1074008071, 16, 127 ) WITH NOWAIT, SETERROR
   return
end 

if @tableid is null
begin
	select @tableid = EntityId
	from EntityView
	where Name = @tablename
end

select 'SourceEntity' = e1.LogicalName, 
       'LeftKey' = r1.Name, 
       'IntersectEntity' = i1.LogicalName, 
       'RightKey' = r2.Name, 
       'TargetEntity' = e3.LogicalName
from EntityView e1, RelationshipView r1, EntityView i1,
	 EntityView e3, RelationshipView r2, EntityView i2
where e1.EntityId = r1.ReferencedEntityId
  and r1.ReferencingEntityId = i1.EntityId
  and e3.EntityId = r2.ReferencedEntityId
  and r2.ReferencingEntityId = i2.EntityId
  and i1.EntityId = i2.EntityId
  and e3.IsLookupTable = 0
  and e3.IsIntersect = 0
  and e3.IsSecurityIntersect = 0
  and e1.IsLookupTable = 0
  and e1.IsIntersect = 0
  and e1.IsSecurityIntersect = 0
  and e1.Name <> e3.Name
  and e1.EntityId = @tableid
order by 1, 3

/****** Object:  StoredProcedure [dbo].[p_GetTablePrimaryKey]    Script Date: 04/11/2008 06:35:18 ******/




create procedure [dbo].[p_GetTablePrimaryKey](@tablename nvarchar(255) = null, @tableid uniqueidentifier = null) as
set nocount on

if @tablename is null and @tableid is null
begin
   RAISERROR ( 1074008071, 16, 127 ) WITH NOWAIT, SETERROR
   return
end 

if @tableid is null
begin
	select @tableid = EntityId
	from EntityView
	where Name = @tablename
end

select 'id' = AttributeId, referencingentity = EntityId, null, 'primarykey' = IsPKAttribute, 'relationshipname' = null, name = null
from AttributeView
where EntityId = @tableid
  and IsPKAttribute = 1

/****** Object:  StoredProcedure [dbo].[p_GetTablesReferencedBy]    Script Date: 04/11/2008 06:35:19 ******/




create procedure [dbo].[p_GetTablesReferencedBy](@tablename nvarchar(255) = null, @tableid uniqueidentifier = null) as
set nocount on

if @tablename is null and @tableid is null
begin
   RAISERROR ( 1074008071, 16, 127 ) WITH NOWAIT, SETERROR
   return
end

if @tableid is null
begin
    select @tableid = EntityId
    from EntityView
    where Name = @tablename
end

select EntityView.*
from EntityView, RelationshipView
where EntityView.EntityId = RelationshipView.ReferencingEntityId
  and RelationshipView.ReferencedEntityId = @tableid

/****** Object:  StoredProcedure [dbo].[p_GetTableForeignKeys]    Script Date: 04/11/2008 06:35:18 ******/




create procedure [dbo].[p_GetTableForeignKeys](@tablename nvarchar(255) = null, @tableid uniqueidentifier = null) as
set nocount on

if @tablename is null and @tableid is null
begin
   RAISERROR ( 1074008071, 16, 127 ) WITH NOWAIT, SETERROR
   return
end 

if @tableid is null
begin
	select @tableid = EntityId
	from EntityView
	where Name = @tablename
end

select 'id' = rel.RelationshipId, referencingentity = rel.ReferencingEntityId, ReferencedEntityId, 'primarykey' = 0, 
        EntityView.Name, EntityView.PhysicalName, EntityView.LogicalName, 'relationshipname' = rel.Name
from RelationshipView rel join EntityView on (rel.ReferencedEntityId = EntityView.EntityId)
where rel.ReferencingEntityId = @tableid

/****** Object:  StoredProcedure [dbo].[p_GetTableAttributes]    Script Date: 04/11/2008 06:35:18 ******/




create procedure [dbo].[p_GetTableAttributes](@tablename nvarchar(255) = null, @tableid uniqueidentifier = null) as  
set nocount on  

if @tableid is null and @tablename is null
begin
   RAISERROR ( 1074008071, 16, 127 ) WITH NOWAIT, SETERROR
   return
end 

if @tablename is not null
begin
   select @tableid = EntityId
   from EntityView
   where Name = @tablename
end

select a.*,
	'character-count' = case 
		when cast(at.Description as nvarchar) in ('nvarchar', 'nchar') then cast(a.Length / 2 as nvarchar) 
		when cast(at.Description as nvarchar) in ('varchar', 'char') then cast(a.Length as nvarchar) 
		else '' 
		end,
    'type' = at.Description,
    'isquoted' = at.Quoted
from AttributeView a join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)
where EntityId = @tableid
  and a.AttributeOf is NULL
  and a.AggregateOf is NULL
  and (a.ValidForCreateAPI != 0 or a.ValidForReadAPI != 0 or a.ValidForUpdateAPI != 0)
order by ColumnNumber

/****** Object:  StoredProcedure [dbo].[p_GetAllTableRelationships]    Script Date: 04/11/2008 06:35:09 ******/




create procedure [dbo].[p_GetAllTableRelationships] as
set nocount on
select 'SourceEntity' = e1.LogicalName, 
       'LeftKey' = r1.Name, 
       'IntersectEntity' = i1.LogicalName, 
       'RightKey' = r2.Name, 
       'TargetEntity' = e3.LogicalName
from EntityView e1, RelationshipView r1, EntityView i1,
     EntityView e3, RelationshipView r2, EntityView i2
where e1.EntityId = r1.ReferencedEntityId
  and r1.ReferencingEntityId = i1.EntityId
  and e3.EntityId = r2.ReferencedEntityId
  and r2.ReferencingEntityId = i2.EntityId
  and i1.EntityId = i2.EntityId
  and e3.IsLookupTable = 0
  and e3.IsIntersect = 0
  and e3.IsSecurityIntersect = 0
  and e1.IsLookupTable = 0
  and e1.IsIntersect = 0
  and e1.IsSecurityIntersect = 0
  and e1.Name <> e3.Name
order by 1, 3

/****** Object:  StoredProcedure [dbo].[p_genSpecificViewAndTriggers]    Script Date: 04/11/2008 06:35:09 ******/




create procedure [dbo].[p_genSpecificViewAndTriggers](@viewName nvarchar(64)) as
set nocount on

declare @view table
(
    line int idEntity,
    value nvarchar(max)
)

declare @hasOpenSelect bit
declare @linenumber int
declare @userowned int
declare @businessowned int
declare @orgowned int

set @userowned = 1
set @businessowned = 4
set @orgowned = 8

declare @EntityId uniqueidentifier

declare @pkphysname nvarchar(300)
declare @pklogname nvarchar(300)

declare @pkaddrphysname nvarchar(300)
declare @pkaddrlogname nvarchar(300)

declare @EntityLogicalName nvarchar(300)
declare @EntityPhysicalName nvarchar(300)
declare @BaseTableName nvarchar(300)
declare @ExtensionTableName nvarchar(300)
declare @attrLogicalName nvarchar(300)
declare @attrPhysicalName nvarchar(300)
declare @addrtablename nvarchar(300)
declare @addrentityname nvarchar(300)
declare @pkname nvarchar(300)
declare @rowGuidAttributeName sysname
declare @ObjectTypeCode int
declare @isAddressType bit
declare @isActivityType bit
declare @isActivityParty bit
declare @isShareableAcrossOrgs bit
declare @isPublishable bit

declare @address int
declare @OwnershipTypeMask int
declare @parented bit
declare @attrcount int
declare @attrnum int

declare @numberofaddresses int
declare @numberofCustAttributes bit

set @numberofaddresses = 2

select @EntityId = EntityId, 
       @EntityLogicalName = LogicalName, 
       @BaseTableName = BaseTableName, 
       @ExtensionTableName = ExtensionTableName,
       @EntityPhysicalName = PhysicalName,
       @addrentityname = AddressTableName, 
       @parented = IsParented,
       @OwnershipTypeMask = OwnershipTypeMask, 
       @ObjectTypeCode = ObjectTypeCode,
       @isActivityType = coalesce(IsActivity, 0),
       @isActivityParty = coalesce(IsActivityParty, 0),
       @isShareableAcrossOrgs = coalesce(IsShareableAcrossOrgs, 0),
       @isPublishable = coalesce(IsPublishable, 0)
from EntityView
where PhysicalName = @viewName and IsLogicalEntity = 0

if @BaseTableName <> 'ActivityPartyBase' and @viewName <> 'SalesProcessInstance'
begin
    if @addrentityname is not null
    begin
        select @pklogname = a.LogicalName, @pkphysname = a.PhysicalName
        from AttributeView a join EntityView e on (a.EntityId = e.EntityId)
        where e.BaseTableName = @BaseTableName
          and a.IsPKAttribute = 1

        select @pkaddrlogname = a.LogicalName, @pkaddrphysname = a.PhysicalName, @addrtablename = e.BaseTableName 
        from AttributeView a join EntityView e on (a.EntityId = e.EntityId)
        where e.Name = @addrentityname
          and a.IsPKAttribute = 1
    end

    if @BaseTableName in ('CustomerAddressBase', 'LeadAddressBase', 'InternalAddressBase', 'CompetitorAddressBase') 
    set @isAddressType = 1
    else
    set @isAddressType = 0

    -- get the pk name
    select @pkname = a.PhysicalName
    from AttributeView a join EntityView e on a.EntityId = e.EntityId
    where IsPKAttribute = 1
      and e.BaseTableName = @BaseTableName

    if @pkname is null
    begin
        declare @message nvarchar(1024)
        set @message = @BaseTableName + ' does not have a primary key assigned'
        raiserror (@message,16,1) with nowait
    end

     -- get the rowGuidAttribute name
    if @isPublishable = 1 or @isShareableAcrossOrgs = 1
        begin
        select @rowGuidAttributeName = a.PhysicalName
        from Attribute a join Entity e on a.EntityId = e.EntityId
        where IsRowGuidAttribute = 1
          and e.BaseTableName = @BaseTableName

        if @rowGuidAttributeName is null
        begin
            declare @message2 nvarchar(256)
            set @message2 = @BaseTableName + ' does not have a RowGuidAttribute'
            raiserror (@message2,16,1) with nowait
        end
    end
 
    --
    -- create the view  
    --
    insert @view (value) values ('if exists (select * from sysobjects where name = ''' + @EntityPhysicalName + ''' and xtype = ''V'')')
    insert @view (value) values ('begin')
    insert @view (value) values ('    drop view ' + @EntityPhysicalName)
    insert @view (value) values ('end')
    insert @view (value) values ('go')
    insert @view (value) values ('')

    -- *************************************************************************
    --
    --
    --
    -- create the view
    --
    --
    --
    -- *************************************************************************
    insert @view (value) values ('--')
    insert @view (value) values ('-- base view for ' + @EntityPhysicalName)
    insert @view (value) values ('--')

    insert @view (value) values ('create view dbo.' + @EntityPhysicalName + ' (')
      
    -- cheat and put the extra join columns up here
    if exists (select * from ViewAttributeView va join AttributeView a on (va.AttributeId = a.AttributeId) where a.EntityId = @EntityId)
    begin
        insert @view (value) values ('    -- logical attributes')
        insert @view (value)
        select '    ' + a.PhysicalName + ', '
    from ViewAttributeView va join AttributeView a on (va.AttributeId = a.AttributeId)
    where a.EntityId = @EntityId
        order by a.PhysicalName
        insert @view (value) values ('')
    end

	-- do address magic
    if @addrtablename is not null
    begin
        insert @view (value) values ('    -- linked address entities')
        set @address = 1
        while @address <= @numberofaddresses
        begin   
            insert @view (value)
            select case a.IsPKAttribute
                      when 1 then '    Address' + cast(@address as nvarchar) + '_AddressId,'
                      when 0 then '    Address' + cast(@address as nvarchar) + '_' + a.PhysicalName + ',' 
                   end
            from EntityView e join AttributeView a on e.EntityId = a.EntityId
            where e.BaseTableName = @addrtablename
              and a.PhysicalName not in ('ForeignKey', 'VersionNumber', 'ObjectTypeCode', 'AddressNumber', 'ParentId', 'ModifiedBy', 'ModifiedOn', 'CreatedBy', 'CreatedOn', 'DeletionStateCode')
              and a.IsLogical = 0
              and a.IsCustomField = 0
            order by a.ColumnNumber

            insert @view (value) values ('')

            set @address = @address + 1
        end
    end
    
    if @OwnershipTypeMask = @userowned
    begin
        insert @view (value) values ('    -- ownership entries')
        insert @view (value) values ('    OwnerId,')
        insert @view (value) values ('    OwnerIdName,')
        insert @view (value) values ('    OwnerIdYomiName,')       
        insert @view (value) values ('    OwnerIdDsc,')
        insert @view (value) values ('    OwnerIdType,')
        insert @view (value) values ('')
    end    

    if @BaseTableName = 'ContactBase'
    begin
        insert @view (value) values ('')
        insert @view (value) values ('    ParentCustomerId,')
        insert @view (value) values ('    ParentCustomerIdName,')
        insert @view (value) values ('    ParentCustomerIdYomiName,')
        insert @view (value) values ('    ParentCustomerIdDsc,')
        insert @view (value) values ('    ParentCustomerIdType,')
        insert @view (value) values ('')
    end

    if @BaseTableName = 'ContractBase'
    begin
        insert @view (value) values ('')
        insert @view (value) values ('    BillingCustomerId,')
        insert @view (value) values ('    BillingCustomerIdName,')
        insert @view (value) values ('    BillingCustomerIdYomiName,')       
        insert @view (value) values ('    BillingCustomerIdDsc,')
        insert @view (value) values ('    BillingCustomerIdType,')
        insert @view (value) values ('')
    end

    if @BaseTableName = 'CustomerRelationshipBase'
    begin
        insert @view (value) values ('')
        insert @view (value) values ('    CustomerIdName,')
        insert @view (value) values ('    CustomerIdYomiName,')       
        insert @view (value) values ('    CustomerIdDsc,')
        insert @view (value) values ('    PartnerIdName,')
        insert @view (value) values ('    PartnerIdYomiName,')        
        insert @view (value) values ('    PartnerIdDsc,')
        insert @view (value) values ('')
    end

    if @BaseTableName = 'CustomerOpportunityRoleBase'
    begin
        insert @view (value) values ('')
        insert @view (value) values ('    CustomerIdName,')
        insert @view (value) values ('    CustomerIdYomiName,')
        insert @view (value) values ('    CustomerIdDsc,')
        insert @view (value) values ('')
    end

    if @BaseTableName = 'BulkOperationLogBase'
    begin
        insert @view (value) values ('')
        insert @view (value) values ('    RegardingObjectIdName,')
        insert @view (value) values ('    RegardingObjectIdYomiName,')       
        insert @view (value) values ('    RegardingObjectIdDsc,')
        insert @view (value) values ('')
    end

	if @BaseTableName = 'CustomerAddressBase'
	begin
        insert @view (value) values ('    OwningUser,')
        insert @view (value) values ('    OwningBusinessUnit,')
	end

	
		
    if @parented = 1
    begin
        insert @view (value) values ('')
        insert @view (value) values ('    CustomerId,')
        insert @view (value) values ('    CustomerIdName,')
        insert @view (value) values ('    CustomerIdYomiName,')       
        insert @view (value) values ('    CustomerIdDsc,')
        insert @view (value) values ('    CustomerIdType,')
        insert @view (value) values ('')
    end

    insert @view (value) values ('    -- physical attributes')
    insert @view (value)
    select '    ' + a.PhysicalName + ','
    from AttributeView a join EntityView e on (a.EntityId = e.EntityId)
    where e.EntityId = @EntityId
        and a.IsLogical = 0
    order by a.ColumnNumber

    -- count the physical custom attributes
    select @numberofCustAttributes = count(*) 
         from AttributeView a join EntityView e 
             on (a.EntityId = e.EntityId) 
         where e.BaseTableName = @BaseTableName 
             and coalesce(e.IsCustomizable, 0) = 1
             and a.IsCustomField = 1
             and a.IsLogical = 0
   
    -- trim final comma
	select @linenumber = max(line) from @view
    update @view 
    set value = substring(value, 1, len(value) - 1)
    where line = @linenumber

    insert @view (value) values (') with view_metadata as ')
    insert @view (value) values ('select ')

    if exists (select * from ViewAttribute va join Attribute a on (va.AttributeId = a.AttributeId) where a.EntityId = @EntityId)
    begin
        insert @view (value) values ('    -- logical attributes')
        insert @view (value)
        select '    ' + rel.Name + 
		case (ra.IsCustomField)
			when 1 then 'Ext.'
			when 0 then '.'
		end + ra.PhysicalName  + ', '
    from ViewAttributeView va join AttributeView a on (va.AttributeId = a.AttributeId)
        join RelationshipView rel on (va.RelationshipId = rel.RelationshipId)
        join AttributeView ra on (va.RemoteAttributeId = ra.AttributeId)
	join EntityView e on (e.EntityId = rel.ReferencedEntityId)
	join AttributeTypes at on (ra.AttributeTypeId = at.AttributeTypeId)
    where a.EntityId = @EntityId
    order by a.PhysicalName
        
        insert @view (value) values ('')
    end

    -- do address magic
    if @addrtablename is not null
    begin
        insert @view (value) values ('    -- linked address entities')
        set @address = 1
        while @address <= @numberofaddresses
        begin   
            insert @view (value)
            select '    XXaddress' + cast(@address as nvarchar) + '.' + a.PhysicalName + ','
            from EntityView e join AttributeView a on e.EntityId = a.EntityId
            where e.BaseTableName = @addrtablename
              and a.PhysicalName not in ('ForeignKey', 'VersionNumber', 'ObjectTypeCode', 'AddressNumber', 'ParentId', 'ModifiedBy', 'ModifiedOn', 'CreatedBy', 'CreatedOn', 'DeletionStateCode')
              and a.IsLogical = 0
              and a.IsCustomField = 0
            order by a.ColumnNumber
            
            insert @view (value) values ('')

            set @address = @address + 1
        end
    end

    if @OwnershipTypeMask = @userowned
    begin
        insert @view (value) values ('    -- ownership entries')
    	declare @isOwningUserLogical bit
    	declare @owningUserAttrId uniqueidentifier
    	declare @owningUserRelName nvarchar(255)
    	-- Check if owning user is logical on the entity
    	-- if this was generated off relationships this special casing would not have been required
    	select @isOwningUserLogical=a.IsLogical,@owningUserAttrId=AttributeId 
    	from AttributeView a join EntityView e on (a.EntityId = e.EntityId)
    	where e.EntityId = @EntityId and a.Name = 'owninguser'
    	if(@isOwningUserLogical = 0)
        	set @owningUserRelName = @BaseTableName      
    	-- if it is then use relationshipname.owninguser
    	else
        	select @owningUserRelName=r.Name
        	from ViewAttributeView v join RelationshipView r on (r.RelationshipId = v.RelationshipId)
        	where v.AttributeId = @owningUserAttrId
    
    	insert @view (value) values ('    OwnerId   = ' + @owningUserRelName + '.OwningUser, ')
        insert @view (value) values ('    OwnerName = XXowninguser.FullName, ')
        insert @view (value) values ('    OwnerYomiName = XXowninguser.YomiFullName, ')        
    	insert @view (value) values ('    OwnerDsc  = XXowninguser.DeletionStateCode, ')
        insert @view (value) values ('    OwnerIdType = case ')
    	insert @view (value) values ('              when ' + @owningUserRelName + '.OwningUser IS NOT NULL then 8')
    	insert @view (value) values ('              else NULL')
    	insert @view (value) values ('              end,')
    	insert @view (value) values ('')
    end    

    if @BaseTableName = 'ContactBase'
    begin
        insert @view (value) values ('')

        insert @view (value) values ('    ParentCustomerId   = coalesce(' + @BaseTableName + '.AccountId, ' + @BaseTableName + '.ParentContactId), ')
        insert @view (value) values ('    ParentCustomerIdName = coalesce(XXparentaccount.Name, XXparentcontact.FullName), ')
        insert @view (value) values ('    ParentCustomerIdYomiName = coalesce(XXparentaccount.YomiName, XXparentcontact.YomiFullName), ')        
        insert @view (value) values ('    ParentCustomerIdDsc  = coalesce(XXparentaccount.DeletionStateCode, XXparentcontact.DeletionStateCode), ')
        insert @view (value) values ('    ParentCustomerIdType = case ')
        insert @view (value) values ('              when ' + @BaseTableName + '.AccountId IS NOT NULL then 1')
        insert @view (value) values ('              when ' + @BaseTableName + '.ParentContactId IS NOT NULL then 2')
        insert @view (value) values ('              else NULL')
        insert @view (value) values ('              end,')
        insert @view (value) values ('')
    end

    if @BaseTableName = 'ContractBase'
    begin
        insert @view (value) values ('')

        insert @view (value) values ('    BillingCustomerId   = coalesce(' + @BaseTableName + '.BillingAccountId, ' + @BaseTableName + '.BillingContactId), ')
        insert @view (value) values ('    BillingCustomerIdName = coalesce(XXbillingaccount.Name, XXbillingcontact.FullName), ')
        insert @view (value) values ('    BillingCustomerIdYomiName = coalesce(XXbillingaccount.YomiName, XXbillingcontact.YomiFullName), ')       
        insert @view (value) values ('    BillingCustomerIdDsc  = coalesce(XXbillingaccount.DeletionStateCode, XXbillingcontact.DeletionStateCode), ')
        insert @view (value) values ('    BillingCustomerIdType = case ')
        insert @view (value) values ('              when ' + @BaseTableName + '.BillingAccountId IS NOT NULL then 1')
        insert @view (value) values ('              when ' + @BaseTableName + '.BillingContactId IS NOT NULL then 2')
        insert @view (value) values ('              else NULL')
        insert @view (value) values ('              end,')
        insert @view (value) values ('')
    end

    if @BaseTableName = 'CustomerRelationshipBase'
    begin
        insert @view (value) values ('')
        insert @view (value) values ('    CustomerIdName = coalesce(XXaccount.Name, XXcontact.FullName), ')
        insert @view (value) values ('    CustomerIdYomiName = coalesce(XXaccount.YomiName, XXcontact.YomiFullName), ')       
        insert @view (value) values ('    CustomerIdDsc  = coalesce(XXaccount.DeletionStateCode, XXcontact.DeletionStateCode), ')
        insert @view (value) values ('    PartnerIdName = coalesce(YYaccount.Name, YYcontact.FullName), ')
        insert @view (value) values ('    PartnerIdYomiName = coalesce(YYaccount.YomiName, YYcontact.YomiFullName), ')        
        insert @view (value) values ('    PartnerIdDsc  = coalesce(YYaccount.DeletionStateCode, YYcontact.DeletionStateCode), ')
        insert @view (value) values ('')
    end

    if @BaseTableName = 'CustomerOpportunityRoleBase'
    begin
        insert @view (value) values ('')
        insert @view (value) values ('    CustomerIdName = coalesce(XXaccount.Name, XXcontact.FullName), ')
        insert @view (value) values ('    CustomerIdYomiName = coalesce(XXaccount.YomiName, XXcontact.YomiFullName), ')        
        insert @view (value) values ('    CustomerIdDsc  = coalesce(XXaccount.DeletionStateCode, XXcontact.DeletionStateCode), ')
        insert @view (value) values ('')
    end

    if @BaseTableName = 'BulkOperationLogBase'
    begin
        insert @view (value) values ('')
        insert @view (value) values ('    RegardingObjectIdName = coalesce(XXaccount.Name, XXcontact.FullName, XXlead.FullName), ')
        insert @view (value) values ('    RegardingObjectIdYomiName = coalesce(XXaccount.YomiName, XXcontact.YomiFullName, XXlead.YomiFullName), ')       
        insert @view (value) values ('    RegardingObjectIdDsc  = coalesce(XXaccount.DeletionStateCode, XXcontact.DeletionStateCode, XXlead.DeletionStateCode), ')
        insert @view (value) values ('')
    end

	if @BaseTableName = 'CustomerAddressBase'
	begin
        insert @view (value) values ('    OwningUser = coalesce(XXaccount.OwningUser, XXcontact.OwningUser), ')
        insert @view (value) values ('    OwningBusinessUnit = coalesce(XXaccount.OwningBusinessUnit, XXcontact.OwningBusinessUnit), ')
	end

    if @parented = 1
    begin
        insert @view (value) values ('')

        insert @view (value) values ('    CustomerId   = coalesce(' + @BaseTableName + '.AccountId, ' + @BaseTableName + '.ContactId), ')
        insert @view (value) values ('    CustomerIdName = coalesce(XXparentaccount.Name, XXparentcontact.FullName), ')
        insert @view (value) values ('    CustomerIdYomiName = coalesce(XXparentaccount.YomiName, XXparentcontact.YomiFullName), ')       
        insert @view (value) values ('    CustomerIdDsc  = coalesce(XXparentaccount.DeletionStateCode, XXparentcontact.DeletionStateCode), ')
        insert @view (value) values ('    CustomerIdType = case ')
        insert @view (value) values ('              when ' + @BaseTableName + '.AccountId IS NOT NULL then 1')
        insert @view (value) values ('              when ' + @BaseTableName + '.ContactId IS NOT NULL then 2')
        insert @view (value) values ('              else NULL')
        insert @view (value) values ('              end,')
        insert @view (value) values ('')
    end

    -- get the physical column names into the select clause
    insert @view (value) values ('    -- physical attributes')
    if @isShareableAcrossOrgs = 1 or @isPublishable =1
    begin
        -- MultiOrgShared/Publishable entity view should use alias 
        insert @view (value)
        select '     T1.' + a.PhysicalName + ','
        from AttributeView a join EntityView e on (a.EntityId = e.EntityId)
        where e.EntityId = @EntityId
            and a.IsLogical = 0
        order by a.ColumnNumber
    end
    else
    begin    
        insert @view (value)
        select '    ' + 
            case a.IsCustomField
                when 1 then '    ' + @ExtensionTableName + '.' + a.PhysicalName + ','
                else @BaseTableName + '.' + a.PhysicalName + ','
            end
        from AttributeView a join EntityView e on (a.EntityId = e.EntityId)
        where e.EntityId = @EntityId
            and a.IsLogical = 0
        order by a.ColumnNumber
    end

    -- trim final comma
	select @linenumber = max(line) from @view
    update @view 
    set value = substring(value, 1, len(value) - 1)
    where line = @linenumber

    if @isShareableAcrossOrgs = 1 or @isPublishable =1
        -- MultiOrgShared/Publishable entity view should use alias 
        insert @view (value) values ('from ' + @BaseTableName + ' T1')
    else
        insert @view (value) values ('from ' + @BaseTableName)

    -- if there are custom attributes, join the extension table to the view. If not, there
    -- is no reason to join it because it will be empty (except for the pk which is already on the
    -- base table)
    if (@numberofCustAttributes > 0)
    begin
        insert @view (value) values ('    left join ' + @ExtensionTableName + 
                     ' on (' + @BaseTableName + '.' + @pkname + ' = ' + @ExtensionTableName + '.' + 
                     @pkname + ')')
    end

    -- if this is a contact, hook in the parent customer 
    if @BaseTableName = 'ContactBase'
    begin
        insert @view (value) values ('    left join AccountBase XXparentaccount on (' + @BaseTableName + '.AccountId = XXparentaccount.AccountId)')
        insert @view (value) values ('    left join ContactBase XXparentcontact on (' + @BaseTableName + '.ParentContactId = XXparentcontact.ContactId)')
        insert @view (value) values ('')
    end

    -- if this is a contract, hook in the billing 
    if @BaseTableName = 'ContractBase'
    begin
        insert @view (value) values ('    left join AccountBase XXbillingaccount on (' + @BaseTableName + '.BillingAccountId = XXbillingaccount.AccountId)')
        insert @view (value) values ('    left join ContactBase XXbillingcontact on (' + @BaseTableName + '.BillingContactId = XXbillingcontact.ContactId)')
        insert @view (value) values ('')
    end

    if @BaseTableName = 'CustomerRelationshipBase'
    begin
        insert @view (value) values ('    left join AccountBase XXaccount on (' + @BaseTableName + '.CustomerId = XXaccount.AccountId and ' +  @BaseTableName + '.CustomerIdType = 1)')
        insert @view (value) values ('    left join ContactBase XXcontact on (' + @BaseTableName + '.CustomerId = XXcontact.ContactId and ' +  @BaseTableName + '.CustomerIdType = 2)')
        insert @view (value) values ('    left join AccountBase YYaccount on (' + @BaseTableName + '.PartnerId = YYaccount.AccountId and ' +  @BaseTableName + '.PartnerIdType = 1)')
        insert @view (value) values ('    left join ContactBase YYcontact on (' + @BaseTableName + '.PartnerId = YYcontact.ContactId and ' +  @BaseTableName + '.PartnerIdType = 2)')
        insert @view (value) values ('')
    end
    if @BaseTableName = 'CustomerOpportunityRoleBase'
    begin
        insert @view (value) values ('    left join AccountBase XXaccount on (' + @BaseTableName + '.CustomerId = XXaccount.AccountId and ' +  @BaseTableName + '.CustomerIdType = 1)')
        insert @view (value) values ('    left join ContactBase XXcontact on (' + @BaseTableName + '.CustomerId = XXcontact.ContactId and ' +  @BaseTableName + '.CustomerIdType = 2)')
        insert @view (value) values ('')
    end

    if @BaseTableName = 'BulkOperationLogBase'
    begin
        insert @view (value) values ('    left join AccountBase XXaccount on (' + @BaseTableName + '.RegardingObjectId = XXaccount.AccountId and ' +  @BaseTableName + '.RegardingObjectIdTypeCode = 1)')
        insert @view (value) values ('    left join ContactBase XXcontact on (' + @BaseTableName + '.RegardingObjectId = XXcontact.ContactId and ' +  @BaseTableName + '.RegardingObjectIdTypeCode = 2)')
        insert @view (value) values ('    left join LeadBase XXlead on (' + @BaseTableName + '.RegardingObjectId = XXlead.LeadId and ' +  @BaseTableName + '.RegardingObjectIdTypeCode = 4)')
        insert @view (value) values ('')
    end

	if @BaseTableName = 'CustomerAddressBase'
	begin
        insert @view (value) values ('    left join AccountBase XXaccount on (' + @BaseTableName + '.ParentId = XXaccount.AccountId and ' +  @BaseTableName + '.ObjectTypeCode = 1)')
        insert @view (value) values ('    left join ContactBase XXcontact on (' + @BaseTableName + '.ParentId = XXcontact.ContactId and ' +  @BaseTableName + '.ObjectTypeCode = 2)')
	end

    -- if the object is parented, grab the parent account and contact
    if @parented = 1
    begin
        insert @view (value) values ('    left join AccountBase XXparentaccount on (' + @BaseTableName + '.AccountId = XXparentaccount.AccountId)')
        insert @view (value) values ('    left join ContactBase XXparentcontact on (' + @BaseTableName + '.ContactId = XXparentcontact.ContactId)')
        insert @view (value) values ('')
    end

    if @addrtablename is not null
    begin
        set @address = 1
        insert @view (value) values ('')
        while @address <= @numberofaddresses
        begin
            insert @view (value) values ('    left join ' + @addrtablename + ' XXaddress' + cast(@address as nvarchar) + ' on (' + @BaseTableName + '.' + @pkphysname + ' = XXaddress' + cast(@address as nvarchar) + '.ParentId and XXaddress' + cast(@address as nvarchar) + '.AddressNumber = ' + cast(@address as nvarchar) + ')')

            set @address = @address + 1
        end
    end

if exists (select * from ViewAttributeView va join AttributeView a on (va.AttributeId = a.AttributeId) where a.EntityId = @EntityId)
begin

    insert @view(value)
    select '    left join ' +  re.BaseTableName + ' ' + rel.Name + 
    case re.Name
        when 'SystemUser' then ' with(nolock)'
        else ''
    end + ' on (' +
    case la.IsCustomField
        when 1 then @ExtensionTableName
        else case la.IsLogical 
            when 1 then rel2.Name
            -- MultiOrgShared/Publishable entity view should use alias 
            else case @isPublishable
                 when 1 then 'T1'
                 else case @isShareableAcrossOrgs
                      when 1 then 'T1'
                      else @BaseTableName
                      end
                 end
             end
    end + '.'+la.PhysicalName + ' = '+ rel.Name+'.'+ra.PhysicalName +
    case @isActivityType
    	when 1 then 
		case re.BaseTableName
			when 'ActivityPointerBase' then 
				case la.PhysicalName
					when 'ActivityId' then ' and ' + rel.Name + '.ActivityTypeCode = ' + cast(@ObjectTypeCode as nvarchar)
					else ''
			end
			else ''
		end
    	else ''
	end
    + ')'
    from RelationshipView rel
    join AttributeView la on (rel.ReferencingAttributeId = la.AttributeId)
    join AttributeView ra on (rel.ReferencedAttributeId = ra.AttributeId)
    join EntityView re on (rel.ReferencedEntityId = re.EntityId)
    left outer join ViewAttributeView va2 on (va2.AttributeId = rel.ReferencingAttributeId)
    left outer join RelationshipView rel2 on (rel2.RelationshipId = va2.RelationshipId)
    where rel.RelationshipId in 
    (select distinct va.RelationshipId 
     from ViewAttributeView va 
     join AttributeView a on (va.AttributeId = a.AttributeId)
     join AttributeView a2 on (va.RemoteAttributeId = a2.AttributeId)
         where a.EntityId = @EntityId and a2.IsCustomField = 0)
    order by la.IsLogical asc, rel.Name asc

	insert @view(value)
    select '    left join ' +  re.ExtensionTableName + ' ' + rel.Name + 'Ext' + 
    case re.Name
        when 'SystemUser' then ' with(nolock)'
        else ''
    end + ' on (' +
    case la.IsCustomField
        when 1 then @ExtensionTableName
        else 
			case la.IsLogical
            	when 1 then rel2.Name
        		else @BaseTableName
            end
    end + '.'+la.PhysicalName + ' = '+ rel.Name+'Ext.'+ra.PhysicalName + ')'
    from RelationshipView rel
    join AttributeView la on (rel.ReferencingAttributeId = la.AttributeId)
    join AttributeView ra on (rel.ReferencedAttributeId = ra.AttributeId)
    join EntityView re on (rel.ReferencedEntityId = re.EntityId)
    left outer join ViewAttributeView va2 on (va2.AttributeId = rel.ReferencingAttributeId)
    left outer join RelationshipView rel2 on (rel2.RelationshipId = va2.RelationshipId)
    where  rel.RelationshipId in 
    (select distinct va.RelationshipId 
     from ViewAttributeView va 
     join AttributeView a on (va.AttributeId = a.AttributeId)
     join AttributeView a2 on (va.RemoteAttributeId = a2.AttributeId)
         where a.EntityId = @EntityId and a2.IsCustomField = 1)
    order by la.IsLogical asc, rel.Name asc
end
    if @OwnershipTypeMask = @userowned
    begin
        insert @view (value) values ('    left join SystemUserBase XXowninguser with(nolock) on (' + @owningUserRelName + '.OwningUser = XXowninguser.SystemUserId)')
        insert @view (value) values ('')
    end

    if @isPublishable = 1 
    begin
        -- add left outer join 
        insert @view (value) values ('         left outer join ' + @BaseTableName + ' T2 on (T1.' + @pkname + '=T2.' + @pkname)
        insert @view (value) values ('              AND T1.' + @rowGuidAttributeName + '<>T2.'+ @rowGuidAttributeName )
        insert @view (value) values ('              AND T1.CustomizationLevel = 0')
        insert @view (value) values ('              AND T2.InProduction=1 )')
        insert @view (value) values ('         where T2.CustomizationLevel is null')
    end
    else if @isShareableAcrossOrgs = 1
    begin
        -- add left outer join 
        insert @view (value) values ('         left outer join ' + @BaseTableName + ' T2 on (T1.' + @pkname + '=T2.' + @pkname)
        insert @view (value) values ('              AND T1.' + @rowGuidAttributeName + '<>T2.'+ @rowGuidAttributeName )
        insert @view (value) values ('              AND T1.CustomizationLevel = 0)')
        insert @view (value) values ('         where T2.CustomizationLevel is null')
    end

    insert @view (value) values ('go')
    insert @view (value) values ('')
end
else if @viewName = 'SalesProcessInstance'
    -- Generate special view for sales processes
    begin
        insert @view (value) values ('if exists (select * from sysobjects where name = ''SalesProcessInstance'' and xtype = ''V'')')
        insert @view (value) values ('begin')
        insert @view (value) values ('    drop view SalesProcessInstance')
        insert @view (value) values ('end')
        insert @view (value) values ('go')
        insert @view (value) values ('create view SalesProcessInstance (')
        insert @view (value) values ('    SalesProcessInstanceId,')
        insert @view (value) values ('    SalesProcessName,')
        insert @view (value) values ('    OpportunityId,')
        insert @view (value) values ('    OpportunityIdDsc,')
        insert @view (value) values ('    OpportunityIdName,')
        insert @view (value) values ('    SalesStageName,')
        insert @view (value) values ('    BusinessUnitId,')
        insert @view (value) values ('    BusinessUnitIdDsc,')
        insert @view (value) values ('    BusinessUnitIdName')
        insert @view (value) values (') as')
        insert @view (value) values ('select')
        insert @view (value) values ('    a.AsyncOperationId,')
        insert @view (value) values ('    a.Name,')
        insert @view (value) values ('    o.OpportunityId,')
        insert @view (value) values ('    o.DeletionStateCode,')
        insert @view (value) values ('    o.Name,')
        insert @view (value) values ('    a.WorkflowStageName,')
        insert @view (value) values ('    a.OwningBusinessUnit,')
        insert @view (value) values ('    bu.DeletionStateCode,')
        insert @view (value) values ('    bu.Name')
        insert @view (value) values ('from')
        insert @view (value) values ('    AsyncOperation a')
        insert @view (value) values ('    join OpportunityBase o on (o.OpportunityId = a.RegardingObjectId)')
        insert @view (value) values ('    join BusinessUnitBase bu on (bu.BusinessUnitId = a.OwningBusinessUnit)')
        insert @view (value) values ('where')
        insert @view (value) values ('    a.OperationType = 10 and')
        insert @view (value) values ('    a.RegardingObjectTypeCode = 3 and')
        insert @view (value) values ('    a.WorkflowStageName is not null')
        insert @view (value) values ('go')
    end
else
    -- *************************************************************************
    --   This bit generates the special case entities (ActivityParty)
    -- *************************************************************************
    begin
        insert @view (value) values ('if exists (select * from sysobjects where name = ''ActivityParty'' and xtype = ''V'')')
        insert @view (value) values ('begin')
        insert @view (value) values ('    drop view ActivityParty')
        insert @view (value) values ('end')
        insert @view (value) values ('go')
        insert @view (value) values ('')
        insert @view (value) values ('create view dbo.ActivityParty (')
        insert @view (value) values ('    ActivityPartyId,')
        insert @view (value) values ('    ActivityId, ')
        insert @view (value) values ('    PartyId, ')
        insert @view (value) values ('    PartyObjectTypeCode, ')
        insert @view (value) values ('    ParticipationTypeMask, ')
        insert @view (value) values ('    AddressUsed, ')
        insert @view (value) values ('    DoNotEmail,')
        insert @view (value) values ('    DoNotFax,')
        insert @view (value) values ('    DoNotPostalMail,')
        insert @view (value) values ('    DoNotPhone,')
        insert @view (value) values ('    PartyIdDsc,')
        insert @view (value) values ('    PartyIdName,')

        insert @view (value) values ('    ExchangeEntryId,')

        insert @view (value) values ('    Effort,')
        insert @view (value) values ('    ResourceSpecId,')
        insert @view (value) values ('    ResourceSpecIdName,')
        insert @view (value) values ('    ResourceSpecIdDsc,')
        insert @view (value) values ('    ScheduledStart,')
        insert @view (value) values ('    ScheduledEnd,')
        insert @view (value) values ('    OwningUser,')
        insert @view (value) values ('    OwningBusinessUnit,')
        insert @view (value) values ('    VersionNumber')
        insert @view (value) values (') as ')
        
        insert @view (value) values ('select')
        insert @view (value) values ('    ActivityPartyBase.ActivityPartyId,')
        insert @view (value) values ('    ActivityPartyBase.ActivityId, ')
        insert @view (value) values ('    ActivityPartyBase.PartyId, ')
        insert @view (value) values ('    ActivityPartyBase.PartyObjectTypeCode, ')
        insert @view (value) values ('    ActivityPartyBase.ParticipationTypeMask, ')
        insert @view (value) values ('    ActivityPartyBase.AddressUsed, ')

        insert @view (value) values ('    case ActivityPartyBase.PartyObjectTypeCode')
        insert @view (value)
        select '        when ' + cast(ObjectTypeCode as nvarchar) + ' then ' + BaseTableName + '.DoNotEMail'
        from EntityView e join AttributeView a on e.EntityId = a.EntityId
        where e.IsActivityParty = 1 and a.Name = 'donotemail'
        order by ObjectTypeCode
        insert @view (value) values ('        else null')
        insert @view (value) values ('    end,')

        insert @view (value) values ('    case ActivityPartyBase.PartyObjectTypeCode')
        insert @view (value)
        select '        when ' + cast(ObjectTypeCode as nvarchar) + ' then ' + BaseTableName + '.DoNotFax'
        from EntityView e join AttributeView a on e.EntityId = a.EntityId
        where e.IsActivityParty = 1 and a.Name = 'donotfax'
        order by ObjectTypeCode
        insert @view (value) values ('        else null')
        insert @view (value) values ('    end,')

	insert @view (value) values ('    case ActivityPartyBase.PartyObjectTypeCode')
        insert @view (value)
        select '        when ' + cast(ObjectTypeCode as nvarchar) + ' then ' + BaseTableName + '.DoNotPostalMail'
        from EntityView e join AttributeView a on e.EntityId = a.EntityId
        where e.IsActivityParty = 1 and a.Name = 'donotpostalmail'
        order by ObjectTypeCode
        insert @view (value) values ('        else null')
        insert @view (value) values ('    end,')

	insert @view (value) values ('    case ActivityPartyBase.PartyObjectTypeCode')
        insert @view (value)
        select '        when ' + cast(ObjectTypeCode as nvarchar) + ' then ' + BaseTableName + '.DoNotPhone'
        from EntityView e join AttributeView a on e.EntityId = a.EntityId
        where e.IsActivityParty = 1 and a.Name = 'donotphone'
        order by ObjectTypeCode
        insert @view (value) values ('        else null')
        insert @view (value) values ('    end,')

        insert @view (value) values ('    ActivityPartyBase.PartyIdDsc,')
        insert @view (value) values ('    case ActivityPartyBase.PartyObjectTypeCode')
        insert @view (value) values ('        when 0 then ActivityPartyBase.AddressUsed')
        insert @view (value) values ('        else ActivityPartyBase.PartyIdName')
        insert @view (value) values ('    end,')

        insert @view (value) values ('    ActivityPartyBase.ExchangeEntryId,')

        insert @view (value) values ('    ActivityPartyBase.Effort,')
        insert @view (value) values ('    ActivityPartyBase.ResourceSpecId,')
        insert @view (value) values ('    ResourceSpecBase.Name,')
        insert @view (value) values ('    coalesce(ResourceSpecBase.DeletionStateCode, 2),')
        insert @view (value) values ('    AB.ScheduledStart,')
        insert @view (value) values ('    AB.ScheduledEnd,')
        insert @view (value) values ('    AB.OwningUser,')
        insert @view (value) values ('    AB.OwningBusinessUnit,')
        insert @view (value) values ('    ActivityPartyBase.VersionNumber ')
        insert @view (value) values ('from ')
        insert @view (value) values ('    ActivityPartyBase')
        insert @view (value) values ('     left outer join AccountBase on ActivityPartyBase.PartyObjectTypeCode = 1 and ActivityPartyBase.PartyId = AccountBase.AccountId')
        insert @view (value) values ('     left outer join ContactBase on ActivityPartyBase.PartyObjectTypeCode = 2 and ActivityPartyBase.PartyId = ContactBase.ContactId')
        insert @view (value) values ('     left outer join LeadBase on ActivityPartyBase.PartyObjectTypeCode = 4 and ActivityPartyBase.PartyId = LeadBase.LeadId')
     
        insert @view (value) values ('     left outer join ActivityPointerBase AB on ActivityPartyBase.ActivityId = AB.ActivityId ')
        insert @view (value) values ('     left outer join ResourceSpecBase on ActivityPartyBase.ResourceSpecId = ResourceSpecBase.ResourceSpecId')

        insert @view (value) values ('')
        insert @view (value) values ('go')
        insert @view (value) values ('')

        -- create the Commitment view associated with activitypartybase
        --
        insert @view (value) values ('if exists (select * from sysobjects where name = ''Commitment'' and xtype = ''V'')')
        insert @view (value) values ('begin')
        insert @view (value) values ('    drop view Commitment')
        insert @view (value) values ('end')
        insert @view (value) values ('go')
        insert @view (value) values ('')
        insert @view (value) values ('create view dbo.Commitment (')
        insert @view (value) values ('    CommitmentId,')
        insert @view (value) values ('    ActivityId, ')
        insert @view (value) values ('    ActivityTypeCode, ')
        insert @view (value) values ('    PartyId, ')
        insert @view (value) values ('    PartyObjectTypeCode, ')
        insert @view (value) values ('    ParticipationTypeMask, ')
        insert @view (value) values ('    Effort,')
        insert @view (value) values ('    ResourceSpecId,')
        insert @view (value) values ('    ServiceId,')
        insert @view (value) values ('    StateCode,')
        insert @view (value) values ('    StatusCode,')
        insert @view (value) values ('    ScheduledStart,')
        insert @view (value) values ('    ScheduledEnd,')
        insert @view (value) values ('    Subject')
        insert @view (value) values (') as ')
        insert @view (value) values ('select')
        insert @view (value) values ('    ActivityPartyBase.ActivityPartyId,')
        insert @view (value) values ('    ActivityPartyBase.ActivityId, ')
        insert @view (value) values ('    ActivityPointerBase.ActivityTypeCode,')
        insert @view (value) values ('    ActivityPartyBase.PartyId, ')
        insert @view (value) values ('    ActivityPartyBase.PartyObjectTypeCode, ')
        insert @view (value) values ('    ActivityPartyBase.ParticipationTypeMask, ')
        insert @view (value) values ('    ActivityPartyBase.Effort,')
        insert @view (value) values ('    ActivityPartyBase.ResourceSpecId,')
        insert @view (value) values ('    ActivityPointerBase.ServiceId,')
        insert @view (value) values ('    ActivityPointerBase.StateCode,')
        insert @view (value) values ('    ActivityPointerBase.StatusCode,')
        insert @view (value) values ('    ActivityPointerBase.ScheduledStart,')
        insert @view (value) values ('    ActivityPointerBase.ScheduledEnd,')
        insert @view (value) values ('    ActivityPointerBase.Subject')
        insert @view (value) values ('from ')
        insert @view (value) values ('    ActivityPartyBase join')
        insert @view (value) values ('    ActivityPointerBase on ActivityPartyBase.ActivityId = ActivityPointerBase.ActivityId ')
        insert @view (value) values ('where ActivityPointerBase.DeletionStateCode = 0')
        insert @view (value) values ('    and (ActivityPointerBase.ActivityTypeCode = 4214 or ActivityPointerBase.ActivityTypeCode = 4201)')
        insert @view (value) values ('    and (ActivityPartyBase.ParticipationTypeMask = 5')
        insert @view (value) values ('               or ActivityPartyBase.ParticipationTypeMask = 7')
        insert @view (value) values ('               or ActivityPartyBase.ParticipationTypeMask = 10)')
        insert @view (value) values ('')
        insert @view (value) values ('go')
    end

select value
from @view
order by line

/****** Object:  StoredProcedure [dbo].[p_DeleteEntityIndexes]    Script Date: 04/11/2008 06:35:03 ******/




create procedure [dbo].[p_DeleteEntityIndexes](@entityid uniqueidentifier) as
begin
set nocount on

declare @indexid uniqueidentifier

create table #indexes(indexid uniqueidentifier primary key clustered)

--
-- delete related indexes
--
declare indexCursor cursor FORWARD_ONLY READ_ONLY for
select ei.IndexId from EntityIndex ei where
ei.IndexId in (
	select ia.IndexId from IndexAttributes ia
	where ia.AttributeId in (
		select ReferencingAttributeId
		from RelationshipView 
		join AttributeView a on (a.AttributeId = ReferencingAttributeId and a.IsCustomField = 1)
		where ReferencedEntityId = @entityid
	)
)

open indexCursor
fetch next from indexCursor into @indexid
while (@@fetch_status = 0)
begin

exec p_DropOneIndex @indexid
insert into #indexes(indexid) values(@indexid)
fetch next from indexCursor into @indexid

end -- indexCursor
close indexCursor
deallocate indexCursor

--
-- now take care of the indexes on the current entity
--

declare indexCursor cursor FORWARD_ONLY READ_ONLY for
select IndexId from EntityIndex 
where EntityId = @entityid

open indexCursor
fetch next from indexCursor into @indexid
while (@@fetch_status = 0)
begin

exec p_DropOneIndex @indexid
insert into #indexes(indexid) values(@indexid)
fetch next from indexCursor into @indexid

end -- indexCursor

close indexCursor
deallocate indexCursor

delete from IndexAttributes where IndexId in (select indexid from #indexes)
delete from EntityIndex where IndexId in (select indexid from #indexes)

drop table #indexes

end

/****** Object:  StoredProcedure [dbo].[p_GetReferencingTables]    Script Date: 04/11/2008 06:35:16 ******/




create procedure [dbo].[p_GetReferencingTables](@entityid uniqueidentifier) as
set nocount on

 select
  e1.BaseTableName as ReferencingEntity, a1.PhysicalName as ReferencingAttribute,re.CascadeDelete, e1.IsActivity as IsActivity,e.BaseTableName,a.PhysicalName from  dbo.RelationshipView re, Entity e, Entity e1, Attribute a, Attribute a1 where
  re.ReferencedEntityId = @entityid
  and 
  re.ReferencedEntityId = e.EntityId
  and   re.ReferencingEntityId = e1.EntityId
  and a.EntityId = e.EntityId
  and a1.EntityId = e1.EntityId
  and   re.ReferencedAttributeId = a.AttributeId
  and   re.ReferencingAttributeId = a1.AttributeId
  and a1.IsLogical = 0
  and re.CascadeDelete in (1,2)

/****** Object:  StoredProcedure [dbo].[p_GetKeyMatchAttributes]    Script Date: 04/11/2008 06:35:14 ******/




create procedure [dbo].[p_GetKeyMatchAttributes](@entityid uniqueidentifier, @referencedentityid uniqueidentifier) as
set nocount on

select a1.Name, a2.Name, a2.PhysicalName, a2.LogicalName
from RelationshipView rel, AttributeView a1, AttributeView a2
where rel.ReferencingEntityId = @entityid
  and rel.ReferencingAttributeId = a1.AttributeId
  and rel.ReferencedAttributeId = a2.AttributeId
  and a1.EntityId = @referencedentityid

/****** Object:  StoredProcedure [dbo].[p_LoadAllAttributes]    Script Date: 04/11/2008 06:35:22 ******/




create procedure [dbo].[p_LoadAllAttributes]
(
    @retrieve_latest bit
)
as
begin
	set nocount on
	if(@retrieve_latest <> 0)
	begin
		select a1.*, 'typename' = at.Description, 'isquoted' = at.Quoted
		from AttributeLogicalView a1
		left outer join AttributeLogicalView a2 on
		(a1.AttributeId = a2.AttributeId and a1.AttributeRowId <> a2.AttributeRowId
		and a1.InProduction = 1)
		join AttributeTypes at on (a1.AttributeTypeId = at.AttributeTypeId)
		where a2.InProduction is null and a1.CustomizationLevel <> 2
		order by a1.EntityId, a1.ColumnNumber 
	end
	else
	begin
		select a.*, 'typename' = at.Description, 'isquoted' = at.Quoted    
		from AttributeView a join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)    
		order by a.EntityId, a.ColumnNumber 
	end
end

/****** Object:  StoredProcedure [dbo].[p_MDS_GetEntityAttributes]    Script Date: 04/11/2008 06:35:24 ******/




create procedure [dbo].[p_MDS_GetEntityAttributes] (@entity_id as uniqueidentifier) as
set nocount on

select
    'attributeid' = AttributeId,
    'attributetypeid' = AttributeTypeId,
    'name' = Name,
    'physicalname' = PhysicalName,
    'length' = Length,
    'isnullable' = IsNullable,
    'xmlabbreviation' = XmlAbbreviation,
    'entityid' = EntityId,
    'defaultvalue' = DefaultValue,
    'columnnumber' = ColumnNumber,
    'validforupdateapi' = ValidForUpdateAPI,
    'logicalname' = LogicalName,
    'isrequiredforgrid' = 0,
    'iscustomizable' = 0,
    'validforreadapi' = ValidForReadAPI,
    'validforcreateapi' = ValidForCreateAPI,
    'visibletoplatform' = VisibleToPlatform,
    'ispkattribute' = IsPKAttribute,
    'iscustomfield' = IsCustomField,
    'islogical' = IsLogical,
    'displaymask' = DisplayMask,
    'attributeof' = AttributeOf,
    'referencedentityobjecttypecode' = ReferencedEntityObjectTypeCode,
    'aggregateof' = AggregateOf,
    'sortattribute' = NULL,
    'typeattribute' = NULL
from AttributeView attribute
where EntityId = @entity_id
order by ColumnNumber
for	xml auto

/****** Object:  StoredProcedure [dbo].[p_GetNonKeyAttributes]    Script Date: 04/11/2008 06:35:15 ******/




create procedure [dbo].[p_GetNonKeyAttributes](@entityid uniqueidentifier) as
set nocount on

select a.*,
	'character-count' = case 
		when cast(at.Description as nvarchar) in ('nvarchar', 'nchar') then cast(a.Length / 2 as nvarchar) 
		when cast(at.Description as nvarchar) in ('varchar', 'char') then cast(a.Length as nvarchar) 
		else '' 
		end,
    'type' = at.Description,
    'isquoted' = at.Quoted
from AttributeView a join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)
where EntityId = @entityid
  and a.IsPKAttribute = 0
order by ColumnNumber

/****** Object:  StoredProcedure [dbo].[p_GetKeyAttributes]    Script Date: 04/11/2008 06:35:14 ******/




create procedure [dbo].[p_GetKeyAttributes](@entityid uniqueidentifier) as
set nocount on

select a.*,
	'character-count' = case 
		when cast(at.Description as nvarchar) in ('nvarchar', 'nchar') then cast(a.Length / 2 as nvarchar) 
		when cast(at.Description as nvarchar) in ('varchar', 'char') then cast(a.Length as nvarchar) 
		else '' 
		end,
    'type' = at.Description,
    'isquoted' = at.Quoted
from AttributeView a join AttributeTypes at on (a.AttributeTypeId = at.AttributeTypeId)
where EntityId = @entityid
  and a.IsPKAttribute = 1
order by ColumnNumber

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfYear]    Script Date: 04/11/2008 06:57:21 ******/




create function [dbo].[fn_BeginOfYear] ( 
  @DayUTC         datetime
)
returns datetime
as
begin
  declare @DayUserLocal datetime
  declare @DayFirst datetime
  set @DayUserLocal = dbo.fn_UTCToLocalTime(@DayUTC)
  set @DayFirst = dbo.fn_FirstDayOfMonth(@DayUserLocal, 1)  
  return dbo.fn_LocalTimeToUTC(@DayFirst)
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfMonth]    Script Date: 04/11/2008 06:57:20 ******/




create function [dbo].[fn_BeginOfMonth] ( 
  @DayUTC         datetime
)
returns datetime
as
begin
  declare @DayUserLocal datetime
  declare @DayFirst datetime
  set @DayUserLocal = dbo.fn_UTCToLocalTime(@DayUTC)
  set @DayFirst = dbo.fn_FirstDayOfMonth(@DayUserLocal, datepart(mm, @DayUserLocal))  
  return dbo.fn_LocalTimeToUTC(@DayFirst)
end

/****** Object:  UserDefinedFunction [dbo].[fn_LastXMonth]    Script Date: 04/11/2008 06:57:30 ******/




create function [dbo].[fn_LastXMonth] ( 
  @TodayUTC     datetime,
  @X		int
)
returns datetime
as
begin
  declare @ToDayUserLocal datetime
  declare @LastXMonthTodayUserLocal datetime
  set @ToDayUserLocal = dbo.fn_UTCToLocalTime(@TodayUTC)
  set @LastXMonthTodayUserLocal = dateadd(mm, -@X, @ToDayUserLocal)
  -- get to the begining of the day by removing the time
  set @LastXMonthTodayUserLocal = convert(datetime, convert(nvarchar, @LastXMonthTodayUserLocal, 112))
  return dbo.fn_LocalTimeToUTC(@LastXMonthTodayUserLocal)
end

/****** Object:  UserDefinedFunction [dbo].[fn_NextXYear]    Script Date: 04/11/2008 06:57:31 ******/




create function [dbo].[fn_NextXYear] ( 
  @TodayUTC     datetime,
  @X		int
)
returns datetime
as
begin
  declare @ToDayUserLocal datetime
  declare @NextXYearTomorrowUserLocal datetime
  set @ToDayUserLocal = dbo.fn_UTCToLocalTime(@TodayUTC)
  set @NextXYearTomorrowUserLocal = dateadd(yy, @X, @ToDayUserLocal)
  set @NextXYearTomorrowUserLocal = dateadd(dd, 1, @NextXYearTomorrowUserLocal)
  -- get to the begining of the day by removing the time
  set @NextXYearTomorrowUserLocal = convert(datetime, convert(nvarchar, @NextXYearTomorrowUserLocal, 112))
  return dbo.fn_LocalTimeToUTC(@NextXYearTomorrowUserLocal)
end

/****** Object:  UserDefinedFunction [dbo].[fn_LastXYear]    Script Date: 04/11/2008 06:57:30 ******/




create function [dbo].[fn_LastXYear] ( 
  @TodayUTC     datetime,
  @X		int
)
returns datetime
as
begin
  declare @ToDayUserLocal datetime
  declare @LastXYearTodayUserLocal datetime
  set @ToDayUserLocal = dbo.fn_UTCToLocalTime(@TodayUTC)
  set @LastXYearTodayUserLocal = dateadd(yy, -@X, @ToDayUserLocal)
  -- get to the begining of the day by removing the time
  set @LastXYearTodayUserLocal = convert(datetime, convert(nvarchar, @LastXYearTodayUserLocal, 112))
  return dbo.fn_LocalTimeToUTC(@LastXYearTodayUserLocal)
end

/****** Object:  UserDefinedFunction [dbo].[fn_NextXMonth]    Script Date: 04/11/2008 06:57:31 ******/




create function [dbo].[fn_NextXMonth] ( 
  @TodayUTC     datetime,
  @X		int
)
returns datetime
as
begin
  declare @ToDayUserLocal datetime
  declare @NextXMonthTomorrowUserLocal datetime
  set @ToDayUserLocal = dbo.fn_UTCToLocalTime(@TodayUTC)
  set @NextXMonthTomorrowUserLocal = dateadd(mm, @X, @ToDayUserLocal)
  set @NextXMonthTomorrowUserLocal = dateadd(dd, 1, @NextXMonthTomorrowUserLocal)
  -- get to the begining of the day by removing the time
  set @NextXMonthTomorrowUserLocal = convert(datetime, convert(nvarchar, @NextXMonthTomorrowUserLocal, 112))
  return dbo.fn_LocalTimeToUTC(@NextXMonthTomorrowUserLocal)
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfDay]    Script Date: 04/11/2008 06:57:18 ******/




create function [dbo].[fn_BeginOfDay] ( 
  @DayUTC         datetime
)
returns datetime
as
begin
  declare @DayUserLocal datetime
  declare @BDay datetime
  declare @BDayUTC datetime
  set @DayUserLocal = dbo.fn_UTCToLocalTime(@DayUTC)
  set @BDay = convert(datetime, convert(nvarchar, @DayUserLocal, 112))
  set @BDayUTC = dbo.fn_LocalTimeToUTC(@BDay) 
  return @BDayUTC
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfWeek]    Script Date: 04/11/2008 06:57:21 ******/




create function [dbo].[fn_BeginOfWeek] ( 
  @DayUTC         datetime
)
returns datetime
as
begin
  declare @DayUserLocal datetime
  declare @WeekStartDay int
  declare @DayDiffFromStart int 
  declare @BDayUTC datetime
  set @DayUserLocal = dbo.fn_UTCToLocalTime(@DayUTC)

  --- select the first day of the week from orgnization setting table
  select @WeekStartDay= og.WeekStartDayCode
	from OrganizationBase og, SystemUserBase su
	where su.SystemUserId = dbo.fn_FindUserGuid()
		and og.OrganizationId = su.OrganizationId

  --- calculate the first day diff from the first day
  set @DayDiffFromStart = (7 + ( dbo.fn_NTDayOfWeek(@DayUserLocal) - @WeekStartDay)) %7
 
  --- calculate the first day of the week
  set @BDayUTC = dbo.fn_BeginOfDay( dateadd(dd, 0 - @DayDiffFromStart, @DayUTC))
  return @BDayUTC
end

/****** Object:  StoredProcedure [dbo].[p_GenCascadeCollect]    Script Date: 04/11/2008 06:35:08 ******/




create proc [dbo].[p_GenCascadeCollect](@cascade_type varchar(40), @alter int)
as
begin
    set nocount on
    
    if(@cascade_type = 'CascadeDelete')
        exec p_GenCascadeDeleteCollect @alter
    else
        exec p_GenCascadeSecurityCollect @cascade_type, @alter
end

/****** Object:  UserDefinedFunction [dbo].[fn_GetFormatStrings]    Script Date: 04/11/2008 06:57:28 ******/




create function [dbo].[fn_GetFormatStrings]()
returns @FormatStrings table (
	DateFormat nvarchar(255),
	TimeFormat nvarchar(255),
	NumberLanguageCode nvarchar(10),
	CalendarType nvarchar(50),
	NumberFormat_0_Precision nvarchar(255),
	NumberFormat_1_Precision nvarchar(255),
	NumberFormat_2_Precision nvarchar(255),
	NumberFormat_3_Precision nvarchar(255),
	NumberFormat_4_Precision nvarchar(255),
	NumberFormat_5_Precision nvarchar(255),
	CurrencyFormat_0_Precision nvarchar(255),
	CurrencyFormat_1_Precision nvarchar(255),
	CurrencyFormat_2_Precision nvarchar(255),
	CurrencyFormat_3_Precision nvarchar(255),
	CurrencyFormat_4_Precision nvarchar(255),
	CurrencyFormat_5_Precision nvarchar(255)
)
as
begin
	declare @CurrencySymbol nvarchar(10)
	declare @CurrencyFormatCode int
	declare @NumberLocale int
	declare @CalendarType nvarchar(50)
	declare @NumberGroupFormat nvarchar(50)
	declare @NegativeFormatCode int
	declare @NegativeCurrencyFormatCode int
	declare @DateFormatString nvarchar(255)
	declare @TimeFormatString nvarchar(255)
	declare @NumberLanguageCode nvarchar(10)
	
	declare @s1 nvarchar(255)
	declare @s2 nvarchar(255)
	declare @s3 nvarchar(255)
	declare @s4 nvarchar(255)
	declare @s5 nvarchar(255)
	declare @s6 nvarchar(255)
	declare @s7 nvarchar(255)
	declare @s8 nvarchar(255)
	declare @s9 nvarchar(255)
	declare @s10 nvarchar(255)
	declare @s11 nvarchar(255)
	declare @s12 nvarchar(255)

	select top 1
		@CurrencySymbol =
		case o.currencydisplayoption
			when 0 then t.currencysymbol
			when 1 then t.isocurrencycode
			else t.currencysymbol
		end
	from
		FilteredOrganization AS o inner join
		FilteredTransactionCurrency AS t on o.basecurrencyid = t.transactioncurrencyid

	select top 1
		@CurrencyFormatCode = currencyformatcode,
		@NumberLocale = localeid,
		@CalendarType = 
		case calendartype
			when 1 then 'Japanese'
			when 2 then 'Korea'
			when 3 then 'Taiwan'
			when 4 then 'Gregorian US English'
			when 5 then 'Gregorian Arabic'
			when 6 then 'Gregorian Middle East French'
			when 7 then 'Gregorian Transliterated English'
			when 8 then 'Gregorian Transliterated French'
			else 'Gregorian'
		end,
		@NumberGroupFormat = numbergroupformat,
		@NegativeFormatCode = negativeformatcode,
		@NegativeCurrencyFormatCode = negativecurrencyformatcode,
		@DateFormatString = replace(dateformatstring, '/', '\' + dateseparator),
		@TimeFormatString = replace(timeformatstring, ':', '\' + timeseparator)
	from
		FilteredUserSettings
	where
		systemuserid = dbo.fn_FindUserGuid()

	set @NumberLanguageCode =
		case @NumberLocale
			when 1025 then 'ar-SA'
			when 1026 then 'bg-BG'
			when 1027 then 'ca-ES'
			when 1028 then 'zh-TW'
			when 1029 then 'cs-CZ'
			when 1030 then 'da-DK'
			when 1031 then 'de-DE'
			when 1032 then 'el-GR'
			when 1033 then 'en-US'
			when 1035 then 'fi-FI'
			when 1036 then 'fr-FR'
			when 1037 then 'he-IL'
			when 1038 then 'hu-HU'
			when 1039 then 'is-IS'
			when 1040 then 'it-IT'
			when 1041 then 'ja-JP'
			when 1042 then 'ko-KR'
			when 1043 then 'nl-NL'
			when 1044 then 'nb-NO'
			when 1045 then 'pl-PL'
			when 1046 then 'pt-BR'
			when 1047 then 'rm-CH'
			when 1048 then 'ro-RO'
			when 1049 then 'ru-RU'
			when 1050 then 'hr-HR'
			when 1051 then 'sk-SK'
			when 1052 then 'sq-AL'
			when 1053 then 'sv-SE'
			when 1054 then 'th-TH'
			when 1055 then 'tr-TR'
			when 1056 then 'ur-PK'
			when 1057 then 'id-ID'
			when 1058 then 'uk-UA'
			when 1059 then 'be-BY'
			when 1060 then 'sl-SI'
			when 1061 then 'et-EE'
			when 1062 then 'lv-LV'
			when 1063 then 'lt-LT'
			when 1065 then 'fa-IR'
			when 1066 then 'vi-VN'
			when 1067 then 'hy-AM'
			when 1068 then 'az-Latn-AZ'
			when 1069 then 'eu-ES'
			when 1071 then 'mk-MK'
			when 1074 then 'tn-ZA'
			when 1076 then 'xh-ZA'
			when 1077 then 'zu-ZA'
			when 1078 then 'af-ZA'
			when 1079 then 'ka-GE'
			when 1080 then 'fo-FO'
			when 1081 then 'hi-IN'
			when 1082 then 'mt-MT'
			when 1083 then 'se-NO'
			when 1086 then 'ms-MY'
			when 1087 then 'kk-KZ'
			when 1088 then 'ky-KG'
			when 1089 then 'sw-KE'
			when 1091 then 'uz-Latn-UZ'
			when 1092 then 'tt-RU'
			when 1094 then 'pa-IN'
			when 1095 then 'gu-IN'
			when 1097 then 'ta-IN'
			when 1098 then 'te-IN'
			when 1099 then 'kn-IN'
			when 1102 then 'mr-IN'
			when 1103 then 'sa-IN'
			when 1104 then 'mn-MN'
			when 1106 then 'cy-GB'
			when 1110 then 'gl-ES'
			when 1111 then 'kok-IN'
			when 1114 then 'syr-SY'
			when 1122 then 'fy-NL'
			when 1124 then 'fil-PH'
			when 1125 then 'dv-MV'
			when 1131 then 'quz-BO'
			when 1132 then 'ns-ZA'
			when 1134 then 'lb-LU'
			when 1146 then 'arn-CL'
			when 1148 then 'moh-CA'
			when 1153 then 'mi-NZ'
			when 2049 then 'ar-IQ'
			when 2052 then 'zh-CN'
			when 2055 then 'de-CH'
			when 2057 then 'en-GB'
			when 2058 then 'es-MX'
			when 2060 then 'fr-BE'
			when 2064 then 'it-CH'
			when 2067 then 'nl-BE'
			when 2068 then 'nn-NO'
			when 2070 then 'pt-PT'
			when 2074 then 'sr-Latn-CS'
			when 2077 then 'sv-FI'
			when 2092 then 'az-Cyrl-AZ'
			when 2107 then 'se-SE'
			when 2108 then 'ga-IE'
			when 2110 then 'ms-BN'
			when 2115 then 'uz-Cyrl-UZ'
			when 2141 then 'iu-Latn-CA'
			when 2155 then 'quz-EC'
			when 3073 then 'ar-EG'
			when 3076 then 'zh-HK'
			when 3079 then 'de-AT'
			when 3081 then 'en-AU'
			when 3082 then 'es-ES'
			when 3084 then 'fr-CA'
			when 3098 then 'sr-Cyrl-CS'
			when 3131 then 'se-FI'
			when 3179 then 'quz-PE'
			when 4097 then 'ar-LY'
			when 4100 then 'zh-SG'
			when 4103 then 'de-LU'
			when 4105 then 'en-CA'
			when 4106 then 'es-GT'
			when 4108 then 'fr-CH'
			when 4122 then 'hr-BA'
			when 4155 then 'smj-NO'
			when 5121 then 'ar-DZ'
			when 5124 then 'zh-MO'
			when 5127 then 'de-LI'
			when 5129 then 'en-NZ'
			when 5130 then 'es-CR'
			when 5132 then 'fr-LU'
			when 5146 then 'bs-Latn-BA'
			when 5179 then 'smj-SE'
			when 6145 then 'ar-MA'
			when 6153 then 'en-IE'
			when 6154 then 'es-PA'
			when 6156 then 'fr-MC'
			when 6170 then 'sr-Latn-BA'
			when 6203 then 'sma-NO'
			when 7169 then 'ar-TN'
			when 7177 then 'en-ZA'
			when 7178 then 'es-DO'
			when 7194 then 'sr-Cyrl-BA'
			when 7227 then 'sma-SE'
			when 8193 then 'ar-OM'
			when 8201 then 'en-JM'
			when 8202 then 'es-VE'
			when 8218 then 'bs-Cyrl-BA'
			when 8251 then 'sms-FI'
			when 9217 then 'ar-YE'
			when 9225 then 'en-029'
			when 9226 then 'es-CO'
			when 9275 then 'smn-FI'
			when 10241 then 'ar-SY'
			when 10249 then 'en-BZ'
			when 10250 then 'es-PE'
			when 11265 then 'ar-JO'
			when 11273 then 'en-TT'
			when 11274 then 'es-AR'
			when 12289 then 'ar-LB'
			when 12297 then 'en-ZW'
			when 12298 then 'es-EC'
			when 13313 then 'ar-KW'
			when 13321 then 'en-PH'
			when 13322 then 'es-CL'
			when 14337 then 'ar-AE'
			when 14346 then 'es-UY'
			when 15361 then 'ar-BH'
			when 15370 then 'es-PY'
			when 16385 then 'ar-QA'
			when 16394 then 'es-BO'
			when 17418 then 'es-SV'
			when 18442 then 'es-HN'
			when 19466 then 'es-NI'
			when 20490 then 'es-PR'
			else 'en-US'
		end

	select @s1 = dbo.fn_GetNumberFormatString(0, @NumberGroupFormat, @NegativeFormatCode, 0, default, default)
	select @s2 = dbo.fn_GetNumberFormatString(1, @NumberGroupFormat, @NegativeFormatCode, 0, default, default)
	select @s3 = dbo.fn_GetNumberFormatString(2, @NumberGroupFormat, @NegativeFormatCode, 0, default, default)
	select @s4 = dbo.fn_GetNumberFormatString(3, @NumberGroupFormat, @NegativeFormatCode, 0, default, default)
	select @s5 = dbo.fn_GetNumberFormatString(4, @NumberGroupFormat, @NegativeFormatCode, 0, default, default)
	select @s6 = dbo.fn_GetNumberFormatString(5, @NumberGroupFormat, @NegativeFormatCode, 0, default, default)
	
	select @s7 = dbo.fn_GetNumberFormatString(0, @NumberGroupFormat, @NegativeCurrencyFormatCode, 1, @CurrencySymbol, @CurrencyFormatCode)
	select @s8 = dbo.fn_GetNumberFormatString(1, @NumberGroupFormat, @NegativeCurrencyFormatCode, 1, @CurrencySymbol, @CurrencyFormatCode)
	select @s9 = dbo.fn_GetNumberFormatString(2, @NumberGroupFormat, @NegativeCurrencyFormatCode, 1, @CurrencySymbol, @CurrencyFormatCode)
	select @s10 = dbo.fn_GetNumberFormatString(3, @NumberGroupFormat, @NegativeCurrencyFormatCode, 1, @CurrencySymbol, @CurrencyFormatCode)
	select @s11 = dbo.fn_GetNumberFormatString(4, @NumberGroupFormat, @NegativeCurrencyFormatCode, 1, @CurrencySymbol, @CurrencyFormatCode)
	select @s12 = dbo.fn_GetNumberFormatString(5, @NumberGroupFormat, @NegativeCurrencyFormatCode, 1, @CurrencySymbol, @CurrencyFormatCode)

	insert 
		@FormatStrings
	values(
		@DateFormatString,
		@TimeFormatString,
		@NumberLanguageCode,
		@CalendarType,
		@s1, 
		@s2,
		@s3,
		@s4,
		@s5,
		@s6,
		@s7,
		@s8,
		@s9,
		@s10,
		@s11,
		@s12
	)

	return
end

/****** Object:  StoredProcedure [dbo].[p_CreateOneIndexInternal]    Script Date: 04/11/2008 06:35:02 ******/




create procedure [dbo].[p_CreateOneIndexInternal]
(
	@indexid uniqueidentifier, 
	@indexname sysname, 
	@entityid uniqueidentifier,
	@isclustered bit,
	@isunique bit,
	@fillfactor int
) as
begin
set nocount on
	-- create index for base table attributes
	exec p_CreateOneIndexHelper @indexid, @indexname, @entityid, @isclustered, @isunique, @fillfactor, 0
	-- create index for extension table attributes
	exec p_CreateOneIndexHelper @indexid, @indexname, @entityid, @isclustered, @isunique, @fillfactor, 1

end -- p_CreateOneIndexInternal

/****** Object:  StoredProcedure [dbo].[p_CreateOneIndex]    Script Date: 04/11/2008 06:35:01 ******/




create procedure [dbo].[p_CreateOneIndex](@indexid uniqueidentifier) as
begin
set nocount on

declare @indexname sysname
declare @entityid uniqueidentifier
declare @isclustered bit
declare @isunique bit
declare @fillfactor int

select @indexname = Name, @entityid = EntityId, @isclustered = IsClustered, @isunique = IsUnique, @fillfactor = SqlFillFactor
from EntityIndex
where IndexId = @indexid

exec p_CreateOneIndexHelper @indexid, @indexname, @entityid, @isclustered, @isunique, @fillfactor, 0
exec p_CreateOneIndexHelper @indexid, @indexname, @entityid, @isclustered, @isunique, @fillfactor, 1

end -- p_CreateOneIndex

/****** Object:  StoredProcedure [dbo].[p_BulkDelete]    Script Date: 04/11/2008 06:34:56 ******/
SET ANSI_NULLS OFF



create procedure [dbo].[p_BulkDelete] as
begin
	-- get all the unique otcs collected in the temp table.
	declare @EntityCode int
	-- check if the entity requires special casing.
	declare @DbCascadeMask int

	-- special casing for calendar delete
	exec p_DeleteCalendar 

	declare otccursor cursor for 
	select distinct objecttype from #CascadeCollect 

	open otccursor
	fetch otccursor into @EntityCode

	while @@fetch_status = 0
	begin
		select @DbCascadeMask = DbCascadeMask
		from EntityView as Entity
		where Entity.ObjectTypeCode = @EntityCode
	
		if @DbCascadeMask <> 0
		begin
		    exec p_BulkDeleteGeneric @EntityCode
		end

		fetch otccursor into @EntityCode
	end
	CLOSE otccursor
	DEALLOCATE otccursor
	
	
	-- Return the count of entity instances that are still not deleted (because they
	-- require platform bizlogic/special casing. 
    select count(*) as NotDeletedCount from #CascadeCollect where processed = 2
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfLastXDay]    Script Date: 04/11/2008 06:57:19 ******/




create function [dbo].[fn_BeginOfLastXDay] ( 
  @TodayUTC     datetime,
  @X		int
)
returns datetime
as
begin
  return dbo.fn_BeginOfDay(dateadd(dd, -@X, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfNextXDay]    Script Date: 04/11/2008 06:57:25 ******/




create function [dbo].[fn_EndOfNextXDay] ( 
  @TodayUTC     datetime,
  @X		int
)
returns datetime
as
begin
  return dbo.fn_BeginOfDay(dateadd(dd, @X+1, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfLastXWeek]    Script Date: 04/11/2008 06:57:19 ******/




create function [dbo].[fn_BeginOfLastXWeek] ( 
  @TodayUTC     datetime,
  @X		int
)
returns datetime
as
begin
  return dbo.fn_BeginOfDay(dateadd(dd, -7*@X, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfNextXWeek]    Script Date: 04/11/2008 06:57:26 ******/




create function [dbo].[fn_EndOfNextXWeek] ( 
  @TodayUTC     datetime,
  @X		int
)
returns datetime
as
begin
  return dbo.fn_BeginOfDay(dateadd(dd, 7*@X+1, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfNextSevenDay]    Script Date: 04/11/2008 06:57:25 ******/




create function [dbo].[fn_EndOfNextSevenDay](
  @TodayUTC	datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfDay(dateadd(dd, 8, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfLastSevenDay]    Script Date: 04/11/2008 06:57:18 ******/




create function [dbo].[fn_BeginOfLastSevenDay](
  @TodayUTC	datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfDay(dateadd(dd, -7, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfTomorrow]    Script Date: 04/11/2008 06:57:27 ******/




create function [dbo].[fn_EndOfTomorrow](
  @TodayUTC	datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfDay(dateadd(dd, 2, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfYesterday]    Script Date: 04/11/2008 06:57:27 ******/




create function [dbo].[fn_EndOfYesterday](
  @TodayUTC	datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfDay(@TodayUTC)
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfYesterday]    Script Date: 04/11/2008 06:57:22 ******/




create function [dbo].[fn_BeginOfYesterday](
  @TodayUTC	datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfDay(dateadd(dd, -1, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfToday]    Script Date: 04/11/2008 06:57:26 ******/




create function [dbo].[fn_EndOfToday](
  @TodayUTC	datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfDay(dateadd(dd, 1, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfToday]    Script Date: 04/11/2008 06:57:21 ******/




create function [dbo].[fn_BeginOfToday] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfDay(@TodayUTC)
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfLastMonth]    Script Date: 04/11/2008 06:57:18 ******/




create function [dbo].[fn_BeginOfLastMonth] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfMonth(dateadd(mm, -1, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfThisMonth]    Script Date: 04/11/2008 06:57:20 ******/




create function [dbo].[fn_BeginOfThisMonth] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfMonth(@TodayUTC)
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfThisMonth]    Script Date: 04/11/2008 06:57:26 ******/




create function [dbo].[fn_EndOfThisMonth] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfMonth(dateadd(mm, 1 , @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfLastMonth]    Script Date: 04/11/2008 06:57:24 ******/




create function [dbo].[fn_EndOfLastMonth] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfMonth(@TodayUTC)
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfNextMonth]    Script Date: 04/11/2008 06:57:20 ******/




create function [dbo].[fn_BeginOfNextMonth] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfMonth(dateadd(mm, 1, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfNextMonth]    Script Date: 04/11/2008 06:57:24 ******/




create function [dbo].[fn_EndOfNextMonth] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfMonth(dateadd(mm, 2, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfThisYear]    Script Date: 04/11/2008 06:57:26 ******/




create function [dbo].[fn_EndOfThisYear] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfYear(dateadd(yy, 1 , @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfThisYear]    Script Date: 04/11/2008 06:57:21 ******/




create function [dbo].[fn_BeginOfThisYear] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfYear(@TodayUTC)
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfNextYear]    Script Date: 04/11/2008 06:57:26 ******/




create function [dbo].[fn_EndOfNextYear] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfYear(dateadd(yy, 2, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfNextYear]    Script Date: 04/11/2008 06:57:20 ******/




create function [dbo].[fn_BeginOfNextYear] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfYear(dateadd(yy, 1, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfLastYear]    Script Date: 04/11/2008 06:57:19 ******/




create function [dbo].[fn_BeginOfLastYear] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfYear(dateadd(yy, -1, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfLastYear]    Script Date: 04/11/2008 06:57:24 ******/




create function [dbo].[fn_EndOfLastYear] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfYear(@TodayUTC)
end

/****** Object:  StoredProcedure [dbo].[p_DropIndexesForAttribute]    Script Date: 04/11/2008 06:35:07 ******/




create procedure [dbo].[p_DropIndexesForAttribute](@attributeid uniqueidentifier) as
begin
set nocount on

declare @indexid uniqueidentifier

-- cursor on IndexAttributes table
declare indexCursor cursor FORWARD_ONLY READ_ONLY for
	select IndexId
	from IndexAttributes
	where AttributeId = @attributeid

open indexCursor
fetch next from indexCursor into @indexid

while (@@fetch_status = 0)
begin

    exec p_DropOneIndex @indexid

    -- Mark index for recreation    
    update EntityIndex set RecreateIndex = 1 where IndexId = @indexid

	fetch next from indexCursor into @indexid

end -- indexCursor
close indexCursor
deallocate indexCursor

end -- p_DropIndexesForAttribute

/****** Object:  StoredProcedure [dbo].[p_DropIndexes]    Script Date: 04/11/2008 06:35:07 ******/




create procedure [dbo].[p_DropIndexes] as
begin
set nocount on

declare @indexid uniqueidentifier
declare @indexname sysname
declare @entityid uniqueidentifier
declare @isclustered bit
declare @isunique bit
declare @fillfactor int

-- same cursor as in p_CreateIndexes
declare indexCursor cursor FORWARD_ONLY READ_ONLY for
	select IndexId, Name, EntityId, IsClustered, IsUnique, SqlFillFactor
	from EntityIndex
	where IsPrimaryKey = 0
	order by EntityId, IsClustered desc

open indexCursor
fetch next from indexCursor into @indexid, @indexname, @entityid, @isclustered, @isunique, @fillfactor

while (@@fetch_status = 0)
begin

    exec p_DropOneIndex @indexid

	fetch next from indexCursor into @indexid, @indexname, @entityid, @isclustered, @isunique, @fillfactor

end -- indexCursor
close indexCursor
deallocate indexCursor

end -- p_DropIndexes

/****** Object:  StoredProcedure [dbo].[p_RecreateIndexes]    Script Date: 04/11/2008 06:35:27 ******/




create procedure [dbo].[p_RecreateIndexes] as
begin
set nocount on

--
-- get a snapshot of indexes to recreate
-- explicitly skip clustered indexes
--
create table #recreate(indexid uniqueidentifier primary key clustered)
insert into #recreate(indexid) select IndexId from EntityIndex where RecreateIndex <> 0 and IsClustered = 0

declare @indexid uniqueidentifier
declare indexCursor cursor FORWARD_ONLY READ_ONLY for select indexid from #recreate
open indexCursor
fetch next from indexCursor into @indexid
while (@@fetch_status = 0)
begin

exec p_DropOneIndex @indexid
exec p_CreateOneIndex @indexid

fetch next from indexCursor into @indexid

end -- indexCursor
close indexCursor
deallocate indexCursor

update EntityIndex set RecreateIndex = 0 where IndexId in (select indexid from #recreate)
drop table #recreate

end -- p_RecreateIndexes

/****** Object:  StoredProcedure [dbo].[p_CreateIndexes]    Script Date: 04/11/2008 06:35:01 ******/




create procedure [dbo].[p_CreateIndexes] as
begin
set nocount on

declare @indexid uniqueidentifier
declare @indexname sysname
declare @entityid uniqueidentifier
declare @isclustered bit
declare @isunique bit
declare @fillfactor int

declare indexCursor cursor FORWARD_ONLY READ_ONLY for
	select IndexId, Name, EntityId, IsClustered, IsUnique, SqlFillFactor
	from EntityIndex
	where IsPrimaryKey = 0
	order by EntityId, IsClustered desc

open indexCursor
fetch next from indexCursor into @indexid, @indexname, @entityid, @isclustered, @isunique, @fillfactor

while (@@fetch_status = 0)
begin

	exec p_CreateOneIndexInternal @indexid, @indexname, @entityid, @isclustered, @isunique, @fillfactor
	-- REVIEW: need to find a way to log stuff

	fetch next from indexCursor into @indexid, @indexname, @entityid, @isclustered, @isunique, @fillfactor

end -- indexCursor
close indexCursor
deallocate indexCursor

end -- p_CreateIndexes

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfTomorrow]    Script Date: 04/11/2008 06:57:21 ******/




create function [dbo].[fn_BeginOfTomorrow](
  @TodayUTC	datetime
)
returns datetime
as
begin
  return dbo.fn_EndOfToday(@TodayUTC)
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfThisWeek]    Script Date: 04/11/2008 06:57:21 ******/




create function [dbo].[fn_BeginOfThisWeek] ( 
  @TodayUTC	datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfWeek(@TodayUTC)
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfThisWeek]    Script Date: 04/11/2008 06:57:26 ******/




create function [dbo].[fn_EndOfThisWeek] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfWeek(dateadd(dd, 7 , @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfLastWeek]    Script Date: 04/11/2008 06:57:19 ******/




create function [dbo].[fn_BeginOfLastWeek] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfWeek(dateadd(dd, -7, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_BeginOfNextWeek]    Script Date: 04/11/2008 06:57:20 ******/




create function [dbo].[fn_BeginOfNextWeek] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfWeek(dateadd(dd, 7, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfNextWeek]    Script Date: 04/11/2008 06:57:25 ******/




create function [dbo].[fn_EndOfNextWeek] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfWeek(dateadd(dd, 14, @TodayUTC))
end

/****** Object:  UserDefinedFunction [dbo].[fn_EndOfLastWeek]    Script Date: 04/11/2008 06:57:24 ******/




create function [dbo].[fn_EndOfLastWeek] ( 
  @TodayUTC         datetime
)
returns datetime
as
begin
  return dbo.fn_BeginOfWeek(@TodayUTC)
end

/****** Object:  Check [relationship_cascade_flag_values]    Script Date: 04/11/2008 06:57:09 ******/
ALTER TABLE [MetadataSchema].[Relationship]  WITH CHECK ADD  CONSTRAINT [relationship_cascade_flag_values] CHECK  ((([CascadeDelete] IS NULL OR [CascadeDelete]>=(0) AND [CascadeDelete]<(4)) AND ([CascadeAssign] IS NULL OR [CascadeAssign]>=(0) AND [CascadeAssign]<(6)) AND ([CascadeShare] IS NULL OR [CascadeShare]>=(0) AND [CascadeShare]<(6)) AND ([CascadeUnShare] IS NULL OR [CascadeUnShare]>=(0) AND [CascadeUnShare]<(6)) AND ([CascadeMerge] IS NULL OR [CascadeMerge]>=(0) AND [CascadeMerge]<(4)) AND ([CascadeReparent] IS NULL OR [CascadeReparent]>=(0) AND [CascadeReparent]<(6))))

ALTER TABLE [MetadataSchema].[Relationship] CHECK CONSTRAINT [relationship_cascade_flag_values]

/****** Object:  Check [extra_condition_condition_op_values]    Script Date: 04/11/2008 06:57:12 ******/
ALTER TABLE [MetadataSchema].[RelationshipExtraCondition]  WITH CHECK ADD  CONSTRAINT [extra_condition_condition_op_values] CHECK  (([ConditionOp]>=(0) AND [ConditionOp]<(6)))

ALTER TABLE [MetadataSchema].[RelationshipExtraCondition] CHECK CONSTRAINT [extra_condition_condition_op_values]

/****** Object:  ForeignKey [account_master_account]    Script Date: 04/11/2008 06:35:57 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [account_master_account] FOREIGN KEY([MasterId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [account_master_account]

/****** Object:  ForeignKey [account_originating_lead]    Script Date: 04/11/2008 06:35:57 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [account_originating_lead] FOREIGN KEY([OriginatingLeadId])
REFERENCES [dbo].[LeadBase] ([LeadId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [account_originating_lead]

/****** Object:  ForeignKey [account_parent_account]    Script Date: 04/11/2008 06:35:57 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [account_parent_account] FOREIGN KEY([ParentAccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [account_parent_account]

/****** Object:  ForeignKey [account_primary_contact]    Script Date: 04/11/2008 06:35:57 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [account_primary_contact] FOREIGN KEY([PrimaryContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [account_primary_contact]

/****** Object:  ForeignKey [business_unit_accounts]    Script Date: 04/11/2008 06:35:57 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_accounts] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [business_unit_accounts]

/****** Object:  ForeignKey [equipment_accounts]    Script Date: 04/11/2008 06:35:58 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [equipment_accounts] FOREIGN KEY([PreferredEquipmentId])
REFERENCES [dbo].[EquipmentBase] ([EquipmentId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [equipment_accounts]

/****** Object:  ForeignKey [price_level_accounts]    Script Date: 04/11/2008 06:35:58 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [price_level_accounts] FOREIGN KEY([DefaultPriceLevelId])
REFERENCES [dbo].[PriceLevelBase] ([PriceLevelId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [price_level_accounts]

/****** Object:  ForeignKey [service_accounts]    Script Date: 04/11/2008 06:35:58 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [service_accounts] FOREIGN KEY([PreferredServiceId])
REFERENCES [dbo].[ServiceBase] ([ServiceId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [service_accounts]

/****** Object:  ForeignKey [system_user_accounts]    Script Date: 04/11/2008 06:35:58 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_accounts] FOREIGN KEY([PreferredSystemUserId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [system_user_accounts]

/****** Object:  ForeignKey [team_accounts]    Script Date: 04/11/2008 06:35:58 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [team_accounts] FOREIGN KEY([OwningTeam])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [team_accounts]

/****** Object:  ForeignKey [territory_accounts]    Script Date: 04/11/2008 06:35:58 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [territory_accounts] FOREIGN KEY([TerritoryId])
REFERENCES [dbo].[TerritoryBase] ([TerritoryId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [territory_accounts]

/****** Object:  ForeignKey [transactioncurrency_account]    Script Date: 04/11/2008 06:35:59 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_account] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [transactioncurrency_account]

/****** Object:  ForeignKey [user_accounts]    Script Date: 04/11/2008 06:35:59 ******/
ALTER TABLE [dbo].[AccountBase]  WITH NOCHECK ADD  CONSTRAINT [user_accounts] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountBase] CHECK CONSTRAINT [user_accounts]

/****** Object:  ForeignKey [account_leads]    Script Date: 04/11/2008 06:36:01 ******/
ALTER TABLE [dbo].[AccountLeads]  WITH NOCHECK ADD  CONSTRAINT [account_leads] FOREIGN KEY([AccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountLeads] CHECK CONSTRAINT [account_leads]

/****** Object:  ForeignKey [lead_accounts]    Script Date: 04/11/2008 06:36:02 ******/
ALTER TABLE [dbo].[AccountLeads]  WITH NOCHECK ADD  CONSTRAINT [lead_accounts] FOREIGN KEY([LeadId])
REFERENCES [dbo].[LeadBase] ([LeadId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AccountLeads] CHECK CONSTRAINT [lead_accounts]

/****** Object:  ForeignKey [activity_pointer_activity_mime_attachments]    Script Date: 04/11/2008 06:36:05 ******/
ALTER TABLE [dbo].[ActivityMimeAttachment]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_activity_mime_attachments] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ActivityMimeAttachment] CHECK CONSTRAINT [activity_pointer_activity_mime_attachments]

/****** Object:  ForeignKey [ActivityPartyResourceSpec]    Script Date: 04/11/2008 06:36:09 ******/
ALTER TABLE [dbo].[ActivityPartyBase]  WITH NOCHECK ADD  CONSTRAINT [ActivityPartyResourceSpec] FOREIGN KEY([ResourceSpecId])
REFERENCES [dbo].[ResourceSpecBase] ([ResourceSpecId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ActivityPartyBase] CHECK CONSTRAINT [ActivityPartyResourceSpec]

/****** Object:  ForeignKey [activitypointer_activity_parties]    Script Date: 04/11/2008 06:36:09 ******/
ALTER TABLE [dbo].[ActivityPartyBase]  WITH NOCHECK ADD  CONSTRAINT [activitypointer_activity_parties] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ActivityPartyBase] CHECK CONSTRAINT [activitypointer_activity_parties]

/****** Object:  ForeignKey [business_unit_activitypointer]    Script Date: 04/11/2008 06:36:20 ******/
ALTER TABLE [dbo].[ActivityPointerBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_activitypointer] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ActivityPointerBase] CHECK CONSTRAINT [business_unit_activitypointer]

/****** Object:  ForeignKey [service_activity_pointers]    Script Date: 04/11/2008 06:36:20 ******/
ALTER TABLE [dbo].[ActivityPointerBase]  WITH NOCHECK ADD  CONSTRAINT [service_activity_pointers] FOREIGN KEY([ServiceId])
REFERENCES [dbo].[ServiceBase] ([ServiceId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ActivityPointerBase] CHECK CONSTRAINT [service_activity_pointers]

/****** Object:  ForeignKey [user_activity]    Script Date: 04/11/2008 06:36:20 ******/
ALTER TABLE [dbo].[ActivityPointerBase]  WITH NOCHECK ADD  CONSTRAINT [user_activity] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ActivityPointerBase] CHECK CONSTRAINT [user_activity]

/****** Object:  ForeignKey [annotation_owning_user]    Script Date: 04/11/2008 06:36:28 ******/
ALTER TABLE [dbo].[AnnotationBase]  WITH NOCHECK ADD  CONSTRAINT [annotation_owning_user] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AnnotationBase] CHECK CONSTRAINT [annotation_owning_user]

/****** Object:  ForeignKey [business_unit_annotations]    Script Date: 04/11/2008 06:36:28 ******/
ALTER TABLE [dbo].[AnnotationBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_annotations] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AnnotationBase] CHECK CONSTRAINT [business_unit_annotations]

/****** Object:  ForeignKey [team_annotations]    Script Date: 04/11/2008 06:36:28 ******/
ALTER TABLE [dbo].[AnnotationBase]  WITH NOCHECK ADD  CONSTRAINT [team_annotations] FOREIGN KEY([OwningTeam])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AnnotationBase] CHECK CONSTRAINT [team_annotations]

/****** Object:  ForeignKey [organization_applicationfile]    Script Date: 04/11/2008 06:36:31 ******/
ALTER TABLE [dbo].[ApplicationFileBase]  WITH NOCHECK ADD  CONSTRAINT [organization_applicationfile] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ApplicationFileBase] CHECK CONSTRAINT [organization_applicationfile]

/****** Object:  ForeignKey [activity_pointer_appointment]    Script Date: 04/11/2008 06:36:34 ******/
ALTER TABLE [dbo].[AppointmentBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_appointment] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AppointmentBase] CHECK CONSTRAINT [activity_pointer_appointment]

/****** Object:  ForeignKey [business_unit_asyncoperation]    Script Date: 04/11/2008 06:36:47 ******/
ALTER TABLE [dbo].[AsyncOperationBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_asyncoperation] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AsyncOperationBase] CHECK CONSTRAINT [business_unit_asyncoperation]

/****** Object:  ForeignKey [lk_asyncoperation_workflowactivationid]    Script Date: 04/11/2008 06:36:47 ******/
ALTER TABLE [dbo].[AsyncOperationBase]  WITH NOCHECK ADD  CONSTRAINT [lk_asyncoperation_workflowactivationid] FOREIGN KEY([WorkflowActivationId])
REFERENCES [dbo].[WorkflowBase] ([WorkflowId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AsyncOperationBase] CHECK CONSTRAINT [lk_asyncoperation_workflowactivationid]

/****** Object:  ForeignKey [system_user_asyncoperation]    Script Date: 04/11/2008 06:36:48 ******/
ALTER TABLE [dbo].[AsyncOperationBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_asyncoperation] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AsyncOperationBase] CHECK CONSTRAINT [system_user_asyncoperation]

/****** Object:  ForeignKey [attribute_map_attribute_maps]    Script Date: 04/11/2008 06:36:53 ******/
ALTER TABLE [dbo].[AttributeMapBase]  WITH NOCHECK ADD  CONSTRAINT [attribute_map_attribute_maps] FOREIGN KEY([ParentAttributeMapId])
REFERENCES [dbo].[AttributeMapBase] ([AttributeMapId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AttributeMapBase] CHECK CONSTRAINT [attribute_map_attribute_maps]

/****** Object:  ForeignKey [createdby_attributemap]    Script Date: 04/11/2008 06:36:53 ******/
ALTER TABLE [dbo].[AttributeMapBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_attributemap] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AttributeMapBase] CHECK CONSTRAINT [createdby_attributemap]

/****** Object:  ForeignKey [entity_map_attribute_maps]    Script Date: 04/11/2008 06:36:53 ******/
ALTER TABLE [dbo].[AttributeMapBase]  WITH NOCHECK ADD  CONSTRAINT [entity_map_attribute_maps] FOREIGN KEY([EntityMapId])
REFERENCES [dbo].[EntityMapBase] ([EntityMapId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AttributeMapBase] CHECK CONSTRAINT [entity_map_attribute_maps]

/****** Object:  ForeignKey [modifiedby_attributemap]    Script Date: 04/11/2008 06:36:53 ******/
ALTER TABLE [dbo].[AttributeMapBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_attributemap] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AttributeMapBase] CHECK CONSTRAINT [modifiedby_attributemap]

/****** Object:  ForeignKey [organization_attributemap]    Script Date: 04/11/2008 06:36:53 ******/
ALTER TABLE [dbo].[AttributeMapBase]  WITH NOCHECK ADD  CONSTRAINT [organization_attributemap] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[AttributeMapBase] CHECK CONSTRAINT [organization_attributemap]

/****** Object:  ForeignKey [BulkDeleteOperation_BulkDeleteFailure]    Script Date: 04/11/2008 06:37:01 ******/
ALTER TABLE [dbo].[BulkDeleteFailureBase]  WITH NOCHECK ADD  CONSTRAINT [BulkDeleteOperation_BulkDeleteFailure] FOREIGN KEY([BulkDeleteOperationId])
REFERENCES [dbo].[BulkDeleteOperationBase] ([BulkDeleteOperationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BulkDeleteFailureBase] CHECK CONSTRAINT [BulkDeleteOperation_BulkDeleteFailure]

/****** Object:  ForeignKey [AsyncOperation_BulkDeleteOperation]    Script Date: 04/11/2008 06:37:06 ******/
ALTER TABLE [dbo].[BulkDeleteOperationBase]  WITH NOCHECK ADD  CONSTRAINT [AsyncOperation_BulkDeleteOperation] FOREIGN KEY([AsyncOperationId])
REFERENCES [dbo].[AsyncOperationBase] ([AsyncOperationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BulkDeleteOperationBase] CHECK CONSTRAINT [AsyncOperation_BulkDeleteOperation]

/****** Object:  ForeignKey [activity_pointer_BulkOperation]    Script Date: 04/11/2008 06:37:10 ******/
ALTER TABLE [dbo].[BulkOperationBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_BulkOperation] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BulkOperationBase] CHECK CONSTRAINT [activity_pointer_BulkOperation]

/****** Object:  ForeignKey [BulkOperation_logs]    Script Date: 04/11/2008 06:37:13 ******/
ALTER TABLE [dbo].[BulkOperationLogBase]  WITH NOCHECK ADD  CONSTRAINT [BulkOperation_logs] FOREIGN KEY([BulkOperationId])
REFERENCES [dbo].[BulkOperationBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BulkOperationLogBase] CHECK CONSTRAINT [BulkOperation_logs]

/****** Object:  ForeignKey [businesstask_parent_businesstask]    Script Date: 04/11/2008 06:37:19 ******/
ALTER TABLE [dbo].[BusinessTaskBase]  WITH NOCHECK ADD  CONSTRAINT [businesstask_parent_businesstask] FOREIGN KEY([ParentBusinessTaskId])
REFERENCES [dbo].[BusinessTaskBase] ([BusinessTaskId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BusinessTaskBase] CHECK CONSTRAINT [businesstask_parent_businesstask]

/****** Object:  ForeignKey [organization_businesstask]    Script Date: 04/11/2008 06:37:19 ******/
ALTER TABLE [dbo].[BusinessTaskBase]  WITH NOCHECK ADD  CONSTRAINT [organization_businesstask] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BusinessTaskBase] CHECK CONSTRAINT [organization_businesstask]

/****** Object:  ForeignKey [business_unit_parent_business_unit]    Script Date: 04/11/2008 06:37:28 ******/
ALTER TABLE [dbo].[BusinessUnitBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_parent_business_unit] FOREIGN KEY([ParentBusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BusinessUnitBase] CHECK CONSTRAINT [business_unit_parent_business_unit]

/****** Object:  ForeignKey [BusinessUnit_Calendar]    Script Date: 04/11/2008 06:37:28 ******/
ALTER TABLE [dbo].[BusinessUnitBase]  WITH NOCHECK ADD  CONSTRAINT [BusinessUnit_Calendar] FOREIGN KEY([CalendarId])
REFERENCES [dbo].[CalendarBase] ([CalendarId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BusinessUnitBase] CHECK CONSTRAINT [BusinessUnit_Calendar]

/****** Object:  ForeignKey [organization_business_units]    Script Date: 04/11/2008 06:37:29 ******/
ALTER TABLE [dbo].[BusinessUnitBase]  WITH NOCHECK ADD  CONSTRAINT [organization_business_units] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BusinessUnitBase] CHECK CONSTRAINT [organization_business_units]

/****** Object:  ForeignKey [bizmap_businessid_businessunit]    Script Date: 04/11/2008 06:37:31 ******/
ALTER TABLE [dbo].[BusinessUnitMap]  WITH NOCHECK ADD  CONSTRAINT [bizmap_businessid_businessunit] FOREIGN KEY([BusinessId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BusinessUnitMap] CHECK CONSTRAINT [bizmap_businessid_businessunit]

/****** Object:  ForeignKey [bizmap_subbusinessid_businessunit]    Script Date: 04/11/2008 06:37:31 ******/
ALTER TABLE [dbo].[BusinessUnitMap]  WITH NOCHECK ADD  CONSTRAINT [bizmap_subbusinessid_businessunit] FOREIGN KEY([SubBusinessId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BusinessUnitMap] CHECK CONSTRAINT [bizmap_subbusinessid_businessunit]

/****** Object:  ForeignKey [organization_business_unit_news_articles]    Script Date: 04/11/2008 06:37:37 ******/
ALTER TABLE [dbo].[BusinessUnitNewsArticleBase]  WITH NOCHECK ADD  CONSTRAINT [organization_business_unit_news_articles] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[BusinessUnitNewsArticleBase] CHECK CONSTRAINT [organization_business_unit_news_articles]

/****** Object:  ForeignKey [business_unit_calendars]    Script Date: 04/11/2008 06:37:41 ******/
ALTER TABLE [dbo].[CalendarBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_calendars] FOREIGN KEY([BusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CalendarBase] CHECK CONSTRAINT [business_unit_calendars]

/****** Object:  ForeignKey [organization_calendars]    Script Date: 04/11/2008 06:37:42 ******/
ALTER TABLE [dbo].[CalendarBase]  WITH NOCHECK ADD  CONSTRAINT [organization_calendars] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CalendarBase] CHECK CONSTRAINT [organization_calendars]

/****** Object:  ForeignKey [calendar_calendar_rules]    Script Date: 04/11/2008 06:37:51 ******/
ALTER TABLE [dbo].[CalendarRuleBase]  WITH NOCHECK ADD  CONSTRAINT [calendar_calendar_rules] FOREIGN KEY([CalendarId])
REFERENCES [dbo].[CalendarBase] ([CalendarId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CalendarRuleBase] CHECK CONSTRAINT [calendar_calendar_rules]

/****** Object:  ForeignKey [inner_calendar_calendar_rules]    Script Date: 04/11/2008 06:37:51 ******/
ALTER TABLE [dbo].[CalendarRuleBase]  WITH NOCHECK ADD  CONSTRAINT [inner_calendar_calendar_rules] FOREIGN KEY([InnerCalendarId])
REFERENCES [dbo].[CalendarBase] ([CalendarId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CalendarRuleBase] CHECK CONSTRAINT [inner_calendar_calendar_rules]

/****** Object:  ForeignKey [service_calendar_rules]    Script Date: 04/11/2008 06:37:51 ******/
ALTER TABLE [dbo].[CalendarRuleBase]  WITH NOCHECK ADD  CONSTRAINT [service_calendar_rules] FOREIGN KEY([ServiceId])
REFERENCES [dbo].[ServiceBase] ([ServiceId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CalendarRuleBase] CHECK CONSTRAINT [service_calendar_rules]

/****** Object:  ForeignKey [activity_pointer_campaignactivity]    Script Date: 04/11/2008 06:37:57 ******/
ALTER TABLE [dbo].[CampaignActivityBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_campaignactivity] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CampaignActivityBase] CHECK CONSTRAINT [activity_pointer_campaignactivity]

/****** Object:  ForeignKey [transactioncurrency_campaignactivity]    Script Date: 04/11/2008 06:37:57 ******/
ALTER TABLE [dbo].[CampaignActivityBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_campaignactivity] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CampaignActivityBase] CHECK CONSTRAINT [transactioncurrency_campaignactivity]

/****** Object:  ForeignKey [items_campaignactivity]    Script Date: 04/11/2008 06:37:59 ******/
ALTER TABLE [dbo].[CampaignActivityItemBase]  WITH NOCHECK ADD  CONSTRAINT [items_campaignactivity] FOREIGN KEY([CampaignActivityId])
REFERENCES [dbo].[CampaignActivityBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CampaignActivityItemBase] CHECK CONSTRAINT [items_campaignactivity]

/****** Object:  ForeignKey [BusinessUnit_Campaigns]    Script Date: 04/11/2008 06:38:13 ******/
ALTER TABLE [dbo].[CampaignBase]  WITH NOCHECK ADD  CONSTRAINT [BusinessUnit_Campaigns] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CampaignBase] CHECK CONSTRAINT [BusinessUnit_Campaigns]

/****** Object:  ForeignKey [PriceList_Campaigns]    Script Date: 04/11/2008 06:38:13 ******/
ALTER TABLE [dbo].[CampaignBase]  WITH NOCHECK ADD  CONSTRAINT [PriceList_Campaigns] FOREIGN KEY([PriceListId])
REFERENCES [dbo].[PriceLevelBase] ([PriceLevelId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CampaignBase] CHECK CONSTRAINT [PriceList_Campaigns]

/****** Object:  ForeignKey [SystemUser_Campaigns]    Script Date: 04/11/2008 06:38:13 ******/
ALTER TABLE [dbo].[CampaignBase]  WITH NOCHECK ADD  CONSTRAINT [SystemUser_Campaigns] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CampaignBase] CHECK CONSTRAINT [SystemUser_Campaigns]

/****** Object:  ForeignKey [transactioncurrency_campaign]    Script Date: 04/11/2008 06:38:13 ******/
ALTER TABLE [dbo].[CampaignBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_campaign] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CampaignBase] CHECK CONSTRAINT [transactioncurrency_campaign]

/****** Object:  ForeignKey [Campaign_RelatedEntities]    Script Date: 04/11/2008 06:38:16 ******/
ALTER TABLE [dbo].[CampaignItemBase]  WITH NOCHECK ADD  CONSTRAINT [Campaign_RelatedEntities] FOREIGN KEY([CampaignId])
REFERENCES [dbo].[CampaignBase] ([CampaignId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CampaignItemBase] CHECK CONSTRAINT [Campaign_RelatedEntities]

/****** Object:  ForeignKey [activity_campaignresponse]    Script Date: 04/11/2008 06:38:22 ******/
ALTER TABLE [dbo].[CampaignResponseBase]  WITH NOCHECK ADD  CONSTRAINT [activity_campaignresponse] FOREIGN KEY([OriginatingActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CampaignResponseBase] CHECK CONSTRAINT [activity_campaignresponse]

/****** Object:  ForeignKey [activity_pointer_campaignresponse]    Script Date: 04/11/2008 06:38:22 ******/
ALTER TABLE [dbo].[CampaignResponseBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_campaignresponse] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CampaignResponseBase] CHECK CONSTRAINT [activity_pointer_campaignresponse]

/****** Object:  ForeignKey [ColumnMapping_ImportMap]    Script Date: 04/11/2008 06:38:29 ******/
ALTER TABLE [dbo].[ColumnMappingBase]  WITH NOCHECK ADD  CONSTRAINT [ColumnMapping_ImportMap] FOREIGN KEY([ImportMapId])
REFERENCES [dbo].[ImportMapBase] ([ImportMapId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ColumnMappingBase] CHECK CONSTRAINT [ColumnMapping_ImportMap]

/****** Object:  ForeignKey [competitor_addresses]    Script Date: 04/11/2008 06:38:37 ******/
ALTER TABLE [dbo].[CompetitorAddressBase]  WITH NOCHECK ADD  CONSTRAINT [competitor_addresses] FOREIGN KEY([ParentId])
REFERENCES [dbo].[CompetitorBase] ([CompetitorId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CompetitorAddressBase] CHECK CONSTRAINT [competitor_addresses]

/****** Object:  ForeignKey [organization_competitors]    Script Date: 04/11/2008 06:38:46 ******/
ALTER TABLE [dbo].[CompetitorBase]  WITH NOCHECK ADD  CONSTRAINT [organization_competitors] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CompetitorBase] CHECK CONSTRAINT [organization_competitors]

/****** Object:  ForeignKey [transactioncurrency_competitor]    Script Date: 04/11/2008 06:38:46 ******/
ALTER TABLE [dbo].[CompetitorBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_competitor] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CompetitorBase] CHECK CONSTRAINT [transactioncurrency_competitor]

/****** Object:  ForeignKey [competitor_products]    Script Date: 04/11/2008 06:38:49 ******/
ALTER TABLE [dbo].[CompetitorProduct]  WITH NOCHECK ADD  CONSTRAINT [competitor_products] FOREIGN KEY([CompetitorId])
REFERENCES [dbo].[CompetitorBase] ([CompetitorId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CompetitorProduct] CHECK CONSTRAINT [competitor_products]

/****** Object:  ForeignKey [product_competitors]    Script Date: 04/11/2008 06:38:49 ******/
ALTER TABLE [dbo].[CompetitorProduct]  WITH NOCHECK ADD  CONSTRAINT [product_competitors] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CompetitorProduct] CHECK CONSTRAINT [product_competitors]

/****** Object:  ForeignKey [competitor_sales_literature]    Script Date: 04/11/2008 06:38:51 ******/
ALTER TABLE [dbo].[CompetitorSalesLiterature]  WITH NOCHECK ADD  CONSTRAINT [competitor_sales_literature] FOREIGN KEY([CompetitorId])
REFERENCES [dbo].[CompetitorBase] ([CompetitorId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CompetitorSalesLiterature] CHECK CONSTRAINT [competitor_sales_literature]

/****** Object:  ForeignKey [sales_literature_competitors]    Script Date: 04/11/2008 06:38:51 ******/
ALTER TABLE [dbo].[CompetitorSalesLiterature]  WITH NOCHECK ADD  CONSTRAINT [sales_literature_competitors] FOREIGN KEY([SalesLiteratureId])
REFERENCES [dbo].[SalesLiteratureBase] ([SalesLiteratureId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CompetitorSalesLiterature] CHECK CONSTRAINT [sales_literature_competitors]

/****** Object:  ForeignKey [business_unit_constraint_based_groups]    Script Date: 04/11/2008 06:38:56 ******/
ALTER TABLE [dbo].[ConstraintBasedGroupBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_constraint_based_groups] FOREIGN KEY([BusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ConstraintBasedGroupBase] CHECK CONSTRAINT [business_unit_constraint_based_groups]

/****** Object:  ForeignKey [organization_constraint_based_groups]    Script Date: 04/11/2008 06:38:56 ******/
ALTER TABLE [dbo].[ConstraintBasedGroupBase]  WITH NOCHECK ADD  CONSTRAINT [organization_constraint_based_groups] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ConstraintBasedGroupBase] CHECK CONSTRAINT [organization_constraint_based_groups]

/****** Object:  ForeignKey [account_contacts]    Script Date: 04/11/2008 06:39:26 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [account_contacts] FOREIGN KEY([AccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [account_contacts]

/****** Object:  ForeignKey [business_unit_contacts]    Script Date: 04/11/2008 06:39:26 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_contacts] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [business_unit_contacts]

/****** Object:  ForeignKey [contact_master_contact]    Script Date: 04/11/2008 06:39:26 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [contact_master_contact] FOREIGN KEY([MasterId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [contact_master_contact]

/****** Object:  ForeignKey [contact_originating_lead]    Script Date: 04/11/2008 06:39:26 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [contact_originating_lead] FOREIGN KEY([OriginatingLeadId])
REFERENCES [dbo].[LeadBase] ([LeadId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [contact_originating_lead]

/****** Object:  ForeignKey [contact_owning_user]    Script Date: 04/11/2008 06:39:26 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [contact_owning_user] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [contact_owning_user]

/****** Object:  ForeignKey [contact_parent_contact]    Script Date: 04/11/2008 06:39:27 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [contact_parent_contact] FOREIGN KEY([ParentContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [contact_parent_contact]

/****** Object:  ForeignKey [equipment_contacts]    Script Date: 04/11/2008 06:39:27 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [equipment_contacts] FOREIGN KEY([PreferredEquipmentId])
REFERENCES [dbo].[EquipmentBase] ([EquipmentId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [equipment_contacts]

/****** Object:  ForeignKey [price_level_contacts]    Script Date: 04/11/2008 06:39:27 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [price_level_contacts] FOREIGN KEY([DefaultPriceLevelId])
REFERENCES [dbo].[PriceLevelBase] ([PriceLevelId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [price_level_contacts]

/****** Object:  ForeignKey [service_contacts]    Script Date: 04/11/2008 06:39:27 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [service_contacts] FOREIGN KEY([PreferredServiceId])
REFERENCES [dbo].[ServiceBase] ([ServiceId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [service_contacts]

/****** Object:  ForeignKey [system_user_contacts]    Script Date: 04/11/2008 06:39:27 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_contacts] FOREIGN KEY([PreferredSystemUserId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [system_user_contacts]

/****** Object:  ForeignKey [team_contacts]    Script Date: 04/11/2008 06:39:27 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [team_contacts] FOREIGN KEY([OwningTeam])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [team_contacts]

/****** Object:  ForeignKey [transactioncurrency_contact]    Script Date: 04/11/2008 06:39:28 ******/
ALTER TABLE [dbo].[ContactBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_contact] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactBase] CHECK CONSTRAINT [transactioncurrency_contact]

/****** Object:  ForeignKey [contact_invoices]    Script Date: 04/11/2008 06:39:30 ******/
ALTER TABLE [dbo].[ContactInvoices]  WITH NOCHECK ADD  CONSTRAINT [contact_invoices] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactInvoices] CHECK CONSTRAINT [contact_invoices]

/****** Object:  ForeignKey [invoice_contacts]    Script Date: 04/11/2008 06:39:31 ******/
ALTER TABLE [dbo].[ContactInvoices]  WITH NOCHECK ADD  CONSTRAINT [invoice_contacts] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[InvoiceBase] ([InvoiceId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactInvoices] CHECK CONSTRAINT [invoice_contacts]

/****** Object:  ForeignKey [contact_leads]    Script Date: 04/11/2008 06:39:33 ******/
ALTER TABLE [dbo].[ContactLeads]  WITH NOCHECK ADD  CONSTRAINT [contact_leads] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactLeads] CHECK CONSTRAINT [contact_leads]

/****** Object:  ForeignKey [lead_contacts]    Script Date: 04/11/2008 06:39:33 ******/
ALTER TABLE [dbo].[ContactLeads]  WITH NOCHECK ADD  CONSTRAINT [lead_contacts] FOREIGN KEY([LeadId])
REFERENCES [dbo].[LeadBase] ([LeadId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactLeads] CHECK CONSTRAINT [lead_contacts]

/****** Object:  ForeignKey [contact_orders]    Script Date: 04/11/2008 06:39:35 ******/
ALTER TABLE [dbo].[ContactOrders]  WITH NOCHECK ADD  CONSTRAINT [contact_orders] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactOrders] CHECK CONSTRAINT [contact_orders]

/****** Object:  ForeignKey [order_contacts]    Script Date: 04/11/2008 06:39:35 ******/
ALTER TABLE [dbo].[ContactOrders]  WITH NOCHECK ADD  CONSTRAINT [order_contacts] FOREIGN KEY([SalesOrderId])
REFERENCES [dbo].[SalesOrderBase] ([SalesOrderId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactOrders] CHECK CONSTRAINT [order_contacts]

/****** Object:  ForeignKey [contact_quotes]    Script Date: 04/11/2008 06:39:37 ******/
ALTER TABLE [dbo].[ContactQuotes]  WITH NOCHECK ADD  CONSTRAINT [contact_quotes] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactQuotes] CHECK CONSTRAINT [contact_quotes]

/****** Object:  ForeignKey [quote_contacts]    Script Date: 04/11/2008 06:39:37 ******/
ALTER TABLE [dbo].[ContactQuotes]  WITH NOCHECK ADD  CONSTRAINT [quote_contacts] FOREIGN KEY([QuoteId])
REFERENCES [dbo].[QuoteBase] ([QuoteId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContactQuotes] CHECK CONSTRAINT [quote_contacts]

/****** Object:  ForeignKey [account_contracts_as_billing_customer]    Script Date: 04/11/2008 06:39:51 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [account_contracts_as_billing_customer] FOREIGN KEY([BillingAccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [account_contracts_as_billing_customer]

/****** Object:  ForeignKey [account_contracts_as_customer]    Script Date: 04/11/2008 06:39:51 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [account_contracts_as_customer] FOREIGN KEY([AccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [account_contracts_as_customer]

/****** Object:  ForeignKey [business_unit_service_contracts]    Script Date: 04/11/2008 06:39:51 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_service_contracts] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [business_unit_service_contracts]

/****** Object:  ForeignKey [contact_contracts_as_billing_customer]    Script Date: 04/11/2008 06:39:51 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [contact_contracts_as_billing_customer] FOREIGN KEY([BillingContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [contact_contracts_as_billing_customer]

/****** Object:  ForeignKey [contact_contracts_as_customer]    Script Date: 04/11/2008 06:39:51 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [contact_contracts_as_customer] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [contact_contracts_as_customer]

/****** Object:  ForeignKey [contract_originating_contract]    Script Date: 04/11/2008 06:39:52 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [contract_originating_contract] FOREIGN KEY([OriginatingContract])
REFERENCES [dbo].[ContractBase] ([ContractId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [contract_originating_contract]

/****** Object:  ForeignKey [contract_template_contracts]    Script Date: 04/11/2008 06:39:52 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [contract_template_contracts] FOREIGN KEY([ContractTemplateId])
REFERENCES [dbo].[ContractTemplateBase] ([ContractTemplateId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [contract_template_contracts]

/****** Object:  ForeignKey [customer_address_contracts_as_billing_address]    Script Date: 04/11/2008 06:39:52 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [customer_address_contracts_as_billing_address] FOREIGN KEY([BillToAddress])
REFERENCES [dbo].[CustomerAddressBase] ([CustomerAddressId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [customer_address_contracts_as_billing_address]

/****** Object:  ForeignKey [customer_address_contracts_as_service_address]    Script Date: 04/11/2008 06:39:52 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [customer_address_contracts_as_service_address] FOREIGN KEY([ServiceAddress])
REFERENCES [dbo].[CustomerAddressBase] ([CustomerAddressId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [customer_address_contracts_as_service_address]

/****** Object:  ForeignKey [system_user_service_contracts]    Script Date: 04/11/2008 06:39:52 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_service_contracts] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [system_user_service_contracts]

/****** Object:  ForeignKey [team_service_contracts]    Script Date: 04/11/2008 06:39:52 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [team_service_contracts] FOREIGN KEY([OwningTeam])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [team_service_contracts]

/****** Object:  ForeignKey [transactioncurrency_contract]    Script Date: 04/11/2008 06:39:53 ******/
ALTER TABLE [dbo].[ContractBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_contract] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractBase] CHECK CONSTRAINT [transactioncurrency_contract]

/****** Object:  ForeignKey [account_contract_line_items]    Script Date: 04/11/2008 06:40:05 ******/
ALTER TABLE [dbo].[ContractDetailBase]  WITH NOCHECK ADD  CONSTRAINT [account_contract_line_items] FOREIGN KEY([AccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractDetailBase] CHECK CONSTRAINT [account_contract_line_items]

/****** Object:  ForeignKey [contact_contract_line_items]    Script Date: 04/11/2008 06:40:05 ******/
ALTER TABLE [dbo].[ContractDetailBase]  WITH NOCHECK ADD  CONSTRAINT [contact_contract_line_items] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractDetailBase] CHECK CONSTRAINT [contact_contract_line_items]

/****** Object:  ForeignKey [contract_detail_unit_of_measure_schedule]    Script Date: 04/11/2008 06:40:05 ******/
ALTER TABLE [dbo].[ContractDetailBase]  WITH NOCHECK ADD  CONSTRAINT [contract_detail_unit_of_measure_schedule] FOREIGN KEY([UoMScheduleId])
REFERENCES [dbo].[UoMScheduleBase] ([UoMScheduleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractDetailBase] CHECK CONSTRAINT [contract_detail_unit_of_measure_schedule]

/****** Object:  ForeignKey [contract_line_items]    Script Date: 04/11/2008 06:40:06 ******/
ALTER TABLE [dbo].[ContractDetailBase]  WITH NOCHECK ADD  CONSTRAINT [contract_line_items] FOREIGN KEY([ContractId])
REFERENCES [dbo].[ContractBase] ([ContractId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractDetailBase] CHECK CONSTRAINT [contract_line_items]

/****** Object:  ForeignKey [customer_address_contract_line_items]    Script Date: 04/11/2008 06:40:06 ******/
ALTER TABLE [dbo].[ContractDetailBase]  WITH NOCHECK ADD  CONSTRAINT [customer_address_contract_line_items] FOREIGN KEY([ServiceAddress])
REFERENCES [dbo].[CustomerAddressBase] ([CustomerAddressId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractDetailBase] CHECK CONSTRAINT [customer_address_contract_line_items]

/****** Object:  ForeignKey [product_contract_line_items]    Script Date: 04/11/2008 06:40:06 ******/
ALTER TABLE [dbo].[ContractDetailBase]  WITH NOCHECK ADD  CONSTRAINT [product_contract_line_items] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractDetailBase] CHECK CONSTRAINT [product_contract_line_items]

/****** Object:  ForeignKey [transactioncurrency_contractdetail]    Script Date: 04/11/2008 06:40:06 ******/
ALTER TABLE [dbo].[ContractDetailBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_contractdetail] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractDetailBase] CHECK CONSTRAINT [transactioncurrency_contractdetail]

/****** Object:  ForeignKey [unit_of_measurement_contract_line_items]    Script Date: 04/11/2008 06:40:06 ******/
ALTER TABLE [dbo].[ContractDetailBase]  WITH NOCHECK ADD  CONSTRAINT [unit_of_measurement_contract_line_items] FOREIGN KEY([UoMId])
REFERENCES [dbo].[UoMBase] ([UoMId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractDetailBase] CHECK CONSTRAINT [unit_of_measurement_contract_line_items]

/****** Object:  ForeignKey [organization_contract_templates]    Script Date: 04/11/2008 06:40:13 ******/
ALTER TABLE [dbo].[ContractTemplateBase]  WITH NOCHECK ADD  CONSTRAINT [organization_contract_templates] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ContractTemplateBase] CHECK CONSTRAINT [organization_contract_templates]

/****** Object:  ForeignKey [business_customer_opportunity_roles]    Script Date: 04/11/2008 06:40:31 ******/
ALTER TABLE [dbo].[CustomerOpportunityRoleBase]  WITH NOCHECK ADD  CONSTRAINT [business_customer_opportunity_roles] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CustomerOpportunityRoleBase] CHECK CONSTRAINT [business_customer_opportunity_roles]

/****** Object:  ForeignKey [opportunity_customer_opportunity_roles]    Script Date: 04/11/2008 06:40:31 ******/
ALTER TABLE [dbo].[CustomerOpportunityRoleBase]  WITH NOCHECK ADD  CONSTRAINT [opportunity_customer_opportunity_roles] FOREIGN KEY([OpportunityId])
REFERENCES [dbo].[OpportunityBase] ([OpportunityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CustomerOpportunityRoleBase] CHECK CONSTRAINT [opportunity_customer_opportunity_roles]

/****** Object:  ForeignKey [relationship_role_customer_opportunity_roles]    Script Date: 04/11/2008 06:40:31 ******/
ALTER TABLE [dbo].[CustomerOpportunityRoleBase]  WITH NOCHECK ADD  CONSTRAINT [relationship_role_customer_opportunity_roles] FOREIGN KEY([OpportunityRoleId])
REFERENCES [dbo].[RelationshipRoleBase] ([RelationshipRoleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CustomerOpportunityRoleBase] CHECK CONSTRAINT [relationship_role_customer_opportunity_roles]

/****** Object:  ForeignKey [user_customer_opportunity_roles]    Script Date: 04/11/2008 06:40:31 ******/
ALTER TABLE [dbo].[CustomerOpportunityRoleBase]  WITH NOCHECK ADD  CONSTRAINT [user_customer_opportunity_roles] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CustomerOpportunityRoleBase] CHECK CONSTRAINT [user_customer_opportunity_roles]

/****** Object:  ForeignKey [business_unit_customer_relationship]    Script Date: 04/11/2008 06:40:38 ******/
ALTER TABLE [dbo].[CustomerRelationshipBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_customer_relationship] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CustomerRelationshipBase] CHECK CONSTRAINT [business_unit_customer_relationship]

/****** Object:  ForeignKey [customer_relationship_converse_relationship]    Script Date: 04/11/2008 06:40:38 ******/
ALTER TABLE [dbo].[CustomerRelationshipBase]  WITH NOCHECK ADD  CONSTRAINT [customer_relationship_converse_relationship] FOREIGN KEY([ConverseRelationshipId])
REFERENCES [dbo].[CustomerRelationshipBase] ([CustomerRelationshipId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CustomerRelationshipBase] CHECK CONSTRAINT [customer_relationship_converse_relationship]

/****** Object:  ForeignKey [relationship_role_customer_role]    Script Date: 04/11/2008 06:40:38 ******/
ALTER TABLE [dbo].[CustomerRelationshipBase]  WITH NOCHECK ADD  CONSTRAINT [relationship_role_customer_role] FOREIGN KEY([CustomerRoleId])
REFERENCES [dbo].[RelationshipRoleBase] ([RelationshipRoleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CustomerRelationshipBase] CHECK CONSTRAINT [relationship_role_customer_role]

/****** Object:  ForeignKey [relationship_role_partner_role]    Script Date: 04/11/2008 06:40:39 ******/
ALTER TABLE [dbo].[CustomerRelationshipBase]  WITH NOCHECK ADD  CONSTRAINT [relationship_role_partner_role] FOREIGN KEY([PartnerRoleId])
REFERENCES [dbo].[RelationshipRoleBase] ([RelationshipRoleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CustomerRelationshipBase] CHECK CONSTRAINT [relationship_role_partner_role]

/****** Object:  ForeignKey [user_customer_relationship]    Script Date: 04/11/2008 06:40:39 ******/
ALTER TABLE [dbo].[CustomerRelationshipBase]  WITH NOCHECK ADD  CONSTRAINT [user_customer_relationship] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[CustomerRelationshipBase] CHECK CONSTRAINT [user_customer_relationship]

/****** Object:  ForeignKey [discount_type_discounts]    Script Date: 04/11/2008 06:40:44 ******/
ALTER TABLE [dbo].[DiscountBase]  WITH NOCHECK ADD  CONSTRAINT [discount_type_discounts] FOREIGN KEY([DiscountTypeId])
REFERENCES [dbo].[DiscountTypeBase] ([DiscountTypeId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DiscountBase] CHECK CONSTRAINT [discount_type_discounts]

/****** Object:  ForeignKey [transactioncurrency_discount]    Script Date: 04/11/2008 06:40:44 ******/
ALTER TABLE [dbo].[DiscountBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_discount] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DiscountBase] CHECK CONSTRAINT [transactioncurrency_discount]

/****** Object:  ForeignKey [organization_discount_types]    Script Date: 04/11/2008 06:40:50 ******/
ALTER TABLE [dbo].[DiscountTypeBase]  WITH NOCHECK ADD  CONSTRAINT [organization_discount_types] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DiscountTypeBase] CHECK CONSTRAINT [organization_discount_types]

/****** Object:  ForeignKey [transactioncurrency_discounttype]    Script Date: 04/11/2008 06:40:50 ******/
ALTER TABLE [dbo].[DiscountTypeBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_discounttype] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DiscountTypeBase] CHECK CONSTRAINT [transactioncurrency_discounttype]

/****** Object:  ForeignKey [organization_custom_displaystrings]    Script Date: 04/11/2008 06:40:54 ******/
ALTER TABLE [dbo].[DisplayStringBase]  WITH NOCHECK ADD  CONSTRAINT [organization_custom_displaystrings] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DisplayStringBase] CHECK CONSTRAINT [organization_custom_displaystrings]

/****** Object:  ForeignKey [DisplayString_DisplayStringMaps]    Script Date: 04/11/2008 06:40:56 ******/
ALTER TABLE [dbo].[DisplayStringMapBase]  WITH NOCHECK ADD  CONSTRAINT [DisplayString_DisplayStringMaps] FOREIGN KEY([DisplayStringId])
REFERENCES [dbo].[DisplayStringBase] ([DisplayStringId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DisplayStringMapBase] CHECK CONSTRAINT [DisplayString_DisplayStringMaps]

/****** Object:  ForeignKey [is_primary_subject_for]    Script Date: 04/11/2008 06:41:01 ******/
ALTER TABLE [dbo].[DocumentIndex]  WITH NOCHECK ADD  CONSTRAINT [is_primary_subject_for] FOREIGN KEY([SubjectId])
REFERENCES [dbo].[SubjectBase] ([SubjectId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DocumentIndex] CHECK CONSTRAINT [is_primary_subject_for]

/****** Object:  ForeignKey [organization_indexed_documents]    Script Date: 04/11/2008 06:41:01 ******/
ALTER TABLE [dbo].[DocumentIndex]  WITH NOCHECK ADD  CONSTRAINT [organization_indexed_documents] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DocumentIndex] CHECK CONSTRAINT [organization_indexed_documents]

/****** Object:  ForeignKey [AsyncOperation_DuplicateBaseRecord]    Script Date: 04/11/2008 06:41:06 ******/
ALTER TABLE [dbo].[DuplicateRecordBase]  WITH NOCHECK ADD  CONSTRAINT [AsyncOperation_DuplicateBaseRecord] FOREIGN KEY([AsyncOperationId])
REFERENCES [dbo].[AsyncOperationBase] ([AsyncOperationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DuplicateRecordBase] CHECK CONSTRAINT [AsyncOperation_DuplicateBaseRecord]

/****** Object:  ForeignKey [BusinessUnit_DuplicateRules]    Script Date: 04/11/2008 06:41:13 ******/
ALTER TABLE [dbo].[DuplicateRuleBase]  WITH NOCHECK ADD  CONSTRAINT [BusinessUnit_DuplicateRules] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DuplicateRuleBase] CHECK CONSTRAINT [BusinessUnit_DuplicateRules]

/****** Object:  ForeignKey [SystemUser_DuplicateRules]    Script Date: 04/11/2008 06:41:13 ******/
ALTER TABLE [dbo].[DuplicateRuleBase]  WITH NOCHECK ADD  CONSTRAINT [SystemUser_DuplicateRules] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DuplicateRuleBase] CHECK CONSTRAINT [SystemUser_DuplicateRules]

/****** Object:  ForeignKey [DuplicateRule_DuplicateRuleConditions]    Script Date: 04/11/2008 06:41:16 ******/
ALTER TABLE [dbo].[DuplicateRuleConditionBase]  WITH NOCHECK ADD  CONSTRAINT [DuplicateRule_DuplicateRuleConditions] FOREIGN KEY([RegardingObjectId])
REFERENCES [dbo].[DuplicateRuleBase] ([DuplicateRuleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[DuplicateRuleConditionBase] CHECK CONSTRAINT [DuplicateRule_DuplicateRuleConditions]

/****** Object:  ForeignKey [activity_pointer_email]    Script Date: 04/11/2008 06:41:22 ******/
ALTER TABLE [dbo].[EmailBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_email] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[EmailBase] CHECK CONSTRAINT [activity_pointer_email]

/****** Object:  ForeignKey [activity_pointer_email_hash]    Script Date: 04/11/2008 06:41:25 ******/
ALTER TABLE [dbo].[EmailHashBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_email_hash] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[EmailHashBase] CHECK CONSTRAINT [activity_pointer_email_hash]

/****** Object:  ForeignKey [createdby_entitymap]    Script Date: 04/11/2008 06:41:29 ******/
ALTER TABLE [dbo].[EntityMapBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_entitymap] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[EntityMapBase] CHECK CONSTRAINT [createdby_entitymap]

/****** Object:  ForeignKey [modifiedby_entitymap]    Script Date: 04/11/2008 06:41:29 ******/
ALTER TABLE [dbo].[EntityMapBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_entitymap] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[EntityMapBase] CHECK CONSTRAINT [modifiedby_entitymap]

/****** Object:  ForeignKey [organization_entitymap]    Script Date: 04/11/2008 06:41:29 ******/
ALTER TABLE [dbo].[EntityMapBase]  WITH NOCHECK ADD  CONSTRAINT [organization_entitymap] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[EntityMapBase] CHECK CONSTRAINT [organization_entitymap]

/****** Object:  ForeignKey [business_unit_equipment]    Script Date: 04/11/2008 06:41:37 ******/
ALTER TABLE [dbo].[EquipmentBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_equipment] FOREIGN KEY([BusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[EquipmentBase] CHECK CONSTRAINT [business_unit_equipment]

/****** Object:  ForeignKey [calendar_equipment]    Script Date: 04/11/2008 06:41:37 ******/
ALTER TABLE [dbo].[EquipmentBase]  WITH NOCHECK ADD  CONSTRAINT [calendar_equipment] FOREIGN KEY([CalendarId])
REFERENCES [dbo].[CalendarBase] ([CalendarId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[EquipmentBase] CHECK CONSTRAINT [calendar_equipment]

/****** Object:  ForeignKey [organization_equipment]    Script Date: 04/11/2008 06:41:37 ******/
ALTER TABLE [dbo].[EquipmentBase]  WITH NOCHECK ADD  CONSTRAINT [organization_equipment] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[EquipmentBase] CHECK CONSTRAINT [organization_equipment]

/****** Object:  ForeignKey [site_equipment]    Script Date: 04/11/2008 06:41:37 ******/
ALTER TABLE [dbo].[EquipmentBase]  WITH NOCHECK ADD  CONSTRAINT [site_equipment] FOREIGN KEY([SiteId])
REFERENCES [dbo].[SiteBase] ([SiteId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[EquipmentBase] CHECK CONSTRAINT [site_equipment]

/****** Object:  ForeignKey [activity_pointer_fax]    Script Date: 04/11/2008 06:41:42 ******/
ALTER TABLE [dbo].[FaxBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_fax] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[FaxBase] CHECK CONSTRAINT [activity_pointer_fax]

/****** Object:  ForeignKey [BusinessUnit_Imports]    Script Date: 04/11/2008 06:41:50 ******/
ALTER TABLE [dbo].[ImportBase]  WITH NOCHECK ADD  CONSTRAINT [BusinessUnit_Imports] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportBase] CHECK CONSTRAINT [BusinessUnit_Imports]

/****** Object:  ForeignKey [SystemUser_Imports]    Script Date: 04/11/2008 06:41:50 ******/
ALTER TABLE [dbo].[ImportBase]  WITH NOCHECK ADD  CONSTRAINT [SystemUser_Imports] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportBase] CHECK CONSTRAINT [SystemUser_Imports]

/****** Object:  ForeignKey [BusinessUnit_ImportData]    Script Date: 04/11/2008 06:41:55 ******/
ALTER TABLE [dbo].[ImportDataBase]  WITH NOCHECK ADD  CONSTRAINT [BusinessUnit_ImportData] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportDataBase] CHECK CONSTRAINT [BusinessUnit_ImportData]

/****** Object:  ForeignKey [ImportFile_ImportData]    Script Date: 04/11/2008 06:41:55 ******/
ALTER TABLE [dbo].[ImportDataBase]  WITH NOCHECK ADD  CONSTRAINT [ImportFile_ImportData] FOREIGN KEY([ImportFileId])
REFERENCES [dbo].[ImportFileBase] ([ImportFileId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportDataBase] CHECK CONSTRAINT [ImportFile_ImportData]

/****** Object:  ForeignKey [SystemUser_ImportData]    Script Date: 04/11/2008 06:41:56 ******/
ALTER TABLE [dbo].[ImportDataBase]  WITH NOCHECK ADD  CONSTRAINT [SystemUser_ImportData] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportDataBase] CHECK CONSTRAINT [SystemUser_ImportData]

/****** Object:  ForeignKey [BusinessUnit_ImportFiles]    Script Date: 04/11/2008 06:42:08 ******/
ALTER TABLE [dbo].[ImportFileBase]  WITH NOCHECK ADD  CONSTRAINT [BusinessUnit_ImportFiles] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportFileBase] CHECK CONSTRAINT [BusinessUnit_ImportFiles]

/****** Object:  ForeignKey [Import_ImportFile]    Script Date: 04/11/2008 06:42:08 ******/
ALTER TABLE [dbo].[ImportFileBase]  WITH NOCHECK ADD  CONSTRAINT [Import_ImportFile] FOREIGN KEY([ImportId])
REFERENCES [dbo].[ImportBase] ([ImportId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportFileBase] CHECK CONSTRAINT [Import_ImportFile]

/****** Object:  ForeignKey [ImportFile_SystemUser]    Script Date: 04/11/2008 06:42:08 ******/
ALTER TABLE [dbo].[ImportFileBase]  WITH NOCHECK ADD  CONSTRAINT [ImportFile_SystemUser] FOREIGN KEY([RecordsOwnerId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportFileBase] CHECK CONSTRAINT [ImportFile_SystemUser]

/****** Object:  ForeignKey [ImportMap_ImportFile]    Script Date: 04/11/2008 06:42:08 ******/
ALTER TABLE [dbo].[ImportFileBase]  WITH NOCHECK ADD  CONSTRAINT [ImportMap_ImportFile] FOREIGN KEY([ImportMapId])
REFERENCES [dbo].[ImportMapBase] ([ImportMapId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportFileBase] CHECK CONSTRAINT [ImportMap_ImportFile]

/****** Object:  ForeignKey [SystemUser_ImportFiles]    Script Date: 04/11/2008 06:42:08 ******/
ALTER TABLE [dbo].[ImportFileBase]  WITH NOCHECK ADD  CONSTRAINT [SystemUser_ImportFiles] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportFileBase] CHECK CONSTRAINT [SystemUser_ImportFiles]

/****** Object:  ForeignKey [BusinessUnit_ImportLogs]    Script Date: 04/11/2008 06:42:17 ******/
ALTER TABLE [dbo].[ImportLogBase]  WITH NOCHECK ADD  CONSTRAINT [BusinessUnit_ImportLogs] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportLogBase] CHECK CONSTRAINT [BusinessUnit_ImportLogs]

/****** Object:  ForeignKey [ImportLog_ImportData]    Script Date: 04/11/2008 06:42:18 ******/
ALTER TABLE [dbo].[ImportLogBase]  WITH NOCHECK ADD  CONSTRAINT [ImportLog_ImportData] FOREIGN KEY([ImportDataId])
REFERENCES [dbo].[ImportDataBase] ([ImportDataId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportLogBase] CHECK CONSTRAINT [ImportLog_ImportData]

/****** Object:  ForeignKey [ImportLog_ImportFile]    Script Date: 04/11/2008 06:42:18 ******/
ALTER TABLE [dbo].[ImportLogBase]  WITH NOCHECK ADD  CONSTRAINT [ImportLog_ImportFile] FOREIGN KEY([ImportFileId])
REFERENCES [dbo].[ImportFileBase] ([ImportFileId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportLogBase] CHECK CONSTRAINT [ImportLog_ImportFile]

/****** Object:  ForeignKey [SystemUser_ImportLogs]    Script Date: 04/11/2008 06:42:18 ******/
ALTER TABLE [dbo].[ImportLogBase]  WITH NOCHECK ADD  CONSTRAINT [SystemUser_ImportLogs] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportLogBase] CHECK CONSTRAINT [SystemUser_ImportLogs]

/****** Object:  ForeignKey [BusinessUnit_ImportMaps]    Script Date: 04/11/2008 06:42:24 ******/
ALTER TABLE [dbo].[ImportMapBase]  WITH NOCHECK ADD  CONSTRAINT [BusinessUnit_ImportMaps] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportMapBase] CHECK CONSTRAINT [BusinessUnit_ImportMaps]

/****** Object:  ForeignKey [SystemUser_ImportMaps]    Script Date: 04/11/2008 06:42:25 ******/
ALTER TABLE [dbo].[ImportMapBase]  WITH NOCHECK ADD  CONSTRAINT [SystemUser_ImportMaps] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ImportMapBase] CHECK CONSTRAINT [SystemUser_ImportMaps]

/****** Object:  ForeignKey [account_as_customer_cases]    Script Date: 04/11/2008 06:42:37 ******/
ALTER TABLE [dbo].[IncidentBase]  WITH NOCHECK ADD  CONSTRAINT [account_as_customer_cases] FOREIGN KEY([AccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentBase] CHECK CONSTRAINT [account_as_customer_cases]

/****** Object:  ForeignKey [business_unit_incidents]    Script Date: 04/11/2008 06:42:37 ******/
ALTER TABLE [dbo].[IncidentBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_incidents] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentBase] CHECK CONSTRAINT [business_unit_incidents]

/****** Object:  ForeignKey [contact_as_customer_cases]    Script Date: 04/11/2008 06:42:37 ******/
ALTER TABLE [dbo].[IncidentBase]  WITH NOCHECK ADD  CONSTRAINT [contact_as_customer_cases] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentBase] CHECK CONSTRAINT [contact_as_customer_cases]

/****** Object:  ForeignKey [contact_as_responsible_contact]    Script Date: 04/11/2008 06:42:37 ******/
ALTER TABLE [dbo].[IncidentBase]  WITH NOCHECK ADD  CONSTRAINT [contact_as_responsible_contact] FOREIGN KEY([ResponsibleContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentBase] CHECK CONSTRAINT [contact_as_responsible_contact]

/****** Object:  ForeignKey [contract_cases]    Script Date: 04/11/2008 06:42:38 ******/
ALTER TABLE [dbo].[IncidentBase]  WITH NOCHECK ADD  CONSTRAINT [contract_cases] FOREIGN KEY([ContractId])
REFERENCES [dbo].[ContractBase] ([ContractId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentBase] CHECK CONSTRAINT [contract_cases]

/****** Object:  ForeignKey [contract_detail_cases]    Script Date: 04/11/2008 06:42:38 ******/
ALTER TABLE [dbo].[IncidentBase]  WITH NOCHECK ADD  CONSTRAINT [contract_detail_cases] FOREIGN KEY([ContractDetailId])
REFERENCES [dbo].[ContractDetailBase] ([ContractDetailId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentBase] CHECK CONSTRAINT [contract_detail_cases]

/****** Object:  ForeignKey [kbarticle_incidents]    Script Date: 04/11/2008 06:42:38 ******/
ALTER TABLE [dbo].[IncidentBase]  WITH NOCHECK ADD  CONSTRAINT [kbarticle_incidents] FOREIGN KEY([KbArticleId])
REFERENCES [dbo].[KbArticleBase] ([KbArticleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentBase] CHECK CONSTRAINT [kbarticle_incidents]

/****** Object:  ForeignKey [product_incidents]    Script Date: 04/11/2008 06:42:38 ******/
ALTER TABLE [dbo].[IncidentBase]  WITH NOCHECK ADD  CONSTRAINT [product_incidents] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentBase] CHECK CONSTRAINT [product_incidents]

/****** Object:  ForeignKey [subject_incidents]    Script Date: 04/11/2008 06:42:38 ******/
ALTER TABLE [dbo].[IncidentBase]  WITH NOCHECK ADD  CONSTRAINT [subject_incidents] FOREIGN KEY([SubjectId])
REFERENCES [dbo].[SubjectBase] ([SubjectId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentBase] CHECK CONSTRAINT [subject_incidents]

/****** Object:  ForeignKey [system_user_incidents]    Script Date: 04/11/2008 06:42:38 ******/
ALTER TABLE [dbo].[IncidentBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_incidents] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentBase] CHECK CONSTRAINT [system_user_incidents]

/****** Object:  ForeignKey [team_incidents]    Script Date: 04/11/2008 06:42:38 ******/
ALTER TABLE [dbo].[IncidentBase]  WITH NOCHECK ADD  CONSTRAINT [team_incidents] FOREIGN KEY([OwningTeam])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentBase] CHECK CONSTRAINT [team_incidents]

/****** Object:  ForeignKey [activity_pointer_incident_resolution]    Script Date: 04/11/2008 06:42:41 ******/
ALTER TABLE [dbo].[IncidentResolutionBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_incident_resolution] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IncidentResolutionBase] CHECK CONSTRAINT [activity_pointer_incident_resolution]

/****** Object:  ForeignKey [organization_integration_statuses]    Script Date: 04/11/2008 06:42:46 ******/
ALTER TABLE [dbo].[IntegrationStatusBase]  WITH NOCHECK ADD  CONSTRAINT [organization_integration_statuses] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IntegrationStatusBase] CHECK CONSTRAINT [organization_integration_statuses]

/****** Object:  ForeignKey [account_invoices]    Script Date: 04/11/2008 06:43:17 ******/
ALTER TABLE [dbo].[InvoiceBase]  WITH NOCHECK ADD  CONSTRAINT [account_invoices] FOREIGN KEY([AccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceBase] CHECK CONSTRAINT [account_invoices]

/****** Object:  ForeignKey [business_unit_invoices]    Script Date: 04/11/2008 06:43:17 ******/
ALTER TABLE [dbo].[InvoiceBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_invoices] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceBase] CHECK CONSTRAINT [business_unit_invoices]

/****** Object:  ForeignKey [invoice_primary_contact]    Script Date: 04/11/2008 06:43:17 ******/
ALTER TABLE [dbo].[InvoiceBase]  WITH NOCHECK ADD  CONSTRAINT [invoice_primary_contact] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceBase] CHECK CONSTRAINT [invoice_primary_contact]

/****** Object:  ForeignKey [opportunity_invoices]    Script Date: 04/11/2008 06:43:17 ******/
ALTER TABLE [dbo].[InvoiceBase]  WITH NOCHECK ADD  CONSTRAINT [opportunity_invoices] FOREIGN KEY([OpportunityId])
REFERENCES [dbo].[OpportunityBase] ([OpportunityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceBase] CHECK CONSTRAINT [opportunity_invoices]

/****** Object:  ForeignKey [order_invoices]    Script Date: 04/11/2008 06:43:17 ******/
ALTER TABLE [dbo].[InvoiceBase]  WITH NOCHECK ADD  CONSTRAINT [order_invoices] FOREIGN KEY([SalesOrderId])
REFERENCES [dbo].[SalesOrderBase] ([SalesOrderId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceBase] CHECK CONSTRAINT [order_invoices]

/****** Object:  ForeignKey [price_level_invoices]    Script Date: 04/11/2008 06:43:18 ******/
ALTER TABLE [dbo].[InvoiceBase]  WITH NOCHECK ADD  CONSTRAINT [price_level_invoices] FOREIGN KEY([PriceLevelId])
REFERENCES [dbo].[PriceLevelBase] ([PriceLevelId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceBase] CHECK CONSTRAINT [price_level_invoices]

/****** Object:  ForeignKey [system_user_invoices]    Script Date: 04/11/2008 06:43:18 ******/
ALTER TABLE [dbo].[InvoiceBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_invoices] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceBase] CHECK CONSTRAINT [system_user_invoices]

/****** Object:  ForeignKey [team_invoices]    Script Date: 04/11/2008 06:43:18 ******/
ALTER TABLE [dbo].[InvoiceBase]  WITH NOCHECK ADD  CONSTRAINT [team_invoices] FOREIGN KEY([OwningTeam])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceBase] CHECK CONSTRAINT [team_invoices]

/****** Object:  ForeignKey [transactioncurrency_invoice]    Script Date: 04/11/2008 06:43:18 ******/
ALTER TABLE [dbo].[InvoiceBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_invoice] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceBase] CHECK CONSTRAINT [transactioncurrency_invoice]

/****** Object:  ForeignKey [invoice_details]    Script Date: 04/11/2008 06:43:33 ******/
ALTER TABLE [dbo].[InvoiceDetailBase]  WITH NOCHECK ADD  CONSTRAINT [invoice_details] FOREIGN KEY([InvoiceId])
REFERENCES [dbo].[InvoiceBase] ([InvoiceId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceDetailBase] CHECK CONSTRAINT [invoice_details]

/****** Object:  ForeignKey [product_invoice_details]    Script Date: 04/11/2008 06:43:33 ******/
ALTER TABLE [dbo].[InvoiceDetailBase]  WITH NOCHECK ADD  CONSTRAINT [product_invoice_details] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceDetailBase] CHECK CONSTRAINT [product_invoice_details]

/****** Object:  ForeignKey [system_user_invoicedetail]    Script Date: 04/11/2008 06:43:34 ******/
ALTER TABLE [dbo].[InvoiceDetailBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_invoicedetail] FOREIGN KEY([SalesRepId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceDetailBase] CHECK CONSTRAINT [system_user_invoicedetail]

/****** Object:  ForeignKey [transactioncurrency_invoicedetail]    Script Date: 04/11/2008 06:43:34 ******/
ALTER TABLE [dbo].[InvoiceDetailBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_invoicedetail] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceDetailBase] CHECK CONSTRAINT [transactioncurrency_invoicedetail]

/****** Object:  ForeignKey [unit_of_measurement_invoice_details]    Script Date: 04/11/2008 06:43:34 ******/
ALTER TABLE [dbo].[InvoiceDetailBase]  WITH NOCHECK ADD  CONSTRAINT [unit_of_measurement_invoice_details] FOREIGN KEY([UoMId])
REFERENCES [dbo].[UoMBase] ([UoMId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[InvoiceDetailBase] CHECK CONSTRAINT [unit_of_measurement_invoice_details]

/****** Object:  ForeignKey [organization_isvconfigs]    Script Date: 04/11/2008 06:43:38 ******/
ALTER TABLE [dbo].[IsvConfigBase]  WITH NOCHECK ADD  CONSTRAINT [organization_isvconfigs] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[IsvConfigBase] CHECK CONSTRAINT [organization_isvconfigs]

/****** Object:  ForeignKey [kb_article_template_kb_articles]    Script Date: 04/11/2008 06:43:44 ******/
ALTER TABLE [dbo].[KbArticleBase]  WITH NOCHECK ADD  CONSTRAINT [kb_article_template_kb_articles] FOREIGN KEY([KbArticleTemplateId])
REFERENCES [dbo].[KbArticleTemplateBase] ([KbArticleTemplateId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[KbArticleBase] CHECK CONSTRAINT [kb_article_template_kb_articles]

/****** Object:  ForeignKey [organization_kb_articles]    Script Date: 04/11/2008 06:43:45 ******/
ALTER TABLE [dbo].[KbArticleBase]  WITH NOCHECK ADD  CONSTRAINT [organization_kb_articles] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[KbArticleBase] CHECK CONSTRAINT [organization_kb_articles]

/****** Object:  ForeignKey [subject_kb_articles]    Script Date: 04/11/2008 06:43:45 ******/
ALTER TABLE [dbo].[KbArticleBase]  WITH NOCHECK ADD  CONSTRAINT [subject_kb_articles] FOREIGN KEY([SubjectId])
REFERENCES [dbo].[SubjectBase] ([SubjectId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[KbArticleBase] CHECK CONSTRAINT [subject_kb_articles]

/****** Object:  ForeignKey [kbarticle_comments]    Script Date: 04/11/2008 06:43:48 ******/
ALTER TABLE [dbo].[KbArticleCommentBase]  WITH NOCHECK ADD  CONSTRAINT [kbarticle_comments] FOREIGN KEY([KbArticleId])
REFERENCES [dbo].[KbArticleBase] ([KbArticleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[KbArticleCommentBase] CHECK CONSTRAINT [kbarticle_comments]

/****** Object:  ForeignKey [organization_kb_article_templates]    Script Date: 04/11/2008 06:43:53 ******/
ALTER TABLE [dbo].[KbArticleTemplateBase]  WITH NOCHECK ADD  CONSTRAINT [organization_kb_article_templates] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[KbArticleTemplateBase] CHECK CONSTRAINT [organization_kb_article_templates]

/****** Object:  ForeignKey [lead_addresses]    Script Date: 04/11/2008 06:44:01 ******/
ALTER TABLE [dbo].[LeadAddressBase]  WITH NOCHECK ADD  CONSTRAINT [lead_addresses] FOREIGN KEY([ParentId])
REFERENCES [dbo].[LeadBase] ([LeadId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadAddressBase] CHECK CONSTRAINT [lead_addresses]

/****** Object:  ForeignKey [account_primary_leads]    Script Date: 04/11/2008 06:44:23 ******/
ALTER TABLE [dbo].[LeadBase]  WITH NOCHECK ADD  CONSTRAINT [account_primary_leads] FOREIGN KEY([AccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadBase] CHECK CONSTRAINT [account_primary_leads]

/****** Object:  ForeignKey [business_unit_leads]    Script Date: 04/11/2008 06:44:23 ******/
ALTER TABLE [dbo].[LeadBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_leads] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadBase] CHECK CONSTRAINT [business_unit_leads]

/****** Object:  ForeignKey [campaign_leads]    Script Date: 04/11/2008 06:44:23 ******/
ALTER TABLE [dbo].[LeadBase]  WITH NOCHECK ADD  CONSTRAINT [campaign_leads] FOREIGN KEY([CampaignId])
REFERENCES [dbo].[CampaignBase] ([CampaignId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadBase] CHECK CONSTRAINT [campaign_leads]

/****** Object:  ForeignKey [contact_primary_leads]    Script Date: 04/11/2008 06:44:23 ******/
ALTER TABLE [dbo].[LeadBase]  WITH NOCHECK ADD  CONSTRAINT [contact_primary_leads] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadBase] CHECK CONSTRAINT [contact_primary_leads]

/****** Object:  ForeignKey [lead_master_lead]    Script Date: 04/11/2008 06:44:23 ******/
ALTER TABLE [dbo].[LeadBase]  WITH NOCHECK ADD  CONSTRAINT [lead_master_lead] FOREIGN KEY([MasterId])
REFERENCES [dbo].[LeadBase] ([LeadId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadBase] CHECK CONSTRAINT [lead_master_lead]

/****** Object:  ForeignKey [lead_owning_team]    Script Date: 04/11/2008 06:44:23 ******/
ALTER TABLE [dbo].[LeadBase]  WITH NOCHECK ADD  CONSTRAINT [lead_owning_team] FOREIGN KEY([OwningTeam])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadBase] CHECK CONSTRAINT [lead_owning_team]

/****** Object:  ForeignKey [lead_owning_user]    Script Date: 04/11/2008 06:44:23 ******/
ALTER TABLE [dbo].[LeadBase]  WITH NOCHECK ADD  CONSTRAINT [lead_owning_user] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadBase] CHECK CONSTRAINT [lead_owning_user]

/****** Object:  ForeignKey [transactioncurrency_lead]    Script Date: 04/11/2008 06:44:24 ******/
ALTER TABLE [dbo].[LeadBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_lead] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadBase] CHECK CONSTRAINT [transactioncurrency_lead]

/****** Object:  ForeignKey [competitor_leads]    Script Date: 04/11/2008 06:44:26 ******/
ALTER TABLE [dbo].[LeadCompetitors]  WITH NOCHECK ADD  CONSTRAINT [competitor_leads] FOREIGN KEY([CompetitorId])
REFERENCES [dbo].[CompetitorBase] ([CompetitorId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadCompetitors] CHECK CONSTRAINT [competitor_leads]

/****** Object:  ForeignKey [lead_competitors]    Script Date: 04/11/2008 06:44:26 ******/
ALTER TABLE [dbo].[LeadCompetitors]  WITH NOCHECK ADD  CONSTRAINT [lead_competitors] FOREIGN KEY([LeadId])
REFERENCES [dbo].[LeadBase] ([LeadId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadCompetitors] CHECK CONSTRAINT [lead_competitors]

/****** Object:  ForeignKey [lead_products]    Script Date: 04/11/2008 06:44:29 ******/
ALTER TABLE [dbo].[LeadProduct]  WITH NOCHECK ADD  CONSTRAINT [lead_products] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadProduct] CHECK CONSTRAINT [lead_products]

/****** Object:  ForeignKey [product_leads]    Script Date: 04/11/2008 06:44:29 ******/
ALTER TABLE [dbo].[LeadProduct]  WITH NOCHECK ADD  CONSTRAINT [product_leads] FOREIGN KEY([LeadId])
REFERENCES [dbo].[LeadBase] ([LeadId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LeadProduct] CHECK CONSTRAINT [product_leads]

/****** Object:  ForeignKey [activity_pointer_letter]    Script Date: 04/11/2008 06:44:31 ******/
ALTER TABLE [dbo].[LetterBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_letter] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LetterBase] CHECK CONSTRAINT [activity_pointer_letter]

/****** Object:  ForeignKey [organization_licenses]    Script Date: 04/11/2008 06:44:35 ******/
ALTER TABLE [dbo].[License]  WITH NOCHECK ADD  CONSTRAINT [organization_licenses] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[License] CHECK CONSTRAINT [organization_licenses]

/****** Object:  ForeignKey [business_unit_list]    Script Date: 04/11/2008 06:44:44 ******/
ALTER TABLE [dbo].[ListBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_list] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ListBase] CHECK CONSTRAINT [business_unit_list]

/****** Object:  ForeignKey [transactioncurrency_list]    Script Date: 04/11/2008 06:44:44 ******/
ALTER TABLE [dbo].[ListBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_list] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ListBase] CHECK CONSTRAINT [transactioncurrency_list]

/****** Object:  ForeignKey [user_list]    Script Date: 04/11/2008 06:44:45 ******/
ALTER TABLE [dbo].[ListBase]  WITH NOCHECK ADD  CONSTRAINT [user_list] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ListBase] CHECK CONSTRAINT [user_list]

/****** Object:  ForeignKey [list_member]    Script Date: 04/11/2008 06:44:48 ******/
ALTER TABLE [dbo].[ListMemberBase]  WITH NOCHECK ADD  CONSTRAINT [list_member] FOREIGN KEY([ListId])
REFERENCES [dbo].[ListBase] ([ListId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ListMemberBase] CHECK CONSTRAINT [list_member]

/****** Object:  ForeignKey [LookUpMapping_ColumnMapping]    Script Date: 04/11/2008 06:44:53 ******/
ALTER TABLE [dbo].[LookUpMappingBase]  WITH NOCHECK ADD  CONSTRAINT [LookUpMapping_ColumnMapping] FOREIGN KEY([ColumnMappingId])
REFERENCES [dbo].[ColumnMappingBase] ([ColumnMappingId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LookUpMappingBase] CHECK CONSTRAINT [LookUpMapping_ColumnMapping]

/****** Object:  ForeignKey [LookUpMapping_TransformationParameterMapping]    Script Date: 04/11/2008 06:44:53 ******/
ALTER TABLE [dbo].[LookUpMappingBase]  WITH NOCHECK ADD  CONSTRAINT [LookUpMapping_TransformationParameterMapping] FOREIGN KEY([TransformationParameterMappingId])
REFERENCES [dbo].[TransformationParameterMappingBase] ([TransformationParameterMappingId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[LookUpMappingBase] CHECK CONSTRAINT [LookUpMapping_TransformationParameterMapping]

/****** Object:  ForeignKey [business_unit_mailmergetemplates]    Script Date: 04/11/2008 06:45:01 ******/
ALTER TABLE [dbo].[MailMergeTemplateBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_mailmergetemplates] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[MailMergeTemplateBase] CHECK CONSTRAINT [business_unit_mailmergetemplates]

/****** Object:  ForeignKey [business_unit_new_entity1]    Script Date: 04/11/2008 06:45:10 ******/
ALTER TABLE [dbo].[New_entity1Base]  WITH NOCHECK ADD  CONSTRAINT [business_unit_new_entity1] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[New_entity1Base] CHECK CONSTRAINT [business_unit_new_entity1]

/****** Object:  ForeignKey [user_new_entity1]    Script Date: 04/11/2008 06:45:10 ******/
ALTER TABLE [dbo].[New_entity1Base]  WITH NOCHECK ADD  CONSTRAINT [user_new_entity1] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[New_entity1Base] CHECK CONSTRAINT [user_new_entity1]

/****** Object:  ForeignKey [FK_New_entity1ExtensionBase_New_entity1Base]    Script Date: 04/11/2008 06:45:13 ******/
ALTER TABLE [dbo].[New_entity1ExtensionBase]  WITH CHECK ADD  CONSTRAINT [FK_New_entity1ExtensionBase_New_entity1Base] FOREIGN KEY([New_entity1Id])
REFERENCES [dbo].[New_entity1Base] ([New_entity1Id])

ALTER TABLE [dbo].[New_entity1ExtensionBase] CHECK CONSTRAINT [FK_New_entity1ExtensionBase_New_entity1Base]

/****** Object:  ForeignKey [business_unit_opportunities]    Script Date: 04/11/2008 06:45:28 ******/
ALTER TABLE [dbo].[OpportunityBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_opportunities] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityBase] CHECK CONSTRAINT [business_unit_opportunities]

/****** Object:  ForeignKey [campaign_opportunities]    Script Date: 04/11/2008 06:45:28 ******/
ALTER TABLE [dbo].[OpportunityBase]  WITH NOCHECK ADD  CONSTRAINT [campaign_opportunities] FOREIGN KEY([CampaignId])
REFERENCES [dbo].[CampaignBase] ([CampaignId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityBase] CHECK CONSTRAINT [campaign_opportunities]

/****** Object:  ForeignKey [opportunity_originating_lead]    Script Date: 04/11/2008 06:45:29 ******/
ALTER TABLE [dbo].[OpportunityBase]  WITH NOCHECK ADD  CONSTRAINT [opportunity_originating_lead] FOREIGN KEY([OriginatingLeadId])
REFERENCES [dbo].[LeadBase] ([LeadId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityBase] CHECK CONSTRAINT [opportunity_originating_lead]

/****** Object:  ForeignKey [opportunity_owning_user]    Script Date: 04/11/2008 06:45:29 ******/
ALTER TABLE [dbo].[OpportunityBase]  WITH NOCHECK ADD  CONSTRAINT [opportunity_owning_user] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityBase] CHECK CONSTRAINT [opportunity_owning_user]

/****** Object:  ForeignKey [opportunity_primary_accounts]    Script Date: 04/11/2008 06:45:29 ******/
ALTER TABLE [dbo].[OpportunityBase]  WITH NOCHECK ADD  CONSTRAINT [opportunity_primary_accounts] FOREIGN KEY([AccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityBase] CHECK CONSTRAINT [opportunity_primary_accounts]

/****** Object:  ForeignKey [opportunity_primary_contacts]    Script Date: 04/11/2008 06:45:29 ******/
ALTER TABLE [dbo].[OpportunityBase]  WITH NOCHECK ADD  CONSTRAINT [opportunity_primary_contacts] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityBase] CHECK CONSTRAINT [opportunity_primary_contacts]

/****** Object:  ForeignKey [price_level_opportunties]    Script Date: 04/11/2008 06:45:29 ******/
ALTER TABLE [dbo].[OpportunityBase]  WITH NOCHECK ADD  CONSTRAINT [price_level_opportunties] FOREIGN KEY([PriceLevelId])
REFERENCES [dbo].[PriceLevelBase] ([PriceLevelId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityBase] CHECK CONSTRAINT [price_level_opportunties]

/****** Object:  ForeignKey [team_opportunities]    Script Date: 04/11/2008 06:45:29 ******/
ALTER TABLE [dbo].[OpportunityBase]  WITH NOCHECK ADD  CONSTRAINT [team_opportunities] FOREIGN KEY([OwningTeam])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityBase] CHECK CONSTRAINT [team_opportunities]

/****** Object:  ForeignKey [transactioncurrency_opportunity]    Script Date: 04/11/2008 06:45:30 ******/
ALTER TABLE [dbo].[OpportunityBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_opportunity] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityBase] CHECK CONSTRAINT [transactioncurrency_opportunity]

/****** Object:  ForeignKey [activity_pointer_opportunity_close]    Script Date: 04/11/2008 06:45:33 ******/
ALTER TABLE [dbo].[OpportunityCloseBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_opportunity_close] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityCloseBase] CHECK CONSTRAINT [activity_pointer_opportunity_close]

/****** Object:  ForeignKey [competitor_opportunity_activities]    Script Date: 04/11/2008 06:45:33 ******/
ALTER TABLE [dbo].[OpportunityCloseBase]  WITH NOCHECK ADD  CONSTRAINT [competitor_opportunity_activities] FOREIGN KEY([CompetitorId])
REFERENCES [dbo].[CompetitorBase] ([CompetitorId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityCloseBase] CHECK CONSTRAINT [competitor_opportunity_activities]

/****** Object:  ForeignKey [transactioncurrency_opportunityclose]    Script Date: 04/11/2008 06:45:33 ******/
ALTER TABLE [dbo].[OpportunityCloseBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_opportunityclose] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityCloseBase] CHECK CONSTRAINT [transactioncurrency_opportunityclose]

/****** Object:  ForeignKey [competitor_opportunities]    Script Date: 04/11/2008 06:45:35 ******/
ALTER TABLE [dbo].[OpportunityCompetitors]  WITH NOCHECK ADD  CONSTRAINT [competitor_opportunities] FOREIGN KEY([CompetitorId])
REFERENCES [dbo].[CompetitorBase] ([CompetitorId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityCompetitors] CHECK CONSTRAINT [competitor_opportunities]

/****** Object:  ForeignKey [opportunity_competitors]    Script Date: 04/11/2008 06:45:35 ******/
ALTER TABLE [dbo].[OpportunityCompetitors]  WITH NOCHECK ADD  CONSTRAINT [opportunity_competitors] FOREIGN KEY([OpportunityId])
REFERENCES [dbo].[OpportunityBase] ([OpportunityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityCompetitors] CHECK CONSTRAINT [opportunity_competitors]

/****** Object:  ForeignKey [opportunity_products]    Script Date: 04/11/2008 06:45:46 ******/
ALTER TABLE [dbo].[OpportunityProductBase]  WITH NOCHECK ADD  CONSTRAINT [opportunity_products] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityProductBase] CHECK CONSTRAINT [opportunity_products]

/****** Object:  ForeignKey [product_opportunities]    Script Date: 04/11/2008 06:45:46 ******/
ALTER TABLE [dbo].[OpportunityProductBase]  WITH NOCHECK ADD  CONSTRAINT [product_opportunities] FOREIGN KEY([OpportunityId])
REFERENCES [dbo].[OpportunityBase] ([OpportunityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityProductBase] CHECK CONSTRAINT [product_opportunities]

/****** Object:  ForeignKey [transactioncurrency_opportunityproduct]    Script Date: 04/11/2008 06:45:46 ******/
ALTER TABLE [dbo].[OpportunityProductBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_opportunityproduct] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityProductBase] CHECK CONSTRAINT [transactioncurrency_opportunityproduct]

/****** Object:  ForeignKey [unit_of_measurement_opportunity_products]    Script Date: 04/11/2008 06:45:46 ******/
ALTER TABLE [dbo].[OpportunityProductBase]  WITH NOCHECK ADD  CONSTRAINT [unit_of_measurement_opportunity_products] FOREIGN KEY([UoMId])
REFERENCES [dbo].[UoMBase] ([UoMId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OpportunityProductBase] CHECK CONSTRAINT [unit_of_measurement_opportunity_products]

/****** Object:  ForeignKey [activity_pointer_order_close]    Script Date: 04/11/2008 06:45:49 ******/
ALTER TABLE [dbo].[OrderCloseBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_order_close] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OrderCloseBase] CHECK CONSTRAINT [activity_pointer_order_close]

/****** Object:  ForeignKey [basecurrency_organization]    Script Date: 04/11/2008 06:46:33 ******/
ALTER TABLE [dbo].[OrganizationBase]  WITH NOCHECK ADD  CONSTRAINT [basecurrency_organization] FOREIGN KEY([BaseCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OrganizationBase] CHECK CONSTRAINT [basecurrency_organization]

/****** Object:  ForeignKey [calendar_organization]    Script Date: 04/11/2008 06:46:33 ******/
ALTER TABLE [dbo].[OrganizationBase]  WITH NOCHECK ADD  CONSTRAINT [calendar_organization] FOREIGN KEY([BusinessClosureCalendarId])
REFERENCES [dbo].[CalendarBase] ([CalendarId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OrganizationBase] CHECK CONSTRAINT [calendar_organization]

/****** Object:  ForeignKey [Template_Organization]    Script Date: 04/11/2008 06:46:33 ******/
ALTER TABLE [dbo].[OrganizationBase]  WITH NOCHECK ADD  CONSTRAINT [Template_Organization] FOREIGN KEY([AcknowledgementTemplateId])
REFERENCES [dbo].[TemplateBase] ([TemplateId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OrganizationBase] CHECK CONSTRAINT [Template_Organization]

/****** Object:  ForeignKey [organization_forms]    Script Date: 04/11/2008 06:46:40 ******/
ALTER TABLE [dbo].[OrganizationUIBase]  WITH NOCHECK ADD  CONSTRAINT [organization_forms] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OrganizationUIBase] CHECK CONSTRAINT [organization_forms]

/****** Object:  ForeignKey [OwnerMapping_ImportMap]    Script Date: 04/11/2008 06:46:45 ******/
ALTER TABLE [dbo].[OwnerMappingBase]  WITH NOCHECK ADD  CONSTRAINT [OwnerMapping_ImportMap] FOREIGN KEY([ImportMapId])
REFERENCES [dbo].[ImportMapBase] ([ImportMapId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OwnerMappingBase] CHECK CONSTRAINT [OwnerMapping_ImportMap]

/****** Object:  ForeignKey [OwnerMapping_SystemUser]    Script Date: 04/11/2008 06:46:45 ******/
ALTER TABLE [dbo].[OwnerMappingBase]  WITH NOCHECK ADD  CONSTRAINT [OwnerMapping_SystemUser] FOREIGN KEY([TargetSystemUserId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[OwnerMappingBase] CHECK CONSTRAINT [OwnerMapping_SystemUser]

/****** Object:  ForeignKey [organization_philipri_customizationversion]    Script Date: 04/11/2008 06:46:50 ******/
ALTER TABLE [dbo].[philipri_customizationversionBase]  WITH NOCHECK ADD  CONSTRAINT [organization_philipri_customizationversion] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[philipri_customizationversionBase] CHECK CONSTRAINT [organization_philipri_customizationversion]

/****** Object:  ForeignKey [FK_philipri_customizationversionExtensionBase_philipri_customizationversionBase]    Script Date: 04/11/2008 06:46:51 ******/
ALTER TABLE [dbo].[philipri_customizationversionExtensionBase]  WITH CHECK ADD  CONSTRAINT [FK_philipri_customizationversionExtensionBase_philipri_customizationversionBase] FOREIGN KEY([philipri_customizationversionId])
REFERENCES [dbo].[philipri_customizationversionBase] ([philipri_customizationversionId])

ALTER TABLE [dbo].[philipri_customizationversionExtensionBase] CHECK CONSTRAINT [FK_philipri_customizationversionExtensionBase_philipri_customizationversionBase]

/****** Object:  ForeignKey [activity_pointer_phonecall]    Script Date: 04/11/2008 06:46:53 ******/
ALTER TABLE [dbo].[PhoneCallBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_phonecall] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PhoneCallBase] CHECK CONSTRAINT [activity_pointer_phonecall]

/****** Object:  ForeignKey [PickListMapping_ColumnMapping]    Script Date: 04/11/2008 06:46:58 ******/
ALTER TABLE [dbo].[PickListMappingBase]  WITH NOCHECK ADD  CONSTRAINT [PickListMapping_ColumnMapping] FOREIGN KEY([ColumnMappingId])
REFERENCES [dbo].[ColumnMappingBase] ([ColumnMappingId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PickListMappingBase] CHECK CONSTRAINT [PickListMapping_ColumnMapping]

/****** Object:  ForeignKey [createdby_pluginassembly]    Script Date: 04/11/2008 06:47:04 ******/
ALTER TABLE [dbo].[PluginAssemblyBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_pluginassembly] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PluginAssemblyBase] CHECK CONSTRAINT [createdby_pluginassembly]

/****** Object:  ForeignKey [FK_PluginAssemblyId]    Script Date: 04/11/2008 06:47:05 ******/
ALTER TABLE [dbo].[PluginAssemblyBase]  WITH NOCHECK ADD  CONSTRAINT [FK_PluginAssemblyId] FOREIGN KEY([PluginAssemblyId])
REFERENCES [dbo].[PluginAssemblyBaseIds] ([PluginAssemblyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PluginAssemblyBase] CHECK CONSTRAINT [FK_PluginAssemblyId]

/****** Object:  ForeignKey [modifiedby_pluginassembly]    Script Date: 04/11/2008 06:47:05 ******/
ALTER TABLE [dbo].[PluginAssemblyBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_pluginassembly] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PluginAssemblyBase] CHECK CONSTRAINT [modifiedby_pluginassembly]

/****** Object:  ForeignKey [organization_pluginassembly]    Script Date: 04/11/2008 06:47:05 ******/
ALTER TABLE [dbo].[PluginAssemblyBase]  WITH NOCHECK ADD  CONSTRAINT [organization_pluginassembly] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PluginAssemblyBase] CHECK CONSTRAINT [organization_pluginassembly]

/****** Object:  ForeignKey [createdby_plugintype]    Script Date: 04/11/2008 06:47:10 ******/
ALTER TABLE [dbo].[PluginTypeBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_plugintype] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PluginTypeBase] CHECK CONSTRAINT [createdby_plugintype]

/****** Object:  ForeignKey [FK_PluginTypeId]    Script Date: 04/11/2008 06:47:11 ******/
ALTER TABLE [dbo].[PluginTypeBase]  WITH NOCHECK ADD  CONSTRAINT [FK_PluginTypeId] FOREIGN KEY([PluginTypeId])
REFERENCES [dbo].[PluginTypeBaseIds] ([PluginTypeId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PluginTypeBase] CHECK CONSTRAINT [FK_PluginTypeId]

/****** Object:  ForeignKey [modifiedby_plugintype]    Script Date: 04/11/2008 06:47:11 ******/
ALTER TABLE [dbo].[PluginTypeBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_plugintype] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PluginTypeBase] CHECK CONSTRAINT [modifiedby_plugintype]

/****** Object:  ForeignKey [organization_plugintype]    Script Date: 04/11/2008 06:47:11 ******/
ALTER TABLE [dbo].[PluginTypeBase]  WITH NOCHECK ADD  CONSTRAINT [organization_plugintype] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PluginTypeBase] CHECK CONSTRAINT [organization_plugintype]

/****** Object:  ForeignKey [pluginassembly_plugintype]    Script Date: 04/11/2008 06:47:11 ******/
ALTER TABLE [dbo].[PluginTypeBase]  WITH NOCHECK ADD  CONSTRAINT [pluginassembly_plugintype] FOREIGN KEY([PluginAssemblyId])
REFERENCES [dbo].[PluginAssemblyBaseIds] ([PluginAssemblyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PluginTypeBase] CHECK CONSTRAINT [pluginassembly_plugintype]

/****** Object:  ForeignKey [organization_price_levels]    Script Date: 04/11/2008 06:47:18 ******/
ALTER TABLE [dbo].[PriceLevelBase]  WITH NOCHECK ADD  CONSTRAINT [organization_price_levels] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PriceLevelBase] CHECK CONSTRAINT [organization_price_levels]

/****** Object:  ForeignKey [transactioncurrency_pricelevel]    Script Date: 04/11/2008 06:47:19 ******/
ALTER TABLE [dbo].[PriceLevelBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_pricelevel] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PriceLevelBase] CHECK CONSTRAINT [transactioncurrency_pricelevel]

/****** Object:  ForeignKey [FK_PrivilegeObjectTypeCodes]    Script Date: 04/11/2008 06:47:28 ******/
ALTER TABLE [dbo].[PrivilegeObjectTypeCodes]  WITH NOCHECK ADD  CONSTRAINT [FK_PrivilegeObjectTypeCodes] FOREIGN KEY([PrivilegeId])
REFERENCES [dbo].[PrivilegeBase] ([PrivilegeId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[PrivilegeObjectTypeCodes] CHECK CONSTRAINT [FK_PrivilegeObjectTypeCodes]

/****** Object:  ForeignKey [associated_product]    Script Date: 04/11/2008 06:47:30 ******/
ALTER TABLE [dbo].[ProductAssociation]  WITH NOCHECK ADD  CONSTRAINT [associated_product] FOREIGN KEY([AssociatedProduct])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductAssociation] CHECK CONSTRAINT [associated_product]

/****** Object:  ForeignKey [product_association]    Script Date: 04/11/2008 06:47:30 ******/
ALTER TABLE [dbo].[ProductAssociation]  WITH NOCHECK ADD  CONSTRAINT [product_association] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductAssociation] CHECK CONSTRAINT [product_association]

/****** Object:  ForeignKey [organization_products]    Script Date: 04/11/2008 06:47:42 ******/
ALTER TABLE [dbo].[ProductBase]  WITH NOCHECK ADD  CONSTRAINT [organization_products] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductBase] CHECK CONSTRAINT [organization_products]

/****** Object:  ForeignKey [price_level_products]    Script Date: 04/11/2008 06:47:43 ******/
ALTER TABLE [dbo].[ProductBase]  WITH NOCHECK ADD  CONSTRAINT [price_level_products] FOREIGN KEY([PriceLevelId])
REFERENCES [dbo].[PriceLevelBase] ([PriceLevelId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductBase] CHECK CONSTRAINT [price_level_products]

/****** Object:  ForeignKey [subject_products]    Script Date: 04/11/2008 06:47:43 ******/
ALTER TABLE [dbo].[ProductBase]  WITH NOCHECK ADD  CONSTRAINT [subject_products] FOREIGN KEY([SubjectId])
REFERENCES [dbo].[SubjectBase] ([SubjectId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductBase] CHECK CONSTRAINT [subject_products]

/****** Object:  ForeignKey [transactioncurrency_product]    Script Date: 04/11/2008 06:47:43 ******/
ALTER TABLE [dbo].[ProductBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_product] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductBase] CHECK CONSTRAINT [transactioncurrency_product]

/****** Object:  ForeignKey [unit_of_measurement_products]    Script Date: 04/11/2008 06:47:43 ******/
ALTER TABLE [dbo].[ProductBase]  WITH NOCHECK ADD  CONSTRAINT [unit_of_measurement_products] FOREIGN KEY([DefaultUoMId])
REFERENCES [dbo].[UoMBase] ([UoMId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductBase] CHECK CONSTRAINT [unit_of_measurement_products]

/****** Object:  ForeignKey [unit_of_measurement_schedule_products]    Script Date: 04/11/2008 06:47:43 ******/
ALTER TABLE [dbo].[ProductBase]  WITH NOCHECK ADD  CONSTRAINT [unit_of_measurement_schedule_products] FOREIGN KEY([DefaultUoMScheduleId])
REFERENCES [dbo].[UoMScheduleBase] ([UoMScheduleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductBase] CHECK CONSTRAINT [unit_of_measurement_schedule_products]

/****** Object:  ForeignKey [discount_type_product_price_levels]    Script Date: 04/11/2008 06:47:52 ******/
ALTER TABLE [dbo].[ProductPriceLevelBase]  WITH NOCHECK ADD  CONSTRAINT [discount_type_product_price_levels] FOREIGN KEY([DiscountTypeId])
REFERENCES [dbo].[DiscountTypeBase] ([DiscountTypeId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductPriceLevelBase] CHECK CONSTRAINT [discount_type_product_price_levels]

/****** Object:  ForeignKey [price_level_product_price_levels]    Script Date: 04/11/2008 06:47:52 ******/
ALTER TABLE [dbo].[ProductPriceLevelBase]  WITH NOCHECK ADD  CONSTRAINT [price_level_product_price_levels] FOREIGN KEY([PriceLevelId])
REFERENCES [dbo].[PriceLevelBase] ([PriceLevelId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductPriceLevelBase] CHECK CONSTRAINT [price_level_product_price_levels]

/****** Object:  ForeignKey [product_price_levels]    Script Date: 04/11/2008 06:47:52 ******/
ALTER TABLE [dbo].[ProductPriceLevelBase]  WITH NOCHECK ADD  CONSTRAINT [product_price_levels] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductPriceLevelBase] CHECK CONSTRAINT [product_price_levels]

/****** Object:  ForeignKey [transactioncurrency_productpricelevel]    Script Date: 04/11/2008 06:47:52 ******/
ALTER TABLE [dbo].[ProductPriceLevelBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_productpricelevel] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductPriceLevelBase] CHECK CONSTRAINT [transactioncurrency_productpricelevel]

/****** Object:  ForeignKey [unit_of_measure_schedule_product_price_level]    Script Date: 04/11/2008 06:47:52 ******/
ALTER TABLE [dbo].[ProductPriceLevelBase]  WITH NOCHECK ADD  CONSTRAINT [unit_of_measure_schedule_product_price_level] FOREIGN KEY([UoMScheduleId])
REFERENCES [dbo].[UoMScheduleBase] ([UoMScheduleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductPriceLevelBase] CHECK CONSTRAINT [unit_of_measure_schedule_product_price_level]

/****** Object:  ForeignKey [unit_of_measurement_product_price_levels]    Script Date: 04/11/2008 06:47:52 ******/
ALTER TABLE [dbo].[ProductPriceLevelBase]  WITH NOCHECK ADD  CONSTRAINT [unit_of_measurement_product_price_levels] FOREIGN KEY([UoMId])
REFERENCES [dbo].[UoMBase] ([UoMId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductPriceLevelBase] CHECK CONSTRAINT [unit_of_measurement_product_price_levels]

/****** Object:  ForeignKey [product_sales_literature]    Script Date: 04/11/2008 06:47:55 ******/
ALTER TABLE [dbo].[ProductSalesLiterature]  WITH NOCHECK ADD  CONSTRAINT [product_sales_literature] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductSalesLiterature] CHECK CONSTRAINT [product_sales_literature]

/****** Object:  ForeignKey [sales_literature_products]    Script Date: 04/11/2008 06:47:55 ******/
ALTER TABLE [dbo].[ProductSalesLiterature]  WITH NOCHECK ADD  CONSTRAINT [sales_literature_products] FOREIGN KEY([SalesLiteratureId])
REFERENCES [dbo].[SalesLiteratureBase] ([SalesLiteratureId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductSalesLiterature] CHECK CONSTRAINT [sales_literature_products]

/****** Object:  ForeignKey [product_substitute]    Script Date: 04/11/2008 06:47:57 ******/
ALTER TABLE [dbo].[ProductSubstitute]  WITH NOCHECK ADD  CONSTRAINT [product_substitute] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductSubstitute] CHECK CONSTRAINT [product_substitute]

/****** Object:  ForeignKey [substituted_product]    Script Date: 04/11/2008 06:47:57 ******/
ALTER TABLE [dbo].[ProductSubstitute]  WITH NOCHECK ADD  CONSTRAINT [substituted_product] FOREIGN KEY([SubstitutedProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ProductSubstitute] CHECK CONSTRAINT [substituted_product]

/****** Object:  ForeignKey [business_unit_queues]    Script Date: 04/11/2008 06:48:05 ******/
ALTER TABLE [dbo].[QueueBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_queues] FOREIGN KEY([BusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QueueBase] CHECK CONSTRAINT [business_unit_queues]

/****** Object:  ForeignKey [organization_queues]    Script Date: 04/11/2008 06:48:05 ******/
ALTER TABLE [dbo].[QueueBase]  WITH NOCHECK ADD  CONSTRAINT [organization_queues] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QueueBase] CHECK CONSTRAINT [organization_queues]

/****** Object:  ForeignKey [queue_primary_user]    Script Date: 04/11/2008 06:48:05 ******/
ALTER TABLE [dbo].[QueueBase]  WITH NOCHECK ADD  CONSTRAINT [queue_primary_user] FOREIGN KEY([PrimaryUserId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QueueBase] CHECK CONSTRAINT [queue_primary_user]

/****** Object:  ForeignKey [organization_queueitems]    Script Date: 04/11/2008 06:48:11 ******/
ALTER TABLE [dbo].[QueueItemBase]  WITH NOCHECK ADD  CONSTRAINT [organization_queueitems] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QueueItemBase] CHECK CONSTRAINT [organization_queueitems]

/****** Object:  ForeignKey [queue_entries]    Script Date: 04/11/2008 06:48:11 ******/
ALTER TABLE [dbo].[QueueItemBase]  WITH NOCHECK ADD  CONSTRAINT [queue_entries] FOREIGN KEY([QueueId])
REFERENCES [dbo].[QueueBase] ([QueueId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QueueItemBase] CHECK CONSTRAINT [queue_entries]

/****** Object:  ForeignKey [account_quotes]    Script Date: 04/11/2008 06:48:34 ******/
ALTER TABLE [dbo].[QuoteBase]  WITH NOCHECK ADD  CONSTRAINT [account_quotes] FOREIGN KEY([AccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteBase] CHECK CONSTRAINT [account_quotes]

/****** Object:  ForeignKey [business_unit_quotes]    Script Date: 04/11/2008 06:48:34 ******/
ALTER TABLE [dbo].[QuoteBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_quotes] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteBase] CHECK CONSTRAINT [business_unit_quotes]

/****** Object:  ForeignKey [campaign_quotes]    Script Date: 04/11/2008 06:48:34 ******/
ALTER TABLE [dbo].[QuoteBase]  WITH NOCHECK ADD  CONSTRAINT [campaign_quotes] FOREIGN KEY([CampaignId])
REFERENCES [dbo].[CampaignBase] ([CampaignId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteBase] CHECK CONSTRAINT [campaign_quotes]

/****** Object:  ForeignKey [opportunity_quotes]    Script Date: 04/11/2008 06:48:34 ******/
ALTER TABLE [dbo].[QuoteBase]  WITH NOCHECK ADD  CONSTRAINT [opportunity_quotes] FOREIGN KEY([OpportunityId])
REFERENCES [dbo].[OpportunityBase] ([OpportunityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteBase] CHECK CONSTRAINT [opportunity_quotes]

/****** Object:  ForeignKey [price_level_quotes]    Script Date: 04/11/2008 06:48:34 ******/
ALTER TABLE [dbo].[QuoteBase]  WITH NOCHECK ADD  CONSTRAINT [price_level_quotes] FOREIGN KEY([PriceLevelId])
REFERENCES [dbo].[PriceLevelBase] ([PriceLevelId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteBase] CHECK CONSTRAINT [price_level_quotes]

/****** Object:  ForeignKey [quote_primary_contact]    Script Date: 04/11/2008 06:48:35 ******/
ALTER TABLE [dbo].[QuoteBase]  WITH NOCHECK ADD  CONSTRAINT [quote_primary_contact] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteBase] CHECK CONSTRAINT [quote_primary_contact]

/****** Object:  ForeignKey [system_user_quotes]    Script Date: 04/11/2008 06:48:35 ******/
ALTER TABLE [dbo].[QuoteBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_quotes] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteBase] CHECK CONSTRAINT [system_user_quotes]

/****** Object:  ForeignKey [team_quotes]    Script Date: 04/11/2008 06:48:35 ******/
ALTER TABLE [dbo].[QuoteBase]  WITH NOCHECK ADD  CONSTRAINT [team_quotes] FOREIGN KEY([OwningTeam])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteBase] CHECK CONSTRAINT [team_quotes]

/****** Object:  ForeignKey [transactioncurrency_quote]    Script Date: 04/11/2008 06:48:35 ******/
ALTER TABLE [dbo].[QuoteBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_quote] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteBase] CHECK CONSTRAINT [transactioncurrency_quote]

/****** Object:  ForeignKey [activity_pointer_quote_close]    Script Date: 04/11/2008 06:48:37 ******/
ALTER TABLE [dbo].[QuoteCloseBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_quote_close] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteCloseBase] CHECK CONSTRAINT [activity_pointer_quote_close]

/****** Object:  ForeignKey [product_quote_details]    Script Date: 04/11/2008 06:48:52 ******/
ALTER TABLE [dbo].[QuoteDetailBase]  WITH NOCHECK ADD  CONSTRAINT [product_quote_details] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteDetailBase] CHECK CONSTRAINT [product_quote_details]

/****** Object:  ForeignKey [quote_details]    Script Date: 04/11/2008 06:48:52 ******/
ALTER TABLE [dbo].[QuoteDetailBase]  WITH NOCHECK ADD  CONSTRAINT [quote_details] FOREIGN KEY([QuoteId])
REFERENCES [dbo].[QuoteBase] ([QuoteId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteDetailBase] CHECK CONSTRAINT [quote_details]

/****** Object:  ForeignKey [system_user_quotedetail]    Script Date: 04/11/2008 06:48:52 ******/
ALTER TABLE [dbo].[QuoteDetailBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_quotedetail] FOREIGN KEY([SalesRepId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteDetailBase] CHECK CONSTRAINT [system_user_quotedetail]

/****** Object:  ForeignKey [transactioncurrency_quotedetail]    Script Date: 04/11/2008 06:48:52 ******/
ALTER TABLE [dbo].[QuoteDetailBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_quotedetail] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteDetailBase] CHECK CONSTRAINT [transactioncurrency_quotedetail]

/****** Object:  ForeignKey [unit_of_measurement_quote_details]    Script Date: 04/11/2008 06:48:52 ******/
ALTER TABLE [dbo].[QuoteDetailBase]  WITH NOCHECK ADD  CONSTRAINT [unit_of_measurement_quote_details] FOREIGN KEY([UoMId])
REFERENCES [dbo].[UoMBase] ([UoMId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[QuoteDetailBase] CHECK CONSTRAINT [unit_of_measurement_quote_details]

/****** Object:  ForeignKey [organization_relationship_roles]    Script Date: 04/11/2008 06:48:59 ******/
ALTER TABLE [dbo].[RelationshipRoleBase]  WITH NOCHECK ADD  CONSTRAINT [organization_relationship_roles] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[RelationshipRoleBase] CHECK CONSTRAINT [organization_relationship_roles]

/****** Object:  ForeignKey [relationship_role_relationship_role_map]    Script Date: 04/11/2008 06:49:02 ******/
ALTER TABLE [dbo].[RelationshipRoleMapBase]  WITH NOCHECK ADD  CONSTRAINT [relationship_role_relationship_role_map] FOREIGN KEY([RelationshipRoleId])
REFERENCES [dbo].[RelationshipRoleBase] ([RelationshipRoleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[RelationshipRoleMapBase] CHECK CONSTRAINT [relationship_role_relationship_role_map]

/****** Object:  ForeignKey [business_unit_reports]    Script Date: 04/11/2008 06:49:12 ******/
ALTER TABLE [dbo].[ReportBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_reports] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ReportBase] CHECK CONSTRAINT [business_unit_reports]

/****** Object:  ForeignKey [report_parent_report]    Script Date: 04/11/2008 06:49:12 ******/
ALTER TABLE [dbo].[ReportBase]  WITH NOCHECK ADD  CONSTRAINT [report_parent_report] FOREIGN KEY([ParentReportId])
REFERENCES [dbo].[ReportBase] ([ReportId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ReportBase] CHECK CONSTRAINT [report_parent_report]

/****** Object:  ForeignKey [business_unit_resources]    Script Date: 04/11/2008 06:49:30 ******/
ALTER TABLE [dbo].[ResourceBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_resources] FOREIGN KEY([BusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ResourceBase] CHECK CONSTRAINT [business_unit_resources]

/****** Object:  ForeignKey [organization_resources]    Script Date: 04/11/2008 06:49:30 ******/
ALTER TABLE [dbo].[ResourceBase]  WITH NOCHECK ADD  CONSTRAINT [organization_resources] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ResourceBase] CHECK CONSTRAINT [organization_resources]

/****** Object:  ForeignKey [site_resources]    Script Date: 04/11/2008 06:49:30 ******/
ALTER TABLE [dbo].[ResourceBase]  WITH NOCHECK ADD  CONSTRAINT [site_resources] FOREIGN KEY([SiteId])
REFERENCES [dbo].[SiteBase] ([SiteId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ResourceBase] CHECK CONSTRAINT [site_resources]

/****** Object:  ForeignKey [business_unit_resource_groups]    Script Date: 04/11/2008 06:49:33 ******/
ALTER TABLE [dbo].[ResourceGroupBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_resource_groups] FOREIGN KEY([BusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ResourceGroupBase] CHECK CONSTRAINT [business_unit_resource_groups]

/****** Object:  ForeignKey [organization_resource_groups]    Script Date: 04/11/2008 06:49:33 ******/
ALTER TABLE [dbo].[ResourceGroupBase]  WITH NOCHECK ADD  CONSTRAINT [organization_resource_groups] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ResourceGroupBase] CHECK CONSTRAINT [organization_resource_groups]

/****** Object:  ForeignKey [business_unit_resource_specs]    Script Date: 04/11/2008 06:49:41 ******/
ALTER TABLE [dbo].[ResourceSpecBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_resource_specs] FOREIGN KEY([BusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ResourceSpecBase] CHECK CONSTRAINT [business_unit_resource_specs]

/****** Object:  ForeignKey [organization_resource_specs]    Script Date: 04/11/2008 06:49:41 ******/
ALTER TABLE [dbo].[ResourceSpecBase]  WITH NOCHECK ADD  CONSTRAINT [organization_resource_specs] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ResourceSpecBase] CHECK CONSTRAINT [organization_resource_specs]

/****** Object:  ForeignKey [business_unit_roles]    Script Date: 04/11/2008 06:49:45 ******/
ALTER TABLE [dbo].[RoleBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_roles] FOREIGN KEY([BusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[RoleBase] CHECK CONSTRAINT [business_unit_roles]

/****** Object:  ForeignKey [organization_roles]    Script Date: 04/11/2008 06:49:46 ******/
ALTER TABLE [dbo].[RoleBase]  WITH NOCHECK ADD  CONSTRAINT [organization_roles] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[RoleBase] CHECK CONSTRAINT [organization_roles]

/****** Object:  ForeignKey [role_parent_role]    Script Date: 04/11/2008 06:49:46 ******/
ALTER TABLE [dbo].[RoleBase]  WITH NOCHECK ADD  CONSTRAINT [role_parent_role] FOREIGN KEY([ParentRoleId])
REFERENCES [dbo].[RoleBase] ([RoleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[RoleBase] CHECK CONSTRAINT [role_parent_role]

/****** Object:  ForeignKey [role_template_roles]    Script Date: 04/11/2008 06:49:46 ******/
ALTER TABLE [dbo].[RoleBase]  WITH NOCHECK ADD  CONSTRAINT [role_template_roles] FOREIGN KEY([RoleTemplateId])
REFERENCES [dbo].[RoleTemplateBase] ([RoleTemplateId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[RoleBase] CHECK CONSTRAINT [role_template_roles]

/****** Object:  ForeignKey [privilege_roles]    Script Date: 04/11/2008 06:49:48 ******/
ALTER TABLE [dbo].[RolePrivileges]  WITH NOCHECK ADD  CONSTRAINT [privilege_roles] FOREIGN KEY([PrivilegeId])
REFERENCES [dbo].[PrivilegeBase] ([PrivilegeId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[RolePrivileges] CHECK CONSTRAINT [privilege_roles]

/****** Object:  ForeignKey [role_privileges]    Script Date: 04/11/2008 06:49:48 ******/
ALTER TABLE [dbo].[RolePrivileges]  WITH NOCHECK ADD  CONSTRAINT [role_privileges] FOREIGN KEY([RoleId])
REFERENCES [dbo].[RoleBase] ([RoleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[RolePrivileges] CHECK CONSTRAINT [role_privileges]

/****** Object:  ForeignKey [privilege_role_templates]    Script Date: 04/11/2008 06:49:53 ******/
ALTER TABLE [dbo].[RoleTemplatePrivileges]  WITH NOCHECK ADD  CONSTRAINT [privilege_role_templates] FOREIGN KEY([PrivilegeId])
REFERENCES [dbo].[PrivilegeBase] ([PrivilegeId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[RoleTemplatePrivileges] CHECK CONSTRAINT [privilege_role_templates]

/****** Object:  ForeignKey [role_template_privileges]    Script Date: 04/11/2008 06:49:54 ******/
ALTER TABLE [dbo].[RoleTemplatePrivileges]  WITH NOCHECK ADD  CONSTRAINT [role_template_privileges] FOREIGN KEY([RoleTemplateId])
REFERENCES [dbo].[RoleTemplateBase] ([RoleTemplateId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[RoleTemplatePrivileges] CHECK CONSTRAINT [role_template_privileges]

/****** Object:  ForeignKey [organization_sales_literature]    Script Date: 04/11/2008 06:50:00 ******/
ALTER TABLE [dbo].[SalesLiteratureBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sales_literature] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesLiteratureBase] CHECK CONSTRAINT [organization_sales_literature]

/****** Object:  ForeignKey [subject_sales_literature]    Script Date: 04/11/2008 06:50:00 ******/
ALTER TABLE [dbo].[SalesLiteratureBase]  WITH NOCHECK ADD  CONSTRAINT [subject_sales_literature] FOREIGN KEY([SubjectId])
REFERENCES [dbo].[SubjectBase] ([SubjectId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesLiteratureBase] CHECK CONSTRAINT [subject_sales_literature]

/****** Object:  ForeignKey [system_user_sales_literature]    Script Date: 04/11/2008 06:50:00 ******/
ALTER TABLE [dbo].[SalesLiteratureBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_sales_literature] FOREIGN KEY([EmployeeContactId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesLiteratureBase] CHECK CONSTRAINT [system_user_sales_literature]

/****** Object:  ForeignKey [sales_literature_items]    Script Date: 04/11/2008 06:50:07 ******/
ALTER TABLE [dbo].[SalesLiteratureItemBase]  WITH NOCHECK ADD  CONSTRAINT [sales_literature_items] FOREIGN KEY([SalesLiteratureId])
REFERENCES [dbo].[SalesLiteratureBase] ([SalesLiteratureId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesLiteratureItemBase] CHECK CONSTRAINT [sales_literature_items]

/****** Object:  ForeignKey [account_orders]    Script Date: 04/11/2008 06:50:31 ******/
ALTER TABLE [dbo].[SalesOrderBase]  WITH NOCHECK ADD  CONSTRAINT [account_orders] FOREIGN KEY([AccountId])
REFERENCES [dbo].[AccountBase] ([AccountId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderBase] CHECK CONSTRAINT [account_orders]

/****** Object:  ForeignKey [business_unit_orders]    Script Date: 04/11/2008 06:50:31 ******/
ALTER TABLE [dbo].[SalesOrderBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_orders] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderBase] CHECK CONSTRAINT [business_unit_orders]

/****** Object:  ForeignKey [campaign_orders]    Script Date: 04/11/2008 06:50:31 ******/
ALTER TABLE [dbo].[SalesOrderBase]  WITH NOCHECK ADD  CONSTRAINT [campaign_orders] FOREIGN KEY([CampaignId])
REFERENCES [dbo].[CampaignBase] ([CampaignId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderBase] CHECK CONSTRAINT [campaign_orders]

/****** Object:  ForeignKey [opportunity_sales_orders]    Script Date: 04/11/2008 06:50:31 ******/
ALTER TABLE [dbo].[SalesOrderBase]  WITH NOCHECK ADD  CONSTRAINT [opportunity_sales_orders] FOREIGN KEY([OpportunityId])
REFERENCES [dbo].[OpportunityBase] ([OpportunityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderBase] CHECK CONSTRAINT [opportunity_sales_orders]

/****** Object:  ForeignKey [order_primary_contact]    Script Date: 04/11/2008 06:50:32 ******/
ALTER TABLE [dbo].[SalesOrderBase]  WITH NOCHECK ADD  CONSTRAINT [order_primary_contact] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderBase] CHECK CONSTRAINT [order_primary_contact]

/****** Object:  ForeignKey [price_level_orders]    Script Date: 04/11/2008 06:50:32 ******/
ALTER TABLE [dbo].[SalesOrderBase]  WITH NOCHECK ADD  CONSTRAINT [price_level_orders] FOREIGN KEY([PriceLevelId])
REFERENCES [dbo].[PriceLevelBase] ([PriceLevelId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderBase] CHECK CONSTRAINT [price_level_orders]

/****** Object:  ForeignKey [quote_orders]    Script Date: 04/11/2008 06:50:32 ******/
ALTER TABLE [dbo].[SalesOrderBase]  WITH NOCHECK ADD  CONSTRAINT [quote_orders] FOREIGN KEY([QuoteId])
REFERENCES [dbo].[QuoteBase] ([QuoteId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderBase] CHECK CONSTRAINT [quote_orders]

/****** Object:  ForeignKey [system_user_orders]    Script Date: 04/11/2008 06:50:32 ******/
ALTER TABLE [dbo].[SalesOrderBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_orders] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderBase] CHECK CONSTRAINT [system_user_orders]

/****** Object:  ForeignKey [team_orders]    Script Date: 04/11/2008 06:50:32 ******/
ALTER TABLE [dbo].[SalesOrderBase]  WITH NOCHECK ADD  CONSTRAINT [team_orders] FOREIGN KEY([OwningTeam])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderBase] CHECK CONSTRAINT [team_orders]

/****** Object:  ForeignKey [transactioncurrency_salesorder]    Script Date: 04/11/2008 06:50:32 ******/
ALTER TABLE [dbo].[SalesOrderBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_salesorder] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderBase] CHECK CONSTRAINT [transactioncurrency_salesorder]

/****** Object:  ForeignKey [order_details]    Script Date: 04/11/2008 06:50:48 ******/
ALTER TABLE [dbo].[SalesOrderDetailBase]  WITH NOCHECK ADD  CONSTRAINT [order_details] FOREIGN KEY([SalesOrderId])
REFERENCES [dbo].[SalesOrderBase] ([SalesOrderId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderDetailBase] CHECK CONSTRAINT [order_details]

/****** Object:  ForeignKey [product_order_details]    Script Date: 04/11/2008 06:50:48 ******/
ALTER TABLE [dbo].[SalesOrderDetailBase]  WITH NOCHECK ADD  CONSTRAINT [product_order_details] FOREIGN KEY([ProductId])
REFERENCES [dbo].[ProductBase] ([ProductId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderDetailBase] CHECK CONSTRAINT [product_order_details]

/****** Object:  ForeignKey [system_user_salesorderdetail]    Script Date: 04/11/2008 06:50:48 ******/
ALTER TABLE [dbo].[SalesOrderDetailBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_salesorderdetail] FOREIGN KEY([SalesRepId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderDetailBase] CHECK CONSTRAINT [system_user_salesorderdetail]

/****** Object:  ForeignKey [transactioncurrency_salesorderdetail]    Script Date: 04/11/2008 06:50:48 ******/
ALTER TABLE [dbo].[SalesOrderDetailBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_salesorderdetail] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderDetailBase] CHECK CONSTRAINT [transactioncurrency_salesorderdetail]

/****** Object:  ForeignKey [unit_of_measurement_order_details]    Script Date: 04/11/2008 06:50:49 ******/
ALTER TABLE [dbo].[SalesOrderDetailBase]  WITH NOCHECK ADD  CONSTRAINT [unit_of_measurement_order_details] FOREIGN KEY([UoMId])
REFERENCES [dbo].[UoMBase] ([UoMId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SalesOrderDetailBase] CHECK CONSTRAINT [unit_of_measurement_order_details]

/****** Object:  ForeignKey [organization_saved_queries]    Script Date: 04/11/2008 06:50:59 ******/
ALTER TABLE [dbo].[SavedQueryBase]  WITH NOCHECK ADD  CONSTRAINT [organization_saved_queries] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SavedQueryBase] CHECK CONSTRAINT [organization_saved_queries]

/****** Object:  ForeignKey [createdby_sdkmessage]    Script Date: 04/11/2008 06:51:05 ******/
ALTER TABLE [dbo].[SdkMessageBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_sdkmessage] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageBase] CHECK CONSTRAINT [createdby_sdkmessage]

/****** Object:  ForeignKey [FK_SdkMessageId]    Script Date: 04/11/2008 06:51:05 ******/
ALTER TABLE [dbo].[SdkMessageBase]  WITH NOCHECK ADD  CONSTRAINT [FK_SdkMessageId] FOREIGN KEY([SdkMessageId])
REFERENCES [dbo].[SdkMessageBaseIds] ([SdkMessageId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageBase] CHECK CONSTRAINT [FK_SdkMessageId]

/****** Object:  ForeignKey [modifiedby_sdkmessage]    Script Date: 04/11/2008 06:51:05 ******/
ALTER TABLE [dbo].[SdkMessageBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_sdkmessage] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageBase] CHECK CONSTRAINT [modifiedby_sdkmessage]

/****** Object:  ForeignKey [organization_sdkmessage]    Script Date: 04/11/2008 06:51:05 ******/
ALTER TABLE [dbo].[SdkMessageBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sdkmessage] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageBase] CHECK CONSTRAINT [organization_sdkmessage]

/****** Object:  ForeignKey [createdby_sdkmessagefilter]    Script Date: 04/11/2008 06:51:11 ******/
ALTER TABLE [dbo].[SdkMessageFilterBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_sdkmessagefilter] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageFilterBase] CHECK CONSTRAINT [createdby_sdkmessagefilter]

/****** Object:  ForeignKey [FK_SdkMessageFilterId]    Script Date: 04/11/2008 06:51:11 ******/
ALTER TABLE [dbo].[SdkMessageFilterBase]  WITH NOCHECK ADD  CONSTRAINT [FK_SdkMessageFilterId] FOREIGN KEY([SdkMessageFilterId])
REFERENCES [dbo].[SdkMessageFilterBaseIds] ([SdkMessageFilterId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageFilterBase] CHECK CONSTRAINT [FK_SdkMessageFilterId]

/****** Object:  ForeignKey [modifiedby_sdkmessagefilter]    Script Date: 04/11/2008 06:51:12 ******/
ALTER TABLE [dbo].[SdkMessageFilterBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_sdkmessagefilter] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageFilterBase] CHECK CONSTRAINT [modifiedby_sdkmessagefilter]

/****** Object:  ForeignKey [organization_sdkmessagefilter]    Script Date: 04/11/2008 06:51:12 ******/
ALTER TABLE [dbo].[SdkMessageFilterBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sdkmessagefilter] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageFilterBase] CHECK CONSTRAINT [organization_sdkmessagefilter]

/****** Object:  ForeignKey [sdkmessageid_sdkmessagefilter]    Script Date: 04/11/2008 06:51:12 ******/
ALTER TABLE [dbo].[SdkMessageFilterBase]  WITH NOCHECK ADD  CONSTRAINT [sdkmessageid_sdkmessagefilter] FOREIGN KEY([SdkMessageId])
REFERENCES [dbo].[SdkMessageBaseIds] ([SdkMessageId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageFilterBase] CHECK CONSTRAINT [sdkmessageid_sdkmessagefilter]

/****** Object:  ForeignKey [createdby_sdkmessagepair]    Script Date: 04/11/2008 06:51:17 ******/
ALTER TABLE [dbo].[SdkMessagePairBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_sdkmessagepair] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessagePairBase] CHECK CONSTRAINT [createdby_sdkmessagepair]

/****** Object:  ForeignKey [FK_SdkMessagePairId]    Script Date: 04/11/2008 06:51:17 ******/
ALTER TABLE [dbo].[SdkMessagePairBase]  WITH NOCHECK ADD  CONSTRAINT [FK_SdkMessagePairId] FOREIGN KEY([SdkMessagePairId])
REFERENCES [dbo].[SdkMessagePairBaseIds] ([SdkMessagePairId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessagePairBase] CHECK CONSTRAINT [FK_SdkMessagePairId]

/****** Object:  ForeignKey [message_sdkmessagepair]    Script Date: 04/11/2008 06:51:17 ******/
ALTER TABLE [dbo].[SdkMessagePairBase]  WITH NOCHECK ADD  CONSTRAINT [message_sdkmessagepair] FOREIGN KEY([SdkMessageId])
REFERENCES [dbo].[SdkMessageBaseIds] ([SdkMessageId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessagePairBase] CHECK CONSTRAINT [message_sdkmessagepair]

/****** Object:  ForeignKey [modifiedby_sdkmessagepair]    Script Date: 04/11/2008 06:51:18 ******/
ALTER TABLE [dbo].[SdkMessagePairBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_sdkmessagepair] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessagePairBase] CHECK CONSTRAINT [modifiedby_sdkmessagepair]

/****** Object:  ForeignKey [organization_sdkmessagepair]    Script Date: 04/11/2008 06:51:18 ******/
ALTER TABLE [dbo].[SdkMessagePairBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sdkmessagepair] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessagePairBase] CHECK CONSTRAINT [organization_sdkmessagepair]

/****** Object:  ForeignKey [createdby_sdkmessageprocessingstep]    Script Date: 04/11/2008 06:51:27 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_sdkmessageprocessingstep] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepBase] CHECK CONSTRAINT [createdby_sdkmessageprocessingstep]

/****** Object:  ForeignKey [FK_SdkMessageProcessingStepId]    Script Date: 04/11/2008 06:51:27 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepBase]  WITH NOCHECK ADD  CONSTRAINT [FK_SdkMessageProcessingStepId] FOREIGN KEY([SdkMessageProcessingStepId])
REFERENCES [dbo].[SdkMessageProcessingStepBaseIds] ([SdkMessageProcessingStepId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepBase] CHECK CONSTRAINT [FK_SdkMessageProcessingStepId]

/****** Object:  ForeignKey [impersonatinguserid_sdkmessageprocessingstep]    Script Date: 04/11/2008 06:51:27 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepBase]  WITH NOCHECK ADD  CONSTRAINT [impersonatinguserid_sdkmessageprocessingstep] FOREIGN KEY([ImpersonatingUserId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepBase] CHECK CONSTRAINT [impersonatinguserid_sdkmessageprocessingstep]

/****** Object:  ForeignKey [modifiedby_sdkmessageprocessingstep]    Script Date: 04/11/2008 06:51:27 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_sdkmessageprocessingstep] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepBase] CHECK CONSTRAINT [modifiedby_sdkmessageprocessingstep]

/****** Object:  ForeignKey [organization_sdkmessageprocessingstep]    Script Date: 04/11/2008 06:51:27 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sdkmessageprocessingstep] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepBase] CHECK CONSTRAINT [organization_sdkmessageprocessingstep]

/****** Object:  ForeignKey [plugintypeid_sdkmessageprocessingstep]    Script Date: 04/11/2008 06:51:27 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepBase]  WITH NOCHECK ADD  CONSTRAINT [plugintypeid_sdkmessageprocessingstep] FOREIGN KEY([PluginTypeId])
REFERENCES [dbo].[PluginTypeBaseIds] ([PluginTypeId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepBase] CHECK CONSTRAINT [plugintypeid_sdkmessageprocessingstep]

/****** Object:  ForeignKey [sdkmessagefilterid_sdkmessageprocessingstep]    Script Date: 04/11/2008 06:51:28 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepBase]  WITH NOCHECK ADD  CONSTRAINT [sdkmessagefilterid_sdkmessageprocessingstep] FOREIGN KEY([SdkMessageFilterId])
REFERENCES [dbo].[SdkMessageFilterBaseIds] ([SdkMessageFilterId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepBase] CHECK CONSTRAINT [sdkmessagefilterid_sdkmessageprocessingstep]

/****** Object:  ForeignKey [sdkmessageid_sdkmessageprocessingstep]    Script Date: 04/11/2008 06:51:28 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepBase]  WITH NOCHECK ADD  CONSTRAINT [sdkmessageid_sdkmessageprocessingstep] FOREIGN KEY([SdkMessageId])
REFERENCES [dbo].[SdkMessageBaseIds] ([SdkMessageId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepBase] CHECK CONSTRAINT [sdkmessageid_sdkmessageprocessingstep]

/****** Object:  ForeignKey [sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep]    Script Date: 04/11/2008 06:51:28 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepBase]  WITH NOCHECK ADD  CONSTRAINT [sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep] FOREIGN KEY([SdkMessageProcessingStepSecureConfigId])
REFERENCES [dbo].[SdkMessageProcessingStepSecureConfigBaseIds] ([SdkMessageProcessingStepSecureConfigId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepBase] CHECK CONSTRAINT [sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep]

/****** Object:  ForeignKey [createdby_sdkmessageprocessingstepimage]    Script Date: 04/11/2008 06:51:34 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepImageBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_sdkmessageprocessingstepimage] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepImageBase] CHECK CONSTRAINT [createdby_sdkmessageprocessingstepimage]

/****** Object:  ForeignKey [modifiedby_sdkmessageprocessingstepimage]    Script Date: 04/11/2008 06:51:34 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepImageBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_sdkmessageprocessingstepimage] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepImageBase] CHECK CONSTRAINT [modifiedby_sdkmessageprocessingstepimage]

/****** Object:  ForeignKey [organization_sdkmessageprocessingstepimage]    Script Date: 04/11/2008 06:51:34 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepImageBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sdkmessageprocessingstepimage] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepImageBase] CHECK CONSTRAINT [organization_sdkmessageprocessingstepimage]

/****** Object:  ForeignKey [sdkmessageprocessingstepid_sdkmessageprocessingstepimage]    Script Date: 04/11/2008 06:51:35 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepImageBase]  WITH NOCHECK ADD  CONSTRAINT [sdkmessageprocessingstepid_sdkmessageprocessingstepimage] FOREIGN KEY([SdkMessageProcessingStepId])
REFERENCES [dbo].[SdkMessageProcessingStepBaseIds] ([SdkMessageProcessingStepId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepImageBase] CHECK CONSTRAINT [sdkmessageprocessingstepid_sdkmessageprocessingstepimage]

/****** Object:  ForeignKey [createdby_sdkmessageprocessingstepsecureconfig]    Script Date: 04/11/2008 06:51:38 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepSecureConfigBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_sdkmessageprocessingstepsecureconfig] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepSecureConfigBase] CHECK CONSTRAINT [createdby_sdkmessageprocessingstepsecureconfig]

/****** Object:  ForeignKey [FK_SdkMessageProcessingStepSecureConfigId]    Script Date: 04/11/2008 06:51:39 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepSecureConfigBase]  WITH NOCHECK ADD  CONSTRAINT [FK_SdkMessageProcessingStepSecureConfigId] FOREIGN KEY([SdkMessageProcessingStepSecureConfigId])
REFERENCES [dbo].[SdkMessageProcessingStepSecureConfigBaseIds] ([SdkMessageProcessingStepSecureConfigId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepSecureConfigBase] CHECK CONSTRAINT [FK_SdkMessageProcessingStepSecureConfigId]

/****** Object:  ForeignKey [modifiedby_sdkmessageprocessingstepsecureconfig]    Script Date: 04/11/2008 06:51:39 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepSecureConfigBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_sdkmessageprocessingstepsecureconfig] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepSecureConfigBase] CHECK CONSTRAINT [modifiedby_sdkmessageprocessingstepsecureconfig]

/****** Object:  ForeignKey [organization_sdkmessageprocessingstepsecureconfig]    Script Date: 04/11/2008 06:51:39 ******/
ALTER TABLE [dbo].[SdkMessageProcessingStepSecureConfigBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sdkmessageprocessingstepsecureconfig] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageProcessingStepSecureConfigBase] CHECK CONSTRAINT [organization_sdkmessageprocessingstepsecureconfig]

/****** Object:  ForeignKey [createdby_sdkmessagerequest]    Script Date: 04/11/2008 06:51:44 ******/
ALTER TABLE [dbo].[SdkMessageRequestBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_sdkmessagerequest] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestBase] CHECK CONSTRAINT [createdby_sdkmessagerequest]

/****** Object:  ForeignKey [FK_SdkMessageRequestId]    Script Date: 04/11/2008 06:51:44 ******/
ALTER TABLE [dbo].[SdkMessageRequestBase]  WITH NOCHECK ADD  CONSTRAINT [FK_SdkMessageRequestId] FOREIGN KEY([SdkMessageRequestId])
REFERENCES [dbo].[SdkMessageRequestBaseIds] ([SdkMessageRequestId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestBase] CHECK CONSTRAINT [FK_SdkMessageRequestId]

/****** Object:  ForeignKey [messagepair_sdkmessagerequest]    Script Date: 04/11/2008 06:51:44 ******/
ALTER TABLE [dbo].[SdkMessageRequestBase]  WITH NOCHECK ADD  CONSTRAINT [messagepair_sdkmessagerequest] FOREIGN KEY([SdkMessagePairId])
REFERENCES [dbo].[SdkMessagePairBaseIds] ([SdkMessagePairId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestBase] CHECK CONSTRAINT [messagepair_sdkmessagerequest]

/****** Object:  ForeignKey [modifiedby_sdkmessagerequest]    Script Date: 04/11/2008 06:51:44 ******/
ALTER TABLE [dbo].[SdkMessageRequestBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_sdkmessagerequest] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestBase] CHECK CONSTRAINT [modifiedby_sdkmessagerequest]

/****** Object:  ForeignKey [organization_sdkmessagerequest]    Script Date: 04/11/2008 06:51:44 ******/
ALTER TABLE [dbo].[SdkMessageRequestBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sdkmessagerequest] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestBase] CHECK CONSTRAINT [organization_sdkmessagerequest]

/****** Object:  ForeignKey [createdby_sdkmessagerequestfield]    Script Date: 04/11/2008 06:51:51 ******/
ALTER TABLE [dbo].[SdkMessageRequestFieldBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_sdkmessagerequestfield] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestFieldBase] CHECK CONSTRAINT [createdby_sdkmessagerequestfield]

/****** Object:  ForeignKey [messagerequest_sdkmessagerequestfield]    Script Date: 04/11/2008 06:51:51 ******/
ALTER TABLE [dbo].[SdkMessageRequestFieldBase]  WITH NOCHECK ADD  CONSTRAINT [messagerequest_sdkmessagerequestfield] FOREIGN KEY([SdkMessageRequestId])
REFERENCES [dbo].[SdkMessageRequestBaseIds] ([SdkMessageRequestId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestFieldBase] CHECK CONSTRAINT [messagerequest_sdkmessagerequestfield]

/****** Object:  ForeignKey [modifiedby_sdkmessagerequestfield]    Script Date: 04/11/2008 06:51:51 ******/
ALTER TABLE [dbo].[SdkMessageRequestFieldBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_sdkmessagerequestfield] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestFieldBase] CHECK CONSTRAINT [modifiedby_sdkmessagerequestfield]

/****** Object:  ForeignKey [organization_sdkmessagerequestfield]    Script Date: 04/11/2008 06:51:51 ******/
ALTER TABLE [dbo].[SdkMessageRequestFieldBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sdkmessagerequestfield] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestFieldBase] CHECK CONSTRAINT [organization_sdkmessagerequestfield]

/****** Object:  ForeignKey [createdby_sdkmessagerequestinput]    Script Date: 04/11/2008 06:51:56 ******/
ALTER TABLE [dbo].[SdkMessageRequestInputBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_sdkmessagerequestinput] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestInputBase] CHECK CONSTRAINT [createdby_sdkmessagerequestinput]

/****** Object:  ForeignKey [messagerequest_sdkmessagerequestinput]    Script Date: 04/11/2008 06:51:56 ******/
ALTER TABLE [dbo].[SdkMessageRequestInputBase]  WITH NOCHECK ADD  CONSTRAINT [messagerequest_sdkmessagerequestinput] FOREIGN KEY([SdkMessageRequestId])
REFERENCES [dbo].[SdkMessageRequestBaseIds] ([SdkMessageRequestId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestInputBase] CHECK CONSTRAINT [messagerequest_sdkmessagerequestinput]

/****** Object:  ForeignKey [modifiedby_sdkmessagerequestinput]    Script Date: 04/11/2008 06:51:56 ******/
ALTER TABLE [dbo].[SdkMessageRequestInputBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_sdkmessagerequestinput] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestInputBase] CHECK CONSTRAINT [modifiedby_sdkmessagerequestinput]

/****** Object:  ForeignKey [organization_sdkmessagerequestinput]    Script Date: 04/11/2008 06:51:56 ******/
ALTER TABLE [dbo].[SdkMessageRequestInputBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sdkmessagerequestinput] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageRequestInputBase] CHECK CONSTRAINT [organization_sdkmessagerequestinput]

/****** Object:  ForeignKey [createdby_sdkmessageresponse]    Script Date: 04/11/2008 06:52:00 ******/
ALTER TABLE [dbo].[SdkMessageResponseBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_sdkmessageresponse] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageResponseBase] CHECK CONSTRAINT [createdby_sdkmessageresponse]

/****** Object:  ForeignKey [FK_SdkMessageResponseId]    Script Date: 04/11/2008 06:52:00 ******/
ALTER TABLE [dbo].[SdkMessageResponseBase]  WITH NOCHECK ADD  CONSTRAINT [FK_SdkMessageResponseId] FOREIGN KEY([SdkMessageResponseId])
REFERENCES [dbo].[SdkMessageResponseBaseIds] ([SdkMessageResponseId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageResponseBase] CHECK CONSTRAINT [FK_SdkMessageResponseId]

/****** Object:  ForeignKey [messagerequest_sdkmessageresponse]    Script Date: 04/11/2008 06:52:00 ******/
ALTER TABLE [dbo].[SdkMessageResponseBase]  WITH NOCHECK ADD  CONSTRAINT [messagerequest_sdkmessageresponse] FOREIGN KEY([SdkMessageRequestId])
REFERENCES [dbo].[SdkMessageRequestBaseIds] ([SdkMessageRequestId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageResponseBase] CHECK CONSTRAINT [messagerequest_sdkmessageresponse]

/****** Object:  ForeignKey [modifiedby_sdkmessageresponse]    Script Date: 04/11/2008 06:52:00 ******/
ALTER TABLE [dbo].[SdkMessageResponseBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_sdkmessageresponse] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageResponseBase] CHECK CONSTRAINT [modifiedby_sdkmessageresponse]

/****** Object:  ForeignKey [organization_sdkmessageresponse]    Script Date: 04/11/2008 06:52:01 ******/
ALTER TABLE [dbo].[SdkMessageResponseBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sdkmessageresponse] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageResponseBase] CHECK CONSTRAINT [organization_sdkmessageresponse]

/****** Object:  ForeignKey [createdby_sdkmessageresponsefield]    Script Date: 04/11/2008 06:52:07 ******/
ALTER TABLE [dbo].[SdkMessageResponseFieldBase]  WITH NOCHECK ADD  CONSTRAINT [createdby_sdkmessageresponsefield] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageResponseFieldBase] CHECK CONSTRAINT [createdby_sdkmessageresponsefield]

/****** Object:  ForeignKey [messageresponse_sdkmessageresponsefield]    Script Date: 04/11/2008 06:52:07 ******/
ALTER TABLE [dbo].[SdkMessageResponseFieldBase]  WITH NOCHECK ADD  CONSTRAINT [messageresponse_sdkmessageresponsefield] FOREIGN KEY([SdkMessageResponseId])
REFERENCES [dbo].[SdkMessageResponseBaseIds] ([SdkMessageResponseId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageResponseFieldBase] CHECK CONSTRAINT [messageresponse_sdkmessageresponsefield]

/****** Object:  ForeignKey [modifiedby_sdkmessageresponsefield]    Script Date: 04/11/2008 06:52:07 ******/
ALTER TABLE [dbo].[SdkMessageResponseFieldBase]  WITH NOCHECK ADD  CONSTRAINT [modifiedby_sdkmessageresponsefield] FOREIGN KEY([ModifiedBy])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageResponseFieldBase] CHECK CONSTRAINT [modifiedby_sdkmessageresponsefield]

/****** Object:  ForeignKey [organization_sdkmessageresponsefield]    Script Date: 04/11/2008 06:52:07 ******/
ALTER TABLE [dbo].[SdkMessageResponseFieldBase]  WITH NOCHECK ADD  CONSTRAINT [organization_sdkmessageresponsefield] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SdkMessageResponseFieldBase] CHECK CONSTRAINT [organization_sdkmessageresponsefield]

/****** Object:  ForeignKey [activity_pointer_service_appointment]    Script Date: 04/11/2008 06:52:11 ******/
ALTER TABLE [dbo].[ServiceAppointmentBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_service_appointment] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ServiceAppointmentBase] CHECK CONSTRAINT [activity_pointer_service_appointment]

/****** Object:  ForeignKey [site_service_appointments]    Script Date: 04/11/2008 06:52:11 ******/
ALTER TABLE [dbo].[ServiceAppointmentBase]  WITH NOCHECK ADD  CONSTRAINT [site_service_appointments] FOREIGN KEY([SiteId])
REFERENCES [dbo].[SiteBase] ([SiteId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ServiceAppointmentBase] CHECK CONSTRAINT [site_service_appointments]

/****** Object:  ForeignKey [calendar_services]    Script Date: 04/11/2008 06:52:18 ******/
ALTER TABLE [dbo].[ServiceBase]  WITH NOCHECK ADD  CONSTRAINT [calendar_services] FOREIGN KEY([CalendarId])
REFERENCES [dbo].[CalendarBase] ([CalendarId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ServiceBase] CHECK CONSTRAINT [calendar_services]

/****** Object:  ForeignKey [organization_services]    Script Date: 04/11/2008 06:52:19 ******/
ALTER TABLE [dbo].[ServiceBase]  WITH NOCHECK ADD  CONSTRAINT [organization_services] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ServiceBase] CHECK CONSTRAINT [organization_services]

/****** Object:  ForeignKey [plugin_type_service]    Script Date: 04/11/2008 06:52:19 ******/
ALTER TABLE [dbo].[ServiceBase]  WITH NOCHECK ADD  CONSTRAINT [plugin_type_service] FOREIGN KEY([StrategyId])
REFERENCES [dbo].[PluginTypeBaseIds] ([PluginTypeId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ServiceBase] CHECK CONSTRAINT [plugin_type_service]

/****** Object:  ForeignKey [resource_spec_services]    Script Date: 04/11/2008 06:52:19 ******/
ALTER TABLE [dbo].[ServiceBase]  WITH NOCHECK ADD  CONSTRAINT [resource_spec_services] FOREIGN KEY([ResourceSpecId])
REFERENCES [dbo].[ResourceSpecBase] ([ResourceSpecId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ServiceBase] CHECK CONSTRAINT [resource_spec_services]

/****** Object:  ForeignKey [contact_serviced_by_contract]    Script Date: 04/11/2008 06:52:21 ******/
ALTER TABLE [dbo].[ServiceContractContacts]  WITH NOCHECK ADD  CONSTRAINT [contact_serviced_by_contract] FOREIGN KEY([ContactId])
REFERENCES [dbo].[ContactBase] ([ContactId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ServiceContractContacts] CHECK CONSTRAINT [contact_serviced_by_contract]

/****** Object:  ForeignKey [has_service_contacts]    Script Date: 04/11/2008 06:52:21 ******/
ALTER TABLE [dbo].[ServiceContractContacts]  WITH NOCHECK ADD  CONSTRAINT [has_service_contacts] FOREIGN KEY([ContractId])
REFERENCES [dbo].[ContractBase] ([ContractId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[ServiceContractContacts] CHECK CONSTRAINT [has_service_contacts]

/****** Object:  ForeignKey [organization_status_maps]    Script Date: 04/11/2008 06:52:28 ******/
ALTER TABLE [dbo].[StatusMap]  WITH NOCHECK ADD  CONSTRAINT [organization_status_maps] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[StatusMap] CHECK CONSTRAINT [organization_status_maps]

/****** Object:  ForeignKey [organization_string_maps]    Script Date: 04/11/2008 06:52:32 ******/
ALTER TABLE [dbo].[StringMap]  WITH NOCHECK ADD  CONSTRAINT [organization_string_maps] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[StringMap] CHECK CONSTRAINT [organization_string_maps]

/****** Object:  ForeignKey [organization_subjects]    Script Date: 04/11/2008 06:52:36 ******/
ALTER TABLE [dbo].[SubjectBase]  WITH NOCHECK ADD  CONSTRAINT [organization_subjects] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SubjectBase] CHECK CONSTRAINT [organization_subjects]

/****** Object:  ForeignKey [subject_parent_subject]    Script Date: 04/11/2008 06:52:36 ******/
ALTER TABLE [dbo].[SubjectBase]  WITH NOCHECK ADD  CONSTRAINT [subject_parent_subject] FOREIGN KEY([ParentSubject])
REFERENCES [dbo].[SubjectBase] ([SubjectId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SubjectBase] CHECK CONSTRAINT [subject_parent_subject]

/****** Object:  ForeignKey [subscriptionclients_subscription]    Script Date: 04/11/2008 06:52:42 ******/
ALTER TABLE [dbo].[SubscriptionClients]  WITH NOCHECK ADD  CONSTRAINT [subscriptionclients_subscription] FOREIGN KEY([SubscriptionId])
REFERENCES [dbo].[Subscription] ([SubscriptionId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SubscriptionClients] CHECK CONSTRAINT [subscriptionclients_subscription]

/****** Object:  ForeignKey [subscription_subscriptionsyncinfo]    Script Date: 04/11/2008 06:52:48 ******/
ALTER TABLE [dbo].[SubscriptionSyncInfo]  WITH NOCHECK ADD  CONSTRAINT [subscription_subscriptionsyncinfo] FOREIGN KEY([SubscriptionId])
REFERENCES [dbo].[Subscription] ([SubscriptionId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SubscriptionSyncInfo] CHECK CONSTRAINT [subscription_subscriptionsyncinfo]

/****** Object:  ForeignKey [business_unit_system_users]    Script Date: 04/11/2008 06:53:07 ******/
ALTER TABLE [dbo].[SystemUserBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_system_users] FOREIGN KEY([BusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SystemUserBase] CHECK CONSTRAINT [business_unit_system_users]

/****** Object:  ForeignKey [calendar_system_users]    Script Date: 04/11/2008 06:53:07 ******/
ALTER TABLE [dbo].[SystemUserBase]  WITH NOCHECK ADD  CONSTRAINT [calendar_system_users] FOREIGN KEY([CalendarId])
REFERENCES [dbo].[CalendarBase] ([CalendarId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SystemUserBase] CHECK CONSTRAINT [calendar_system_users]

/****** Object:  ForeignKey [organization_system_users]    Script Date: 04/11/2008 06:53:07 ******/
ALTER TABLE [dbo].[SystemUserBase]  WITH NOCHECK ADD  CONSTRAINT [organization_system_users] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SystemUserBase] CHECK CONSTRAINT [organization_system_users]

/****** Object:  ForeignKey [site_system_users]    Script Date: 04/11/2008 06:53:08 ******/
ALTER TABLE [dbo].[SystemUserBase]  WITH NOCHECK ADD  CONSTRAINT [site_system_users] FOREIGN KEY([SiteId])
REFERENCES [dbo].[SiteBase] ([SiteId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SystemUserBase] CHECK CONSTRAINT [site_system_users]

/****** Object:  ForeignKey [territory_system_users]    Script Date: 04/11/2008 06:53:08 ******/
ALTER TABLE [dbo].[SystemUserBase]  WITH NOCHECK ADD  CONSTRAINT [territory_system_users] FOREIGN KEY([TerritoryId])
REFERENCES [dbo].[TerritoryBase] ([TerritoryId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SystemUserBase] CHECK CONSTRAINT [territory_system_users]

/****** Object:  ForeignKey [user_parent_user]    Script Date: 04/11/2008 06:53:08 ******/
ALTER TABLE [dbo].[SystemUserBase]  WITH NOCHECK ADD  CONSTRAINT [user_parent_user] FOREIGN KEY([ParentSystemUserId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SystemUserBase] CHECK CONSTRAINT [user_parent_user]

/****** Object:  ForeignKey [license_system_users]    Script Date: 04/11/2008 06:53:11 ******/
ALTER TABLE [dbo].[SystemUserLicenses]  WITH NOCHECK ADD  CONSTRAINT [license_system_users] FOREIGN KEY([LicenseId])
REFERENCES [dbo].[License] ([LicenseId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SystemUserLicenses] CHECK CONSTRAINT [license_system_users]

/****** Object:  ForeignKey [system_user_licenses]    Script Date: 04/11/2008 06:53:11 ******/
ALTER TABLE [dbo].[SystemUserLicenses]  WITH NOCHECK ADD  CONSTRAINT [system_user_licenses] FOREIGN KEY([SystemUserId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SystemUserLicenses] CHECK CONSTRAINT [system_user_licenses]

/****** Object:  ForeignKey [sup_principalid_systemuser]    Script Date: 04/11/2008 06:53:13 ******/
ALTER TABLE [dbo].[SystemUserPrincipals]  WITH NOCHECK ADD  CONSTRAINT [sup_principalid_systemuser] FOREIGN KEY([SystemUserId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SystemUserPrincipals] CHECK CONSTRAINT [sup_principalid_systemuser]

/****** Object:  ForeignKey [role_system_users]    Script Date: 04/11/2008 06:53:15 ******/
ALTER TABLE [dbo].[SystemUserRoles]  WITH NOCHECK ADD  CONSTRAINT [role_system_users] FOREIGN KEY([RoleId])
REFERENCES [dbo].[RoleBase] ([RoleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SystemUserRoles] CHECK CONSTRAINT [role_system_users]

/****** Object:  ForeignKey [system_user_roles]    Script Date: 04/11/2008 06:53:15 ******/
ALTER TABLE [dbo].[SystemUserRoles]  WITH NOCHECK ADD  CONSTRAINT [system_user_roles] FOREIGN KEY([SystemUserId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[SystemUserRoles] CHECK CONSTRAINT [system_user_roles]

/****** Object:  ForeignKey [activity_pointer_task]    Script Date: 04/11/2008 06:53:17 ******/
ALTER TABLE [dbo].[TaskBase]  WITH NOCHECK ADD  CONSTRAINT [activity_pointer_task] FOREIGN KEY([ActivityId])
REFERENCES [dbo].[ActivityPointerBase] ([ActivityId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TaskBase] CHECK CONSTRAINT [activity_pointer_task]

/****** Object:  ForeignKey [business_unit_teams]    Script Date: 04/11/2008 06:53:22 ******/
ALTER TABLE [dbo].[TeamBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_teams] FOREIGN KEY([BusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TeamBase] CHECK CONSTRAINT [business_unit_teams]

/****** Object:  ForeignKey [organization_teams]    Script Date: 04/11/2008 06:53:23 ******/
ALTER TABLE [dbo].[TeamBase]  WITH NOCHECK ADD  CONSTRAINT [organization_teams] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TeamBase] CHECK CONSTRAINT [organization_teams]

/****** Object:  ForeignKey [system_user_team_membership]    Script Date: 04/11/2008 06:53:25 ******/
ALTER TABLE [dbo].[TeamMembership]  WITH NOCHECK ADD  CONSTRAINT [system_user_team_membership] FOREIGN KEY([SystemUserId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TeamMembership] CHECK CONSTRAINT [system_user_team_membership]

/****** Object:  ForeignKey [team_system_users]    Script Date: 04/11/2008 06:53:25 ******/
ALTER TABLE [dbo].[TeamMembership]  WITH NOCHECK ADD  CONSTRAINT [team_system_users] FOREIGN KEY([TeamId])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TeamMembership] CHECK CONSTRAINT [team_system_users]

/****** Object:  ForeignKey [business_unit_templates]    Script Date: 04/11/2008 06:53:32 ******/
ALTER TABLE [dbo].[TemplateBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_templates] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TemplateBase] CHECK CONSTRAINT [business_unit_templates]

/****** Object:  ForeignKey [system_user_email_templates]    Script Date: 04/11/2008 06:53:32 ******/
ALTER TABLE [dbo].[TemplateBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_email_templates] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TemplateBase] CHECK CONSTRAINT [system_user_email_templates]

/****** Object:  ForeignKey [team_email_templates]    Script Date: 04/11/2008 06:53:32 ******/
ALTER TABLE [dbo].[TemplateBase]  WITH NOCHECK ADD  CONSTRAINT [team_email_templates] FOREIGN KEY([OwningTeam])
REFERENCES [dbo].[TeamBase] ([TeamId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TemplateBase] CHECK CONSTRAINT [team_email_templates]

/****** Object:  ForeignKey [organization_territories]    Script Date: 04/11/2008 06:53:36 ******/
ALTER TABLE [dbo].[TerritoryBase]  WITH NOCHECK ADD  CONSTRAINT [organization_territories] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TerritoryBase] CHECK CONSTRAINT [organization_territories]

/****** Object:  ForeignKey [system_user_territories]    Script Date: 04/11/2008 06:53:37 ******/
ALTER TABLE [dbo].[TerritoryBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_territories] FOREIGN KEY([ManagerId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TerritoryBase] CHECK CONSTRAINT [system_user_territories]

/****** Object:  ForeignKey [lk_timezonelocalizedname_timezonedefinitionid]    Script Date: 04/11/2008 06:53:46 ******/
ALTER TABLE [dbo].[TimeZoneLocalizedNameBase]  WITH NOCHECK ADD  CONSTRAINT [lk_timezonelocalizedname_timezonedefinitionid] FOREIGN KEY([TimeZoneDefinitionId])
REFERENCES [dbo].[TimeZoneDefinitionBase] ([TimeZoneDefinitionId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TimeZoneLocalizedNameBase] CHECK CONSTRAINT [lk_timezonelocalizedname_timezonedefinitionid]

/****** Object:  ForeignKey [lk_timezonerule_timezonedefinitionid]    Script Date: 04/11/2008 06:53:54 ******/
ALTER TABLE [dbo].[TimeZoneRuleBase]  WITH NOCHECK ADD  CONSTRAINT [lk_timezonerule_timezonedefinitionid] FOREIGN KEY([TimeZoneDefinitionId])
REFERENCES [dbo].[TimeZoneDefinitionBase] ([TimeZoneDefinitionId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TimeZoneRuleBase] CHECK CONSTRAINT [lk_timezonerule_timezonedefinitionid]

/****** Object:  ForeignKey [organization_transactioncurrencies]    Script Date: 04/11/2008 06:53:59 ******/
ALTER TABLE [dbo].[TransactionCurrencyBase]  WITH NOCHECK ADD  CONSTRAINT [organization_transactioncurrencies] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TransactionCurrencyBase] CHECK CONSTRAINT [organization_transactioncurrencies]

/****** Object:  ForeignKey [TransformationMapping_ImportMap]    Script Date: 04/11/2008 06:54:04 ******/
ALTER TABLE [dbo].[TransformationMappingBase]  WITH NOCHECK ADD  CONSTRAINT [TransformationMapping_ImportMap] FOREIGN KEY([ImportMapId])
REFERENCES [dbo].[ImportMapBase] ([ImportMapId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TransformationMappingBase] CHECK CONSTRAINT [TransformationMapping_ImportMap]

/****** Object:  ForeignKey [TransformationParameterMapping_TransformationMapping]    Script Date: 04/11/2008 06:54:08 ******/
ALTER TABLE [dbo].[TransformationParameterMappingBase]  WITH NOCHECK ADD  CONSTRAINT [TransformationParameterMapping_TransformationMapping] FOREIGN KEY([TransformationMappingId])
REFERENCES [dbo].[TransformationMappingBase] ([TransformationMappingId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[TransformationParameterMappingBase] CHECK CONSTRAINT [TransformationParameterMapping_TransformationMapping]

/****** Object:  ForeignKey [unit_of_measure_schedule_conversions]    Script Date: 04/11/2008 06:54:15 ******/
ALTER TABLE [dbo].[UoMBase]  WITH NOCHECK ADD  CONSTRAINT [unit_of_measure_schedule_conversions] FOREIGN KEY([UoMScheduleId])
REFERENCES [dbo].[UoMScheduleBase] ([UoMScheduleId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UoMBase] CHECK CONSTRAINT [unit_of_measure_schedule_conversions]

/****** Object:  ForeignKey [unit_of_measurement_base_unit]    Script Date: 04/11/2008 06:54:15 ******/
ALTER TABLE [dbo].[UoMBase]  WITH NOCHECK ADD  CONSTRAINT [unit_of_measurement_base_unit] FOREIGN KEY([BaseUoM])
REFERENCES [dbo].[UoMBase] ([UoMId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UoMBase] CHECK CONSTRAINT [unit_of_measurement_base_unit]

/****** Object:  ForeignKey [organization_uof_schedules]    Script Date: 04/11/2008 06:54:20 ******/
ALTER TABLE [dbo].[UoMScheduleBase]  WITH NOCHECK ADD  CONSTRAINT [organization_uof_schedules] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UoMScheduleBase] CHECK CONSTRAINT [organization_uof_schedules]

/****** Object:  ForeignKey [system_user_quotas]    Script Date: 04/11/2008 06:54:32 ******/
ALTER TABLE [dbo].[UserFiscalCalendarBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_quotas] FOREIGN KEY([SalesPersonId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserFiscalCalendarBase] CHECK CONSTRAINT [system_user_quotas]

/****** Object:  ForeignKey [transactioncurrency_annualfiscalcalendar]    Script Date: 04/11/2008 06:54:32 ******/
ALTER TABLE [dbo].[UserFiscalCalendarBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_annualfiscalcalendar] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserFiscalCalendarBase] CHECK CONSTRAINT [transactioncurrency_annualfiscalcalendar]

/****** Object:  ForeignKey [transactioncurrency_fixedmonthlyfiscalcalendar]    Script Date: 04/11/2008 06:54:32 ******/
ALTER TABLE [dbo].[UserFiscalCalendarBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_fixedmonthlyfiscalcalendar] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserFiscalCalendarBase] CHECK CONSTRAINT [transactioncurrency_fixedmonthlyfiscalcalendar]

/****** Object:  ForeignKey [transactioncurrency_monthlyfiscalcalendar]    Script Date: 04/11/2008 06:54:32 ******/
ALTER TABLE [dbo].[UserFiscalCalendarBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_monthlyfiscalcalendar] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserFiscalCalendarBase] CHECK CONSTRAINT [transactioncurrency_monthlyfiscalcalendar]

/****** Object:  ForeignKey [transactioncurrency_quarterlyfiscalcalendar]    Script Date: 04/11/2008 06:54:32 ******/
ALTER TABLE [dbo].[UserFiscalCalendarBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_quarterlyfiscalcalendar] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserFiscalCalendarBase] CHECK CONSTRAINT [transactioncurrency_quarterlyfiscalcalendar]

/****** Object:  ForeignKey [transactioncurrency_semiannualfiscalcalendar]    Script Date: 04/11/2008 06:54:33 ******/
ALTER TABLE [dbo].[UserFiscalCalendarBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_semiannualfiscalcalendar] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserFiscalCalendarBase] CHECK CONSTRAINT [transactioncurrency_semiannualfiscalcalendar]

/****** Object:  ForeignKey [transactioncurrency_userfiscalcalendar]    Script Date: 04/11/2008 06:54:33 ******/
ALTER TABLE [dbo].[UserFiscalCalendarBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_userfiscalcalendar] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserFiscalCalendarBase] CHECK CONSTRAINT [transactioncurrency_userfiscalcalendar]

/****** Object:  ForeignKey [business_unit_userquery]    Script Date: 04/11/2008 06:54:39 ******/
ALTER TABLE [dbo].[UserQueryBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_userquery] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserQueryBase] CHECK CONSTRAINT [business_unit_userquery]

/****** Object:  ForeignKey [user_userquery]    Script Date: 04/11/2008 06:54:39 ******/
ALTER TABLE [dbo].[UserQueryBase]  WITH NOCHECK ADD  CONSTRAINT [user_userquery] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserQueryBase] CHECK CONSTRAINT [user_userquery]

/****** Object:  ForeignKey [business_unit_user_settings]    Script Date: 04/11/2008 06:55:05 ******/
ALTER TABLE [dbo].[UserSettingsBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_user_settings] FOREIGN KEY([BusinessUnitId])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserSettingsBase] CHECK CONSTRAINT [business_unit_user_settings]

/****** Object:  ForeignKey [transactioncurrency_usersettings]    Script Date: 04/11/2008 06:55:06 ******/
ALTER TABLE [dbo].[UserSettingsBase]  WITH NOCHECK ADD  CONSTRAINT [transactioncurrency_usersettings] FOREIGN KEY([TransactionCurrencyId])
REFERENCES [dbo].[TransactionCurrencyBase] ([TransactionCurrencyId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserSettingsBase] CHECK CONSTRAINT [transactioncurrency_usersettings]

/****** Object:  ForeignKey [user_settings]    Script Date: 04/11/2008 06:55:06 ******/
ALTER TABLE [dbo].[UserSettingsBase]  WITH NOCHECK ADD  CONSTRAINT [user_settings] FOREIGN KEY([SystemUserId])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[UserSettingsBase] CHECK CONSTRAINT [user_settings]

/****** Object:  ForeignKey [organization_webwizard]    Script Date: 04/11/2008 06:55:11 ******/
ALTER TABLE [dbo].[WebWizardBase]  WITH NOCHECK ADD  CONSTRAINT [organization_webwizard] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WebWizardBase] CHECK CONSTRAINT [organization_webwizard]

/****** Object:  ForeignKey [lk_wizardaccessprivilege_webwizardid]    Script Date: 04/11/2008 06:55:30 ******/
ALTER TABLE [dbo].[WizardAccessPrivilegeBase]  WITH NOCHECK ADD  CONSTRAINT [lk_wizardaccessprivilege_webwizardid] FOREIGN KEY([WebWizardId])
REFERENCES [dbo].[WebWizardBase] ([WebWizardId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WizardAccessPrivilegeBase] CHECK CONSTRAINT [lk_wizardaccessprivilege_webwizardid]

/****** Object:  ForeignKey [organization_wizardaccessprivilege]    Script Date: 04/11/2008 06:55:30 ******/
ALTER TABLE [dbo].[WizardAccessPrivilegeBase]  WITH NOCHECK ADD  CONSTRAINT [organization_wizardaccessprivilege] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WizardAccessPrivilegeBase] CHECK CONSTRAINT [organization_wizardaccessprivilege]

/****** Object:  ForeignKey [lk_wizardpage_webwizardid]    Script Date: 04/11/2008 06:55:34 ******/
ALTER TABLE [dbo].[WizardPageBase]  WITH NOCHECK ADD  CONSTRAINT [lk_wizardpage_webwizardid] FOREIGN KEY([WebWizardId])
REFERENCES [dbo].[WebWizardBase] ([WebWizardId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WizardPageBase] CHECK CONSTRAINT [lk_wizardpage_webwizardid]

/****** Object:  ForeignKey [organization_wizardpage]    Script Date: 04/11/2008 06:55:34 ******/
ALTER TABLE [dbo].[WizardPageBase]  WITH NOCHECK ADD  CONSTRAINT [organization_wizardpage] FOREIGN KEY([OrganizationId])
REFERENCES [dbo].[OrganizationBase] ([OrganizationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WizardPageBase] CHECK CONSTRAINT [organization_wizardpage]

/****** Object:  ForeignKey [business_unit_workflow]    Script Date: 04/11/2008 06:55:41 ******/
ALTER TABLE [dbo].[WorkflowBase]  WITH NOCHECK ADD  CONSTRAINT [business_unit_workflow] FOREIGN KEY([OwningBusinessUnit])
REFERENCES [dbo].[BusinessUnitBase] ([BusinessUnitId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WorkflowBase] CHECK CONSTRAINT [business_unit_workflow]

/****** Object:  ForeignKey [plugin_type_workflow]    Script Date: 04/11/2008 06:55:42 ******/
ALTER TABLE [dbo].[WorkflowBase]  WITH NOCHECK ADD  CONSTRAINT [plugin_type_workflow] FOREIGN KEY([PluginTypeId])
REFERENCES [dbo].[PluginTypeBaseIds] ([PluginTypeId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WorkflowBase] CHECK CONSTRAINT [plugin_type_workflow]

/****** Object:  ForeignKey [system_user_workflow]    Script Date: 04/11/2008 06:55:42 ******/
ALTER TABLE [dbo].[WorkflowBase]  WITH NOCHECK ADD  CONSTRAINT [system_user_workflow] FOREIGN KEY([OwningUser])
REFERENCES [dbo].[SystemUserBase] ([SystemUserId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WorkflowBase] CHECK CONSTRAINT [system_user_workflow]

/****** Object:  ForeignKey [workflow_active_workflow]    Script Date: 04/11/2008 06:55:42 ******/
ALTER TABLE [dbo].[WorkflowBase]  WITH NOCHECK ADD  CONSTRAINT [workflow_active_workflow] FOREIGN KEY([ActiveWorkflowId])
REFERENCES [dbo].[WorkflowBase] ([WorkflowId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WorkflowBase] CHECK CONSTRAINT [workflow_active_workflow]

/****** Object:  ForeignKey [workflow_parent_workflow]    Script Date: 04/11/2008 06:55:42 ******/
ALTER TABLE [dbo].[WorkflowBase]  WITH NOCHECK ADD  CONSTRAINT [workflow_parent_workflow] FOREIGN KEY([ParentWorkflowId])
REFERENCES [dbo].[WorkflowBase] ([WorkflowId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WorkflowBase] CHECK CONSTRAINT [workflow_parent_workflow]

/****** Object:  ForeignKey [asyncoperation_workflowcompletedscope]    Script Date: 04/11/2008 06:55:44 ******/
ALTER TABLE [dbo].[WorkflowCompletedScopeBase]  WITH NOCHECK ADD  CONSTRAINT [asyncoperation_workflowcompletedscope] FOREIGN KEY([AsyncOperationId])
REFERENCES [dbo].[AsyncOperationBase] ([AsyncOperationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WorkflowCompletedScopeBase] CHECK CONSTRAINT [asyncoperation_workflowcompletedscope]

/****** Object:  ForeignKey [sdkmessageid_workflow_dependency]    Script Date: 04/11/2008 06:55:49 ******/
ALTER TABLE [dbo].[WorkflowDependencyBase]  WITH NOCHECK ADD  CONSTRAINT [sdkmessageid_workflow_dependency] FOREIGN KEY([SdkMessageId])
REFERENCES [dbo].[SdkMessageBaseIds] ([SdkMessageId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WorkflowDependencyBase] CHECK CONSTRAINT [sdkmessageid_workflow_dependency]

/****** Object:  ForeignKey [workflow_dependencies]    Script Date: 04/11/2008 06:55:49 ******/
ALTER TABLE [dbo].[WorkflowDependencyBase]  WITH NOCHECK ADD  CONSTRAINT [workflow_dependencies] FOREIGN KEY([WorkflowId])
REFERENCES [dbo].[WorkflowBase] ([WorkflowId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WorkflowDependencyBase] CHECK CONSTRAINT [workflow_dependencies]

/****** Object:  ForeignKey [lk_workflowlog_asyncoperation]    Script Date: 04/11/2008 06:55:54 ******/
ALTER TABLE [dbo].[WorkflowLogBase]  WITH NOCHECK ADD  CONSTRAINT [lk_workflowlog_asyncoperation] FOREIGN KEY([AsyncOperationId])
REFERENCES [dbo].[AsyncOperationBase] ([AsyncOperationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WorkflowLogBase] CHECK CONSTRAINT [lk_workflowlog_asyncoperation]

/****** Object:  ForeignKey [asyncoperation_workflowwaitsubscription]    Script Date: 04/11/2008 06:55:57 ******/
ALTER TABLE [dbo].[WorkflowWaitSubscriptionBase]  WITH NOCHECK ADD  CONSTRAINT [asyncoperation_workflowwaitsubscription] FOREIGN KEY([AsyncOperationId])
REFERENCES [dbo].[AsyncOperationBase] ([AsyncOperationId])
NOT FOR REPLICATION

ALTER TABLE [dbo].[WorkflowWaitSubscriptionBase] CHECK CONSTRAINT [asyncoperation_workflowwaitsubscription]

/****** Object:  ForeignKey [aggregate_attribute_of]    Script Date: 04/11/2008 06:56:13 ******/
ALTER TABLE [MetadataSchema].[Attribute]  WITH CHECK ADD  CONSTRAINT [aggregate_attribute_of] FOREIGN KEY([AggregateOf])
REFERENCES [dbo].[AttributeIds] ([AttributeId])

ALTER TABLE [MetadataSchema].[Attribute] CHECK CONSTRAINT [aggregate_attribute_of]

/****** Object:  ForeignKey [attribute_attributeid]    Script Date: 04/11/2008 06:56:14 ******/
ALTER TABLE [MetadataSchema].[Attribute]  WITH CHECK ADD  CONSTRAINT [attribute_attributeid] FOREIGN KEY([AttributeId])
REFERENCES [dbo].[AttributeIds] ([AttributeId])

ALTER TABLE [MetadataSchema].[Attribute] CHECK CONSTRAINT [attribute_attributeid]

/****** Object:  ForeignKey [attribute_entity_membership]    Script Date: 04/11/2008 06:56:14 ******/
ALTER TABLE [MetadataSchema].[Attribute]  WITH CHECK ADD  CONSTRAINT [attribute_entity_membership] FOREIGN KEY([EntityId])
REFERENCES [dbo].[EntityIds] ([EntityId])

ALTER TABLE [MetadataSchema].[Attribute] CHECK CONSTRAINT [attribute_entity_membership]

/****** Object:  ForeignKey [attribute_of]    Script Date: 04/11/2008 06:56:14 ******/
ALTER TABLE [MetadataSchema].[Attribute]  WITH CHECK ADD  CONSTRAINT [attribute_of] FOREIGN KEY([AttributeOf])
REFERENCES [dbo].[AttributeIds] ([AttributeId])

ALTER TABLE [MetadataSchema].[Attribute] CHECK CONSTRAINT [attribute_of]

/****** Object:  ForeignKey [FK__Attribute__Attri__2F10007B]    Script Date: 04/11/2008 06:56:14 ******/
ALTER TABLE [MetadataSchema].[Attribute]  WITH NOCHECK ADD  CONSTRAINT [FK__Attribute__Attri__2F10007B] FOREIGN KEY([AttributeTypeId])
REFERENCES [MetadataSchema].[AttributeTypes] ([AttributeTypeId])
NOT FOR REPLICATION

ALTER TABLE [MetadataSchema].[Attribute] CHECK CONSTRAINT [FK__Attribute__Attri__2F10007B]

/****** Object:  ForeignKey [yomi_of]    Script Date: 04/11/2008 06:56:14 ******/
ALTER TABLE [MetadataSchema].[Attribute]  WITH CHECK ADD  CONSTRAINT [yomi_of] FOREIGN KEY([YomiOf])
REFERENCES [dbo].[AttributeIds] ([AttributeId])

ALTER TABLE [MetadataSchema].[Attribute] CHECK CONSTRAINT [yomi_of]

/****** Object:  ForeignKey [entityindex_entity]    Script Date: 04/11/2008 06:56:44 ******/
ALTER TABLE [MetadataSchema].[EntityIndex]  WITH CHECK ADD  CONSTRAINT [entityindex_entity] FOREIGN KEY([EntityId])
REFERENCES [dbo].[EntityIds] ([EntityId])

ALTER TABLE [MetadataSchema].[EntityIndex] CHECK CONSTRAINT [entityindex_entity]

/****** Object:  ForeignKey [entityrelationshiprelationships_entityrelationshipid]    Script Date: 04/11/2008 06:56:49 ******/
ALTER TABLE [MetadataSchema].[EntityRelationshipRelationships]  WITH CHECK ADD  CONSTRAINT [entityrelationshiprelationships_entityrelationshipid] FOREIGN KEY([EntityRelationshipId])
REFERENCES [dbo].[EntityRelationshipIds] ([EntityRelationshipId])

ALTER TABLE [MetadataSchema].[EntityRelationshipRelationships] CHECK CONSTRAINT [entityrelationshiprelationships_entityrelationshipid]

/****** Object:  ForeignKey [entityrelationshiprelationships_relationshipid]    Script Date: 04/11/2008 06:56:50 ******/
ALTER TABLE [MetadataSchema].[EntityRelationshipRelationships]  WITH CHECK ADD  CONSTRAINT [entityrelationshiprelationships_relationshipid] FOREIGN KEY([RelationshipId])
REFERENCES [dbo].[RelationshipIds] ([RelationshipId])

ALTER TABLE [MetadataSchema].[EntityRelationshipRelationships] CHECK CONSTRAINT [entityrelationshiprelationships_relationshipid]

/****** Object:  ForeignKey [entityrelationshiprole_entityid]    Script Date: 04/11/2008 06:56:55 ******/
ALTER TABLE [MetadataSchema].[EntityRelationshipRole]  WITH CHECK ADD  CONSTRAINT [entityrelationshiprole_entityid] FOREIGN KEY([EntityId])
REFERENCES [dbo].[EntityIds] ([EntityId])

ALTER TABLE [MetadataSchema].[EntityRelationshipRole] CHECK CONSTRAINT [entityrelationshiprole_entityid]

/****** Object:  ForeignKey [entityrelationshiprole_relationshipid]    Script Date: 04/11/2008 06:56:55 ******/
ALTER TABLE [MetadataSchema].[EntityRelationshipRole]  WITH CHECK ADD  CONSTRAINT [entityrelationshiprole_relationshipid] FOREIGN KEY([EntityRelationshipId])
REFERENCES [dbo].[EntityRelationshipIds] ([EntityRelationshipId])

ALTER TABLE [MetadataSchema].[EntityRelationshipRole] CHECK CONSTRAINT [entityrelationshiprole_relationshipid]

/****** Object:  ForeignKey [indexattributes_attribute]    Script Date: 04/11/2008 06:56:57 ******/
ALTER TABLE [MetadataSchema].[IndexAttributes]  WITH CHECK ADD  CONSTRAINT [indexattributes_attribute] FOREIGN KEY([AttributeId])
REFERENCES [dbo].[AttributeIds] ([AttributeId])

ALTER TABLE [MetadataSchema].[IndexAttributes] CHECK CONSTRAINT [indexattributes_attribute]

/****** Object:  ForeignKey [indexattributes_entityindex]    Script Date: 04/11/2008 06:56:57 ******/
ALTER TABLE [MetadataSchema].[IndexAttributes]  WITH CHECK ADD  CONSTRAINT [indexattributes_entityindex] FOREIGN KEY([IndexId])
REFERENCES [MetadataSchema].[EntityIndex] ([IndexId])

ALTER TABLE [MetadataSchema].[IndexAttributes] CHECK CONSTRAINT [indexattributes_entityindex]

/****** Object:  ForeignKey [relationship_referenced_attribute]    Script Date: 04/11/2008 06:57:09 ******/
ALTER TABLE [MetadataSchema].[Relationship]  WITH CHECK ADD  CONSTRAINT [relationship_referenced_attribute] FOREIGN KEY([ReferencedAttributeId])
REFERENCES [dbo].[AttributeIds] ([AttributeId])

ALTER TABLE [MetadataSchema].[Relationship] CHECK CONSTRAINT [relationship_referenced_attribute]

/****** Object:  ForeignKey [relationship_referenced_entity]    Script Date: 04/11/2008 06:57:09 ******/
ALTER TABLE [MetadataSchema].[Relationship]  WITH CHECK ADD  CONSTRAINT [relationship_referenced_entity] FOREIGN KEY([ReferencedEntityId])
REFERENCES [dbo].[EntityIds] ([EntityId])

ALTER TABLE [MetadataSchema].[Relationship] CHECK CONSTRAINT [relationship_referenced_entity]

/****** Object:  ForeignKey [relationship_referencing_attribute]    Script Date: 04/11/2008 06:57:09 ******/
ALTER TABLE [MetadataSchema].[Relationship]  WITH CHECK ADD  CONSTRAINT [relationship_referencing_attribute] FOREIGN KEY([ReferencingAttributeId])
REFERENCES [dbo].[AttributeIds] ([AttributeId])

ALTER TABLE [MetadataSchema].[Relationship] CHECK CONSTRAINT [relationship_referencing_attribute]

/****** Object:  ForeignKey [relationship_referencing_entity]    Script Date: 04/11/2008 06:57:09 ******/
ALTER TABLE [MetadataSchema].[Relationship]  WITH CHECK ADD  CONSTRAINT [relationship_referencing_entity] FOREIGN KEY([ReferencingEntityId])
REFERENCES [dbo].[EntityIds] ([EntityId])

ALTER TABLE [MetadataSchema].[Relationship] CHECK CONSTRAINT [relationship_referencing_entity]

/****** Object:  ForeignKey [extra_condition_attribute]    Script Date: 04/11/2008 06:57:12 ******/
ALTER TABLE [MetadataSchema].[RelationshipExtraCondition]  WITH CHECK ADD  CONSTRAINT [extra_condition_attribute] FOREIGN KEY([AttributeId])
REFERENCES [dbo].[AttributeIds] ([AttributeId])

ALTER TABLE [MetadataSchema].[RelationshipExtraCondition] CHECK CONSTRAINT [extra_condition_attribute]

/****** Object:  ForeignKey [extra_condition_relationship]    Script Date: 04/11/2008 06:57:12 ******/
ALTER TABLE [MetadataSchema].[RelationshipExtraCondition]  WITH CHECK ADD  CONSTRAINT [extra_condition_relationship] FOREIGN KEY([RelationshipId])
REFERENCES [dbo].[RelationshipIds] ([RelationshipId])

ALTER TABLE [MetadataSchema].[RelationshipExtraCondition] CHECK CONSTRAINT [extra_condition_relationship]

/****** Object:  ForeignKey [view_attribute_attribute]    Script Date: 04/11/2008 06:57:17 ******/
ALTER TABLE [MetadataSchema].[ViewAttribute]  WITH CHECK ADD  CONSTRAINT [view_attribute_attribute] FOREIGN KEY([AttributeId])
REFERENCES [dbo].[AttributeIds] ([AttributeId])

ALTER TABLE [MetadataSchema].[ViewAttribute] CHECK CONSTRAINT [view_attribute_attribute]

/****** Object:  ForeignKey [view_attribute_relationship]    Script Date: 04/11/2008 06:57:17 ******/
ALTER TABLE [MetadataSchema].[ViewAttribute]  WITH CHECK ADD  CONSTRAINT [view_attribute_relationship] FOREIGN KEY([RelationshipId])
REFERENCES [dbo].[RelationshipIds] ([RelationshipId])

ALTER TABLE [MetadataSchema].[ViewAttribute] CHECK CONSTRAINT [view_attribute_relationship]

/****** Object:  ForeignKey [view_attribute_remoteattribute]    Script Date: 04/11/2008 06:57:17 ******/
ALTER TABLE [MetadataSchema].[ViewAttribute]  WITH CHECK ADD  CONSTRAINT [view_attribute_remoteattribute] FOREIGN KEY([RemoteAttributeId])
REFERENCES [dbo].[AttributeIds] ([AttributeId])

ALTER TABLE [MetadataSchema].[ViewAttribute] CHECK CONSTRAINT [view_attribute_remoteattribute]

