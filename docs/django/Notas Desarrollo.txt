

@Model.py

Los campos del modelo permiten cargar propiedades aprovechando la posibilidad de agregar propiedades dinamicamente a los objetos.  Por cuestion de organizacion, vamos a crear un diccionario sobre el modelo para agregar nuestras prop personalizadas

Esta personalizacion puede darse a nivel de campo, como a nivel de modelo.


class Toto(models.Model):
    code = models.CharField(verbose_name=u'Nom',blank = True, null = True, max_length=200 )
    physicalName = models.CharField(blank = True, null = True, max_length=200)
    concept = models.ForeignKey('Concept')

    concept.query_code = 'concept__code'

    protoExt = {}
    protoExt[ 'description' ] = 'Esta es la description del concpeto concepto'

    concept.protoExt = {}
    concept.protoExt[ 'query_code' ] = 'concept__code'


Por ejemplo agregamos una descripcion al modelo y a continuacion agregamos una propiedad al campo concpeto.  En este caso, la propiedad "query_code" que se utiliza como campo base apra los filtros ORM. En el caso de las llaves foraneas una busqueda por un campo del modelo relacionado. ( TODO: podria autimatizase )


Existen dos niveles de personalizacion a nivel de modelo y a nivel de admin, en primer caso se buscara el admin, en caso de q no halla sido definida la propiedad se buscara en el modelo.


class Concept_Admin(globale.admin.ModelAdmin):
    list_display =( 'model', 'code',  'description',  'superConcept', )
    list_filter = ( 'model', 'superConcept', )

    protoExt = {}
    protoExt[ 'description' ] = 'Esta es la description del concpeto concepto'
    protoExt[ 'menuIndex' ] = 100
    protoExt[ 'app_name' ] = 'Dictionnaire de donnees'

    protoExt = {}
    protoExt[ 'description' ] = 'Esta es la description del concpeto concepto'


Existen dos entornos de definicion de propiedades, a nivel de modelo y a nivel de campo.
Es importante anotar que nos referimos a propiedades a nivel de modelo, sin importar si esta es definida en el Admin, en todo caso hace referencia al modelo ( la tabla si hacemos el simil con la Db )


Propiedades a nivel de modelo:

ProtoExt.app_name     :  (A  ) 	Reemplaza la aplicacion q definio el modelo, se usa para organizar el menu.
ProtoExt.menu_index   :  (M/A)	Secuencia en el menu

	verbose_name :  (M/A)   Nombre corriente del model

    exclude      :

Propiedades a nivel de campo:


	flex		: define si el campo rellena el ancho de la grilla.
	query_code 	: se utiliza como campo base apra los filtros ORM


Propiedades a nivel de App

@Settings.py

PROTO_APP = {}
PROTO_APP['app_menu'] = {
    'auth' : { 'hidden': True, },
    'admin': { 'hidden': True, },
    'metaDb' : { 'hidden': False, 'title': 'Dictionnaire des donnes', 'expanded':True, }
    }

Permite setear el nombre de la app en el menu, si la variable no existe por defecto

	hidden : false
	expande : true


@static.globals.variables.js 

_AUTOLOAD_PCI = ['metaDb.Model',  ]



Master DEtail

    protoExt[ 'protoDetails' ] = [{
            "conceptDetail": "Concept", 
            "masterField": "id",
            "detailField": "model__id"
            },]


