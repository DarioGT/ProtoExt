south  ***********

Es una herramienta para manejar las diferentes versiones de modelos serializados en la db 

Consiste en : 

	un directorio migration ( por cada app, dentro del directorio de la app )
		contiene archivos con clases apra registrar o regresar los cambios en los modelos. 
		cada archivo esta enumerados secuencialmente 

	una tabla south_migrationhistory 
		contiene las migraciones aplicadas a la db ( estado actual de la db )

Types et format des migrations

Une migration est une classe contenant deux fonctions : 
	forwards :  exécute la migration
	backwards :  l'annule.

Il existe deux types de migration dont peut hériter cette classe : 
	SchemaMigration (migrations de structure) et 
	DataMigration (migration de données). 

Dans le cas des migrations de structure, le contenu des fonctions forwards et backwards sont 
"auto-générés" , sauf si des champs personnalisés sont utilisés. 

Pour les migrations de données, le squelette de la classe est généré mais il est tout le temps nécessaire de les implémenter car il s'agit d'une logique que South ne peut pas devine

NOTE: ( syncdb ) 
  Il est important au lancement de la commande python manage.py syncdb 
  qu'aucune application autre que South n'ait été déclarée dans le fichier 
  settings.py, et ce afin de laisser South gérer les modèles des applications 
  du projet par la suite à la place de l'ORM de Django.



NOTAS : 
	PyDev no reconoce  south.db.xxxxxx

	 if you don't want to mess changing south source files or retouching all your migration files, you can consider south specific methods as globals in pydev code analysis. You can change this in:

	Window > Preferences > PyDev > Editor > Code Analysis > Undefined
	My exceptions list are:

	_,tr,create_table,send_create_signal,delete_table,add_column,delete_column,alter_column,create_unique,create_index,delete_index


******************

install
    pip install south


    # settings.py
    INSTALLED_APPS = (
        'south',
    ...
    )

Comandos 
	
	#Inicial
	python manage.py schemamigration [appName] --initial
	python manage.py migrate [appName]

	#Convertir a south ( importar una app previa )
	python manage.py convert_to_south [appName]


	#Modificacion 
	python manage.py schemamigration [appName] --auto
	python manage.py migrate [appName]

	-- crear el registro en migrationHistory, pero no actualiza la db
	python manage.py migrate [appName] --fake 


	#Regresar a una especifica ej 0002 
	python manage.py migrate [appName] 0002	


	# listar las migraciones
	manage.py migrate --list


