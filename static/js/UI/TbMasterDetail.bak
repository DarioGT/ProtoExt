/*
 * 
 */
Ext.define('ProtoUL.UI.TbMasterDetail', {
    // extend: 'Ext.panel.Panel',
    extend: 'Ext.Toolbar',
    alias: 'widget.tbMasterDetail',
    // requires: ['Ext.panel.*',
               // 'Ext.toolbar.*',
               // 'Ext.button.*',
               // 'Ext.container.ButtonGroup',
               // 'Ext.layout.container.Table'
           // ],

    initComponent: function() {

        //--------------------------------------------------------

        var ideTbSearch = Ext.id();
        var ideTbDetails = Ext.id();
        var ideTbOrder = Ext.id();
        var ideTbFilter = Ext.id();
        var ideTbViews = Ext.id();

        var tbar1 = Ext.create('Ext.Toolbar', {
            dock: 'top',
            defaults: { 
                    scale: 'medium',
                    enableToggle: true,
                    toggleGroup: 'tb1' , 
                    handler: toogleTb2 
                },
            items: [{
                pressed: true,
                text: 'Search',
                iconCls: 'search',
                idTb2  : ideTbSearch
            },'-',{
                text: 'Details',
                iconCls: 'details',
                idTb2  : ideTbDetails
            },'-',{
                text: 'Order',
                iconCls: 'order',
                idTb2  : ideTbOrder
            },'-',{
                text: 'Filter',
                iconCls: 'filter',
                idTb2  : ideTbFilter
            },'-',{
                text: 'Views',
                iconCls: 'views',
                idTb2  : ideTbViews
            }]
        
        });

        
        var tbar2 = Ext.create('Ext.Toolbar', {
            dock: 'top',
            // items: [{
                // id : ideTbSearch , 
                // xtype: 'buttongroup',
                // defaults: { scale: 'small' },
                // items  : [{
                    // xtype: 'tbtext',
                    // iconCls: 'search',
                    // text: 'Search:',
                    // }, '-'],
            // },{
                // id : ideTbDetails, 
                // xtype: 'buttongroup',
                // hidden : true, 
                // defaults: { scale: 'small' },
                // items  : [{
                    // xtype: 'tbtext',
                    // iconCls: 'search',
                    // text: 'Search:',
                    // }, '-'],
            // },{
                // id : ideTbOrder, 
                // xtype: 'buttongroup',
                // hidden : true, 
                // defaults: { scale: 'small' },
                // items  : [{
                    // xtype: 'tbtext',
                    // iconCls: 'search',
                    // text: 'Search:',
                    // reorderable: false 
                    // }, '-'],
            // },{
                // id : ideTbFilter, 
                // xtype: 'buttongroup',
                // hidden : true, 
                // defaults: { scale: 'small' },
                // items  : [{
                    // xtype: 'tbtext',
                    // iconCls: 'search',
                    // text: 'Search:',
                    // }, '-'],
            // },{
                // id : ideTbViews, 
                // xtype: 'buttongroup',
                // hidden : true, 
                // defaults: { scale: 'small' },
                // items  : [{
                    // xtype: 'tbtext',
                    // iconCls: 'search',
                    // text: 'Search:',
                    // }, '-'],
            // }]
        });        
        
        //--------------------------------------------------------
    
        // Asigna una referencia al objeto 
        var myMeta = this.protoMeta; 
        var __MasterDetail = this.objMasterDet; 

        // Menu Detail 
        var menuDetail = new Ext.menu.Menu({
            hidden:true
            });
        var menuPromDetail = Ext.id();
        menuDetail.add({
            text: '<b>Promote Detail<b>',
            id: menuPromDetail,
            disabled: true,
            handler:  onMenuPromoteDetail
        },{
            xtype: 'menuseparator'
        });
        //OJO  configureMenuDetail( ); 



        // Combo Columnas  
        var colStore = new Ext.data.ArrayStore({
            fields: ['colPhysique', 'colName'],
            data: configureComboColumns()
        });
    
        var comboCols = new Ext.form.ComboBox({
            store: colStore,
            // width: 135,
            mode: 'local',
            triggerAction: 'all',
            displayField: 'colName',
            valueField: 'colPhysique',
            forceSelection: true,
            emptyText: 'Select a column ...',
            selectOnFocus: true,
            typeAhead: true,
        });


        // combo - operation 
        var comboOp = new Ext.form.ComboBox({
            store: new Ext.data.ArrayStore({ fields: ['code', 'operation'], data: _ComboFilterOp }),
            // width: 50,
            mode: 'local',
            triggerAction: 'all',  
            displayField: 'operation',
            valueField: 'code',
            forceSelection: true,
            editable: false,
        });

        // Criteria 
        var searchCr = new Ext.form.TextField({
            emptyText: 'search criteria ..',
            // width: 135
        })

        // Load Data button 
        var searchBtn = new Ext.button.Split({
            text: 'Load data',
            handler: onClickLoadData,
            // iconCls: 'blist',
            menu: {
                items: [{
                    text: '<b>Clear filter<b>',
                    handler: onClickClearFilter, 
                    
                // }, {
                    // text: 'add filter',
                    // handler: __MasterDetail.onClickFilter
                }]
            }
        })
        
        tbItems = [{
            text: 'Details',
            // iconCls: 'bmenu',    // <-- icon
            menu: menuDetail        // assign menu by instance
            }, 
            '->',
            comboCols,
            comboOp,
            searchCr,
            searchBtn    
            ];

        // Inicializa Combos 
        clearCombos()     
        
        // Objetos internos 
        this.items = tbItems;
        
        Ext.apply(this, {
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            defaults: {
                collapsible: false,
                split: false
            },
            items: [
//            dockedItems: [
                          // tbar1, 
//                          tbar2 
                          ]

        }); 
            
        this.callParent();

        function configureComboColumns ( tb ){
            return 
        
                // Columnas para el Query del tipo :  newColData = [['idx', 'Id Reg'],['code', 'Code Reg']];
            var colData = [];
            colData[0] = ['', ''];
            j = 1;
            for (var i = 0, len = myMeta.fields.length; i < len; i++) {
                var c = myMeta.fields[i];
    
                if (c.filterable == undefined) {
                    c.filterable = 1
                };
    
                if (c.filterable == 1) {
                    colData[j] = [c.name, c.header];
                    j += 1;
    
                    // DGT: esta carga es directa al store, pienso q es mas costosa por q interactua cada vez con extjs
                    // colStore.add(new colStore.recordType({ colPhysique: c.name, colName: c.header }));
                }
            };
            
            return colData ; 
        }; 

        function configureMenuDetail(  ){
            return 
            
           // Configuracion de detalles    ------------------------------------------------------------------------ 
            var pDetails = myMeta.protoDetails;
    
            // Agrega un numero secuencia para marcar los tabs 
            var ixTabC = 0
            
            // Indica si tiene o no detalles 
            var bDetails = false;

            // Recorre y agrega los detalles al menu 
            for (var vDet in pDetails) {
                // console.log( pDetails[vTab] + " ");
                bDetails = true;
                
                if (pDetails[vDet].menuText == '-') { 
                    var item = menuDetail.add({ xtype: 'menuseparator' });
                    continue
                }
                
                var item = menuDetail.add({
                    text: pDetails[vDet].menuText,
                    detail: pDetails[vDet].conceptDetail,
                    detailField: pDetails[vDet].detailField,
                    masterField: pDetails[vDet].masterField,
                    ixTab: ixTabC,
                });
                
                // Agrego el handler q activara el tab a partir del menu
                // item.on('click', onMenuSelectDetail);
                item.on({
                    click: { fn: __MasterDetail.onMenuSelectDetail,scope: __MasterDetail  },
                });                 
                
    
                ixTabC += 1;
            };
    
            // activa el boton de promover detalles 
            if (bDetails == true) {
                menuDetail.items.get( menuPromDetail ).enable();
            };
        };


        function onClickLoadData ( btn ) { 
            return 
    
            var sFilter = '';
            var sCols = comboCols.getValue() || '' 
            var sOps  = comboOp.getValue() || 'icontains' 
        
            if (searchCr.getValue() == '' ) {
                sFilter = '';

            } else if ((sCols  == '') && (searchCr.getValue() != '' )) {
                sFilter = searchCr.getValue();

            } else {
                sFilter = '{"' + comboCols.getValue() + '__' + comboOp.getValue() + '" : "' + searchCr.getValue() + '",}';
            }
            
            __MasterDetail.onClickLoadData ( sFilter  );
    
        }; 

        function onClickClearFilter (item ){
            return 
            // TODO: Manejara los filtros compuestos ( QBE )
    
            clearCombos()
            onClickLoadData( {} );
    
        } 

        // function onMenuSelectDetail (item) {
            // __MasterDetail.onMenuSelectDetail( item  );
        // }

        function clearCombos ( ){
            return 
            comboCols.setValue('');
            comboOp.setValue(''); 
            searchCr.setValue(''); 
        }; 


        function onMenuPromoteDetail  (item) {
            return 
    
            // Verifica q halla un tab activo 
            if (__MasterDetail.ixActiveTab < 0) { return; }
    
            // carga el store 
            var tmpStore = __MasterDetail.cllStoreDet[__MasterDetail.ixActiveTab]
    
    
            __TabContainer.addTabPanel ( 
                   tmpStore.protoConcept , 
                   tmpStore.getProxy().extraParams.protoFilterBase 
               ); 
            
        };

        // -------------------------------------------------------------------
        function toogleTb2( but  ) {
            return 
            
            Ext.each(tbar2.query('buttongroup'), function(button) {
                button.hide();
            }, this);
            
            var tb2 = Ext.getCmp ( but.idTb2  )
            tb2.show()
              
        }; 


    } 
    

}); 